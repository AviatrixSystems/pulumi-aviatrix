// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixControllerConfig struct {
	pulumi.CustomResourceState

	// Scanning Interval for AWS Guard Duty.
	AwsGuardDutyScanningInterval pulumi.IntPtrOutput `pulumi:"awsGuardDutyScanningInterval"`
	// This parameter represents the name of a Cloud-Account in Aviatrix controller.
	BackupAccountName pulumi.StringPtrOutput `pulumi:"backupAccountName"`
	// Bucket name. Required for AWS, AWSGov, GCP and OCI.
	BackupBucketName pulumi.StringPtrOutput `pulumi:"backupBucketName"`
	// Type of cloud service provider, requires an integer value. Use 1 for AWS.
	BackupCloudType pulumi.IntPtrOutput `pulumi:"backupCloudType"`
	// Switch to enable/disable controller cloudn backup config.
	BackupConfiguration pulumi.BoolPtrOutput `pulumi:"backupConfiguration"`
	// Container name. Required for Azure.
	BackupContainerName pulumi.StringPtrOutput `pulumi:"backupContainerName"`
	// Name of region. Required for Azure and OCI.
	BackupRegion pulumi.StringPtrOutput `pulumi:"backupRegion"`
	// Storage name. Required for Azure.
	BackupStorageName pulumi.StringPtrOutput `pulumi:"backupStorageName"`
	// CA certificate file.
	CaCertificateFile pulumi.StringPtrOutput `pulumi:"caCertificateFile"`
	// File path to the CA certificate.
	CaCertificateFilePath pulumi.StringPtrOutput `pulumi:"caCertificateFilePath"`
	// Current version of the controller.
	CurrentVersion pulumi.StringOutput `pulumi:"currentVersion"`
	// Enable VPC/VNET DNS Server.
	EnableVpcDnsServer pulumi.BoolPtrOutput `pulumi:"enableVpcDnsServer"`
	// A system-wide mode. Default: true.
	FqdnExceptionRule pulumi.BoolPtrOutput `pulumi:"fqdnExceptionRule"`
	// Switch for http access. Default: false.
	HttpAccess pulumi.BoolPtrOutput `pulumi:"httpAccess"`
	// If true, aviatrix_controller_config will upgrade all gateways when target_version is set. If false, only the controller
	// will be upgraded when target_version is set. In that case gateway upgrades should be handled in each gateway resource
	// individually using the software_version and image_version attributes.
	ManageGatewayUpgrades pulumi.BoolPtrOutput `pulumi:"manageGatewayUpgrades"`
	// Switch to enable the controller to backup up to a maximum of 3 rotating backups.
	MultipleBackups pulumi.BoolPtrOutput `pulumi:"multipleBackups"`
	// Previous version of the controller.
	PreviousVersion pulumi.StringOutput `pulumi:"previousVersion"`
	// Server private key file.
	ServerPrivateKeyFile pulumi.StringPtrOutput `pulumi:"serverPrivateKeyFile"`
	// File path to the server private key.
	ServerPrivateKeyFilePath pulumi.StringPtrOutput `pulumi:"serverPrivateKeyFilePath"`
	// Server public certificate file.
	ServerPublicCertificateFile pulumi.StringPtrOutput `pulumi:"serverPublicCertificateFile"`
	// File path to the server public certificate.
	ServerPublicCertificateFilePath pulumi.StringPtrOutput `pulumi:"serverPublicCertificateFilePath"`
	// The release version number to which the controller will be upgraded to.
	TargetVersion pulumi.StringPtrOutput `pulumi:"targetVersion"`
	// Current version of the controller without the build number.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewAviatrixControllerConfig registers a new resource with the given unique name, arguments, and options.
func NewAviatrixControllerConfig(ctx *pulumi.Context,
	name string, args *AviatrixControllerConfigArgs, opts ...pulumi.ResourceOption) (*AviatrixControllerConfig, error) {
	if args == nil {
		args = &AviatrixControllerConfigArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixControllerConfig
	err := ctx.RegisterResource("aviatrix:index/aviatrixControllerConfig:AviatrixControllerConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixControllerConfig gets an existing AviatrixControllerConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixControllerConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixControllerConfigState, opts ...pulumi.ResourceOption) (*AviatrixControllerConfig, error) {
	var resource AviatrixControllerConfig
	err := ctx.ReadResource("aviatrix:index/aviatrixControllerConfig:AviatrixControllerConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixControllerConfig resources.
type aviatrixControllerConfigState struct {
	// Scanning Interval for AWS Guard Duty.
	AwsGuardDutyScanningInterval *int `pulumi:"awsGuardDutyScanningInterval"`
	// This parameter represents the name of a Cloud-Account in Aviatrix controller.
	BackupAccountName *string `pulumi:"backupAccountName"`
	// Bucket name. Required for AWS, AWSGov, GCP and OCI.
	BackupBucketName *string `pulumi:"backupBucketName"`
	// Type of cloud service provider, requires an integer value. Use 1 for AWS.
	BackupCloudType *int `pulumi:"backupCloudType"`
	// Switch to enable/disable controller cloudn backup config.
	BackupConfiguration *bool `pulumi:"backupConfiguration"`
	// Container name. Required for Azure.
	BackupContainerName *string `pulumi:"backupContainerName"`
	// Name of region. Required for Azure and OCI.
	BackupRegion *string `pulumi:"backupRegion"`
	// Storage name. Required for Azure.
	BackupStorageName *string `pulumi:"backupStorageName"`
	// CA certificate file.
	CaCertificateFile *string `pulumi:"caCertificateFile"`
	// File path to the CA certificate.
	CaCertificateFilePath *string `pulumi:"caCertificateFilePath"`
	// Current version of the controller.
	CurrentVersion *string `pulumi:"currentVersion"`
	// Enable VPC/VNET DNS Server.
	EnableVpcDnsServer *bool `pulumi:"enableVpcDnsServer"`
	// A system-wide mode. Default: true.
	FqdnExceptionRule *bool `pulumi:"fqdnExceptionRule"`
	// Switch for http access. Default: false.
	HttpAccess *bool `pulumi:"httpAccess"`
	// If true, aviatrix_controller_config will upgrade all gateways when target_version is set. If false, only the controller
	// will be upgraded when target_version is set. In that case gateway upgrades should be handled in each gateway resource
	// individually using the software_version and image_version attributes.
	ManageGatewayUpgrades *bool `pulumi:"manageGatewayUpgrades"`
	// Switch to enable the controller to backup up to a maximum of 3 rotating backups.
	MultipleBackups *bool `pulumi:"multipleBackups"`
	// Previous version of the controller.
	PreviousVersion *string `pulumi:"previousVersion"`
	// Server private key file.
	ServerPrivateKeyFile *string `pulumi:"serverPrivateKeyFile"`
	// File path to the server private key.
	ServerPrivateKeyFilePath *string `pulumi:"serverPrivateKeyFilePath"`
	// Server public certificate file.
	ServerPublicCertificateFile *string `pulumi:"serverPublicCertificateFile"`
	// File path to the server public certificate.
	ServerPublicCertificateFilePath *string `pulumi:"serverPublicCertificateFilePath"`
	// The release version number to which the controller will be upgraded to.
	TargetVersion *string `pulumi:"targetVersion"`
	// Current version of the controller without the build number.
	Version *string `pulumi:"version"`
}

type AviatrixControllerConfigState struct {
	// Scanning Interval for AWS Guard Duty.
	AwsGuardDutyScanningInterval pulumi.IntPtrInput
	// This parameter represents the name of a Cloud-Account in Aviatrix controller.
	BackupAccountName pulumi.StringPtrInput
	// Bucket name. Required for AWS, AWSGov, GCP and OCI.
	BackupBucketName pulumi.StringPtrInput
	// Type of cloud service provider, requires an integer value. Use 1 for AWS.
	BackupCloudType pulumi.IntPtrInput
	// Switch to enable/disable controller cloudn backup config.
	BackupConfiguration pulumi.BoolPtrInput
	// Container name. Required for Azure.
	BackupContainerName pulumi.StringPtrInput
	// Name of region. Required for Azure and OCI.
	BackupRegion pulumi.StringPtrInput
	// Storage name. Required for Azure.
	BackupStorageName pulumi.StringPtrInput
	// CA certificate file.
	CaCertificateFile pulumi.StringPtrInput
	// File path to the CA certificate.
	CaCertificateFilePath pulumi.StringPtrInput
	// Current version of the controller.
	CurrentVersion pulumi.StringPtrInput
	// Enable VPC/VNET DNS Server.
	EnableVpcDnsServer pulumi.BoolPtrInput
	// A system-wide mode. Default: true.
	FqdnExceptionRule pulumi.BoolPtrInput
	// Switch for http access. Default: false.
	HttpAccess pulumi.BoolPtrInput
	// If true, aviatrix_controller_config will upgrade all gateways when target_version is set. If false, only the controller
	// will be upgraded when target_version is set. In that case gateway upgrades should be handled in each gateway resource
	// individually using the software_version and image_version attributes.
	ManageGatewayUpgrades pulumi.BoolPtrInput
	// Switch to enable the controller to backup up to a maximum of 3 rotating backups.
	MultipleBackups pulumi.BoolPtrInput
	// Previous version of the controller.
	PreviousVersion pulumi.StringPtrInput
	// Server private key file.
	ServerPrivateKeyFile pulumi.StringPtrInput
	// File path to the server private key.
	ServerPrivateKeyFilePath pulumi.StringPtrInput
	// Server public certificate file.
	ServerPublicCertificateFile pulumi.StringPtrInput
	// File path to the server public certificate.
	ServerPublicCertificateFilePath pulumi.StringPtrInput
	// The release version number to which the controller will be upgraded to.
	TargetVersion pulumi.StringPtrInput
	// Current version of the controller without the build number.
	Version pulumi.StringPtrInput
}

func (AviatrixControllerConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixControllerConfigState)(nil)).Elem()
}

type aviatrixControllerConfigArgs struct {
	// Scanning Interval for AWS Guard Duty.
	AwsGuardDutyScanningInterval *int `pulumi:"awsGuardDutyScanningInterval"`
	// This parameter represents the name of a Cloud-Account in Aviatrix controller.
	BackupAccountName *string `pulumi:"backupAccountName"`
	// Bucket name. Required for AWS, AWSGov, GCP and OCI.
	BackupBucketName *string `pulumi:"backupBucketName"`
	// Type of cloud service provider, requires an integer value. Use 1 for AWS.
	BackupCloudType *int `pulumi:"backupCloudType"`
	// Switch to enable/disable controller cloudn backup config.
	BackupConfiguration *bool `pulumi:"backupConfiguration"`
	// Container name. Required for Azure.
	BackupContainerName *string `pulumi:"backupContainerName"`
	// Name of region. Required for Azure and OCI.
	BackupRegion *string `pulumi:"backupRegion"`
	// Storage name. Required for Azure.
	BackupStorageName *string `pulumi:"backupStorageName"`
	// CA certificate file.
	CaCertificateFile *string `pulumi:"caCertificateFile"`
	// File path to the CA certificate.
	CaCertificateFilePath *string `pulumi:"caCertificateFilePath"`
	// Enable VPC/VNET DNS Server.
	EnableVpcDnsServer *bool `pulumi:"enableVpcDnsServer"`
	// A system-wide mode. Default: true.
	FqdnExceptionRule *bool `pulumi:"fqdnExceptionRule"`
	// Switch for http access. Default: false.
	HttpAccess *bool `pulumi:"httpAccess"`
	// If true, aviatrix_controller_config will upgrade all gateways when target_version is set. If false, only the controller
	// will be upgraded when target_version is set. In that case gateway upgrades should be handled in each gateway resource
	// individually using the software_version and image_version attributes.
	ManageGatewayUpgrades *bool `pulumi:"manageGatewayUpgrades"`
	// Switch to enable the controller to backup up to a maximum of 3 rotating backups.
	MultipleBackups *bool `pulumi:"multipleBackups"`
	// Server private key file.
	ServerPrivateKeyFile *string `pulumi:"serverPrivateKeyFile"`
	// File path to the server private key.
	ServerPrivateKeyFilePath *string `pulumi:"serverPrivateKeyFilePath"`
	// Server public certificate file.
	ServerPublicCertificateFile *string `pulumi:"serverPublicCertificateFile"`
	// File path to the server public certificate.
	ServerPublicCertificateFilePath *string `pulumi:"serverPublicCertificateFilePath"`
	// The release version number to which the controller will be upgraded to.
	TargetVersion *string `pulumi:"targetVersion"`
}

// The set of arguments for constructing a AviatrixControllerConfig resource.
type AviatrixControllerConfigArgs struct {
	// Scanning Interval for AWS Guard Duty.
	AwsGuardDutyScanningInterval pulumi.IntPtrInput
	// This parameter represents the name of a Cloud-Account in Aviatrix controller.
	BackupAccountName pulumi.StringPtrInput
	// Bucket name. Required for AWS, AWSGov, GCP and OCI.
	BackupBucketName pulumi.StringPtrInput
	// Type of cloud service provider, requires an integer value. Use 1 for AWS.
	BackupCloudType pulumi.IntPtrInput
	// Switch to enable/disable controller cloudn backup config.
	BackupConfiguration pulumi.BoolPtrInput
	// Container name. Required for Azure.
	BackupContainerName pulumi.StringPtrInput
	// Name of region. Required for Azure and OCI.
	BackupRegion pulumi.StringPtrInput
	// Storage name. Required for Azure.
	BackupStorageName pulumi.StringPtrInput
	// CA certificate file.
	CaCertificateFile pulumi.StringPtrInput
	// File path to the CA certificate.
	CaCertificateFilePath pulumi.StringPtrInput
	// Enable VPC/VNET DNS Server.
	EnableVpcDnsServer pulumi.BoolPtrInput
	// A system-wide mode. Default: true.
	FqdnExceptionRule pulumi.BoolPtrInput
	// Switch for http access. Default: false.
	HttpAccess pulumi.BoolPtrInput
	// If true, aviatrix_controller_config will upgrade all gateways when target_version is set. If false, only the controller
	// will be upgraded when target_version is set. In that case gateway upgrades should be handled in each gateway resource
	// individually using the software_version and image_version attributes.
	ManageGatewayUpgrades pulumi.BoolPtrInput
	// Switch to enable the controller to backup up to a maximum of 3 rotating backups.
	MultipleBackups pulumi.BoolPtrInput
	// Server private key file.
	ServerPrivateKeyFile pulumi.StringPtrInput
	// File path to the server private key.
	ServerPrivateKeyFilePath pulumi.StringPtrInput
	// Server public certificate file.
	ServerPublicCertificateFile pulumi.StringPtrInput
	// File path to the server public certificate.
	ServerPublicCertificateFilePath pulumi.StringPtrInput
	// The release version number to which the controller will be upgraded to.
	TargetVersion pulumi.StringPtrInput
}

func (AviatrixControllerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixControllerConfigArgs)(nil)).Elem()
}

type AviatrixControllerConfigInput interface {
	pulumi.Input

	ToAviatrixControllerConfigOutput() AviatrixControllerConfigOutput
	ToAviatrixControllerConfigOutputWithContext(ctx context.Context) AviatrixControllerConfigOutput
}

func (*AviatrixControllerConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixControllerConfig)(nil)).Elem()
}

func (i *AviatrixControllerConfig) ToAviatrixControllerConfigOutput() AviatrixControllerConfigOutput {
	return i.ToAviatrixControllerConfigOutputWithContext(context.Background())
}

func (i *AviatrixControllerConfig) ToAviatrixControllerConfigOutputWithContext(ctx context.Context) AviatrixControllerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixControllerConfigOutput)
}

// AviatrixControllerConfigArrayInput is an input type that accepts AviatrixControllerConfigArray and AviatrixControllerConfigArrayOutput values.
// You can construct a concrete instance of `AviatrixControllerConfigArrayInput` via:
//
//	AviatrixControllerConfigArray{ AviatrixControllerConfigArgs{...} }
type AviatrixControllerConfigArrayInput interface {
	pulumi.Input

	ToAviatrixControllerConfigArrayOutput() AviatrixControllerConfigArrayOutput
	ToAviatrixControllerConfigArrayOutputWithContext(context.Context) AviatrixControllerConfigArrayOutput
}

type AviatrixControllerConfigArray []AviatrixControllerConfigInput

func (AviatrixControllerConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixControllerConfig)(nil)).Elem()
}

func (i AviatrixControllerConfigArray) ToAviatrixControllerConfigArrayOutput() AviatrixControllerConfigArrayOutput {
	return i.ToAviatrixControllerConfigArrayOutputWithContext(context.Background())
}

func (i AviatrixControllerConfigArray) ToAviatrixControllerConfigArrayOutputWithContext(ctx context.Context) AviatrixControllerConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixControllerConfigArrayOutput)
}

// AviatrixControllerConfigMapInput is an input type that accepts AviatrixControllerConfigMap and AviatrixControllerConfigMapOutput values.
// You can construct a concrete instance of `AviatrixControllerConfigMapInput` via:
//
//	AviatrixControllerConfigMap{ "key": AviatrixControllerConfigArgs{...} }
type AviatrixControllerConfigMapInput interface {
	pulumi.Input

	ToAviatrixControllerConfigMapOutput() AviatrixControllerConfigMapOutput
	ToAviatrixControllerConfigMapOutputWithContext(context.Context) AviatrixControllerConfigMapOutput
}

type AviatrixControllerConfigMap map[string]AviatrixControllerConfigInput

func (AviatrixControllerConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixControllerConfig)(nil)).Elem()
}

func (i AviatrixControllerConfigMap) ToAviatrixControllerConfigMapOutput() AviatrixControllerConfigMapOutput {
	return i.ToAviatrixControllerConfigMapOutputWithContext(context.Background())
}

func (i AviatrixControllerConfigMap) ToAviatrixControllerConfigMapOutputWithContext(ctx context.Context) AviatrixControllerConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixControllerConfigMapOutput)
}

type AviatrixControllerConfigOutput struct{ *pulumi.OutputState }

func (AviatrixControllerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixControllerConfig)(nil)).Elem()
}

func (o AviatrixControllerConfigOutput) ToAviatrixControllerConfigOutput() AviatrixControllerConfigOutput {
	return o
}

func (o AviatrixControllerConfigOutput) ToAviatrixControllerConfigOutputWithContext(ctx context.Context) AviatrixControllerConfigOutput {
	return o
}

// Scanning Interval for AWS Guard Duty.
func (o AviatrixControllerConfigOutput) AwsGuardDutyScanningInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.IntPtrOutput { return v.AwsGuardDutyScanningInterval }).(pulumi.IntPtrOutput)
}

// This parameter represents the name of a Cloud-Account in Aviatrix controller.
func (o AviatrixControllerConfigOutput) BackupAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.StringPtrOutput { return v.BackupAccountName }).(pulumi.StringPtrOutput)
}

// Bucket name. Required for AWS, AWSGov, GCP and OCI.
func (o AviatrixControllerConfigOutput) BackupBucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.StringPtrOutput { return v.BackupBucketName }).(pulumi.StringPtrOutput)
}

// Type of cloud service provider, requires an integer value. Use 1 for AWS.
func (o AviatrixControllerConfigOutput) BackupCloudType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.IntPtrOutput { return v.BackupCloudType }).(pulumi.IntPtrOutput)
}

// Switch to enable/disable controller cloudn backup config.
func (o AviatrixControllerConfigOutput) BackupConfiguration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.BoolPtrOutput { return v.BackupConfiguration }).(pulumi.BoolPtrOutput)
}

// Container name. Required for Azure.
func (o AviatrixControllerConfigOutput) BackupContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.StringPtrOutput { return v.BackupContainerName }).(pulumi.StringPtrOutput)
}

// Name of region. Required for Azure and OCI.
func (o AviatrixControllerConfigOutput) BackupRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.StringPtrOutput { return v.BackupRegion }).(pulumi.StringPtrOutput)
}

// Storage name. Required for Azure.
func (o AviatrixControllerConfigOutput) BackupStorageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.StringPtrOutput { return v.BackupStorageName }).(pulumi.StringPtrOutput)
}

// CA certificate file.
func (o AviatrixControllerConfigOutput) CaCertificateFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.StringPtrOutput { return v.CaCertificateFile }).(pulumi.StringPtrOutput)
}

// File path to the CA certificate.
func (o AviatrixControllerConfigOutput) CaCertificateFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.StringPtrOutput { return v.CaCertificateFilePath }).(pulumi.StringPtrOutput)
}

// Current version of the controller.
func (o AviatrixControllerConfigOutput) CurrentVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.StringOutput { return v.CurrentVersion }).(pulumi.StringOutput)
}

// Enable VPC/VNET DNS Server.
func (o AviatrixControllerConfigOutput) EnableVpcDnsServer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.BoolPtrOutput { return v.EnableVpcDnsServer }).(pulumi.BoolPtrOutput)
}

// A system-wide mode. Default: true.
func (o AviatrixControllerConfigOutput) FqdnExceptionRule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.BoolPtrOutput { return v.FqdnExceptionRule }).(pulumi.BoolPtrOutput)
}

// Switch for http access. Default: false.
func (o AviatrixControllerConfigOutput) HttpAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.BoolPtrOutput { return v.HttpAccess }).(pulumi.BoolPtrOutput)
}

// If true, aviatrix_controller_config will upgrade all gateways when target_version is set. If false, only the controller
// will be upgraded when target_version is set. In that case gateway upgrades should be handled in each gateway resource
// individually using the software_version and image_version attributes.
func (o AviatrixControllerConfigOutput) ManageGatewayUpgrades() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.BoolPtrOutput { return v.ManageGatewayUpgrades }).(pulumi.BoolPtrOutput)
}

// Switch to enable the controller to backup up to a maximum of 3 rotating backups.
func (o AviatrixControllerConfigOutput) MultipleBackups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.BoolPtrOutput { return v.MultipleBackups }).(pulumi.BoolPtrOutput)
}

// Previous version of the controller.
func (o AviatrixControllerConfigOutput) PreviousVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.StringOutput { return v.PreviousVersion }).(pulumi.StringOutput)
}

// Server private key file.
func (o AviatrixControllerConfigOutput) ServerPrivateKeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.StringPtrOutput { return v.ServerPrivateKeyFile }).(pulumi.StringPtrOutput)
}

// File path to the server private key.
func (o AviatrixControllerConfigOutput) ServerPrivateKeyFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.StringPtrOutput { return v.ServerPrivateKeyFilePath }).(pulumi.StringPtrOutput)
}

// Server public certificate file.
func (o AviatrixControllerConfigOutput) ServerPublicCertificateFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.StringPtrOutput { return v.ServerPublicCertificateFile }).(pulumi.StringPtrOutput)
}

// File path to the server public certificate.
func (o AviatrixControllerConfigOutput) ServerPublicCertificateFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.StringPtrOutput { return v.ServerPublicCertificateFilePath }).(pulumi.StringPtrOutput)
}

// The release version number to which the controller will be upgraded to.
func (o AviatrixControllerConfigOutput) TargetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.StringPtrOutput { return v.TargetVersion }).(pulumi.StringPtrOutput)
}

// Current version of the controller without the build number.
func (o AviatrixControllerConfigOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixControllerConfig) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type AviatrixControllerConfigArrayOutput struct{ *pulumi.OutputState }

func (AviatrixControllerConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixControllerConfig)(nil)).Elem()
}

func (o AviatrixControllerConfigArrayOutput) ToAviatrixControllerConfigArrayOutput() AviatrixControllerConfigArrayOutput {
	return o
}

func (o AviatrixControllerConfigArrayOutput) ToAviatrixControllerConfigArrayOutputWithContext(ctx context.Context) AviatrixControllerConfigArrayOutput {
	return o
}

func (o AviatrixControllerConfigArrayOutput) Index(i pulumi.IntInput) AviatrixControllerConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixControllerConfig {
		return vs[0].([]*AviatrixControllerConfig)[vs[1].(int)]
	}).(AviatrixControllerConfigOutput)
}

type AviatrixControllerConfigMapOutput struct{ *pulumi.OutputState }

func (AviatrixControllerConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixControllerConfig)(nil)).Elem()
}

func (o AviatrixControllerConfigMapOutput) ToAviatrixControllerConfigMapOutput() AviatrixControllerConfigMapOutput {
	return o
}

func (o AviatrixControllerConfigMapOutput) ToAviatrixControllerConfigMapOutputWithContext(ctx context.Context) AviatrixControllerConfigMapOutput {
	return o
}

func (o AviatrixControllerConfigMapOutput) MapIndex(k pulumi.StringInput) AviatrixControllerConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixControllerConfig {
		return vs[0].(map[string]*AviatrixControllerConfig)[vs[1].(string)]
	}).(AviatrixControllerConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixControllerConfigInput)(nil)).Elem(), &AviatrixControllerConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixControllerConfigArrayInput)(nil)).Elem(), AviatrixControllerConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixControllerConfigMapInput)(nil)).Elem(), AviatrixControllerConfigMap{})
	pulumi.RegisterOutputType(AviatrixControllerConfigOutput{})
	pulumi.RegisterOutputType(AviatrixControllerConfigArrayOutput{})
	pulumi.RegisterOutputType(AviatrixControllerConfigMapOutput{})
}
