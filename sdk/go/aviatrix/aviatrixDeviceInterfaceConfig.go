// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixDeviceInterfaceConfig struct {
	pulumi.CustomResourceState

	// Name of device.
	DeviceName pulumi.StringOutput `pulumi:"deviceName"`
	// WAN primary interface of the device.
	WanPrimaryInterface pulumi.StringOutput `pulumi:"wanPrimaryInterface"`
	// WAN primary interface public IP address.
	WanPrimaryInterfacePublicIp pulumi.StringOutput `pulumi:"wanPrimaryInterfacePublicIp"`
}

// NewAviatrixDeviceInterfaceConfig registers a new resource with the given unique name, arguments, and options.
func NewAviatrixDeviceInterfaceConfig(ctx *pulumi.Context,
	name string, args *AviatrixDeviceInterfaceConfigArgs, opts ...pulumi.ResourceOption) (*AviatrixDeviceInterfaceConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceName == nil {
		return nil, errors.New("invalid value for required argument 'DeviceName'")
	}
	if args.WanPrimaryInterface == nil {
		return nil, errors.New("invalid value for required argument 'WanPrimaryInterface'")
	}
	if args.WanPrimaryInterfacePublicIp == nil {
		return nil, errors.New("invalid value for required argument 'WanPrimaryInterfacePublicIp'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixDeviceInterfaceConfig
	err := ctx.RegisterResource("aviatrix:index/aviatrixDeviceInterfaceConfig:AviatrixDeviceInterfaceConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixDeviceInterfaceConfig gets an existing AviatrixDeviceInterfaceConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixDeviceInterfaceConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixDeviceInterfaceConfigState, opts ...pulumi.ResourceOption) (*AviatrixDeviceInterfaceConfig, error) {
	var resource AviatrixDeviceInterfaceConfig
	err := ctx.ReadResource("aviatrix:index/aviatrixDeviceInterfaceConfig:AviatrixDeviceInterfaceConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixDeviceInterfaceConfig resources.
type aviatrixDeviceInterfaceConfigState struct {
	// Name of device.
	DeviceName *string `pulumi:"deviceName"`
	// WAN primary interface of the device.
	WanPrimaryInterface *string `pulumi:"wanPrimaryInterface"`
	// WAN primary interface public IP address.
	WanPrimaryInterfacePublicIp *string `pulumi:"wanPrimaryInterfacePublicIp"`
}

type AviatrixDeviceInterfaceConfigState struct {
	// Name of device.
	DeviceName pulumi.StringPtrInput
	// WAN primary interface of the device.
	WanPrimaryInterface pulumi.StringPtrInput
	// WAN primary interface public IP address.
	WanPrimaryInterfacePublicIp pulumi.StringPtrInput
}

func (AviatrixDeviceInterfaceConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixDeviceInterfaceConfigState)(nil)).Elem()
}

type aviatrixDeviceInterfaceConfigArgs struct {
	// Name of device.
	DeviceName string `pulumi:"deviceName"`
	// WAN primary interface of the device.
	WanPrimaryInterface string `pulumi:"wanPrimaryInterface"`
	// WAN primary interface public IP address.
	WanPrimaryInterfacePublicIp string `pulumi:"wanPrimaryInterfacePublicIp"`
}

// The set of arguments for constructing a AviatrixDeviceInterfaceConfig resource.
type AviatrixDeviceInterfaceConfigArgs struct {
	// Name of device.
	DeviceName pulumi.StringInput
	// WAN primary interface of the device.
	WanPrimaryInterface pulumi.StringInput
	// WAN primary interface public IP address.
	WanPrimaryInterfacePublicIp pulumi.StringInput
}

func (AviatrixDeviceInterfaceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixDeviceInterfaceConfigArgs)(nil)).Elem()
}

type AviatrixDeviceInterfaceConfigInput interface {
	pulumi.Input

	ToAviatrixDeviceInterfaceConfigOutput() AviatrixDeviceInterfaceConfigOutput
	ToAviatrixDeviceInterfaceConfigOutputWithContext(ctx context.Context) AviatrixDeviceInterfaceConfigOutput
}

func (*AviatrixDeviceInterfaceConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixDeviceInterfaceConfig)(nil)).Elem()
}

func (i *AviatrixDeviceInterfaceConfig) ToAviatrixDeviceInterfaceConfigOutput() AviatrixDeviceInterfaceConfigOutput {
	return i.ToAviatrixDeviceInterfaceConfigOutputWithContext(context.Background())
}

func (i *AviatrixDeviceInterfaceConfig) ToAviatrixDeviceInterfaceConfigOutputWithContext(ctx context.Context) AviatrixDeviceInterfaceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixDeviceInterfaceConfigOutput)
}

// AviatrixDeviceInterfaceConfigArrayInput is an input type that accepts AviatrixDeviceInterfaceConfigArray and AviatrixDeviceInterfaceConfigArrayOutput values.
// You can construct a concrete instance of `AviatrixDeviceInterfaceConfigArrayInput` via:
//
//	AviatrixDeviceInterfaceConfigArray{ AviatrixDeviceInterfaceConfigArgs{...} }
type AviatrixDeviceInterfaceConfigArrayInput interface {
	pulumi.Input

	ToAviatrixDeviceInterfaceConfigArrayOutput() AviatrixDeviceInterfaceConfigArrayOutput
	ToAviatrixDeviceInterfaceConfigArrayOutputWithContext(context.Context) AviatrixDeviceInterfaceConfigArrayOutput
}

type AviatrixDeviceInterfaceConfigArray []AviatrixDeviceInterfaceConfigInput

func (AviatrixDeviceInterfaceConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixDeviceInterfaceConfig)(nil)).Elem()
}

func (i AviatrixDeviceInterfaceConfigArray) ToAviatrixDeviceInterfaceConfigArrayOutput() AviatrixDeviceInterfaceConfigArrayOutput {
	return i.ToAviatrixDeviceInterfaceConfigArrayOutputWithContext(context.Background())
}

func (i AviatrixDeviceInterfaceConfigArray) ToAviatrixDeviceInterfaceConfigArrayOutputWithContext(ctx context.Context) AviatrixDeviceInterfaceConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixDeviceInterfaceConfigArrayOutput)
}

// AviatrixDeviceInterfaceConfigMapInput is an input type that accepts AviatrixDeviceInterfaceConfigMap and AviatrixDeviceInterfaceConfigMapOutput values.
// You can construct a concrete instance of `AviatrixDeviceInterfaceConfigMapInput` via:
//
//	AviatrixDeviceInterfaceConfigMap{ "key": AviatrixDeviceInterfaceConfigArgs{...} }
type AviatrixDeviceInterfaceConfigMapInput interface {
	pulumi.Input

	ToAviatrixDeviceInterfaceConfigMapOutput() AviatrixDeviceInterfaceConfigMapOutput
	ToAviatrixDeviceInterfaceConfigMapOutputWithContext(context.Context) AviatrixDeviceInterfaceConfigMapOutput
}

type AviatrixDeviceInterfaceConfigMap map[string]AviatrixDeviceInterfaceConfigInput

func (AviatrixDeviceInterfaceConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixDeviceInterfaceConfig)(nil)).Elem()
}

func (i AviatrixDeviceInterfaceConfigMap) ToAviatrixDeviceInterfaceConfigMapOutput() AviatrixDeviceInterfaceConfigMapOutput {
	return i.ToAviatrixDeviceInterfaceConfigMapOutputWithContext(context.Background())
}

func (i AviatrixDeviceInterfaceConfigMap) ToAviatrixDeviceInterfaceConfigMapOutputWithContext(ctx context.Context) AviatrixDeviceInterfaceConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixDeviceInterfaceConfigMapOutput)
}

type AviatrixDeviceInterfaceConfigOutput struct{ *pulumi.OutputState }

func (AviatrixDeviceInterfaceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixDeviceInterfaceConfig)(nil)).Elem()
}

func (o AviatrixDeviceInterfaceConfigOutput) ToAviatrixDeviceInterfaceConfigOutput() AviatrixDeviceInterfaceConfigOutput {
	return o
}

func (o AviatrixDeviceInterfaceConfigOutput) ToAviatrixDeviceInterfaceConfigOutputWithContext(ctx context.Context) AviatrixDeviceInterfaceConfigOutput {
	return o
}

// Name of device.
func (o AviatrixDeviceInterfaceConfigOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixDeviceInterfaceConfig) pulumi.StringOutput { return v.DeviceName }).(pulumi.StringOutput)
}

// WAN primary interface of the device.
func (o AviatrixDeviceInterfaceConfigOutput) WanPrimaryInterface() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixDeviceInterfaceConfig) pulumi.StringOutput { return v.WanPrimaryInterface }).(pulumi.StringOutput)
}

// WAN primary interface public IP address.
func (o AviatrixDeviceInterfaceConfigOutput) WanPrimaryInterfacePublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixDeviceInterfaceConfig) pulumi.StringOutput { return v.WanPrimaryInterfacePublicIp }).(pulumi.StringOutput)
}

type AviatrixDeviceInterfaceConfigArrayOutput struct{ *pulumi.OutputState }

func (AviatrixDeviceInterfaceConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixDeviceInterfaceConfig)(nil)).Elem()
}

func (o AviatrixDeviceInterfaceConfigArrayOutput) ToAviatrixDeviceInterfaceConfigArrayOutput() AviatrixDeviceInterfaceConfigArrayOutput {
	return o
}

func (o AviatrixDeviceInterfaceConfigArrayOutput) ToAviatrixDeviceInterfaceConfigArrayOutputWithContext(ctx context.Context) AviatrixDeviceInterfaceConfigArrayOutput {
	return o
}

func (o AviatrixDeviceInterfaceConfigArrayOutput) Index(i pulumi.IntInput) AviatrixDeviceInterfaceConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixDeviceInterfaceConfig {
		return vs[0].([]*AviatrixDeviceInterfaceConfig)[vs[1].(int)]
	}).(AviatrixDeviceInterfaceConfigOutput)
}

type AviatrixDeviceInterfaceConfigMapOutput struct{ *pulumi.OutputState }

func (AviatrixDeviceInterfaceConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixDeviceInterfaceConfig)(nil)).Elem()
}

func (o AviatrixDeviceInterfaceConfigMapOutput) ToAviatrixDeviceInterfaceConfigMapOutput() AviatrixDeviceInterfaceConfigMapOutput {
	return o
}

func (o AviatrixDeviceInterfaceConfigMapOutput) ToAviatrixDeviceInterfaceConfigMapOutputWithContext(ctx context.Context) AviatrixDeviceInterfaceConfigMapOutput {
	return o
}

func (o AviatrixDeviceInterfaceConfigMapOutput) MapIndex(k pulumi.StringInput) AviatrixDeviceInterfaceConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixDeviceInterfaceConfig {
		return vs[0].(map[string]*AviatrixDeviceInterfaceConfig)[vs[1].(string)]
	}).(AviatrixDeviceInterfaceConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixDeviceInterfaceConfigInput)(nil)).Elem(), &AviatrixDeviceInterfaceConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixDeviceInterfaceConfigArrayInput)(nil)).Elem(), AviatrixDeviceInterfaceConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixDeviceInterfaceConfigMapInput)(nil)).Elem(), AviatrixDeviceInterfaceConfigMap{})
	pulumi.RegisterOutputType(AviatrixDeviceInterfaceConfigOutput{})
	pulumi.RegisterOutputType(AviatrixDeviceInterfaceConfigArrayOutput{})
	pulumi.RegisterOutputType(AviatrixDeviceInterfaceConfigMapOutput{})
}
