// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **aviatrix_transit_cloudn_conn** resource creates and manages the connection between an Aviatrix Transit Gateway and an Aviatrix CloudN device. Available as of provider version R2.21.0+.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/astipkovits/pulumi-aviatrix/sdk/go/aviatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aviatrix.NewAviatrixTransitCloudnConn(ctx, "test", &aviatrix.AviatrixTransitCloudnConnArgs{
//				BgpLocalAsNum:       pulumi.String("123"),
//				CloudnAsNum:         pulumi.String("345"),
//				CloudnNeighborAsNum: pulumi.String("65005"),
//				CloudnNeighborIp:    pulumi.String("182.1.2.3"),
//				CloudnRemoteIp:      pulumi.String("172.12.13.14"),
//				ConnectionName:      pulumi.String("my_conn"),
//				GwName:              pulumi.String("transitGw"),
//				VpcId:               pulumi.String("vpc-abcd1234"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ```go
// package main
//
// import (
//
//	"github.com/astipkovits/pulumi-aviatrix/sdk/go/aviatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aviatrix.NewAviatrixTransitCloudnConn(ctx, "test", &aviatrix.AviatrixTransitCloudnConnArgs{
//				BackupCloudnAsNum:         pulumi.String("123"),
//				BackupCloudnIp:            pulumi.String("1.2.3.6"),
//				BackupCloudnNeighborAsNum: pulumi.String("345"),
//				BackupCloudnNeighborIp:    pulumi.String("1.2.3.7"),
//				BgpLocalAsNum:             pulumi.String("123"),
//				CloudnAsNum:               pulumi.String("345"),
//				CloudnNeighborAsNum:       pulumi.String("65005"),
//				CloudnNeighborIp:          pulumi.String("1.2.3.5"),
//				CloudnRemoteIp:            pulumi.String("1.2.3.4"),
//				ConnectionName:            pulumi.String("my_conn"),
//				EnableHa:                  pulumi.Bool(true),
//				GwName:                    pulumi.String("transitGw"),
//				VpcId:                     pulumi.String("vpc-abcd1234"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// **transit_cloudn_conn** can be imported using the `connection_name` and `vpc_id`, e.g.
//
// ```sh
//
//	$ pulumi import aviatrix:index/aviatrixTransitCloudnConn:AviatrixTransitCloudnConn test connection_name~vpc_id
//
// ```
type AviatrixTransitCloudnConn struct {
	pulumi.CustomResourceState

	// Set of approved CIDRs. Requires `enableLearnedCidrsApproval` to be true. Type: Set(String).
	ApprovedCidrs pulumi.StringArrayOutput `pulumi:"approvedCidrs"`
	// BGP AS Number of HA CloudN. Type: String.
	BackupCloudnAsNum pulumi.StringPtrOutput `pulumi:"backupCloudnAsNum"`
	// IP Address of HA CloudN. Required when `enableHa` is true. Type: String.
	BackupCloudnIp pulumi.StringPtrOutput `pulumi:"backupCloudnIp"`
	// BGP AS Number of HA CloudN Neighbor. Type: String.
	BackupCloudnNeighborAsNum pulumi.StringPtrOutput `pulumi:"backupCloudnNeighborAsNum"`
	// IP Address of HA CloudN Neighbor. Type: String.
	BackupCloudnNeighborIp pulumi.StringPtrOutput `pulumi:"backupCloudnNeighborIp"`
	// Flag to enable direct connect over private network to HA CloudN. Type: Boolean.
	BackupDirectConnect pulumi.BoolPtrOutput `pulumi:"backupDirectConnect"`
	// Flag to enable insane mode connection to HA CloudN. Type: Boolean.
	BackupInsaneMode pulumi.BoolPtrOutput `pulumi:"backupInsaneMode"`
	// BGP AS Number of the Transit Gateway. Type: String.
	BgpLocalAsNum pulumi.StringOutput `pulumi:"bgpLocalAsNum"`
	// BGP AS Number of the Aviatrix CloudN. Type: String.
	CloudnAsNum pulumi.StringOutput `pulumi:"cloudnAsNum"`
	// BGP AS Number of the Aviatrix CloudN neighbor. Type: String.
	CloudnNeighborAsNum pulumi.StringOutput `pulumi:"cloudnNeighborAsNum"`
	// IP Address of Aviatrix CloudN neighbor. Type: String.
	CloudnNeighborIp pulumi.StringOutput `pulumi:"cloudnNeighborIp"`
	// IP Address of Aviatrix CloudN. Type: String.
	CloudnRemoteIp pulumi.StringOutput `pulumi:"cloudnRemoteIp"`
	// Name of the Transit Gateway to CloudN Connection. Type: String.
	ConnectionName pulumi.StringOutput `pulumi:"connectionName"`
	// Enable direct connect over private network. Type: Boolean. Default: true.
	DirectConnect pulumi.BoolPtrOutput `pulumi:"directConnect"`
	// Enable connection to HA CloudN. Type: Boolean.
	EnableHa pulumi.BoolPtrOutput `pulumi:"enableHa"`
	// Enable encrypted transit approval for connection. Type: Boolean.
	EnableLearnedCidrsApproval pulumi.BoolPtrOutput `pulumi:"enableLearnedCidrsApproval"`
	// Flag to enable load balancing between CloudN and HA CloudN. Type: Boolean.
	EnableLoadBalancing pulumi.BoolPtrOutput `pulumi:"enableLoadBalancing"`
	// Name of the Transit Gateway. Type: String.
	GwName pulumi.StringOutput `pulumi:"gwName"`
	// Enable insane mode connection. Type: Boolean.
	InsaneMode pulumi.BoolPtrOutput `pulumi:"insaneMode"`
	// VPC ID of the Aviatrix Transit Gateway. Type: String.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewAviatrixTransitCloudnConn registers a new resource with the given unique name, arguments, and options.
func NewAviatrixTransitCloudnConn(ctx *pulumi.Context,
	name string, args *AviatrixTransitCloudnConnArgs, opts ...pulumi.ResourceOption) (*AviatrixTransitCloudnConn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BgpLocalAsNum == nil {
		return nil, errors.New("invalid value for required argument 'BgpLocalAsNum'")
	}
	if args.CloudnAsNum == nil {
		return nil, errors.New("invalid value for required argument 'CloudnAsNum'")
	}
	if args.CloudnNeighborAsNum == nil {
		return nil, errors.New("invalid value for required argument 'CloudnNeighborAsNum'")
	}
	if args.CloudnNeighborIp == nil {
		return nil, errors.New("invalid value for required argument 'CloudnNeighborIp'")
	}
	if args.CloudnRemoteIp == nil {
		return nil, errors.New("invalid value for required argument 'CloudnRemoteIp'")
	}
	if args.ConnectionName == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionName'")
	}
	if args.GwName == nil {
		return nil, errors.New("invalid value for required argument 'GwName'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixTransitCloudnConn
	err := ctx.RegisterResource("aviatrix:index/aviatrixTransitCloudnConn:AviatrixTransitCloudnConn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixTransitCloudnConn gets an existing AviatrixTransitCloudnConn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixTransitCloudnConn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixTransitCloudnConnState, opts ...pulumi.ResourceOption) (*AviatrixTransitCloudnConn, error) {
	var resource AviatrixTransitCloudnConn
	err := ctx.ReadResource("aviatrix:index/aviatrixTransitCloudnConn:AviatrixTransitCloudnConn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixTransitCloudnConn resources.
type aviatrixTransitCloudnConnState struct {
	// Set of approved CIDRs. Requires `enableLearnedCidrsApproval` to be true. Type: Set(String).
	ApprovedCidrs []string `pulumi:"approvedCidrs"`
	// BGP AS Number of HA CloudN. Type: String.
	BackupCloudnAsNum *string `pulumi:"backupCloudnAsNum"`
	// IP Address of HA CloudN. Required when `enableHa` is true. Type: String.
	BackupCloudnIp *string `pulumi:"backupCloudnIp"`
	// BGP AS Number of HA CloudN Neighbor. Type: String.
	BackupCloudnNeighborAsNum *string `pulumi:"backupCloudnNeighborAsNum"`
	// IP Address of HA CloudN Neighbor. Type: String.
	BackupCloudnNeighborIp *string `pulumi:"backupCloudnNeighborIp"`
	// Flag to enable direct connect over private network to HA CloudN. Type: Boolean.
	BackupDirectConnect *bool `pulumi:"backupDirectConnect"`
	// Flag to enable insane mode connection to HA CloudN. Type: Boolean.
	BackupInsaneMode *bool `pulumi:"backupInsaneMode"`
	// BGP AS Number of the Transit Gateway. Type: String.
	BgpLocalAsNum *string `pulumi:"bgpLocalAsNum"`
	// BGP AS Number of the Aviatrix CloudN. Type: String.
	CloudnAsNum *string `pulumi:"cloudnAsNum"`
	// BGP AS Number of the Aviatrix CloudN neighbor. Type: String.
	CloudnNeighborAsNum *string `pulumi:"cloudnNeighborAsNum"`
	// IP Address of Aviatrix CloudN neighbor. Type: String.
	CloudnNeighborIp *string `pulumi:"cloudnNeighborIp"`
	// IP Address of Aviatrix CloudN. Type: String.
	CloudnRemoteIp *string `pulumi:"cloudnRemoteIp"`
	// Name of the Transit Gateway to CloudN Connection. Type: String.
	ConnectionName *string `pulumi:"connectionName"`
	// Enable direct connect over private network. Type: Boolean. Default: true.
	DirectConnect *bool `pulumi:"directConnect"`
	// Enable connection to HA CloudN. Type: Boolean.
	EnableHa *bool `pulumi:"enableHa"`
	// Enable encrypted transit approval for connection. Type: Boolean.
	EnableLearnedCidrsApproval *bool `pulumi:"enableLearnedCidrsApproval"`
	// Flag to enable load balancing between CloudN and HA CloudN. Type: Boolean.
	EnableLoadBalancing *bool `pulumi:"enableLoadBalancing"`
	// Name of the Transit Gateway. Type: String.
	GwName *string `pulumi:"gwName"`
	// Enable insane mode connection. Type: Boolean.
	InsaneMode *bool `pulumi:"insaneMode"`
	// VPC ID of the Aviatrix Transit Gateway. Type: String.
	VpcId *string `pulumi:"vpcId"`
}

type AviatrixTransitCloudnConnState struct {
	// Set of approved CIDRs. Requires `enableLearnedCidrsApproval` to be true. Type: Set(String).
	ApprovedCidrs pulumi.StringArrayInput
	// BGP AS Number of HA CloudN. Type: String.
	BackupCloudnAsNum pulumi.StringPtrInput
	// IP Address of HA CloudN. Required when `enableHa` is true. Type: String.
	BackupCloudnIp pulumi.StringPtrInput
	// BGP AS Number of HA CloudN Neighbor. Type: String.
	BackupCloudnNeighborAsNum pulumi.StringPtrInput
	// IP Address of HA CloudN Neighbor. Type: String.
	BackupCloudnNeighborIp pulumi.StringPtrInput
	// Flag to enable direct connect over private network to HA CloudN. Type: Boolean.
	BackupDirectConnect pulumi.BoolPtrInput
	// Flag to enable insane mode connection to HA CloudN. Type: Boolean.
	BackupInsaneMode pulumi.BoolPtrInput
	// BGP AS Number of the Transit Gateway. Type: String.
	BgpLocalAsNum pulumi.StringPtrInput
	// BGP AS Number of the Aviatrix CloudN. Type: String.
	CloudnAsNum pulumi.StringPtrInput
	// BGP AS Number of the Aviatrix CloudN neighbor. Type: String.
	CloudnNeighborAsNum pulumi.StringPtrInput
	// IP Address of Aviatrix CloudN neighbor. Type: String.
	CloudnNeighborIp pulumi.StringPtrInput
	// IP Address of Aviatrix CloudN. Type: String.
	CloudnRemoteIp pulumi.StringPtrInput
	// Name of the Transit Gateway to CloudN Connection. Type: String.
	ConnectionName pulumi.StringPtrInput
	// Enable direct connect over private network. Type: Boolean. Default: true.
	DirectConnect pulumi.BoolPtrInput
	// Enable connection to HA CloudN. Type: Boolean.
	EnableHa pulumi.BoolPtrInput
	// Enable encrypted transit approval for connection. Type: Boolean.
	EnableLearnedCidrsApproval pulumi.BoolPtrInput
	// Flag to enable load balancing between CloudN and HA CloudN. Type: Boolean.
	EnableLoadBalancing pulumi.BoolPtrInput
	// Name of the Transit Gateway. Type: String.
	GwName pulumi.StringPtrInput
	// Enable insane mode connection. Type: Boolean.
	InsaneMode pulumi.BoolPtrInput
	// VPC ID of the Aviatrix Transit Gateway. Type: String.
	VpcId pulumi.StringPtrInput
}

func (AviatrixTransitCloudnConnState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixTransitCloudnConnState)(nil)).Elem()
}

type aviatrixTransitCloudnConnArgs struct {
	// Set of approved CIDRs. Requires `enableLearnedCidrsApproval` to be true. Type: Set(String).
	ApprovedCidrs []string `pulumi:"approvedCidrs"`
	// BGP AS Number of HA CloudN. Type: String.
	BackupCloudnAsNum *string `pulumi:"backupCloudnAsNum"`
	// IP Address of HA CloudN. Required when `enableHa` is true. Type: String.
	BackupCloudnIp *string `pulumi:"backupCloudnIp"`
	// BGP AS Number of HA CloudN Neighbor. Type: String.
	BackupCloudnNeighborAsNum *string `pulumi:"backupCloudnNeighborAsNum"`
	// IP Address of HA CloudN Neighbor. Type: String.
	BackupCloudnNeighborIp *string `pulumi:"backupCloudnNeighborIp"`
	// Flag to enable direct connect over private network to HA CloudN. Type: Boolean.
	BackupDirectConnect *bool `pulumi:"backupDirectConnect"`
	// Flag to enable insane mode connection to HA CloudN. Type: Boolean.
	BackupInsaneMode *bool `pulumi:"backupInsaneMode"`
	// BGP AS Number of the Transit Gateway. Type: String.
	BgpLocalAsNum string `pulumi:"bgpLocalAsNum"`
	// BGP AS Number of the Aviatrix CloudN. Type: String.
	CloudnAsNum string `pulumi:"cloudnAsNum"`
	// BGP AS Number of the Aviatrix CloudN neighbor. Type: String.
	CloudnNeighborAsNum string `pulumi:"cloudnNeighborAsNum"`
	// IP Address of Aviatrix CloudN neighbor. Type: String.
	CloudnNeighborIp string `pulumi:"cloudnNeighborIp"`
	// IP Address of Aviatrix CloudN. Type: String.
	CloudnRemoteIp string `pulumi:"cloudnRemoteIp"`
	// Name of the Transit Gateway to CloudN Connection. Type: String.
	ConnectionName string `pulumi:"connectionName"`
	// Enable direct connect over private network. Type: Boolean. Default: true.
	DirectConnect *bool `pulumi:"directConnect"`
	// Enable connection to HA CloudN. Type: Boolean.
	EnableHa *bool `pulumi:"enableHa"`
	// Enable encrypted transit approval for connection. Type: Boolean.
	EnableLearnedCidrsApproval *bool `pulumi:"enableLearnedCidrsApproval"`
	// Flag to enable load balancing between CloudN and HA CloudN. Type: Boolean.
	EnableLoadBalancing *bool `pulumi:"enableLoadBalancing"`
	// Name of the Transit Gateway. Type: String.
	GwName string `pulumi:"gwName"`
	// Enable insane mode connection. Type: Boolean.
	InsaneMode *bool `pulumi:"insaneMode"`
	// VPC ID of the Aviatrix Transit Gateway. Type: String.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a AviatrixTransitCloudnConn resource.
type AviatrixTransitCloudnConnArgs struct {
	// Set of approved CIDRs. Requires `enableLearnedCidrsApproval` to be true. Type: Set(String).
	ApprovedCidrs pulumi.StringArrayInput
	// BGP AS Number of HA CloudN. Type: String.
	BackupCloudnAsNum pulumi.StringPtrInput
	// IP Address of HA CloudN. Required when `enableHa` is true. Type: String.
	BackupCloudnIp pulumi.StringPtrInput
	// BGP AS Number of HA CloudN Neighbor. Type: String.
	BackupCloudnNeighborAsNum pulumi.StringPtrInput
	// IP Address of HA CloudN Neighbor. Type: String.
	BackupCloudnNeighborIp pulumi.StringPtrInput
	// Flag to enable direct connect over private network to HA CloudN. Type: Boolean.
	BackupDirectConnect pulumi.BoolPtrInput
	// Flag to enable insane mode connection to HA CloudN. Type: Boolean.
	BackupInsaneMode pulumi.BoolPtrInput
	// BGP AS Number of the Transit Gateway. Type: String.
	BgpLocalAsNum pulumi.StringInput
	// BGP AS Number of the Aviatrix CloudN. Type: String.
	CloudnAsNum pulumi.StringInput
	// BGP AS Number of the Aviatrix CloudN neighbor. Type: String.
	CloudnNeighborAsNum pulumi.StringInput
	// IP Address of Aviatrix CloudN neighbor. Type: String.
	CloudnNeighborIp pulumi.StringInput
	// IP Address of Aviatrix CloudN. Type: String.
	CloudnRemoteIp pulumi.StringInput
	// Name of the Transit Gateway to CloudN Connection. Type: String.
	ConnectionName pulumi.StringInput
	// Enable direct connect over private network. Type: Boolean. Default: true.
	DirectConnect pulumi.BoolPtrInput
	// Enable connection to HA CloudN. Type: Boolean.
	EnableHa pulumi.BoolPtrInput
	// Enable encrypted transit approval for connection. Type: Boolean.
	EnableLearnedCidrsApproval pulumi.BoolPtrInput
	// Flag to enable load balancing between CloudN and HA CloudN. Type: Boolean.
	EnableLoadBalancing pulumi.BoolPtrInput
	// Name of the Transit Gateway. Type: String.
	GwName pulumi.StringInput
	// Enable insane mode connection. Type: Boolean.
	InsaneMode pulumi.BoolPtrInput
	// VPC ID of the Aviatrix Transit Gateway. Type: String.
	VpcId pulumi.StringInput
}

func (AviatrixTransitCloudnConnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixTransitCloudnConnArgs)(nil)).Elem()
}

type AviatrixTransitCloudnConnInput interface {
	pulumi.Input

	ToAviatrixTransitCloudnConnOutput() AviatrixTransitCloudnConnOutput
	ToAviatrixTransitCloudnConnOutputWithContext(ctx context.Context) AviatrixTransitCloudnConnOutput
}

func (*AviatrixTransitCloudnConn) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixTransitCloudnConn)(nil)).Elem()
}

func (i *AviatrixTransitCloudnConn) ToAviatrixTransitCloudnConnOutput() AviatrixTransitCloudnConnOutput {
	return i.ToAviatrixTransitCloudnConnOutputWithContext(context.Background())
}

func (i *AviatrixTransitCloudnConn) ToAviatrixTransitCloudnConnOutputWithContext(ctx context.Context) AviatrixTransitCloudnConnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixTransitCloudnConnOutput)
}

// AviatrixTransitCloudnConnArrayInput is an input type that accepts AviatrixTransitCloudnConnArray and AviatrixTransitCloudnConnArrayOutput values.
// You can construct a concrete instance of `AviatrixTransitCloudnConnArrayInput` via:
//
//	AviatrixTransitCloudnConnArray{ AviatrixTransitCloudnConnArgs{...} }
type AviatrixTransitCloudnConnArrayInput interface {
	pulumi.Input

	ToAviatrixTransitCloudnConnArrayOutput() AviatrixTransitCloudnConnArrayOutput
	ToAviatrixTransitCloudnConnArrayOutputWithContext(context.Context) AviatrixTransitCloudnConnArrayOutput
}

type AviatrixTransitCloudnConnArray []AviatrixTransitCloudnConnInput

func (AviatrixTransitCloudnConnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixTransitCloudnConn)(nil)).Elem()
}

func (i AviatrixTransitCloudnConnArray) ToAviatrixTransitCloudnConnArrayOutput() AviatrixTransitCloudnConnArrayOutput {
	return i.ToAviatrixTransitCloudnConnArrayOutputWithContext(context.Background())
}

func (i AviatrixTransitCloudnConnArray) ToAviatrixTransitCloudnConnArrayOutputWithContext(ctx context.Context) AviatrixTransitCloudnConnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixTransitCloudnConnArrayOutput)
}

// AviatrixTransitCloudnConnMapInput is an input type that accepts AviatrixTransitCloudnConnMap and AviatrixTransitCloudnConnMapOutput values.
// You can construct a concrete instance of `AviatrixTransitCloudnConnMapInput` via:
//
//	AviatrixTransitCloudnConnMap{ "key": AviatrixTransitCloudnConnArgs{...} }
type AviatrixTransitCloudnConnMapInput interface {
	pulumi.Input

	ToAviatrixTransitCloudnConnMapOutput() AviatrixTransitCloudnConnMapOutput
	ToAviatrixTransitCloudnConnMapOutputWithContext(context.Context) AviatrixTransitCloudnConnMapOutput
}

type AviatrixTransitCloudnConnMap map[string]AviatrixTransitCloudnConnInput

func (AviatrixTransitCloudnConnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixTransitCloudnConn)(nil)).Elem()
}

func (i AviatrixTransitCloudnConnMap) ToAviatrixTransitCloudnConnMapOutput() AviatrixTransitCloudnConnMapOutput {
	return i.ToAviatrixTransitCloudnConnMapOutputWithContext(context.Background())
}

func (i AviatrixTransitCloudnConnMap) ToAviatrixTransitCloudnConnMapOutputWithContext(ctx context.Context) AviatrixTransitCloudnConnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixTransitCloudnConnMapOutput)
}

type AviatrixTransitCloudnConnOutput struct{ *pulumi.OutputState }

func (AviatrixTransitCloudnConnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixTransitCloudnConn)(nil)).Elem()
}

func (o AviatrixTransitCloudnConnOutput) ToAviatrixTransitCloudnConnOutput() AviatrixTransitCloudnConnOutput {
	return o
}

func (o AviatrixTransitCloudnConnOutput) ToAviatrixTransitCloudnConnOutputWithContext(ctx context.Context) AviatrixTransitCloudnConnOutput {
	return o
}

// Set of approved CIDRs. Requires `enableLearnedCidrsApproval` to be true. Type: Set(String).
func (o AviatrixTransitCloudnConnOutput) ApprovedCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.StringArrayOutput { return v.ApprovedCidrs }).(pulumi.StringArrayOutput)
}

// BGP AS Number of HA CloudN. Type: String.
func (o AviatrixTransitCloudnConnOutput) BackupCloudnAsNum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.StringPtrOutput { return v.BackupCloudnAsNum }).(pulumi.StringPtrOutput)
}

// IP Address of HA CloudN. Required when `enableHa` is true. Type: String.
func (o AviatrixTransitCloudnConnOutput) BackupCloudnIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.StringPtrOutput { return v.BackupCloudnIp }).(pulumi.StringPtrOutput)
}

// BGP AS Number of HA CloudN Neighbor. Type: String.
func (o AviatrixTransitCloudnConnOutput) BackupCloudnNeighborAsNum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.StringPtrOutput { return v.BackupCloudnNeighborAsNum }).(pulumi.StringPtrOutput)
}

// IP Address of HA CloudN Neighbor. Type: String.
func (o AviatrixTransitCloudnConnOutput) BackupCloudnNeighborIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.StringPtrOutput { return v.BackupCloudnNeighborIp }).(pulumi.StringPtrOutput)
}

// Flag to enable direct connect over private network to HA CloudN. Type: Boolean.
func (o AviatrixTransitCloudnConnOutput) BackupDirectConnect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.BoolPtrOutput { return v.BackupDirectConnect }).(pulumi.BoolPtrOutput)
}

// Flag to enable insane mode connection to HA CloudN. Type: Boolean.
func (o AviatrixTransitCloudnConnOutput) BackupInsaneMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.BoolPtrOutput { return v.BackupInsaneMode }).(pulumi.BoolPtrOutput)
}

// BGP AS Number of the Transit Gateway. Type: String.
func (o AviatrixTransitCloudnConnOutput) BgpLocalAsNum() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.StringOutput { return v.BgpLocalAsNum }).(pulumi.StringOutput)
}

// BGP AS Number of the Aviatrix CloudN. Type: String.
func (o AviatrixTransitCloudnConnOutput) CloudnAsNum() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.StringOutput { return v.CloudnAsNum }).(pulumi.StringOutput)
}

// BGP AS Number of the Aviatrix CloudN neighbor. Type: String.
func (o AviatrixTransitCloudnConnOutput) CloudnNeighborAsNum() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.StringOutput { return v.CloudnNeighborAsNum }).(pulumi.StringOutput)
}

// IP Address of Aviatrix CloudN neighbor. Type: String.
func (o AviatrixTransitCloudnConnOutput) CloudnNeighborIp() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.StringOutput { return v.CloudnNeighborIp }).(pulumi.StringOutput)
}

// IP Address of Aviatrix CloudN. Type: String.
func (o AviatrixTransitCloudnConnOutput) CloudnRemoteIp() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.StringOutput { return v.CloudnRemoteIp }).(pulumi.StringOutput)
}

// Name of the Transit Gateway to CloudN Connection. Type: String.
func (o AviatrixTransitCloudnConnOutput) ConnectionName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.StringOutput { return v.ConnectionName }).(pulumi.StringOutput)
}

// Enable direct connect over private network. Type: Boolean. Default: true.
func (o AviatrixTransitCloudnConnOutput) DirectConnect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.BoolPtrOutput { return v.DirectConnect }).(pulumi.BoolPtrOutput)
}

// Enable connection to HA CloudN. Type: Boolean.
func (o AviatrixTransitCloudnConnOutput) EnableHa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.BoolPtrOutput { return v.EnableHa }).(pulumi.BoolPtrOutput)
}

// Enable encrypted transit approval for connection. Type: Boolean.
func (o AviatrixTransitCloudnConnOutput) EnableLearnedCidrsApproval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.BoolPtrOutput { return v.EnableLearnedCidrsApproval }).(pulumi.BoolPtrOutput)
}

// Flag to enable load balancing between CloudN and HA CloudN. Type: Boolean.
func (o AviatrixTransitCloudnConnOutput) EnableLoadBalancing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.BoolPtrOutput { return v.EnableLoadBalancing }).(pulumi.BoolPtrOutput)
}

// Name of the Transit Gateway. Type: String.
func (o AviatrixTransitCloudnConnOutput) GwName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.StringOutput { return v.GwName }).(pulumi.StringOutput)
}

// Enable insane mode connection. Type: Boolean.
func (o AviatrixTransitCloudnConnOutput) InsaneMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.BoolPtrOutput { return v.InsaneMode }).(pulumi.BoolPtrOutput)
}

// VPC ID of the Aviatrix Transit Gateway. Type: String.
func (o AviatrixTransitCloudnConnOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitCloudnConn) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type AviatrixTransitCloudnConnArrayOutput struct{ *pulumi.OutputState }

func (AviatrixTransitCloudnConnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixTransitCloudnConn)(nil)).Elem()
}

func (o AviatrixTransitCloudnConnArrayOutput) ToAviatrixTransitCloudnConnArrayOutput() AviatrixTransitCloudnConnArrayOutput {
	return o
}

func (o AviatrixTransitCloudnConnArrayOutput) ToAviatrixTransitCloudnConnArrayOutputWithContext(ctx context.Context) AviatrixTransitCloudnConnArrayOutput {
	return o
}

func (o AviatrixTransitCloudnConnArrayOutput) Index(i pulumi.IntInput) AviatrixTransitCloudnConnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixTransitCloudnConn {
		return vs[0].([]*AviatrixTransitCloudnConn)[vs[1].(int)]
	}).(AviatrixTransitCloudnConnOutput)
}

type AviatrixTransitCloudnConnMapOutput struct{ *pulumi.OutputState }

func (AviatrixTransitCloudnConnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixTransitCloudnConn)(nil)).Elem()
}

func (o AviatrixTransitCloudnConnMapOutput) ToAviatrixTransitCloudnConnMapOutput() AviatrixTransitCloudnConnMapOutput {
	return o
}

func (o AviatrixTransitCloudnConnMapOutput) ToAviatrixTransitCloudnConnMapOutputWithContext(ctx context.Context) AviatrixTransitCloudnConnMapOutput {
	return o
}

func (o AviatrixTransitCloudnConnMapOutput) MapIndex(k pulumi.StringInput) AviatrixTransitCloudnConnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixTransitCloudnConn {
		return vs[0].(map[string]*AviatrixTransitCloudnConn)[vs[1].(string)]
	}).(AviatrixTransitCloudnConnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixTransitCloudnConnInput)(nil)).Elem(), &AviatrixTransitCloudnConn{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixTransitCloudnConnArrayInput)(nil)).Elem(), AviatrixTransitCloudnConnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixTransitCloudnConnMapInput)(nil)).Elem(), AviatrixTransitCloudnConnMap{})
	pulumi.RegisterOutputType(AviatrixTransitCloudnConnOutput{})
	pulumi.RegisterOutputType(AviatrixTransitCloudnConnArrayOutput{})
	pulumi.RegisterOutputType(AviatrixTransitCloudnConnMapOutput{})
}
