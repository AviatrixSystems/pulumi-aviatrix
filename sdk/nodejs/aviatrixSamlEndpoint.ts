// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aviatrix from "@astipkovits/aviatrix";
 * import * as fs from "fs";
 *
 * // Create an Aviatrix AWS SAML Endpoint
 * const testSamlEndpoint = new aviatrix.AviatrixSamlEndpoint("testSamlEndpoint", {
 *     endpointName: "saml-test",
 *     idpMetadataType: "Text",
 *     idpMetadata: fs.readFileSync("idp_metadata.xml"),
 * });
 * ```
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aviatrix from "@pulumi/aviatrix";
 *
 * // Create an Aviatrix AWS SAML Endpoint using Metadata UDL
 * const testSamlEndpoint = new aviatrix.AviatrixSamlEndpoint("test_saml_endpoint", {
 *     endpointName: "saml-test",
 *     idpMetadataType: "URL",
 *     idpMetadataUrl: "https://dev-xyzz.okta.com/app/asdfasdfwfwf/sso/saml/metadata",
 * });
 * ```
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aviatrix from "@pulumi/aviatrix";
 *
 * // Create an Aviatrix AWS SAML Endpoint for Controller Login
 * const testSamlEndpoint = new aviatrix.AviatrixSamlEndpoint("test_saml_endpoint", {
 *     accessSetBy: "controller",
 *     controllerLogin: true,
 *     endpointName: "saml-test",
 *     idpMetadata: var_idp_metadata,
 *     idpMetadataType: "Text",
 *     rbacGroups: [
 *         "admin",
 *         "read_only",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * **saml_endpoint** can be imported using the SAML `endpoint_name`, e.g.
 *
 * ```sh
 *  $ pulumi import aviatrix:index/aviatrixSamlEndpoint:AviatrixSamlEndpoint test saml-test
 * ```
 */
export class AviatrixSamlEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing AviatrixSamlEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AviatrixSamlEndpointState, opts?: pulumi.CustomResourceOptions): AviatrixSamlEndpoint {
        return new AviatrixSamlEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/aviatrixSamlEndpoint:AviatrixSamlEndpoint';

    /**
     * Returns true if the given object is an instance of AviatrixSamlEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AviatrixSamlEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AviatrixSamlEndpoint.__pulumiType;
    }

    /**
     * Access type. Valid values: "controller", "profileAttribute". Default value: "controller".
     */
    public readonly accessSetBy!: pulumi.Output<string | undefined>;
    /**
     * Valid values: true, false. Default value: false. Set true for creating a saml endpoint for controller login.
     */
    public readonly controllerLogin!: pulumi.Output<boolean | undefined>;
    /**
     * Custom Entity ID. Required to be non-empty for 'Custom' Entity ID type, empty for 'Hostname' Entity ID type.
     */
    public readonly customEntityId!: pulumi.Output<string | undefined>;
    /**
     * Custom SAML Request Template in string.
     */
    public readonly customSamlRequestTemplate!: pulumi.Output<string | undefined>;
    /**
     * The SAML endpoint name.
     */
    public readonly endpointName!: pulumi.Output<string>;
    /**
     * The IDP Metadata from SAML provider. Required if `idpMetadataType` is "Text" and should be unset if type is "URL". Normally the metadata is in XML format which may contain special characters. Best practice is to use the file function to read from a local Metadata XML file.
     */
    public readonly idpMetadata!: pulumi.Output<string | undefined>;
    /**
     * The IDP Metadata type. Can be either "Text" or "URL".
     */
    public readonly idpMetadataType!: pulumi.Output<string>;
    /**
     * The IDP Metadata URL from SAML provider. Required if `idpMetadataType` is "URL" and should be unset if type is "Text".
     */
    public readonly idpMetadataUrl!: pulumi.Output<string | undefined>;
    /**
     * List of rbac groups. Required for controller login and "accessSetBy" of "controller".
     */
    public readonly rbacGroups!: pulumi.Output<string[] | undefined>;
    /**
     * Whether to sign SAML AuthnRequests
     */
    public readonly signAuthnRequests!: pulumi.Output<boolean | undefined>;

    /**
     * Create a AviatrixSamlEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AviatrixSamlEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AviatrixSamlEndpointArgs | AviatrixSamlEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AviatrixSamlEndpointState | undefined;
            resourceInputs["accessSetBy"] = state ? state.accessSetBy : undefined;
            resourceInputs["controllerLogin"] = state ? state.controllerLogin : undefined;
            resourceInputs["customEntityId"] = state ? state.customEntityId : undefined;
            resourceInputs["customSamlRequestTemplate"] = state ? state.customSamlRequestTemplate : undefined;
            resourceInputs["endpointName"] = state ? state.endpointName : undefined;
            resourceInputs["idpMetadata"] = state ? state.idpMetadata : undefined;
            resourceInputs["idpMetadataType"] = state ? state.idpMetadataType : undefined;
            resourceInputs["idpMetadataUrl"] = state ? state.idpMetadataUrl : undefined;
            resourceInputs["rbacGroups"] = state ? state.rbacGroups : undefined;
            resourceInputs["signAuthnRequests"] = state ? state.signAuthnRequests : undefined;
        } else {
            const args = argsOrState as AviatrixSamlEndpointArgs | undefined;
            if ((!args || args.endpointName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointName'");
            }
            if ((!args || args.idpMetadataType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idpMetadataType'");
            }
            resourceInputs["accessSetBy"] = args ? args.accessSetBy : undefined;
            resourceInputs["controllerLogin"] = args ? args.controllerLogin : undefined;
            resourceInputs["customEntityId"] = args ? args.customEntityId : undefined;
            resourceInputs["customSamlRequestTemplate"] = args ? args.customSamlRequestTemplate : undefined;
            resourceInputs["endpointName"] = args ? args.endpointName : undefined;
            resourceInputs["idpMetadata"] = args ? args.idpMetadata : undefined;
            resourceInputs["idpMetadataType"] = args ? args.idpMetadataType : undefined;
            resourceInputs["idpMetadataUrl"] = args ? args.idpMetadataUrl : undefined;
            resourceInputs["rbacGroups"] = args ? args.rbacGroups : undefined;
            resourceInputs["signAuthnRequests"] = args ? args.signAuthnRequests : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AviatrixSamlEndpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AviatrixSamlEndpoint resources.
 */
export interface AviatrixSamlEndpointState {
    /**
     * Access type. Valid values: "controller", "profileAttribute". Default value: "controller".
     */
    accessSetBy?: pulumi.Input<string>;
    /**
     * Valid values: true, false. Default value: false. Set true for creating a saml endpoint for controller login.
     */
    controllerLogin?: pulumi.Input<boolean>;
    /**
     * Custom Entity ID. Required to be non-empty for 'Custom' Entity ID type, empty for 'Hostname' Entity ID type.
     */
    customEntityId?: pulumi.Input<string>;
    /**
     * Custom SAML Request Template in string.
     */
    customSamlRequestTemplate?: pulumi.Input<string>;
    /**
     * The SAML endpoint name.
     */
    endpointName?: pulumi.Input<string>;
    /**
     * The IDP Metadata from SAML provider. Required if `idpMetadataType` is "Text" and should be unset if type is "URL". Normally the metadata is in XML format which may contain special characters. Best practice is to use the file function to read from a local Metadata XML file.
     */
    idpMetadata?: pulumi.Input<string>;
    /**
     * The IDP Metadata type. Can be either "Text" or "URL".
     */
    idpMetadataType?: pulumi.Input<string>;
    /**
     * The IDP Metadata URL from SAML provider. Required if `idpMetadataType` is "URL" and should be unset if type is "Text".
     */
    idpMetadataUrl?: pulumi.Input<string>;
    /**
     * List of rbac groups. Required for controller login and "accessSetBy" of "controller".
     */
    rbacGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to sign SAML AuthnRequests
     */
    signAuthnRequests?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AviatrixSamlEndpoint resource.
 */
export interface AviatrixSamlEndpointArgs {
    /**
     * Access type. Valid values: "controller", "profileAttribute". Default value: "controller".
     */
    accessSetBy?: pulumi.Input<string>;
    /**
     * Valid values: true, false. Default value: false. Set true for creating a saml endpoint for controller login.
     */
    controllerLogin?: pulumi.Input<boolean>;
    /**
     * Custom Entity ID. Required to be non-empty for 'Custom' Entity ID type, empty for 'Hostname' Entity ID type.
     */
    customEntityId?: pulumi.Input<string>;
    /**
     * Custom SAML Request Template in string.
     */
    customSamlRequestTemplate?: pulumi.Input<string>;
    /**
     * The SAML endpoint name.
     */
    endpointName: pulumi.Input<string>;
    /**
     * The IDP Metadata from SAML provider. Required if `idpMetadataType` is "Text" and should be unset if type is "URL". Normally the metadata is in XML format which may contain special characters. Best practice is to use the file function to read from a local Metadata XML file.
     */
    idpMetadata?: pulumi.Input<string>;
    /**
     * The IDP Metadata type. Can be either "Text" or "URL".
     */
    idpMetadataType: pulumi.Input<string>;
    /**
     * The IDP Metadata URL from SAML provider. Required if `idpMetadataType` is "URL" and should be unset if type is "Text".
     */
    idpMetadataUrl?: pulumi.Input<string>;
    /**
     * List of rbac groups. Required for controller login and "accessSetBy" of "controller".
     */
    rbacGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to sign SAML AuthnRequests
     */
    signAuthnRequests?: pulumi.Input<boolean>;
}
