// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// **gateway_dnat** can be imported using the `gw_name`, e.g.
//
// ```sh
//
//	$ pulumi import aviatrix:index/aviatrixGatewayDnat:AviatrixGatewayDnat test gw_name
//
// ```
type AviatrixGatewayDnat struct {
	pulumi.CustomResourceState

	// Computed attribute to store the previous connection policy.
	ConnectionPolicies AviatrixGatewayDnatConnectionPolicyArrayOutput `pulumi:"connectionPolicies"`
	// Policy rule applied for enabling Destination NAT (DNAT), which allows you to change the destination to a virtual address range. Currently only supports AWS(1) and Azure(8).
	DnatPolicies AviatrixGatewayDnatDnatPolicyArrayOutput `pulumi:"dnatPolicies"`
	// Name of the Aviatrix gateway the custom DNAT will be configured for.
	GwName pulumi.StringOutput `pulumi:"gwName"`
	// Computed attribute to store the previous interface policy.
	InterfacePolicies AviatrixGatewayDnatInterfacePolicyArrayOutput `pulumi:"interfacePolicies"`
	// Sync the policies to the HA gateway. Valid values: true, false. Default: true.
	SyncToHa pulumi.BoolPtrOutput `pulumi:"syncToHa"`
}

// NewAviatrixGatewayDnat registers a new resource with the given unique name, arguments, and options.
func NewAviatrixGatewayDnat(ctx *pulumi.Context,
	name string, args *AviatrixGatewayDnatArgs, opts ...pulumi.ResourceOption) (*AviatrixGatewayDnat, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DnatPolicies == nil {
		return nil, errors.New("invalid value for required argument 'DnatPolicies'")
	}
	if args.GwName == nil {
		return nil, errors.New("invalid value for required argument 'GwName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixGatewayDnat
	err := ctx.RegisterResource("aviatrix:index/aviatrixGatewayDnat:AviatrixGatewayDnat", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixGatewayDnat gets an existing AviatrixGatewayDnat resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixGatewayDnat(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixGatewayDnatState, opts ...pulumi.ResourceOption) (*AviatrixGatewayDnat, error) {
	var resource AviatrixGatewayDnat
	err := ctx.ReadResource("aviatrix:index/aviatrixGatewayDnat:AviatrixGatewayDnat", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixGatewayDnat resources.
type aviatrixGatewayDnatState struct {
	// Computed attribute to store the previous connection policy.
	ConnectionPolicies []AviatrixGatewayDnatConnectionPolicy `pulumi:"connectionPolicies"`
	// Policy rule applied for enabling Destination NAT (DNAT), which allows you to change the destination to a virtual address range. Currently only supports AWS(1) and Azure(8).
	DnatPolicies []AviatrixGatewayDnatDnatPolicy `pulumi:"dnatPolicies"`
	// Name of the Aviatrix gateway the custom DNAT will be configured for.
	GwName *string `pulumi:"gwName"`
	// Computed attribute to store the previous interface policy.
	InterfacePolicies []AviatrixGatewayDnatInterfacePolicy `pulumi:"interfacePolicies"`
	// Sync the policies to the HA gateway. Valid values: true, false. Default: true.
	SyncToHa *bool `pulumi:"syncToHa"`
}

type AviatrixGatewayDnatState struct {
	// Computed attribute to store the previous connection policy.
	ConnectionPolicies AviatrixGatewayDnatConnectionPolicyArrayInput
	// Policy rule applied for enabling Destination NAT (DNAT), which allows you to change the destination to a virtual address range. Currently only supports AWS(1) and Azure(8).
	DnatPolicies AviatrixGatewayDnatDnatPolicyArrayInput
	// Name of the Aviatrix gateway the custom DNAT will be configured for.
	GwName pulumi.StringPtrInput
	// Computed attribute to store the previous interface policy.
	InterfacePolicies AviatrixGatewayDnatInterfacePolicyArrayInput
	// Sync the policies to the HA gateway. Valid values: true, false. Default: true.
	SyncToHa pulumi.BoolPtrInput
}

func (AviatrixGatewayDnatState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixGatewayDnatState)(nil)).Elem()
}

type aviatrixGatewayDnatArgs struct {
	// Policy rule applied for enabling Destination NAT (DNAT), which allows you to change the destination to a virtual address range. Currently only supports AWS(1) and Azure(8).
	DnatPolicies []AviatrixGatewayDnatDnatPolicy `pulumi:"dnatPolicies"`
	// Name of the Aviatrix gateway the custom DNAT will be configured for.
	GwName string `pulumi:"gwName"`
	// Sync the policies to the HA gateway. Valid values: true, false. Default: true.
	SyncToHa *bool `pulumi:"syncToHa"`
}

// The set of arguments for constructing a AviatrixGatewayDnat resource.
type AviatrixGatewayDnatArgs struct {
	// Policy rule applied for enabling Destination NAT (DNAT), which allows you to change the destination to a virtual address range. Currently only supports AWS(1) and Azure(8).
	DnatPolicies AviatrixGatewayDnatDnatPolicyArrayInput
	// Name of the Aviatrix gateway the custom DNAT will be configured for.
	GwName pulumi.StringInput
	// Sync the policies to the HA gateway. Valid values: true, false. Default: true.
	SyncToHa pulumi.BoolPtrInput
}

func (AviatrixGatewayDnatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixGatewayDnatArgs)(nil)).Elem()
}

type AviatrixGatewayDnatInput interface {
	pulumi.Input

	ToAviatrixGatewayDnatOutput() AviatrixGatewayDnatOutput
	ToAviatrixGatewayDnatOutputWithContext(ctx context.Context) AviatrixGatewayDnatOutput
}

func (*AviatrixGatewayDnat) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixGatewayDnat)(nil)).Elem()
}

func (i *AviatrixGatewayDnat) ToAviatrixGatewayDnatOutput() AviatrixGatewayDnatOutput {
	return i.ToAviatrixGatewayDnatOutputWithContext(context.Background())
}

func (i *AviatrixGatewayDnat) ToAviatrixGatewayDnatOutputWithContext(ctx context.Context) AviatrixGatewayDnatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewayDnatOutput)
}

// AviatrixGatewayDnatArrayInput is an input type that accepts AviatrixGatewayDnatArray and AviatrixGatewayDnatArrayOutput values.
// You can construct a concrete instance of `AviatrixGatewayDnatArrayInput` via:
//
//	AviatrixGatewayDnatArray{ AviatrixGatewayDnatArgs{...} }
type AviatrixGatewayDnatArrayInput interface {
	pulumi.Input

	ToAviatrixGatewayDnatArrayOutput() AviatrixGatewayDnatArrayOutput
	ToAviatrixGatewayDnatArrayOutputWithContext(context.Context) AviatrixGatewayDnatArrayOutput
}

type AviatrixGatewayDnatArray []AviatrixGatewayDnatInput

func (AviatrixGatewayDnatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixGatewayDnat)(nil)).Elem()
}

func (i AviatrixGatewayDnatArray) ToAviatrixGatewayDnatArrayOutput() AviatrixGatewayDnatArrayOutput {
	return i.ToAviatrixGatewayDnatArrayOutputWithContext(context.Background())
}

func (i AviatrixGatewayDnatArray) ToAviatrixGatewayDnatArrayOutputWithContext(ctx context.Context) AviatrixGatewayDnatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewayDnatArrayOutput)
}

// AviatrixGatewayDnatMapInput is an input type that accepts AviatrixGatewayDnatMap and AviatrixGatewayDnatMapOutput values.
// You can construct a concrete instance of `AviatrixGatewayDnatMapInput` via:
//
//	AviatrixGatewayDnatMap{ "key": AviatrixGatewayDnatArgs{...} }
type AviatrixGatewayDnatMapInput interface {
	pulumi.Input

	ToAviatrixGatewayDnatMapOutput() AviatrixGatewayDnatMapOutput
	ToAviatrixGatewayDnatMapOutputWithContext(context.Context) AviatrixGatewayDnatMapOutput
}

type AviatrixGatewayDnatMap map[string]AviatrixGatewayDnatInput

func (AviatrixGatewayDnatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixGatewayDnat)(nil)).Elem()
}

func (i AviatrixGatewayDnatMap) ToAviatrixGatewayDnatMapOutput() AviatrixGatewayDnatMapOutput {
	return i.ToAviatrixGatewayDnatMapOutputWithContext(context.Background())
}

func (i AviatrixGatewayDnatMap) ToAviatrixGatewayDnatMapOutputWithContext(ctx context.Context) AviatrixGatewayDnatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewayDnatMapOutput)
}

type AviatrixGatewayDnatOutput struct{ *pulumi.OutputState }

func (AviatrixGatewayDnatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixGatewayDnat)(nil)).Elem()
}

func (o AviatrixGatewayDnatOutput) ToAviatrixGatewayDnatOutput() AviatrixGatewayDnatOutput {
	return o
}

func (o AviatrixGatewayDnatOutput) ToAviatrixGatewayDnatOutputWithContext(ctx context.Context) AviatrixGatewayDnatOutput {
	return o
}

// Computed attribute to store the previous connection policy.
func (o AviatrixGatewayDnatOutput) ConnectionPolicies() AviatrixGatewayDnatConnectionPolicyArrayOutput {
	return o.ApplyT(func(v *AviatrixGatewayDnat) AviatrixGatewayDnatConnectionPolicyArrayOutput {
		return v.ConnectionPolicies
	}).(AviatrixGatewayDnatConnectionPolicyArrayOutput)
}

// Policy rule applied for enabling Destination NAT (DNAT), which allows you to change the destination to a virtual address range. Currently only supports AWS(1) and Azure(8).
func (o AviatrixGatewayDnatOutput) DnatPolicies() AviatrixGatewayDnatDnatPolicyArrayOutput {
	return o.ApplyT(func(v *AviatrixGatewayDnat) AviatrixGatewayDnatDnatPolicyArrayOutput { return v.DnatPolicies }).(AviatrixGatewayDnatDnatPolicyArrayOutput)
}

// Name of the Aviatrix gateway the custom DNAT will be configured for.
func (o AviatrixGatewayDnatOutput) GwName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGatewayDnat) pulumi.StringOutput { return v.GwName }).(pulumi.StringOutput)
}

// Computed attribute to store the previous interface policy.
func (o AviatrixGatewayDnatOutput) InterfacePolicies() AviatrixGatewayDnatInterfacePolicyArrayOutput {
	return o.ApplyT(func(v *AviatrixGatewayDnat) AviatrixGatewayDnatInterfacePolicyArrayOutput { return v.InterfacePolicies }).(AviatrixGatewayDnatInterfacePolicyArrayOutput)
}

// Sync the policies to the HA gateway. Valid values: true, false. Default: true.
func (o AviatrixGatewayDnatOutput) SyncToHa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGatewayDnat) pulumi.BoolPtrOutput { return v.SyncToHa }).(pulumi.BoolPtrOutput)
}

type AviatrixGatewayDnatArrayOutput struct{ *pulumi.OutputState }

func (AviatrixGatewayDnatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixGatewayDnat)(nil)).Elem()
}

func (o AviatrixGatewayDnatArrayOutput) ToAviatrixGatewayDnatArrayOutput() AviatrixGatewayDnatArrayOutput {
	return o
}

func (o AviatrixGatewayDnatArrayOutput) ToAviatrixGatewayDnatArrayOutputWithContext(ctx context.Context) AviatrixGatewayDnatArrayOutput {
	return o
}

func (o AviatrixGatewayDnatArrayOutput) Index(i pulumi.IntInput) AviatrixGatewayDnatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixGatewayDnat {
		return vs[0].([]*AviatrixGatewayDnat)[vs[1].(int)]
	}).(AviatrixGatewayDnatOutput)
}

type AviatrixGatewayDnatMapOutput struct{ *pulumi.OutputState }

func (AviatrixGatewayDnatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixGatewayDnat)(nil)).Elem()
}

func (o AviatrixGatewayDnatMapOutput) ToAviatrixGatewayDnatMapOutput() AviatrixGatewayDnatMapOutput {
	return o
}

func (o AviatrixGatewayDnatMapOutput) ToAviatrixGatewayDnatMapOutputWithContext(ctx context.Context) AviatrixGatewayDnatMapOutput {
	return o
}

func (o AviatrixGatewayDnatMapOutput) MapIndex(k pulumi.StringInput) AviatrixGatewayDnatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixGatewayDnat {
		return vs[0].(map[string]*AviatrixGatewayDnat)[vs[1].(string)]
	}).(AviatrixGatewayDnatOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewayDnatInput)(nil)).Elem(), &AviatrixGatewayDnat{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewayDnatArrayInput)(nil)).Elem(), AviatrixGatewayDnatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewayDnatMapInput)(nil)).Elem(), AviatrixGatewayDnatMap{})
	pulumi.RegisterOutputType(AviatrixGatewayDnatOutput{})
	pulumi.RegisterOutputType(AviatrixGatewayDnatArrayOutput{})
	pulumi.RegisterOutputType(AviatrixGatewayDnatMapOutput{})
}
