// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixControllerCertDomainConfig struct {
	pulumi.CustomResourceState

	// Domain name that is used in FQDN for generating cert.
	CertDomain pulumi.StringPtrOutput `pulumi:"certDomain"`
}

// NewAviatrixControllerCertDomainConfig registers a new resource with the given unique name, arguments, and options.
func NewAviatrixControllerCertDomainConfig(ctx *pulumi.Context,
	name string, args *AviatrixControllerCertDomainConfigArgs, opts ...pulumi.ResourceOption) (*AviatrixControllerCertDomainConfig, error) {
	if args == nil {
		args = &AviatrixControllerCertDomainConfigArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixControllerCertDomainConfig
	err := ctx.RegisterResource("aviatrix:index/aviatrixControllerCertDomainConfig:AviatrixControllerCertDomainConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixControllerCertDomainConfig gets an existing AviatrixControllerCertDomainConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixControllerCertDomainConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixControllerCertDomainConfigState, opts ...pulumi.ResourceOption) (*AviatrixControllerCertDomainConfig, error) {
	var resource AviatrixControllerCertDomainConfig
	err := ctx.ReadResource("aviatrix:index/aviatrixControllerCertDomainConfig:AviatrixControllerCertDomainConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixControllerCertDomainConfig resources.
type aviatrixControllerCertDomainConfigState struct {
	// Domain name that is used in FQDN for generating cert.
	CertDomain *string `pulumi:"certDomain"`
}

type AviatrixControllerCertDomainConfigState struct {
	// Domain name that is used in FQDN for generating cert.
	CertDomain pulumi.StringPtrInput
}

func (AviatrixControllerCertDomainConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixControllerCertDomainConfigState)(nil)).Elem()
}

type aviatrixControllerCertDomainConfigArgs struct {
	// Domain name that is used in FQDN for generating cert.
	CertDomain *string `pulumi:"certDomain"`
}

// The set of arguments for constructing a AviatrixControllerCertDomainConfig resource.
type AviatrixControllerCertDomainConfigArgs struct {
	// Domain name that is used in FQDN for generating cert.
	CertDomain pulumi.StringPtrInput
}

func (AviatrixControllerCertDomainConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixControllerCertDomainConfigArgs)(nil)).Elem()
}

type AviatrixControllerCertDomainConfigInput interface {
	pulumi.Input

	ToAviatrixControllerCertDomainConfigOutput() AviatrixControllerCertDomainConfigOutput
	ToAviatrixControllerCertDomainConfigOutputWithContext(ctx context.Context) AviatrixControllerCertDomainConfigOutput
}

func (*AviatrixControllerCertDomainConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixControllerCertDomainConfig)(nil)).Elem()
}

func (i *AviatrixControllerCertDomainConfig) ToAviatrixControllerCertDomainConfigOutput() AviatrixControllerCertDomainConfigOutput {
	return i.ToAviatrixControllerCertDomainConfigOutputWithContext(context.Background())
}

func (i *AviatrixControllerCertDomainConfig) ToAviatrixControllerCertDomainConfigOutputWithContext(ctx context.Context) AviatrixControllerCertDomainConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixControllerCertDomainConfigOutput)
}

// AviatrixControllerCertDomainConfigArrayInput is an input type that accepts AviatrixControllerCertDomainConfigArray and AviatrixControllerCertDomainConfigArrayOutput values.
// You can construct a concrete instance of `AviatrixControllerCertDomainConfigArrayInput` via:
//
//	AviatrixControllerCertDomainConfigArray{ AviatrixControllerCertDomainConfigArgs{...} }
type AviatrixControllerCertDomainConfigArrayInput interface {
	pulumi.Input

	ToAviatrixControllerCertDomainConfigArrayOutput() AviatrixControllerCertDomainConfigArrayOutput
	ToAviatrixControllerCertDomainConfigArrayOutputWithContext(context.Context) AviatrixControllerCertDomainConfigArrayOutput
}

type AviatrixControllerCertDomainConfigArray []AviatrixControllerCertDomainConfigInput

func (AviatrixControllerCertDomainConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixControllerCertDomainConfig)(nil)).Elem()
}

func (i AviatrixControllerCertDomainConfigArray) ToAviatrixControllerCertDomainConfigArrayOutput() AviatrixControllerCertDomainConfigArrayOutput {
	return i.ToAviatrixControllerCertDomainConfigArrayOutputWithContext(context.Background())
}

func (i AviatrixControllerCertDomainConfigArray) ToAviatrixControllerCertDomainConfigArrayOutputWithContext(ctx context.Context) AviatrixControllerCertDomainConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixControllerCertDomainConfigArrayOutput)
}

// AviatrixControllerCertDomainConfigMapInput is an input type that accepts AviatrixControllerCertDomainConfigMap and AviatrixControllerCertDomainConfigMapOutput values.
// You can construct a concrete instance of `AviatrixControllerCertDomainConfigMapInput` via:
//
//	AviatrixControllerCertDomainConfigMap{ "key": AviatrixControllerCertDomainConfigArgs{...} }
type AviatrixControllerCertDomainConfigMapInput interface {
	pulumi.Input

	ToAviatrixControllerCertDomainConfigMapOutput() AviatrixControllerCertDomainConfigMapOutput
	ToAviatrixControllerCertDomainConfigMapOutputWithContext(context.Context) AviatrixControllerCertDomainConfigMapOutput
}

type AviatrixControllerCertDomainConfigMap map[string]AviatrixControllerCertDomainConfigInput

func (AviatrixControllerCertDomainConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixControllerCertDomainConfig)(nil)).Elem()
}

func (i AviatrixControllerCertDomainConfigMap) ToAviatrixControllerCertDomainConfigMapOutput() AviatrixControllerCertDomainConfigMapOutput {
	return i.ToAviatrixControllerCertDomainConfigMapOutputWithContext(context.Background())
}

func (i AviatrixControllerCertDomainConfigMap) ToAviatrixControllerCertDomainConfigMapOutputWithContext(ctx context.Context) AviatrixControllerCertDomainConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixControllerCertDomainConfigMapOutput)
}

type AviatrixControllerCertDomainConfigOutput struct{ *pulumi.OutputState }

func (AviatrixControllerCertDomainConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixControllerCertDomainConfig)(nil)).Elem()
}

func (o AviatrixControllerCertDomainConfigOutput) ToAviatrixControllerCertDomainConfigOutput() AviatrixControllerCertDomainConfigOutput {
	return o
}

func (o AviatrixControllerCertDomainConfigOutput) ToAviatrixControllerCertDomainConfigOutputWithContext(ctx context.Context) AviatrixControllerCertDomainConfigOutput {
	return o
}

// Domain name that is used in FQDN for generating cert.
func (o AviatrixControllerCertDomainConfigOutput) CertDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixControllerCertDomainConfig) pulumi.StringPtrOutput { return v.CertDomain }).(pulumi.StringPtrOutput)
}

type AviatrixControllerCertDomainConfigArrayOutput struct{ *pulumi.OutputState }

func (AviatrixControllerCertDomainConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixControllerCertDomainConfig)(nil)).Elem()
}

func (o AviatrixControllerCertDomainConfigArrayOutput) ToAviatrixControllerCertDomainConfigArrayOutput() AviatrixControllerCertDomainConfigArrayOutput {
	return o
}

func (o AviatrixControllerCertDomainConfigArrayOutput) ToAviatrixControllerCertDomainConfigArrayOutputWithContext(ctx context.Context) AviatrixControllerCertDomainConfigArrayOutput {
	return o
}

func (o AviatrixControllerCertDomainConfigArrayOutput) Index(i pulumi.IntInput) AviatrixControllerCertDomainConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixControllerCertDomainConfig {
		return vs[0].([]*AviatrixControllerCertDomainConfig)[vs[1].(int)]
	}).(AviatrixControllerCertDomainConfigOutput)
}

type AviatrixControllerCertDomainConfigMapOutput struct{ *pulumi.OutputState }

func (AviatrixControllerCertDomainConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixControllerCertDomainConfig)(nil)).Elem()
}

func (o AviatrixControllerCertDomainConfigMapOutput) ToAviatrixControllerCertDomainConfigMapOutput() AviatrixControllerCertDomainConfigMapOutput {
	return o
}

func (o AviatrixControllerCertDomainConfigMapOutput) ToAviatrixControllerCertDomainConfigMapOutputWithContext(ctx context.Context) AviatrixControllerCertDomainConfigMapOutput {
	return o
}

func (o AviatrixControllerCertDomainConfigMapOutput) MapIndex(k pulumi.StringInput) AviatrixControllerCertDomainConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixControllerCertDomainConfig {
		return vs[0].(map[string]*AviatrixControllerCertDomainConfig)[vs[1].(string)]
	}).(AviatrixControllerCertDomainConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixControllerCertDomainConfigInput)(nil)).Elem(), &AviatrixControllerCertDomainConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixControllerCertDomainConfigArrayInput)(nil)).Elem(), AviatrixControllerCertDomainConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixControllerCertDomainConfigMapInput)(nil)).Elem(), AviatrixControllerCertDomainConfigMap{})
	pulumi.RegisterOutputType(AviatrixControllerCertDomainConfigOutput{})
	pulumi.RegisterOutputType(AviatrixControllerCertDomainConfigArrayOutput{})
	pulumi.RegisterOutputType(AviatrixControllerCertDomainConfigMapOutput{})
}
