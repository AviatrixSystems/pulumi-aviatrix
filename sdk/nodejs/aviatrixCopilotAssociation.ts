// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The **aviatrix_copilot_association** resource allows management of controller CoPilot Association. This resource is available as of provider version R2.19+.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aviatrix from "@pulumi/aviatrix";
 *
 * // Create a CoPilot Association
 * const testCopilotAssociation = new aviatrix.AviatrixCopilotAssociation("test_copilot_association", {
 *     copilotAddress: "copilot.aviatrix.com",
 * });
 * ```
 *
 * ## Import
 *
 * **aviatrix_copilot_association** can be imported using controller IP, e.g. controller IP is 10.11.12.13
 *
 * ```sh
 *  $ pulumi import aviatrix:index/aviatrixCopilotAssociation:AviatrixCopilotAssociation test_copilot_association 10-11-12-13
 * ```
 */
export class AviatrixCopilotAssociation extends pulumi.CustomResource {
    /**
     * Get an existing AviatrixCopilotAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AviatrixCopilotAssociationState, opts?: pulumi.CustomResourceOptions): AviatrixCopilotAssociation {
        return new AviatrixCopilotAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/aviatrixCopilotAssociation:AviatrixCopilotAssociation';

    /**
     * Returns true if the given object is an instance of AviatrixCopilotAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AviatrixCopilotAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AviatrixCopilotAssociation.__pulumiType;
    }

    /**
     * CoPilot instance IP Address or Hostname.
     */
    public readonly copilotAddress!: pulumi.Output<string>;

    /**
     * Create a AviatrixCopilotAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AviatrixCopilotAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AviatrixCopilotAssociationArgs | AviatrixCopilotAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AviatrixCopilotAssociationState | undefined;
            resourceInputs["copilotAddress"] = state ? state.copilotAddress : undefined;
        } else {
            const args = argsOrState as AviatrixCopilotAssociationArgs | undefined;
            if ((!args || args.copilotAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'copilotAddress'");
            }
            resourceInputs["copilotAddress"] = args ? args.copilotAddress : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AviatrixCopilotAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AviatrixCopilotAssociation resources.
 */
export interface AviatrixCopilotAssociationState {
    /**
     * CoPilot instance IP Address or Hostname.
     */
    copilotAddress?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AviatrixCopilotAssociation resource.
 */
export interface AviatrixCopilotAssociationArgs {
    /**
     * CoPilot instance IP Address or Hostname.
     */
    copilotAddress: pulumi.Input<string>;
}
