// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * **site2cloud** can be imported using the `connection_name` and `vpc_id`, e.g.
 *
 * ```sh
 *  $ pulumi import aviatrix:index/aviatrixSite2Cloud:AviatrixSite2Cloud test connection_name~vpc_id
 * ```
 */
export class AviatrixSite2Cloud extends pulumi.CustomResource {
    /**
     * Get an existing AviatrixSite2Cloud resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AviatrixSite2CloudState, opts?: pulumi.CustomResourceOptions): AviatrixSite2Cloud {
        return new AviatrixSite2Cloud(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/aviatrixSite2Cloud:AviatrixSite2Cloud';

    /**
     * Returns true if the given object is an instance of AviatrixSite2Cloud.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AviatrixSite2Cloud {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AviatrixSite2Cloud.__pulumiType;
    }

    /**
     * Authentication Type. Valid values: 'PSK' and 'Cert'. Default value: 'PSK'.
     */
    public readonly authType!: pulumi.Output<string | undefined>;
    /**
     * Backup gateway name. **NOTE: Please see notes here regarding HA requirements.**
     */
    public readonly backupGatewayName!: pulumi.Output<string | undefined>;
    /**
     * Backup local tunnel IP address. Only valid when HA enabled route based connection. Available as of provider version R2.19+.
     */
    public readonly backupLocalTunnelIp!: pulumi.Output<string | undefined>;
    /**
     * Backup Pre-Shared Key.
     */
    public readonly backupPreSharedKey!: pulumi.Output<string | undefined>;
    /**
     * Backup Remote Gateway IP. **NOTE: Please see notes here regarding HA requirements.**
     */
    public readonly backupRemoteGatewayIp!: pulumi.Output<string>;
    /**
     * Latitude of backup remote gateway. Does not support refresh.
     */
    public readonly backupRemoteGatewayLatitude!: pulumi.Output<number | undefined>;
    /**
     * Longitude of backup remote gateway. Does not support refresh.
     */
    public readonly backupRemoteGatewayLongitude!: pulumi.Output<number | undefined>;
    /**
     * Backup remote identifier. Required for Cert based authentication type with HA enabled. Example: "gw-10-10-0-116".
     */
    public readonly backupRemoteIdentifier!: pulumi.Output<string | undefined>;
    /**
     * Backup remote tunnel IP address. Only valid when HA enabled route based connection. Available as of provider version R2.19+.
     */
    public readonly backupRemoteTunnelIp!: pulumi.Output<string | undefined>;
    /**
     * Name of Remote CA Certificate Tag for creating Site2Cloud tunnels. Required for Cert based authentication type.
     */
    public readonly caCertTagName!: pulumi.Output<string | undefined>;
    /**
     * Site2Cloud connection name.
     */
    public readonly connectionName!: pulumi.Output<string>;
    /**
     * Connection type. Valid Values: "mapped", "unmapped".
     */
    public readonly connectionType!: pulumi.Output<string>;
    /**
     * Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption. Valid values: true, false. **NOTE: Please see notes here for more information.**
     */
    public readonly customAlgorithms!: pulumi.Output<boolean | undefined>;
    /**
     * Enable custom mapped connection. Default value: false. Valid values: true/false. Available in provider version R2.17.1+.
     */
    public readonly customMapped!: pulumi.Output<boolean | undefined>;
    /**
     * Enable/disable active active HA for an existing site2cloud connection. Valid values: true, false. Default value: false.
     */
    public readonly enableActiveActive!: pulumi.Output<boolean | undefined>;
    /**
     * Enable/disable Deed Peer Detection for an existing site2cloud connection. Default value: true. **NOTE: Please see notes here in regards to any deltas found in your state with the addition of this argument in R1.9**
     */
    public readonly enableDeadPeerDetection!: pulumi.Output<boolean | undefined>;
    /**
     * Enable Event Triggered HA. Default value: false. Valid values: true or false. Available as of provider version R2.19+.
     */
    public readonly enableEventTriggeredHa!: pulumi.Output<boolean | undefined>;
    /**
     * Switch to enable IKEv2. Valid values: true, false. Default value: false.
     */
    public readonly enableIkev2!: pulumi.Output<boolean | undefined>;
    /**
     * Enable single IP HA feature. Available as of provider version 2.19+.
     */
    public readonly enableSingleIpHa!: pulumi.Output<boolean | undefined>;
    /**
     * Enable spoke gateway with mapped site2cloud configurations to forward traffic from site2cloud connection to Aviatrix Transit Gateway. Default value: false. Valid values: true or false. Available in provider version 2.17.2+.
     */
    public readonly forwardTrafficToTransit!: pulumi.Output<boolean | undefined>;
    /**
     * Specify whether or not to enable HA. Valid Values: true, false. **NOTE: Please see notes here regarding HA requirements.**
     */
    public readonly haEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * List of Local Initiated Traffic Destination Real CIDRs.
     */
    public readonly localDestinationRealCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * List of Local Initiated Traffic Destination Virtual CIDRs.
     */
    public readonly localDestinationVirtualCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * List of Local Initiated Traffic Source Real CIDRs.
     */
    public readonly localSourceRealCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * List of Local Initiated Traffic Source Virtual CIDRs.
     */
    public readonly localSourceVirtualCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * Local subnet CIDR. **Required for connection type "mapped", except for `customMapped` connection.**
     */
    public readonly localSubnetCidr!: pulumi.Output<string>;
    /**
     * Local subnet CIDR (Virtual). **Required for connection type "mapped", except for `customMapped` connection.**
     */
    public readonly localSubnetVirtual!: pulumi.Output<string | undefined>;
    /**
     * Local tunnel IP address. Only valid for route based connection. Available as of provider version R2.19+.
     */
    public readonly localTunnelIp!: pulumi.Output<string | undefined>;
    /**
     * Phase one Authentication. Valid values: "SHA-1", "SHA-256", "SHA-384" and "SHA-512". Default value: "SHA-256".
     */
    public readonly phase1Authentication!: pulumi.Output<string | undefined>;
    /**
     * Phase one DH Groups. Valid values: "1", "2", "5", "14", "15", "16", "17", "18", "19", "20" and "21". Default value: "14".
     */
    public readonly phase1DhGroups!: pulumi.Output<string | undefined>;
    /**
     * Phase one Encryption. Valid values: "3DES", "AES-128-CBC", "AES-192-CBC", "AES-256-CBC", "AES-128-GCM-64", "AES-128-GCM-96", "AES-128-GCM-128", "AES-256-GCM-64", "AES-256-GCM-96", and "AES-256-GCM-128". Default value: "AES-256-CBC".
     */
    public readonly phase1Encryption!: pulumi.Output<string | undefined>;
    /**
     * Phase 1 remote identifier of the IPsec tunnel. This can be configured to be either the public IP address or the private IP address of the peer terminating the IPsec tunnel. Example: ["1.2.3.4"] when HA is disabled, ["1.2.3.4", "5.6.7.8"] when HA is enabled. Available as of provider version R2.19+.
     */
    public readonly phase1RemoteIdentifiers!: pulumi.Output<string[] | undefined>;
    /**
     * Phase two Authentication. Valid values: "NO-AUTH", "HMAC-SHA-1", "HMAC-SHA-256", "HMAC-SHA-384" and "HMAC-SHA-512". Default value: "HMAC-SHA-256".
     */
    public readonly phase2Authentication!: pulumi.Output<string | undefined>;
    /**
     * Phase two DH Groups. Valid values: "1", "2", "5", "14", "15", "16", "17", "18", "19", "20" and "21". Default value: "14".
     */
    public readonly phase2DhGroups!: pulumi.Output<string | undefined>;
    /**
     * Phase two Encryption. Valid values: "3DES", "AES-128-CBC", "AES-192-CBC", "AES-256-CBC", "AES-128-GCM-64", "AES-128-GCM-96", "AES-128-GCM-128", "AES-256-GCM-64", "AES-256-GCM-96", "AES-256-GCM-128" and "NULL-ENCR". Default value: "AES-256-CBC".
     */
    public readonly phase2Encryption!: pulumi.Output<string | undefined>;
    /**
     * Pre-Shared Key.
     */
    public readonly preSharedKey!: pulumi.Output<string | undefined>;
    /**
     * Primary cloud gateway name.
     */
    public readonly primaryCloudGatewayName!: pulumi.Output<string>;
    /**
     * Private route encryption switch. Valid values: true, false.
     */
    public readonly privateRouteEncryption!: pulumi.Output<boolean | undefined>;
    /**
     * List of  Remote Initiated Traffic Destination Real CIDRs.
     */
    public readonly remoteDestinationRealCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * List of Remote Initiated Traffic Destination Virtual CIDRs.
     */
    public readonly remoteDestinationVirtualCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * Remote gateway IP.
     */
    public readonly remoteGatewayIp!: pulumi.Output<string>;
    /**
     * Latitude of remote gateway. Does not support refresh.
     */
    public readonly remoteGatewayLatitude!: pulumi.Output<number | undefined>;
    /**
     * Longitude of remote gateway. Does not support refresh.
     */
    public readonly remoteGatewayLongitude!: pulumi.Output<number | undefined>;
    /**
     * Remote gateway type. Valid Values: "generic", "avx", "aws", "azure", "sonicwall", "oracle".
     */
    public readonly remoteGatewayType!: pulumi.Output<string>;
    /**
     * Remote identifier. Required for Cert based authentication type. Example: "gw-10-10-0-115".
     */
    public readonly remoteIdentifier!: pulumi.Output<string | undefined>;
    /**
     * List of Remote Initiated Traffic Source Real CIDRs.
     */
    public readonly remoteSourceRealCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * List of Remote Initiated Traffic Source Virtual CIDRs.
     */
    public readonly remoteSourceVirtualCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * Remote subnet CIDR. **Not required for customMapped connection.**
     */
    public readonly remoteSubnetCidr!: pulumi.Output<string | undefined>;
    /**
     * Remote subnet CIDR (Virtual). **Required for connection type "mapped", except for `customMapped` connection.**
     */
    public readonly remoteSubnetVirtual!: pulumi.Output<string | undefined>;
    /**
     * Remote tunnel IP address. Only valid for route based connection. Available as of provider version R2.19+.
     */
    public readonly remoteTunnelIp!: pulumi.Output<string | undefined>;
    /**
     * Route tables to modify.
     */
    public readonly routeTableLists!: pulumi.Output<string[] | undefined>;
    /**
     * Specify ssl_server_pool. Default value: "192.168.44.0/24". **NOTE: Please see notes here for more information.**
     */
    public readonly sslServerPool!: pulumi.Output<string | undefined>;
    /**
     * Site2Cloud tunnel type. Valid Values: "policy", "route".
     */
    public readonly tunnelType!: pulumi.Output<string>;
    /**
     * VPC ID of the cloud gateway.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a AviatrixSite2Cloud resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AviatrixSite2CloudArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AviatrixSite2CloudArgs | AviatrixSite2CloudState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AviatrixSite2CloudState | undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["backupGatewayName"] = state ? state.backupGatewayName : undefined;
            resourceInputs["backupLocalTunnelIp"] = state ? state.backupLocalTunnelIp : undefined;
            resourceInputs["backupPreSharedKey"] = state ? state.backupPreSharedKey : undefined;
            resourceInputs["backupRemoteGatewayIp"] = state ? state.backupRemoteGatewayIp : undefined;
            resourceInputs["backupRemoteGatewayLatitude"] = state ? state.backupRemoteGatewayLatitude : undefined;
            resourceInputs["backupRemoteGatewayLongitude"] = state ? state.backupRemoteGatewayLongitude : undefined;
            resourceInputs["backupRemoteIdentifier"] = state ? state.backupRemoteIdentifier : undefined;
            resourceInputs["backupRemoteTunnelIp"] = state ? state.backupRemoteTunnelIp : undefined;
            resourceInputs["caCertTagName"] = state ? state.caCertTagName : undefined;
            resourceInputs["connectionName"] = state ? state.connectionName : undefined;
            resourceInputs["connectionType"] = state ? state.connectionType : undefined;
            resourceInputs["customAlgorithms"] = state ? state.customAlgorithms : undefined;
            resourceInputs["customMapped"] = state ? state.customMapped : undefined;
            resourceInputs["enableActiveActive"] = state ? state.enableActiveActive : undefined;
            resourceInputs["enableDeadPeerDetection"] = state ? state.enableDeadPeerDetection : undefined;
            resourceInputs["enableEventTriggeredHa"] = state ? state.enableEventTriggeredHa : undefined;
            resourceInputs["enableIkev2"] = state ? state.enableIkev2 : undefined;
            resourceInputs["enableSingleIpHa"] = state ? state.enableSingleIpHa : undefined;
            resourceInputs["forwardTrafficToTransit"] = state ? state.forwardTrafficToTransit : undefined;
            resourceInputs["haEnabled"] = state ? state.haEnabled : undefined;
            resourceInputs["localDestinationRealCidrs"] = state ? state.localDestinationRealCidrs : undefined;
            resourceInputs["localDestinationVirtualCidrs"] = state ? state.localDestinationVirtualCidrs : undefined;
            resourceInputs["localSourceRealCidrs"] = state ? state.localSourceRealCidrs : undefined;
            resourceInputs["localSourceVirtualCidrs"] = state ? state.localSourceVirtualCidrs : undefined;
            resourceInputs["localSubnetCidr"] = state ? state.localSubnetCidr : undefined;
            resourceInputs["localSubnetVirtual"] = state ? state.localSubnetVirtual : undefined;
            resourceInputs["localTunnelIp"] = state ? state.localTunnelIp : undefined;
            resourceInputs["phase1Authentication"] = state ? state.phase1Authentication : undefined;
            resourceInputs["phase1DhGroups"] = state ? state.phase1DhGroups : undefined;
            resourceInputs["phase1Encryption"] = state ? state.phase1Encryption : undefined;
            resourceInputs["phase1RemoteIdentifiers"] = state ? state.phase1RemoteIdentifiers : undefined;
            resourceInputs["phase2Authentication"] = state ? state.phase2Authentication : undefined;
            resourceInputs["phase2DhGroups"] = state ? state.phase2DhGroups : undefined;
            resourceInputs["phase2Encryption"] = state ? state.phase2Encryption : undefined;
            resourceInputs["preSharedKey"] = state ? state.preSharedKey : undefined;
            resourceInputs["primaryCloudGatewayName"] = state ? state.primaryCloudGatewayName : undefined;
            resourceInputs["privateRouteEncryption"] = state ? state.privateRouteEncryption : undefined;
            resourceInputs["remoteDestinationRealCidrs"] = state ? state.remoteDestinationRealCidrs : undefined;
            resourceInputs["remoteDestinationVirtualCidrs"] = state ? state.remoteDestinationVirtualCidrs : undefined;
            resourceInputs["remoteGatewayIp"] = state ? state.remoteGatewayIp : undefined;
            resourceInputs["remoteGatewayLatitude"] = state ? state.remoteGatewayLatitude : undefined;
            resourceInputs["remoteGatewayLongitude"] = state ? state.remoteGatewayLongitude : undefined;
            resourceInputs["remoteGatewayType"] = state ? state.remoteGatewayType : undefined;
            resourceInputs["remoteIdentifier"] = state ? state.remoteIdentifier : undefined;
            resourceInputs["remoteSourceRealCidrs"] = state ? state.remoteSourceRealCidrs : undefined;
            resourceInputs["remoteSourceVirtualCidrs"] = state ? state.remoteSourceVirtualCidrs : undefined;
            resourceInputs["remoteSubnetCidr"] = state ? state.remoteSubnetCidr : undefined;
            resourceInputs["remoteSubnetVirtual"] = state ? state.remoteSubnetVirtual : undefined;
            resourceInputs["remoteTunnelIp"] = state ? state.remoteTunnelIp : undefined;
            resourceInputs["routeTableLists"] = state ? state.routeTableLists : undefined;
            resourceInputs["sslServerPool"] = state ? state.sslServerPool : undefined;
            resourceInputs["tunnelType"] = state ? state.tunnelType : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as AviatrixSite2CloudArgs | undefined;
            if ((!args || args.connectionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionName'");
            }
            if ((!args || args.connectionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionType'");
            }
            if ((!args || args.primaryCloudGatewayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryCloudGatewayName'");
            }
            if ((!args || args.remoteGatewayIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteGatewayIp'");
            }
            if ((!args || args.remoteGatewayType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteGatewayType'");
            }
            if ((!args || args.tunnelType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnelType'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["backupGatewayName"] = args ? args.backupGatewayName : undefined;
            resourceInputs["backupLocalTunnelIp"] = args ? args.backupLocalTunnelIp : undefined;
            resourceInputs["backupPreSharedKey"] = args?.backupPreSharedKey ? pulumi.secret(args.backupPreSharedKey) : undefined;
            resourceInputs["backupRemoteGatewayIp"] = args ? args.backupRemoteGatewayIp : undefined;
            resourceInputs["backupRemoteGatewayLatitude"] = args ? args.backupRemoteGatewayLatitude : undefined;
            resourceInputs["backupRemoteGatewayLongitude"] = args ? args.backupRemoteGatewayLongitude : undefined;
            resourceInputs["backupRemoteIdentifier"] = args ? args.backupRemoteIdentifier : undefined;
            resourceInputs["backupRemoteTunnelIp"] = args ? args.backupRemoteTunnelIp : undefined;
            resourceInputs["caCertTagName"] = args ? args.caCertTagName : undefined;
            resourceInputs["connectionName"] = args ? args.connectionName : undefined;
            resourceInputs["connectionType"] = args ? args.connectionType : undefined;
            resourceInputs["customAlgorithms"] = args ? args.customAlgorithms : undefined;
            resourceInputs["customMapped"] = args ? args.customMapped : undefined;
            resourceInputs["enableActiveActive"] = args ? args.enableActiveActive : undefined;
            resourceInputs["enableDeadPeerDetection"] = args ? args.enableDeadPeerDetection : undefined;
            resourceInputs["enableEventTriggeredHa"] = args ? args.enableEventTriggeredHa : undefined;
            resourceInputs["enableIkev2"] = args ? args.enableIkev2 : undefined;
            resourceInputs["enableSingleIpHa"] = args ? args.enableSingleIpHa : undefined;
            resourceInputs["forwardTrafficToTransit"] = args ? args.forwardTrafficToTransit : undefined;
            resourceInputs["haEnabled"] = args ? args.haEnabled : undefined;
            resourceInputs["localDestinationRealCidrs"] = args ? args.localDestinationRealCidrs : undefined;
            resourceInputs["localDestinationVirtualCidrs"] = args ? args.localDestinationVirtualCidrs : undefined;
            resourceInputs["localSourceRealCidrs"] = args ? args.localSourceRealCidrs : undefined;
            resourceInputs["localSourceVirtualCidrs"] = args ? args.localSourceVirtualCidrs : undefined;
            resourceInputs["localSubnetCidr"] = args ? args.localSubnetCidr : undefined;
            resourceInputs["localSubnetVirtual"] = args ? args.localSubnetVirtual : undefined;
            resourceInputs["localTunnelIp"] = args ? args.localTunnelIp : undefined;
            resourceInputs["phase1Authentication"] = args ? args.phase1Authentication : undefined;
            resourceInputs["phase1DhGroups"] = args ? args.phase1DhGroups : undefined;
            resourceInputs["phase1Encryption"] = args ? args.phase1Encryption : undefined;
            resourceInputs["phase1RemoteIdentifiers"] = args ? args.phase1RemoteIdentifiers : undefined;
            resourceInputs["phase2Authentication"] = args ? args.phase2Authentication : undefined;
            resourceInputs["phase2DhGroups"] = args ? args.phase2DhGroups : undefined;
            resourceInputs["phase2Encryption"] = args ? args.phase2Encryption : undefined;
            resourceInputs["preSharedKey"] = args?.preSharedKey ? pulumi.secret(args.preSharedKey) : undefined;
            resourceInputs["primaryCloudGatewayName"] = args ? args.primaryCloudGatewayName : undefined;
            resourceInputs["privateRouteEncryption"] = args ? args.privateRouteEncryption : undefined;
            resourceInputs["remoteDestinationRealCidrs"] = args ? args.remoteDestinationRealCidrs : undefined;
            resourceInputs["remoteDestinationVirtualCidrs"] = args ? args.remoteDestinationVirtualCidrs : undefined;
            resourceInputs["remoteGatewayIp"] = args ? args.remoteGatewayIp : undefined;
            resourceInputs["remoteGatewayLatitude"] = args ? args.remoteGatewayLatitude : undefined;
            resourceInputs["remoteGatewayLongitude"] = args ? args.remoteGatewayLongitude : undefined;
            resourceInputs["remoteGatewayType"] = args ? args.remoteGatewayType : undefined;
            resourceInputs["remoteIdentifier"] = args ? args.remoteIdentifier : undefined;
            resourceInputs["remoteSourceRealCidrs"] = args ? args.remoteSourceRealCidrs : undefined;
            resourceInputs["remoteSourceVirtualCidrs"] = args ? args.remoteSourceVirtualCidrs : undefined;
            resourceInputs["remoteSubnetCidr"] = args ? args.remoteSubnetCidr : undefined;
            resourceInputs["remoteSubnetVirtual"] = args ? args.remoteSubnetVirtual : undefined;
            resourceInputs["remoteTunnelIp"] = args ? args.remoteTunnelIp : undefined;
            resourceInputs["routeTableLists"] = args ? args.routeTableLists : undefined;
            resourceInputs["sslServerPool"] = args ? args.sslServerPool : undefined;
            resourceInputs["tunnelType"] = args ? args.tunnelType : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["backupPreSharedKey", "preSharedKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AviatrixSite2Cloud.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AviatrixSite2Cloud resources.
 */
export interface AviatrixSite2CloudState {
    /**
     * Authentication Type. Valid values: 'PSK' and 'Cert'. Default value: 'PSK'.
     */
    authType?: pulumi.Input<string>;
    /**
     * Backup gateway name. **NOTE: Please see notes here regarding HA requirements.**
     */
    backupGatewayName?: pulumi.Input<string>;
    /**
     * Backup local tunnel IP address. Only valid when HA enabled route based connection. Available as of provider version R2.19+.
     */
    backupLocalTunnelIp?: pulumi.Input<string>;
    /**
     * Backup Pre-Shared Key.
     */
    backupPreSharedKey?: pulumi.Input<string>;
    /**
     * Backup Remote Gateway IP. **NOTE: Please see notes here regarding HA requirements.**
     */
    backupRemoteGatewayIp?: pulumi.Input<string>;
    /**
     * Latitude of backup remote gateway. Does not support refresh.
     */
    backupRemoteGatewayLatitude?: pulumi.Input<number>;
    /**
     * Longitude of backup remote gateway. Does not support refresh.
     */
    backupRemoteGatewayLongitude?: pulumi.Input<number>;
    /**
     * Backup remote identifier. Required for Cert based authentication type with HA enabled. Example: "gw-10-10-0-116".
     */
    backupRemoteIdentifier?: pulumi.Input<string>;
    /**
     * Backup remote tunnel IP address. Only valid when HA enabled route based connection. Available as of provider version R2.19+.
     */
    backupRemoteTunnelIp?: pulumi.Input<string>;
    /**
     * Name of Remote CA Certificate Tag for creating Site2Cloud tunnels. Required for Cert based authentication type.
     */
    caCertTagName?: pulumi.Input<string>;
    /**
     * Site2Cloud connection name.
     */
    connectionName?: pulumi.Input<string>;
    /**
     * Connection type. Valid Values: "mapped", "unmapped".
     */
    connectionType?: pulumi.Input<string>;
    /**
     * Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption. Valid values: true, false. **NOTE: Please see notes here for more information.**
     */
    customAlgorithms?: pulumi.Input<boolean>;
    /**
     * Enable custom mapped connection. Default value: false. Valid values: true/false. Available in provider version R2.17.1+.
     */
    customMapped?: pulumi.Input<boolean>;
    /**
     * Enable/disable active active HA for an existing site2cloud connection. Valid values: true, false. Default value: false.
     */
    enableActiveActive?: pulumi.Input<boolean>;
    /**
     * Enable/disable Deed Peer Detection for an existing site2cloud connection. Default value: true. **NOTE: Please see notes here in regards to any deltas found in your state with the addition of this argument in R1.9**
     */
    enableDeadPeerDetection?: pulumi.Input<boolean>;
    /**
     * Enable Event Triggered HA. Default value: false. Valid values: true or false. Available as of provider version R2.19+.
     */
    enableEventTriggeredHa?: pulumi.Input<boolean>;
    /**
     * Switch to enable IKEv2. Valid values: true, false. Default value: false.
     */
    enableIkev2?: pulumi.Input<boolean>;
    /**
     * Enable single IP HA feature. Available as of provider version 2.19+.
     */
    enableSingleIpHa?: pulumi.Input<boolean>;
    /**
     * Enable spoke gateway with mapped site2cloud configurations to forward traffic from site2cloud connection to Aviatrix Transit Gateway. Default value: false. Valid values: true or false. Available in provider version 2.17.2+.
     */
    forwardTrafficToTransit?: pulumi.Input<boolean>;
    /**
     * Specify whether or not to enable HA. Valid Values: true, false. **NOTE: Please see notes here regarding HA requirements.**
     */
    haEnabled?: pulumi.Input<boolean>;
    /**
     * List of Local Initiated Traffic Destination Real CIDRs.
     */
    localDestinationRealCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Local Initiated Traffic Destination Virtual CIDRs.
     */
    localDestinationVirtualCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Local Initiated Traffic Source Real CIDRs.
     */
    localSourceRealCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Local Initiated Traffic Source Virtual CIDRs.
     */
    localSourceVirtualCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Local subnet CIDR. **Required for connection type "mapped", except for `customMapped` connection.**
     */
    localSubnetCidr?: pulumi.Input<string>;
    /**
     * Local subnet CIDR (Virtual). **Required for connection type "mapped", except for `customMapped` connection.**
     */
    localSubnetVirtual?: pulumi.Input<string>;
    /**
     * Local tunnel IP address. Only valid for route based connection. Available as of provider version R2.19+.
     */
    localTunnelIp?: pulumi.Input<string>;
    /**
     * Phase one Authentication. Valid values: "SHA-1", "SHA-256", "SHA-384" and "SHA-512". Default value: "SHA-256".
     */
    phase1Authentication?: pulumi.Input<string>;
    /**
     * Phase one DH Groups. Valid values: "1", "2", "5", "14", "15", "16", "17", "18", "19", "20" and "21". Default value: "14".
     */
    phase1DhGroups?: pulumi.Input<string>;
    /**
     * Phase one Encryption. Valid values: "3DES", "AES-128-CBC", "AES-192-CBC", "AES-256-CBC", "AES-128-GCM-64", "AES-128-GCM-96", "AES-128-GCM-128", "AES-256-GCM-64", "AES-256-GCM-96", and "AES-256-GCM-128". Default value: "AES-256-CBC".
     */
    phase1Encryption?: pulumi.Input<string>;
    /**
     * Phase 1 remote identifier of the IPsec tunnel. This can be configured to be either the public IP address or the private IP address of the peer terminating the IPsec tunnel. Example: ["1.2.3.4"] when HA is disabled, ["1.2.3.4", "5.6.7.8"] when HA is enabled. Available as of provider version R2.19+.
     */
    phase1RemoteIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Phase two Authentication. Valid values: "NO-AUTH", "HMAC-SHA-1", "HMAC-SHA-256", "HMAC-SHA-384" and "HMAC-SHA-512". Default value: "HMAC-SHA-256".
     */
    phase2Authentication?: pulumi.Input<string>;
    /**
     * Phase two DH Groups. Valid values: "1", "2", "5", "14", "15", "16", "17", "18", "19", "20" and "21". Default value: "14".
     */
    phase2DhGroups?: pulumi.Input<string>;
    /**
     * Phase two Encryption. Valid values: "3DES", "AES-128-CBC", "AES-192-CBC", "AES-256-CBC", "AES-128-GCM-64", "AES-128-GCM-96", "AES-128-GCM-128", "AES-256-GCM-64", "AES-256-GCM-96", "AES-256-GCM-128" and "NULL-ENCR". Default value: "AES-256-CBC".
     */
    phase2Encryption?: pulumi.Input<string>;
    /**
     * Pre-Shared Key.
     */
    preSharedKey?: pulumi.Input<string>;
    /**
     * Primary cloud gateway name.
     */
    primaryCloudGatewayName?: pulumi.Input<string>;
    /**
     * Private route encryption switch. Valid values: true, false.
     */
    privateRouteEncryption?: pulumi.Input<boolean>;
    /**
     * List of  Remote Initiated Traffic Destination Real CIDRs.
     */
    remoteDestinationRealCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Remote Initiated Traffic Destination Virtual CIDRs.
     */
    remoteDestinationVirtualCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Remote gateway IP.
     */
    remoteGatewayIp?: pulumi.Input<string>;
    /**
     * Latitude of remote gateway. Does not support refresh.
     */
    remoteGatewayLatitude?: pulumi.Input<number>;
    /**
     * Longitude of remote gateway. Does not support refresh.
     */
    remoteGatewayLongitude?: pulumi.Input<number>;
    /**
     * Remote gateway type. Valid Values: "generic", "avx", "aws", "azure", "sonicwall", "oracle".
     */
    remoteGatewayType?: pulumi.Input<string>;
    /**
     * Remote identifier. Required for Cert based authentication type. Example: "gw-10-10-0-115".
     */
    remoteIdentifier?: pulumi.Input<string>;
    /**
     * List of Remote Initiated Traffic Source Real CIDRs.
     */
    remoteSourceRealCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Remote Initiated Traffic Source Virtual CIDRs.
     */
    remoteSourceVirtualCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Remote subnet CIDR. **Not required for customMapped connection.**
     */
    remoteSubnetCidr?: pulumi.Input<string>;
    /**
     * Remote subnet CIDR (Virtual). **Required for connection type "mapped", except for `customMapped` connection.**
     */
    remoteSubnetVirtual?: pulumi.Input<string>;
    /**
     * Remote tunnel IP address. Only valid for route based connection. Available as of provider version R2.19+.
     */
    remoteTunnelIp?: pulumi.Input<string>;
    /**
     * Route tables to modify.
     */
    routeTableLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify ssl_server_pool. Default value: "192.168.44.0/24". **NOTE: Please see notes here for more information.**
     */
    sslServerPool?: pulumi.Input<string>;
    /**
     * Site2Cloud tunnel type. Valid Values: "policy", "route".
     */
    tunnelType?: pulumi.Input<string>;
    /**
     * VPC ID of the cloud gateway.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AviatrixSite2Cloud resource.
 */
export interface AviatrixSite2CloudArgs {
    /**
     * Authentication Type. Valid values: 'PSK' and 'Cert'. Default value: 'PSK'.
     */
    authType?: pulumi.Input<string>;
    /**
     * Backup gateway name. **NOTE: Please see notes here regarding HA requirements.**
     */
    backupGatewayName?: pulumi.Input<string>;
    /**
     * Backup local tunnel IP address. Only valid when HA enabled route based connection. Available as of provider version R2.19+.
     */
    backupLocalTunnelIp?: pulumi.Input<string>;
    /**
     * Backup Pre-Shared Key.
     */
    backupPreSharedKey?: pulumi.Input<string>;
    /**
     * Backup Remote Gateway IP. **NOTE: Please see notes here regarding HA requirements.**
     */
    backupRemoteGatewayIp?: pulumi.Input<string>;
    /**
     * Latitude of backup remote gateway. Does not support refresh.
     */
    backupRemoteGatewayLatitude?: pulumi.Input<number>;
    /**
     * Longitude of backup remote gateway. Does not support refresh.
     */
    backupRemoteGatewayLongitude?: pulumi.Input<number>;
    /**
     * Backup remote identifier. Required for Cert based authentication type with HA enabled. Example: "gw-10-10-0-116".
     */
    backupRemoteIdentifier?: pulumi.Input<string>;
    /**
     * Backup remote tunnel IP address. Only valid when HA enabled route based connection. Available as of provider version R2.19+.
     */
    backupRemoteTunnelIp?: pulumi.Input<string>;
    /**
     * Name of Remote CA Certificate Tag for creating Site2Cloud tunnels. Required for Cert based authentication type.
     */
    caCertTagName?: pulumi.Input<string>;
    /**
     * Site2Cloud connection name.
     */
    connectionName: pulumi.Input<string>;
    /**
     * Connection type. Valid Values: "mapped", "unmapped".
     */
    connectionType: pulumi.Input<string>;
    /**
     * Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption. Valid values: true, false. **NOTE: Please see notes here for more information.**
     */
    customAlgorithms?: pulumi.Input<boolean>;
    /**
     * Enable custom mapped connection. Default value: false. Valid values: true/false. Available in provider version R2.17.1+.
     */
    customMapped?: pulumi.Input<boolean>;
    /**
     * Enable/disable active active HA for an existing site2cloud connection. Valid values: true, false. Default value: false.
     */
    enableActiveActive?: pulumi.Input<boolean>;
    /**
     * Enable/disable Deed Peer Detection for an existing site2cloud connection. Default value: true. **NOTE: Please see notes here in regards to any deltas found in your state with the addition of this argument in R1.9**
     */
    enableDeadPeerDetection?: pulumi.Input<boolean>;
    /**
     * Enable Event Triggered HA. Default value: false. Valid values: true or false. Available as of provider version R2.19+.
     */
    enableEventTriggeredHa?: pulumi.Input<boolean>;
    /**
     * Switch to enable IKEv2. Valid values: true, false. Default value: false.
     */
    enableIkev2?: pulumi.Input<boolean>;
    /**
     * Enable single IP HA feature. Available as of provider version 2.19+.
     */
    enableSingleIpHa?: pulumi.Input<boolean>;
    /**
     * Enable spoke gateway with mapped site2cloud configurations to forward traffic from site2cloud connection to Aviatrix Transit Gateway. Default value: false. Valid values: true or false. Available in provider version 2.17.2+.
     */
    forwardTrafficToTransit?: pulumi.Input<boolean>;
    /**
     * Specify whether or not to enable HA. Valid Values: true, false. **NOTE: Please see notes here regarding HA requirements.**
     */
    haEnabled?: pulumi.Input<boolean>;
    /**
     * List of Local Initiated Traffic Destination Real CIDRs.
     */
    localDestinationRealCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Local Initiated Traffic Destination Virtual CIDRs.
     */
    localDestinationVirtualCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Local Initiated Traffic Source Real CIDRs.
     */
    localSourceRealCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Local Initiated Traffic Source Virtual CIDRs.
     */
    localSourceVirtualCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Local subnet CIDR. **Required for connection type "mapped", except for `customMapped` connection.**
     */
    localSubnetCidr?: pulumi.Input<string>;
    /**
     * Local subnet CIDR (Virtual). **Required for connection type "mapped", except for `customMapped` connection.**
     */
    localSubnetVirtual?: pulumi.Input<string>;
    /**
     * Local tunnel IP address. Only valid for route based connection. Available as of provider version R2.19+.
     */
    localTunnelIp?: pulumi.Input<string>;
    /**
     * Phase one Authentication. Valid values: "SHA-1", "SHA-256", "SHA-384" and "SHA-512". Default value: "SHA-256".
     */
    phase1Authentication?: pulumi.Input<string>;
    /**
     * Phase one DH Groups. Valid values: "1", "2", "5", "14", "15", "16", "17", "18", "19", "20" and "21". Default value: "14".
     */
    phase1DhGroups?: pulumi.Input<string>;
    /**
     * Phase one Encryption. Valid values: "3DES", "AES-128-CBC", "AES-192-CBC", "AES-256-CBC", "AES-128-GCM-64", "AES-128-GCM-96", "AES-128-GCM-128", "AES-256-GCM-64", "AES-256-GCM-96", and "AES-256-GCM-128". Default value: "AES-256-CBC".
     */
    phase1Encryption?: pulumi.Input<string>;
    /**
     * Phase 1 remote identifier of the IPsec tunnel. This can be configured to be either the public IP address or the private IP address of the peer terminating the IPsec tunnel. Example: ["1.2.3.4"] when HA is disabled, ["1.2.3.4", "5.6.7.8"] when HA is enabled. Available as of provider version R2.19+.
     */
    phase1RemoteIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Phase two Authentication. Valid values: "NO-AUTH", "HMAC-SHA-1", "HMAC-SHA-256", "HMAC-SHA-384" and "HMAC-SHA-512". Default value: "HMAC-SHA-256".
     */
    phase2Authentication?: pulumi.Input<string>;
    /**
     * Phase two DH Groups. Valid values: "1", "2", "5", "14", "15", "16", "17", "18", "19", "20" and "21". Default value: "14".
     */
    phase2DhGroups?: pulumi.Input<string>;
    /**
     * Phase two Encryption. Valid values: "3DES", "AES-128-CBC", "AES-192-CBC", "AES-256-CBC", "AES-128-GCM-64", "AES-128-GCM-96", "AES-128-GCM-128", "AES-256-GCM-64", "AES-256-GCM-96", "AES-256-GCM-128" and "NULL-ENCR". Default value: "AES-256-CBC".
     */
    phase2Encryption?: pulumi.Input<string>;
    /**
     * Pre-Shared Key.
     */
    preSharedKey?: pulumi.Input<string>;
    /**
     * Primary cloud gateway name.
     */
    primaryCloudGatewayName: pulumi.Input<string>;
    /**
     * Private route encryption switch. Valid values: true, false.
     */
    privateRouteEncryption?: pulumi.Input<boolean>;
    /**
     * List of  Remote Initiated Traffic Destination Real CIDRs.
     */
    remoteDestinationRealCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Remote Initiated Traffic Destination Virtual CIDRs.
     */
    remoteDestinationVirtualCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Remote gateway IP.
     */
    remoteGatewayIp: pulumi.Input<string>;
    /**
     * Latitude of remote gateway. Does not support refresh.
     */
    remoteGatewayLatitude?: pulumi.Input<number>;
    /**
     * Longitude of remote gateway. Does not support refresh.
     */
    remoteGatewayLongitude?: pulumi.Input<number>;
    /**
     * Remote gateway type. Valid Values: "generic", "avx", "aws", "azure", "sonicwall", "oracle".
     */
    remoteGatewayType: pulumi.Input<string>;
    /**
     * Remote identifier. Required for Cert based authentication type. Example: "gw-10-10-0-115".
     */
    remoteIdentifier?: pulumi.Input<string>;
    /**
     * List of Remote Initiated Traffic Source Real CIDRs.
     */
    remoteSourceRealCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Remote Initiated Traffic Source Virtual CIDRs.
     */
    remoteSourceVirtualCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Remote subnet CIDR. **Not required for customMapped connection.**
     */
    remoteSubnetCidr?: pulumi.Input<string>;
    /**
     * Remote subnet CIDR (Virtual). **Required for connection type "mapped", except for `customMapped` connection.**
     */
    remoteSubnetVirtual?: pulumi.Input<string>;
    /**
     * Remote tunnel IP address. Only valid for route based connection. Available as of provider version R2.19+.
     */
    remoteTunnelIp?: pulumi.Input<string>;
    /**
     * Route tables to modify.
     */
    routeTableLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify ssl_server_pool. Default value: "192.168.44.0/24". **NOTE: Please see notes here for more information.**
     */
    sslServerPool?: pulumi.Input<string>;
    /**
     * Site2Cloud tunnel type. Valid Values: "policy", "route".
     */
    tunnelType: pulumi.Input<string>;
    /**
     * VPC ID of the cloud gateway.
     */
    vpcId: pulumi.Input<string>;
}
