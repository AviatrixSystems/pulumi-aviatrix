// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixAwsTgwPeeringDomainConn struct {
	pulumi.CustomResourceState

	// The name of the source domain to make a connection.
	DomainName1 pulumi.StringOutput `pulumi:"domainName1"`
	// The name of the destination domain to make a connection.
	DomainName2 pulumi.StringOutput `pulumi:"domainName2"`
	// The AWS tgw name of the source domain to make a connection.
	TgwName1 pulumi.StringOutput `pulumi:"tgwName1"`
	// The AWS tgw name of the destination domain to make a connection.
	TgwName2 pulumi.StringOutput `pulumi:"tgwName2"`
}

// NewAviatrixAwsTgwPeeringDomainConn registers a new resource with the given unique name, arguments, and options.
func NewAviatrixAwsTgwPeeringDomainConn(ctx *pulumi.Context,
	name string, args *AviatrixAwsTgwPeeringDomainConnArgs, opts ...pulumi.ResourceOption) (*AviatrixAwsTgwPeeringDomainConn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName1 == nil {
		return nil, errors.New("invalid value for required argument 'DomainName1'")
	}
	if args.DomainName2 == nil {
		return nil, errors.New("invalid value for required argument 'DomainName2'")
	}
	if args.TgwName1 == nil {
		return nil, errors.New("invalid value for required argument 'TgwName1'")
	}
	if args.TgwName2 == nil {
		return nil, errors.New("invalid value for required argument 'TgwName2'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixAwsTgwPeeringDomainConn
	err := ctx.RegisterResource("aviatrix:index/aviatrixAwsTgwPeeringDomainConn:AviatrixAwsTgwPeeringDomainConn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixAwsTgwPeeringDomainConn gets an existing AviatrixAwsTgwPeeringDomainConn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixAwsTgwPeeringDomainConn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixAwsTgwPeeringDomainConnState, opts ...pulumi.ResourceOption) (*AviatrixAwsTgwPeeringDomainConn, error) {
	var resource AviatrixAwsTgwPeeringDomainConn
	err := ctx.ReadResource("aviatrix:index/aviatrixAwsTgwPeeringDomainConn:AviatrixAwsTgwPeeringDomainConn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixAwsTgwPeeringDomainConn resources.
type aviatrixAwsTgwPeeringDomainConnState struct {
	// The name of the source domain to make a connection.
	DomainName1 *string `pulumi:"domainName1"`
	// The name of the destination domain to make a connection.
	DomainName2 *string `pulumi:"domainName2"`
	// The AWS tgw name of the source domain to make a connection.
	TgwName1 *string `pulumi:"tgwName1"`
	// The AWS tgw name of the destination domain to make a connection.
	TgwName2 *string `pulumi:"tgwName2"`
}

type AviatrixAwsTgwPeeringDomainConnState struct {
	// The name of the source domain to make a connection.
	DomainName1 pulumi.StringPtrInput
	// The name of the destination domain to make a connection.
	DomainName2 pulumi.StringPtrInput
	// The AWS tgw name of the source domain to make a connection.
	TgwName1 pulumi.StringPtrInput
	// The AWS tgw name of the destination domain to make a connection.
	TgwName2 pulumi.StringPtrInput
}

func (AviatrixAwsTgwPeeringDomainConnState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixAwsTgwPeeringDomainConnState)(nil)).Elem()
}

type aviatrixAwsTgwPeeringDomainConnArgs struct {
	// The name of the source domain to make a connection.
	DomainName1 string `pulumi:"domainName1"`
	// The name of the destination domain to make a connection.
	DomainName2 string `pulumi:"domainName2"`
	// The AWS tgw name of the source domain to make a connection.
	TgwName1 string `pulumi:"tgwName1"`
	// The AWS tgw name of the destination domain to make a connection.
	TgwName2 string `pulumi:"tgwName2"`
}

// The set of arguments for constructing a AviatrixAwsTgwPeeringDomainConn resource.
type AviatrixAwsTgwPeeringDomainConnArgs struct {
	// The name of the source domain to make a connection.
	DomainName1 pulumi.StringInput
	// The name of the destination domain to make a connection.
	DomainName2 pulumi.StringInput
	// The AWS tgw name of the source domain to make a connection.
	TgwName1 pulumi.StringInput
	// The AWS tgw name of the destination domain to make a connection.
	TgwName2 pulumi.StringInput
}

func (AviatrixAwsTgwPeeringDomainConnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixAwsTgwPeeringDomainConnArgs)(nil)).Elem()
}

type AviatrixAwsTgwPeeringDomainConnInput interface {
	pulumi.Input

	ToAviatrixAwsTgwPeeringDomainConnOutput() AviatrixAwsTgwPeeringDomainConnOutput
	ToAviatrixAwsTgwPeeringDomainConnOutputWithContext(ctx context.Context) AviatrixAwsTgwPeeringDomainConnOutput
}

func (*AviatrixAwsTgwPeeringDomainConn) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixAwsTgwPeeringDomainConn)(nil)).Elem()
}

func (i *AviatrixAwsTgwPeeringDomainConn) ToAviatrixAwsTgwPeeringDomainConnOutput() AviatrixAwsTgwPeeringDomainConnOutput {
	return i.ToAviatrixAwsTgwPeeringDomainConnOutputWithContext(context.Background())
}

func (i *AviatrixAwsTgwPeeringDomainConn) ToAviatrixAwsTgwPeeringDomainConnOutputWithContext(ctx context.Context) AviatrixAwsTgwPeeringDomainConnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAwsTgwPeeringDomainConnOutput)
}

// AviatrixAwsTgwPeeringDomainConnArrayInput is an input type that accepts AviatrixAwsTgwPeeringDomainConnArray and AviatrixAwsTgwPeeringDomainConnArrayOutput values.
// You can construct a concrete instance of `AviatrixAwsTgwPeeringDomainConnArrayInput` via:
//
//	AviatrixAwsTgwPeeringDomainConnArray{ AviatrixAwsTgwPeeringDomainConnArgs{...} }
type AviatrixAwsTgwPeeringDomainConnArrayInput interface {
	pulumi.Input

	ToAviatrixAwsTgwPeeringDomainConnArrayOutput() AviatrixAwsTgwPeeringDomainConnArrayOutput
	ToAviatrixAwsTgwPeeringDomainConnArrayOutputWithContext(context.Context) AviatrixAwsTgwPeeringDomainConnArrayOutput
}

type AviatrixAwsTgwPeeringDomainConnArray []AviatrixAwsTgwPeeringDomainConnInput

func (AviatrixAwsTgwPeeringDomainConnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixAwsTgwPeeringDomainConn)(nil)).Elem()
}

func (i AviatrixAwsTgwPeeringDomainConnArray) ToAviatrixAwsTgwPeeringDomainConnArrayOutput() AviatrixAwsTgwPeeringDomainConnArrayOutput {
	return i.ToAviatrixAwsTgwPeeringDomainConnArrayOutputWithContext(context.Background())
}

func (i AviatrixAwsTgwPeeringDomainConnArray) ToAviatrixAwsTgwPeeringDomainConnArrayOutputWithContext(ctx context.Context) AviatrixAwsTgwPeeringDomainConnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAwsTgwPeeringDomainConnArrayOutput)
}

// AviatrixAwsTgwPeeringDomainConnMapInput is an input type that accepts AviatrixAwsTgwPeeringDomainConnMap and AviatrixAwsTgwPeeringDomainConnMapOutput values.
// You can construct a concrete instance of `AviatrixAwsTgwPeeringDomainConnMapInput` via:
//
//	AviatrixAwsTgwPeeringDomainConnMap{ "key": AviatrixAwsTgwPeeringDomainConnArgs{...} }
type AviatrixAwsTgwPeeringDomainConnMapInput interface {
	pulumi.Input

	ToAviatrixAwsTgwPeeringDomainConnMapOutput() AviatrixAwsTgwPeeringDomainConnMapOutput
	ToAviatrixAwsTgwPeeringDomainConnMapOutputWithContext(context.Context) AviatrixAwsTgwPeeringDomainConnMapOutput
}

type AviatrixAwsTgwPeeringDomainConnMap map[string]AviatrixAwsTgwPeeringDomainConnInput

func (AviatrixAwsTgwPeeringDomainConnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixAwsTgwPeeringDomainConn)(nil)).Elem()
}

func (i AviatrixAwsTgwPeeringDomainConnMap) ToAviatrixAwsTgwPeeringDomainConnMapOutput() AviatrixAwsTgwPeeringDomainConnMapOutput {
	return i.ToAviatrixAwsTgwPeeringDomainConnMapOutputWithContext(context.Background())
}

func (i AviatrixAwsTgwPeeringDomainConnMap) ToAviatrixAwsTgwPeeringDomainConnMapOutputWithContext(ctx context.Context) AviatrixAwsTgwPeeringDomainConnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAwsTgwPeeringDomainConnMapOutput)
}

type AviatrixAwsTgwPeeringDomainConnOutput struct{ *pulumi.OutputState }

func (AviatrixAwsTgwPeeringDomainConnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixAwsTgwPeeringDomainConn)(nil)).Elem()
}

func (o AviatrixAwsTgwPeeringDomainConnOutput) ToAviatrixAwsTgwPeeringDomainConnOutput() AviatrixAwsTgwPeeringDomainConnOutput {
	return o
}

func (o AviatrixAwsTgwPeeringDomainConnOutput) ToAviatrixAwsTgwPeeringDomainConnOutputWithContext(ctx context.Context) AviatrixAwsTgwPeeringDomainConnOutput {
	return o
}

// The name of the source domain to make a connection.
func (o AviatrixAwsTgwPeeringDomainConnOutput) DomainName1() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixAwsTgwPeeringDomainConn) pulumi.StringOutput { return v.DomainName1 }).(pulumi.StringOutput)
}

// The name of the destination domain to make a connection.
func (o AviatrixAwsTgwPeeringDomainConnOutput) DomainName2() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixAwsTgwPeeringDomainConn) pulumi.StringOutput { return v.DomainName2 }).(pulumi.StringOutput)
}

// The AWS tgw name of the source domain to make a connection.
func (o AviatrixAwsTgwPeeringDomainConnOutput) TgwName1() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixAwsTgwPeeringDomainConn) pulumi.StringOutput { return v.TgwName1 }).(pulumi.StringOutput)
}

// The AWS tgw name of the destination domain to make a connection.
func (o AviatrixAwsTgwPeeringDomainConnOutput) TgwName2() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixAwsTgwPeeringDomainConn) pulumi.StringOutput { return v.TgwName2 }).(pulumi.StringOutput)
}

type AviatrixAwsTgwPeeringDomainConnArrayOutput struct{ *pulumi.OutputState }

func (AviatrixAwsTgwPeeringDomainConnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixAwsTgwPeeringDomainConn)(nil)).Elem()
}

func (o AviatrixAwsTgwPeeringDomainConnArrayOutput) ToAviatrixAwsTgwPeeringDomainConnArrayOutput() AviatrixAwsTgwPeeringDomainConnArrayOutput {
	return o
}

func (o AviatrixAwsTgwPeeringDomainConnArrayOutput) ToAviatrixAwsTgwPeeringDomainConnArrayOutputWithContext(ctx context.Context) AviatrixAwsTgwPeeringDomainConnArrayOutput {
	return o
}

func (o AviatrixAwsTgwPeeringDomainConnArrayOutput) Index(i pulumi.IntInput) AviatrixAwsTgwPeeringDomainConnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixAwsTgwPeeringDomainConn {
		return vs[0].([]*AviatrixAwsTgwPeeringDomainConn)[vs[1].(int)]
	}).(AviatrixAwsTgwPeeringDomainConnOutput)
}

type AviatrixAwsTgwPeeringDomainConnMapOutput struct{ *pulumi.OutputState }

func (AviatrixAwsTgwPeeringDomainConnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixAwsTgwPeeringDomainConn)(nil)).Elem()
}

func (o AviatrixAwsTgwPeeringDomainConnMapOutput) ToAviatrixAwsTgwPeeringDomainConnMapOutput() AviatrixAwsTgwPeeringDomainConnMapOutput {
	return o
}

func (o AviatrixAwsTgwPeeringDomainConnMapOutput) ToAviatrixAwsTgwPeeringDomainConnMapOutputWithContext(ctx context.Context) AviatrixAwsTgwPeeringDomainConnMapOutput {
	return o
}

func (o AviatrixAwsTgwPeeringDomainConnMapOutput) MapIndex(k pulumi.StringInput) AviatrixAwsTgwPeeringDomainConnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixAwsTgwPeeringDomainConn {
		return vs[0].(map[string]*AviatrixAwsTgwPeeringDomainConn)[vs[1].(string)]
	}).(AviatrixAwsTgwPeeringDomainConnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAwsTgwPeeringDomainConnInput)(nil)).Elem(), &AviatrixAwsTgwPeeringDomainConn{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAwsTgwPeeringDomainConnArrayInput)(nil)).Elem(), AviatrixAwsTgwPeeringDomainConnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAwsTgwPeeringDomainConnMapInput)(nil)).Elem(), AviatrixAwsTgwPeeringDomainConnMap{})
	pulumi.RegisterOutputType(AviatrixAwsTgwPeeringDomainConnOutput{})
	pulumi.RegisterOutputType(AviatrixAwsTgwPeeringDomainConnArrayOutput{})
	pulumi.RegisterOutputType(AviatrixAwsTgwPeeringDomainConnMapOutput{})
}
