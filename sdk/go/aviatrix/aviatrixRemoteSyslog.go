// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixRemoteSyslog struct {
	pulumi.CustomResourceState

	// CA certificate file.
	CaCertificateFile pulumi.StringPtrOutput `pulumi:"caCertificateFile"`
	// List of excluded gateways.
	ExcludedGateways pulumi.StringArrayOutput `pulumi:"excludedGateways"`
	// A total of 10 profiles from index 0 to 9 are supported for remote syslog, while index 9 is reserved for CoPilot.
	Index pulumi.IntPtrOutput `pulumi:"index"`
	// Profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// True if not protected by TLS.
	Notls pulumi.BoolOutput `pulumi:"notls"`
	// Listening port of the remote syslog server.
	Port pulumi.IntOutput `pulumi:"port"`
	// Private key of the controller that pairs with the public certificate.
	PrivateKeyFile pulumi.StringPtrOutput `pulumi:"privateKeyFile"`
	// TCP or UDP (TCP by default).
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// Public certificate of the controller signed by the same CA.
	PublicCertificateFile pulumi.StringPtrOutput `pulumi:"publicCertificateFile"`
	// FQDN or IP address of the remote syslog server.
	Server pulumi.StringOutput `pulumi:"server"`
	// Enabled or not.
	Status pulumi.StringOutput `pulumi:"status"`
	// Useful when forwarding to 3rd party servers like Datadog or Sumo
	Template pulumi.StringPtrOutput `pulumi:"template"`
}

// NewAviatrixRemoteSyslog registers a new resource with the given unique name, arguments, and options.
func NewAviatrixRemoteSyslog(ctx *pulumi.Context,
	name string, args *AviatrixRemoteSyslogArgs, opts ...pulumi.ResourceOption) (*AviatrixRemoteSyslog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.Server == nil {
		return nil, errors.New("invalid value for required argument 'Server'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixRemoteSyslog
	err := ctx.RegisterResource("aviatrix:index/aviatrixRemoteSyslog:AviatrixRemoteSyslog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixRemoteSyslog gets an existing AviatrixRemoteSyslog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixRemoteSyslog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixRemoteSyslogState, opts ...pulumi.ResourceOption) (*AviatrixRemoteSyslog, error) {
	var resource AviatrixRemoteSyslog
	err := ctx.ReadResource("aviatrix:index/aviatrixRemoteSyslog:AviatrixRemoteSyslog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixRemoteSyslog resources.
type aviatrixRemoteSyslogState struct {
	// CA certificate file.
	CaCertificateFile *string `pulumi:"caCertificateFile"`
	// List of excluded gateways.
	ExcludedGateways []string `pulumi:"excludedGateways"`
	// A total of 10 profiles from index 0 to 9 are supported for remote syslog, while index 9 is reserved for CoPilot.
	Index *int `pulumi:"index"`
	// Profile name.
	Name *string `pulumi:"name"`
	// True if not protected by TLS.
	Notls *bool `pulumi:"notls"`
	// Listening port of the remote syslog server.
	Port *int `pulumi:"port"`
	// Private key of the controller that pairs with the public certificate.
	PrivateKeyFile *string `pulumi:"privateKeyFile"`
	// TCP or UDP (TCP by default).
	Protocol *string `pulumi:"protocol"`
	// Public certificate of the controller signed by the same CA.
	PublicCertificateFile *string `pulumi:"publicCertificateFile"`
	// FQDN or IP address of the remote syslog server.
	Server *string `pulumi:"server"`
	// Enabled or not.
	Status *string `pulumi:"status"`
	// Useful when forwarding to 3rd party servers like Datadog or Sumo
	Template *string `pulumi:"template"`
}

type AviatrixRemoteSyslogState struct {
	// CA certificate file.
	CaCertificateFile pulumi.StringPtrInput
	// List of excluded gateways.
	ExcludedGateways pulumi.StringArrayInput
	// A total of 10 profiles from index 0 to 9 are supported for remote syslog, while index 9 is reserved for CoPilot.
	Index pulumi.IntPtrInput
	// Profile name.
	Name pulumi.StringPtrInput
	// True if not protected by TLS.
	Notls pulumi.BoolPtrInput
	// Listening port of the remote syslog server.
	Port pulumi.IntPtrInput
	// Private key of the controller that pairs with the public certificate.
	PrivateKeyFile pulumi.StringPtrInput
	// TCP or UDP (TCP by default).
	Protocol pulumi.StringPtrInput
	// Public certificate of the controller signed by the same CA.
	PublicCertificateFile pulumi.StringPtrInput
	// FQDN or IP address of the remote syslog server.
	Server pulumi.StringPtrInput
	// Enabled or not.
	Status pulumi.StringPtrInput
	// Useful when forwarding to 3rd party servers like Datadog or Sumo
	Template pulumi.StringPtrInput
}

func (AviatrixRemoteSyslogState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixRemoteSyslogState)(nil)).Elem()
}

type aviatrixRemoteSyslogArgs struct {
	// CA certificate file.
	CaCertificateFile *string `pulumi:"caCertificateFile"`
	// List of excluded gateways.
	ExcludedGateways []string `pulumi:"excludedGateways"`
	// A total of 10 profiles from index 0 to 9 are supported for remote syslog, while index 9 is reserved for CoPilot.
	Index *int `pulumi:"index"`
	// Profile name.
	Name *string `pulumi:"name"`
	// Listening port of the remote syslog server.
	Port int `pulumi:"port"`
	// Private key of the controller that pairs with the public certificate.
	PrivateKeyFile *string `pulumi:"privateKeyFile"`
	// TCP or UDP (TCP by default).
	Protocol *string `pulumi:"protocol"`
	// Public certificate of the controller signed by the same CA.
	PublicCertificateFile *string `pulumi:"publicCertificateFile"`
	// FQDN or IP address of the remote syslog server.
	Server string `pulumi:"server"`
	// Useful when forwarding to 3rd party servers like Datadog or Sumo
	Template *string `pulumi:"template"`
}

// The set of arguments for constructing a AviatrixRemoteSyslog resource.
type AviatrixRemoteSyslogArgs struct {
	// CA certificate file.
	CaCertificateFile pulumi.StringPtrInput
	// List of excluded gateways.
	ExcludedGateways pulumi.StringArrayInput
	// A total of 10 profiles from index 0 to 9 are supported for remote syslog, while index 9 is reserved for CoPilot.
	Index pulumi.IntPtrInput
	// Profile name.
	Name pulumi.StringPtrInput
	// Listening port of the remote syslog server.
	Port pulumi.IntInput
	// Private key of the controller that pairs with the public certificate.
	PrivateKeyFile pulumi.StringPtrInput
	// TCP or UDP (TCP by default).
	Protocol pulumi.StringPtrInput
	// Public certificate of the controller signed by the same CA.
	PublicCertificateFile pulumi.StringPtrInput
	// FQDN or IP address of the remote syslog server.
	Server pulumi.StringInput
	// Useful when forwarding to 3rd party servers like Datadog or Sumo
	Template pulumi.StringPtrInput
}

func (AviatrixRemoteSyslogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixRemoteSyslogArgs)(nil)).Elem()
}

type AviatrixRemoteSyslogInput interface {
	pulumi.Input

	ToAviatrixRemoteSyslogOutput() AviatrixRemoteSyslogOutput
	ToAviatrixRemoteSyslogOutputWithContext(ctx context.Context) AviatrixRemoteSyslogOutput
}

func (*AviatrixRemoteSyslog) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixRemoteSyslog)(nil)).Elem()
}

func (i *AviatrixRemoteSyslog) ToAviatrixRemoteSyslogOutput() AviatrixRemoteSyslogOutput {
	return i.ToAviatrixRemoteSyslogOutputWithContext(context.Background())
}

func (i *AviatrixRemoteSyslog) ToAviatrixRemoteSyslogOutputWithContext(ctx context.Context) AviatrixRemoteSyslogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixRemoteSyslogOutput)
}

// AviatrixRemoteSyslogArrayInput is an input type that accepts AviatrixRemoteSyslogArray and AviatrixRemoteSyslogArrayOutput values.
// You can construct a concrete instance of `AviatrixRemoteSyslogArrayInput` via:
//
//	AviatrixRemoteSyslogArray{ AviatrixRemoteSyslogArgs{...} }
type AviatrixRemoteSyslogArrayInput interface {
	pulumi.Input

	ToAviatrixRemoteSyslogArrayOutput() AviatrixRemoteSyslogArrayOutput
	ToAviatrixRemoteSyslogArrayOutputWithContext(context.Context) AviatrixRemoteSyslogArrayOutput
}

type AviatrixRemoteSyslogArray []AviatrixRemoteSyslogInput

func (AviatrixRemoteSyslogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixRemoteSyslog)(nil)).Elem()
}

func (i AviatrixRemoteSyslogArray) ToAviatrixRemoteSyslogArrayOutput() AviatrixRemoteSyslogArrayOutput {
	return i.ToAviatrixRemoteSyslogArrayOutputWithContext(context.Background())
}

func (i AviatrixRemoteSyslogArray) ToAviatrixRemoteSyslogArrayOutputWithContext(ctx context.Context) AviatrixRemoteSyslogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixRemoteSyslogArrayOutput)
}

// AviatrixRemoteSyslogMapInput is an input type that accepts AviatrixRemoteSyslogMap and AviatrixRemoteSyslogMapOutput values.
// You can construct a concrete instance of `AviatrixRemoteSyslogMapInput` via:
//
//	AviatrixRemoteSyslogMap{ "key": AviatrixRemoteSyslogArgs{...} }
type AviatrixRemoteSyslogMapInput interface {
	pulumi.Input

	ToAviatrixRemoteSyslogMapOutput() AviatrixRemoteSyslogMapOutput
	ToAviatrixRemoteSyslogMapOutputWithContext(context.Context) AviatrixRemoteSyslogMapOutput
}

type AviatrixRemoteSyslogMap map[string]AviatrixRemoteSyslogInput

func (AviatrixRemoteSyslogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixRemoteSyslog)(nil)).Elem()
}

func (i AviatrixRemoteSyslogMap) ToAviatrixRemoteSyslogMapOutput() AviatrixRemoteSyslogMapOutput {
	return i.ToAviatrixRemoteSyslogMapOutputWithContext(context.Background())
}

func (i AviatrixRemoteSyslogMap) ToAviatrixRemoteSyslogMapOutputWithContext(ctx context.Context) AviatrixRemoteSyslogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixRemoteSyslogMapOutput)
}

type AviatrixRemoteSyslogOutput struct{ *pulumi.OutputState }

func (AviatrixRemoteSyslogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixRemoteSyslog)(nil)).Elem()
}

func (o AviatrixRemoteSyslogOutput) ToAviatrixRemoteSyslogOutput() AviatrixRemoteSyslogOutput {
	return o
}

func (o AviatrixRemoteSyslogOutput) ToAviatrixRemoteSyslogOutputWithContext(ctx context.Context) AviatrixRemoteSyslogOutput {
	return o
}

// CA certificate file.
func (o AviatrixRemoteSyslogOutput) CaCertificateFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixRemoteSyslog) pulumi.StringPtrOutput { return v.CaCertificateFile }).(pulumi.StringPtrOutput)
}

// List of excluded gateways.
func (o AviatrixRemoteSyslogOutput) ExcludedGateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixRemoteSyslog) pulumi.StringArrayOutput { return v.ExcludedGateways }).(pulumi.StringArrayOutput)
}

// A total of 10 profiles from index 0 to 9 are supported for remote syslog, while index 9 is reserved for CoPilot.
func (o AviatrixRemoteSyslogOutput) Index() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AviatrixRemoteSyslog) pulumi.IntPtrOutput { return v.Index }).(pulumi.IntPtrOutput)
}

// Profile name.
func (o AviatrixRemoteSyslogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixRemoteSyslog) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// True if not protected by TLS.
func (o AviatrixRemoteSyslogOutput) Notls() pulumi.BoolOutput {
	return o.ApplyT(func(v *AviatrixRemoteSyslog) pulumi.BoolOutput { return v.Notls }).(pulumi.BoolOutput)
}

// Listening port of the remote syslog server.
func (o AviatrixRemoteSyslogOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *AviatrixRemoteSyslog) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Private key of the controller that pairs with the public certificate.
func (o AviatrixRemoteSyslogOutput) PrivateKeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixRemoteSyslog) pulumi.StringPtrOutput { return v.PrivateKeyFile }).(pulumi.StringPtrOutput)
}

// TCP or UDP (TCP by default).
func (o AviatrixRemoteSyslogOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixRemoteSyslog) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Public certificate of the controller signed by the same CA.
func (o AviatrixRemoteSyslogOutput) PublicCertificateFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixRemoteSyslog) pulumi.StringPtrOutput { return v.PublicCertificateFile }).(pulumi.StringPtrOutput)
}

// FQDN or IP address of the remote syslog server.
func (o AviatrixRemoteSyslogOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixRemoteSyslog) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

// Enabled or not.
func (o AviatrixRemoteSyslogOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixRemoteSyslog) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Useful when forwarding to 3rd party servers like Datadog or Sumo
func (o AviatrixRemoteSyslogOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixRemoteSyslog) pulumi.StringPtrOutput { return v.Template }).(pulumi.StringPtrOutput)
}

type AviatrixRemoteSyslogArrayOutput struct{ *pulumi.OutputState }

func (AviatrixRemoteSyslogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixRemoteSyslog)(nil)).Elem()
}

func (o AviatrixRemoteSyslogArrayOutput) ToAviatrixRemoteSyslogArrayOutput() AviatrixRemoteSyslogArrayOutput {
	return o
}

func (o AviatrixRemoteSyslogArrayOutput) ToAviatrixRemoteSyslogArrayOutputWithContext(ctx context.Context) AviatrixRemoteSyslogArrayOutput {
	return o
}

func (o AviatrixRemoteSyslogArrayOutput) Index(i pulumi.IntInput) AviatrixRemoteSyslogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixRemoteSyslog {
		return vs[0].([]*AviatrixRemoteSyslog)[vs[1].(int)]
	}).(AviatrixRemoteSyslogOutput)
}

type AviatrixRemoteSyslogMapOutput struct{ *pulumi.OutputState }

func (AviatrixRemoteSyslogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixRemoteSyslog)(nil)).Elem()
}

func (o AviatrixRemoteSyslogMapOutput) ToAviatrixRemoteSyslogMapOutput() AviatrixRemoteSyslogMapOutput {
	return o
}

func (o AviatrixRemoteSyslogMapOutput) ToAviatrixRemoteSyslogMapOutputWithContext(ctx context.Context) AviatrixRemoteSyslogMapOutput {
	return o
}

func (o AviatrixRemoteSyslogMapOutput) MapIndex(k pulumi.StringInput) AviatrixRemoteSyslogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixRemoteSyslog {
		return vs[0].(map[string]*AviatrixRemoteSyslog)[vs[1].(string)]
	}).(AviatrixRemoteSyslogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixRemoteSyslogInput)(nil)).Elem(), &AviatrixRemoteSyslog{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixRemoteSyslogArrayInput)(nil)).Elem(), AviatrixRemoteSyslogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixRemoteSyslogMapInput)(nil)).Elem(), AviatrixRemoteSyslogMap{})
	pulumi.RegisterOutputType(AviatrixRemoteSyslogOutput{})
	pulumi.RegisterOutputType(AviatrixRemoteSyslogArrayOutput{})
	pulumi.RegisterOutputType(AviatrixRemoteSyslogMapOutput{})
}
