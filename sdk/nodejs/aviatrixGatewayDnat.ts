// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class AviatrixGatewayDnat extends pulumi.CustomResource {
    /**
     * Get an existing AviatrixGatewayDnat resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AviatrixGatewayDnatState, opts?: pulumi.CustomResourceOptions): AviatrixGatewayDnat {
        return new AviatrixGatewayDnat(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/aviatrixGatewayDnat:AviatrixGatewayDnat';

    /**
     * Returns true if the given object is an instance of AviatrixGatewayDnat.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AviatrixGatewayDnat {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AviatrixGatewayDnat.__pulumiType;
    }

    /**
     * Computed attribute to store the previous connection policy.
     */
    public /*out*/ readonly connectionPolicies!: pulumi.Output<outputs.AviatrixGatewayDnatConnectionPolicy[]>;
    /**
     * Policy rule to be applied to gateway.
     */
    public readonly dnatPolicies!: pulumi.Output<outputs.AviatrixGatewayDnatDnatPolicy[]>;
    /**
     * Name of the gateway.
     */
    public readonly gwName!: pulumi.Output<string>;
    /**
     * Computed attribute to store the previous interface policy.
     */
    public /*out*/ readonly interfacePolicies!: pulumi.Output<outputs.AviatrixGatewayDnatInterfacePolicy[]>;
    /**
     * Whether to sync the policies to the HA gateway.
     */
    public readonly syncToHa!: pulumi.Output<boolean | undefined>;

    /**
     * Create a AviatrixGatewayDnat resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AviatrixGatewayDnatArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AviatrixGatewayDnatArgs | AviatrixGatewayDnatState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AviatrixGatewayDnatState | undefined;
            resourceInputs["connectionPolicies"] = state ? state.connectionPolicies : undefined;
            resourceInputs["dnatPolicies"] = state ? state.dnatPolicies : undefined;
            resourceInputs["gwName"] = state ? state.gwName : undefined;
            resourceInputs["interfacePolicies"] = state ? state.interfacePolicies : undefined;
            resourceInputs["syncToHa"] = state ? state.syncToHa : undefined;
        } else {
            const args = argsOrState as AviatrixGatewayDnatArgs | undefined;
            if ((!args || args.dnatPolicies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnatPolicies'");
            }
            if ((!args || args.gwName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gwName'");
            }
            resourceInputs["dnatPolicies"] = args ? args.dnatPolicies : undefined;
            resourceInputs["gwName"] = args ? args.gwName : undefined;
            resourceInputs["syncToHa"] = args ? args.syncToHa : undefined;
            resourceInputs["connectionPolicies"] = undefined /*out*/;
            resourceInputs["interfacePolicies"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AviatrixGatewayDnat.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AviatrixGatewayDnat resources.
 */
export interface AviatrixGatewayDnatState {
    /**
     * Computed attribute to store the previous connection policy.
     */
    connectionPolicies?: pulumi.Input<pulumi.Input<inputs.AviatrixGatewayDnatConnectionPolicy>[]>;
    /**
     * Policy rule to be applied to gateway.
     */
    dnatPolicies?: pulumi.Input<pulumi.Input<inputs.AviatrixGatewayDnatDnatPolicy>[]>;
    /**
     * Name of the gateway.
     */
    gwName?: pulumi.Input<string>;
    /**
     * Computed attribute to store the previous interface policy.
     */
    interfacePolicies?: pulumi.Input<pulumi.Input<inputs.AviatrixGatewayDnatInterfacePolicy>[]>;
    /**
     * Whether to sync the policies to the HA gateway.
     */
    syncToHa?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AviatrixGatewayDnat resource.
 */
export interface AviatrixGatewayDnatArgs {
    /**
     * Policy rule to be applied to gateway.
     */
    dnatPolicies: pulumi.Input<pulumi.Input<inputs.AviatrixGatewayDnatDnatPolicy>[]>;
    /**
     * Name of the gateway.
     */
    gwName: pulumi.Input<string>;
    /**
     * Whether to sync the policies to the HA gateway.
     */
    syncToHa?: pulumi.Input<boolean>;
}
