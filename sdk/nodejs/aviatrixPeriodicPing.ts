// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The **aviatrix_periodic_ping** resource manages the periodic ping feature for Aviatrix gateways.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aviatrix from "@pulumi/aviatrix";
 *
 * // Enable Periodic Ping for a Gateway
 * const testPing = new aviatrix.AviatrixPeriodicPing("test_ping", {
 *     gwName: "test-gw",
 *     interval: 600,
 *     ipAddress: "127.0.0.1",
 * });
 * ```
 *
 * ## Import
 *
 * **aviatrix_periodic_ping** can be imported using the `gw_name`, e.g.
 *
 * ```sh
 *  $ pulumi import aviatrix:index/aviatrixPeriodicPing:AviatrixPeriodicPing test gw_name
 * ```
 */
export class AviatrixPeriodicPing extends pulumi.CustomResource {
    /**
     * Get an existing AviatrixPeriodicPing resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AviatrixPeriodicPingState, opts?: pulumi.CustomResourceOptions): AviatrixPeriodicPing {
        return new AviatrixPeriodicPing(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/aviatrixPeriodicPing:AviatrixPeriodicPing';

    /**
     * Returns true if the given object is an instance of AviatrixPeriodicPing.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AviatrixPeriodicPing {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AviatrixPeriodicPing.__pulumiType;
    }

    /**
     * Name of the gateway.
     */
    public readonly gwName!: pulumi.Output<string>;
    /**
     * Interval between pings in seconds.
     */
    public readonly interval!: pulumi.Output<number>;
    /**
     * IP Address to ping.
     */
    public readonly ipAddress!: pulumi.Output<string>;

    /**
     * Create a AviatrixPeriodicPing resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AviatrixPeriodicPingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AviatrixPeriodicPingArgs | AviatrixPeriodicPingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AviatrixPeriodicPingState | undefined;
            resourceInputs["gwName"] = state ? state.gwName : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
        } else {
            const args = argsOrState as AviatrixPeriodicPingArgs | undefined;
            if ((!args || args.gwName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gwName'");
            }
            if ((!args || args.interval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            if ((!args || args.ipAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddress'");
            }
            resourceInputs["gwName"] = args ? args.gwName : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AviatrixPeriodicPing.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AviatrixPeriodicPing resources.
 */
export interface AviatrixPeriodicPingState {
    /**
     * Name of the gateway.
     */
    gwName?: pulumi.Input<string>;
    /**
     * Interval between pings in seconds.
     */
    interval?: pulumi.Input<number>;
    /**
     * IP Address to ping.
     */
    ipAddress?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AviatrixPeriodicPing resource.
 */
export interface AviatrixPeriodicPingArgs {
    /**
     * Name of the gateway.
     */
    gwName: pulumi.Input<string>;
    /**
     * Interval between pings in seconds.
     */
    interval: pulumi.Input<number>;
    /**
     * IP Address to ping.
     */
    ipAddress: pulumi.Input<string>;
}
