// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The **aviatrix_cloudn_registration** resource allows the registration and deregistration of Aviatrix CloudN as a Gateway. This resource is available as of provider version R2.21+.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aviatrix from "@pulumi/aviatrix";
 *
 * // Create a CloudN Registration
 * const testCloudnRegistration = new aviatrix.AviatrixCloudnRegistration("test_cloudn_registration", {
 *     address: "10.210.38.100",
 *     localAsNumber: "65000",
 *     password: "password",
 *     prependAsPaths: [
 *         "65000",
 *         "65000",
 *     ],
 *     username: "admin",
 * });
 * ```
 *
 * ## Import
 *
 * **cloudn_registration** can be imported using the `name`, e.g.
 *
 * ```sh
 *  $ pulumi import aviatrix:index/aviatrixCloudnRegistration:AviatrixCloudnRegistration test_cloudn_registration name
 * ```
 */
export class AviatrixCloudnRegistration extends pulumi.CustomResource {
    /**
     * Get an existing AviatrixCloudnRegistration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AviatrixCloudnRegistrationState, opts?: pulumi.CustomResourceOptions): AviatrixCloudnRegistration {
        return new AviatrixCloudnRegistration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/aviatrixCloudnRegistration:AviatrixCloudnRegistration';

    /**
     * Returns true if the given object is an instance of AviatrixCloudnRegistration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AviatrixCloudnRegistration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AviatrixCloudnRegistration.__pulumiType;
    }

    /**
     * Aviatrix CloudN's public or private IP. Type: String.
     */
    public readonly address!: pulumi.Output<string>;
    /**
     * BGP AS Number to assign to the Transit Gateway. Type: String.
     */
    public readonly localAsNumber!: pulumi.Output<string>;
    /**
     * Gateway name to assign to the CloudN device. Type: String.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Aviatrix account password corresponding to above username. Type: String.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Connection AS Path Prepend customized by specifying AS PATH for a BGP connection. Requires localAsNumber to be set. Type: List.
     */
    public readonly prependAsPaths!: pulumi.Output<string[] | undefined>;
    /**
     * Aviatrix account username which will be used to log in to Aviatrix CloudN. Type: String.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a AviatrixCloudnRegistration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AviatrixCloudnRegistrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AviatrixCloudnRegistrationArgs | AviatrixCloudnRegistrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AviatrixCloudnRegistrationState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["localAsNumber"] = state ? state.localAsNumber : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["prependAsPaths"] = state ? state.prependAsPaths : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as AviatrixCloudnRegistrationArgs | undefined;
            if ((!args || args.address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'address'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["localAsNumber"] = args ? args.localAsNumber : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["prependAsPaths"] = args ? args.prependAsPaths : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AviatrixCloudnRegistration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AviatrixCloudnRegistration resources.
 */
export interface AviatrixCloudnRegistrationState {
    /**
     * Aviatrix CloudN's public or private IP. Type: String.
     */
    address?: pulumi.Input<string>;
    /**
     * BGP AS Number to assign to the Transit Gateway. Type: String.
     */
    localAsNumber?: pulumi.Input<string>;
    /**
     * Gateway name to assign to the CloudN device. Type: String.
     */
    name?: pulumi.Input<string>;
    /**
     * Aviatrix account password corresponding to above username. Type: String.
     */
    password?: pulumi.Input<string>;
    /**
     * Connection AS Path Prepend customized by specifying AS PATH for a BGP connection. Requires localAsNumber to be set. Type: List.
     */
    prependAsPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Aviatrix account username which will be used to log in to Aviatrix CloudN. Type: String.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AviatrixCloudnRegistration resource.
 */
export interface AviatrixCloudnRegistrationArgs {
    /**
     * Aviatrix CloudN's public or private IP. Type: String.
     */
    address: pulumi.Input<string>;
    /**
     * BGP AS Number to assign to the Transit Gateway. Type: String.
     */
    localAsNumber?: pulumi.Input<string>;
    /**
     * Gateway name to assign to the CloudN device. Type: String.
     */
    name?: pulumi.Input<string>;
    /**
     * Aviatrix account password corresponding to above username. Type: String.
     */
    password: pulumi.Input<string>;
    /**
     * Connection AS Path Prepend customized by specifying AS PATH for a BGP connection. Requires localAsNumber to be set. Type: List.
     */
    prependAsPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Aviatrix account username which will be used to log in to Aviatrix CloudN. Type: String.
     */
    username: pulumi.Input<string>;
}
