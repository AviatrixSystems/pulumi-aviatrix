// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **aviatrix_spoke_gateway** data source provides details about a specific spoke gateway created by the Aviatrix Controller.
//
// This data source can prove useful when a module accepts a spoke gateway's detail as an input variable.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/astipkovits/pulumi-aviatrix/sdk/go/aviatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err = aviatrix.LookupAviatrixSpokeGateway(ctx, &GetAviatrixSpokeGatewayArgs{
//				GwName: "gatewayname",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAviatrixSpokeGateway(ctx *pulumi.Context, args *LookupAviatrixSpokeGatewayArgs, opts ...pulumi.InvokeOption) (*LookupAviatrixSpokeGatewayResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupAviatrixSpokeGatewayResult
	err := ctx.Invoke("aviatrix:index/getAviatrixSpokeGateway:getAviatrixSpokeGateway", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAviatrixSpokeGateway.
type LookupAviatrixSpokeGatewayArgs struct {
	// Spoke gateway name. It can be used for getting spoke gateway.
	GwName string `pulumi:"gwName"`
}

// A collection of values returned by getAviatrixSpokeGateway.
type LookupAviatrixSpokeGatewayResult struct {
	// Aviatrix account name.
	AccountName string `pulumi:"accountName"`
	// When value is false, an idle address in Elastic IP pool is reused for this gateway. Otherwise, a new Elastic IP is allocated and used for this gateway.
	AllocateNewEip       bool     `pulumi:"allocateNewEip"`
	ApprovedLearnedCidrs []string `pulumi:"approvedLearnedCidrs"`
	// Availability domain for OCI.
	AvailabilityDomain        string `pulumi:"availabilityDomain"`
	AzureEipNameResourceGroup string `pulumi:"azureEipNameResourceGroup"`
	BgpEcmp                   bool   `pulumi:"bgpEcmp"`
	BgpHoldTime               int    `pulumi:"bgpHoldTime"`
	BgpPollingTime            int    `pulumi:"bgpPollingTime"`
	// Cloud instance ID.
	CloudInstanceId string `pulumi:"cloudInstanceId"`
	// Type of cloud service provider.
	CloudType int `pulumi:"cloudType"`
	// A list of comma separated CIDRs to be customized for the spoke VPC routes.
	CustomizedSpokeVpcRoutes string `pulumi:"customizedSpokeVpcRoutes"`
	DisableRoutePropagation  bool   `pulumi:"disableRoutePropagation"`
	// The EIP address of the Spoke Gateway.
	Eip                           string `pulumi:"eip"`
	EnableActiveStandby           bool   `pulumi:"enableActiveStandby"`
	EnableActiveStandbyPreemptive bool   `pulumi:"enableActiveStandbyPreemptive"`
	EnableAutoAdvertiseS2cCidrs   bool   `pulumi:"enableAutoAdvertiseS2cCidrs"`
	EnableBgp                     bool   `pulumi:"enableBgp"`
	// Status of Encrypt Volume of spoke gateway.
	EnableEncryptVolume         bool `pulumi:"enableEncryptVolume"`
	EnableJumboFrame            bool `pulumi:"enableJumboFrame"`
	EnableLearnedCidrsApproval  bool `pulumi:"enableLearnedCidrsApproval"`
	EnableMonitorGatewaySubnets bool `pulumi:"enableMonitorGatewaySubnets"`
	// Status of private OOB for the spoke gateway.
	EnablePrivateOob                 bool `pulumi:"enablePrivateOob"`
	EnablePrivateVpcDefaultRoute     bool `pulumi:"enablePrivateVpcDefaultRoute"`
	EnableSkipPublicRouteTableUpdate bool `pulumi:"enableSkipPublicRouteTableUpdate"`
	EnableSpotInstance               bool `pulumi:"enableSpotInstance"`
	// Status of VPC Dns Server of spoke gateway.
	EnableVpcDnsServer bool `pulumi:"enableVpcDnsServer"`
	// Fault domain for OCI.
	FaultDomain string `pulumi:"faultDomain"`
	// A list of comma separated CIDRs to be filtered from the spoke VPC route table.
	FilteredSpokeVpcRoutes string `pulumi:"filteredSpokeVpcRoutes"`
	// Aviatrix spoke gateway name.
	GwName string `pulumi:"gwName"`
	// Size of spoke gateway instance.
	GwSize string `pulumi:"gwSize"`
	// HA gateway availability domain for OCI.
	HaAvailabilityDomain        string `pulumi:"haAvailabilityDomain"`
	HaAzureEipNameResourceGroup string `pulumi:"haAzureEipNameResourceGroup"`
	// Cloud instance ID of HA spoke gateway.
	HaCloudInstanceId string `pulumi:"haCloudInstanceId"`
	// The EIP address of the HA Spoke Gateway.
	HaEip string `pulumi:"haEip"`
	// HA gateway fault domain for OCI.
	HaFaultDomain string `pulumi:"haFaultDomain"`
	// Aviatrix spoke gateway unique name of HA spoke gateway.
	HaGwName string `pulumi:"haGwName"`
	// HA Gateway Size.
	HaGwSize string `pulumi:"haGwSize"`
	// The image version of the HA gateway.
	HaImageVersion string `pulumi:"haImageVersion"`
	// AZ of subnet being created for Insane Mode Spoke HA Gateway.
	HaInsaneModeAz string `pulumi:"haInsaneModeAz"`
	// HA OOB availability zone.
	HaOobAvailabilityZone string `pulumi:"haOobAvailabilityZone"`
	// HA OOB management subnet.
	HaOobManagementSubnet string `pulumi:"haOobManagementSubnet"`
	// Private IP address of HA spoke gateway.
	HaPrivateIp string `pulumi:"haPrivateIp"`
	// Public IP address of the HA spoke gateway.
	HaPublicIp        string `pulumi:"haPublicIp"`
	HaSecurityGroupId string `pulumi:"haSecurityGroupId"`
	// The software version of the HA gateway.
	HaSoftwareVersion string `pulumi:"haSoftwareVersion"`
	// HA Subnet.
	HaSubnet string `pulumi:"haSubnet"`
	// HA Zone.
	HaZone string `pulumi:"haZone"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The image version of the gateway.
	ImageVersion string `pulumi:"imageVersion"`
	// A list of comma separated CIDRs to be advertised to on-prem as "Included CIDR List".
	IncludedAdvertisedSpokeRoutes string `pulumi:"includedAdvertisedSpokeRoutes"`
	// Status of Insane Mode for Spoke Gateway.
	InsaneMode bool `pulumi:"insaneMode"`
	// AZ of subnet being created for Insane Mode spoke gateway.
	InsaneModeAz             string   `pulumi:"insaneModeAz"`
	LearnedCidrsApprovalMode string   `pulumi:"learnedCidrsApprovalMode"`
	LocalAsNumber            string   `pulumi:"localAsNumber"`
	MonitorExcludeLists      []string `pulumi:"monitorExcludeLists"`
	// OOB availability zone.
	OobAvailabilityZone string `pulumi:"oobAvailabilityZone"`
	// OOB management subnet.
	OobManagementSubnet string   `pulumi:"oobManagementSubnet"`
	PrependAsPaths      []string `pulumi:"prependAsPaths"`
	// Private IP address of the spoke gateway.
	PrivateIp string `pulumi:"privateIp"`
	// Public IP of spoke gateway.
	PublicIp string `pulumi:"publicIp"`
	// Security group used of the spoke gateway.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// Status of Single AZ HA of spoke gateway.
	SingleAzHa bool `pulumi:"singleAzHa"`
	// Status of Single IP Source NAT mode of the spoke gateway.
	SingleIpSnat bool `pulumi:"singleIpSnat"`
	// The software version of the gateway.
	SoftwareVersion              string   `pulumi:"softwareVersion"`
	SpokeBgpManualAdvertiseCidrs []string `pulumi:"spokeBgpManualAdvertiseCidrs"`
	SpotPrice                    string   `pulumi:"spotPrice"`
	// A VPC Network address range selected from one of the available network ranges.
	Subnet string `pulumi:"subnet"`
	// Instance tag of cloud provider.
	TagLists []string          `pulumi:"tagLists"`
	Tags     map[string]string `pulumi:"tags"`
	// Transit gateways attached to this spoke gateway.
	TransitGw           string `pulumi:"transitGw"`
	TunnelDetectionTime int    `pulumi:"tunnelDetectionTime"`
	// VPC-ID/VNet-Name of cloud provider.
	VpcId string `pulumi:"vpcId"`
	// Region of cloud provider.
	VpcReg string `pulumi:"vpcReg"`
	Zone   string `pulumi:"zone"`
}

func LookupAviatrixSpokeGatewayOutput(ctx *pulumi.Context, args LookupAviatrixSpokeGatewayOutputArgs, opts ...pulumi.InvokeOption) LookupAviatrixSpokeGatewayResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAviatrixSpokeGatewayResult, error) {
			args := v.(LookupAviatrixSpokeGatewayArgs)
			r, err := LookupAviatrixSpokeGateway(ctx, &args, opts...)
			var s LookupAviatrixSpokeGatewayResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAviatrixSpokeGatewayResultOutput)
}

// A collection of arguments for invoking getAviatrixSpokeGateway.
type LookupAviatrixSpokeGatewayOutputArgs struct {
	// Spoke gateway name. It can be used for getting spoke gateway.
	GwName pulumi.StringInput `pulumi:"gwName"`
}

func (LookupAviatrixSpokeGatewayOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAviatrixSpokeGatewayArgs)(nil)).Elem()
}

// A collection of values returned by getAviatrixSpokeGateway.
type LookupAviatrixSpokeGatewayResultOutput struct{ *pulumi.OutputState }

func (LookupAviatrixSpokeGatewayResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAviatrixSpokeGatewayResult)(nil)).Elem()
}

func (o LookupAviatrixSpokeGatewayResultOutput) ToLookupAviatrixSpokeGatewayResultOutput() LookupAviatrixSpokeGatewayResultOutput {
	return o
}

func (o LookupAviatrixSpokeGatewayResultOutput) ToLookupAviatrixSpokeGatewayResultOutputWithContext(ctx context.Context) LookupAviatrixSpokeGatewayResultOutput {
	return o
}

// Aviatrix account name.
func (o LookupAviatrixSpokeGatewayResultOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.AccountName }).(pulumi.StringOutput)
}

// When value is false, an idle address in Elastic IP pool is reused for this gateway. Otherwise, a new Elastic IP is allocated and used for this gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) AllocateNewEip() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) bool { return v.AllocateNewEip }).(pulumi.BoolOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) ApprovedLearnedCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) []string { return v.ApprovedLearnedCidrs }).(pulumi.StringArrayOutput)
}

// Availability domain for OCI.
func (o LookupAviatrixSpokeGatewayResultOutput) AvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.AvailabilityDomain }).(pulumi.StringOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) AzureEipNameResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.AzureEipNameResourceGroup }).(pulumi.StringOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) BgpEcmp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) bool { return v.BgpEcmp }).(pulumi.BoolOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) BgpHoldTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) int { return v.BgpHoldTime }).(pulumi.IntOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) BgpPollingTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) int { return v.BgpPollingTime }).(pulumi.IntOutput)
}

// Cloud instance ID.
func (o LookupAviatrixSpokeGatewayResultOutput) CloudInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.CloudInstanceId }).(pulumi.StringOutput)
}

// Type of cloud service provider.
func (o LookupAviatrixSpokeGatewayResultOutput) CloudType() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) int { return v.CloudType }).(pulumi.IntOutput)
}

// A list of comma separated CIDRs to be customized for the spoke VPC routes.
func (o LookupAviatrixSpokeGatewayResultOutput) CustomizedSpokeVpcRoutes() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.CustomizedSpokeVpcRoutes }).(pulumi.StringOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) DisableRoutePropagation() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) bool { return v.DisableRoutePropagation }).(pulumi.BoolOutput)
}

// The EIP address of the Spoke Gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) Eip() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.Eip }).(pulumi.StringOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) EnableActiveStandby() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) bool { return v.EnableActiveStandby }).(pulumi.BoolOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) EnableActiveStandbyPreemptive() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) bool { return v.EnableActiveStandbyPreemptive }).(pulumi.BoolOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) EnableAutoAdvertiseS2cCidrs() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) bool { return v.EnableAutoAdvertiseS2cCidrs }).(pulumi.BoolOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) EnableBgp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) bool { return v.EnableBgp }).(pulumi.BoolOutput)
}

// Status of Encrypt Volume of spoke gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) EnableEncryptVolume() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) bool { return v.EnableEncryptVolume }).(pulumi.BoolOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) EnableJumboFrame() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) bool { return v.EnableJumboFrame }).(pulumi.BoolOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) EnableLearnedCidrsApproval() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) bool { return v.EnableLearnedCidrsApproval }).(pulumi.BoolOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) EnableMonitorGatewaySubnets() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) bool { return v.EnableMonitorGatewaySubnets }).(pulumi.BoolOutput)
}

// Status of private OOB for the spoke gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) EnablePrivateOob() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) bool { return v.EnablePrivateOob }).(pulumi.BoolOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) EnablePrivateVpcDefaultRoute() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) bool { return v.EnablePrivateVpcDefaultRoute }).(pulumi.BoolOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) EnableSkipPublicRouteTableUpdate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) bool { return v.EnableSkipPublicRouteTableUpdate }).(pulumi.BoolOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) EnableSpotInstance() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) bool { return v.EnableSpotInstance }).(pulumi.BoolOutput)
}

// Status of VPC Dns Server of spoke gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) EnableVpcDnsServer() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) bool { return v.EnableVpcDnsServer }).(pulumi.BoolOutput)
}

// Fault domain for OCI.
func (o LookupAviatrixSpokeGatewayResultOutput) FaultDomain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.FaultDomain }).(pulumi.StringOutput)
}

// A list of comma separated CIDRs to be filtered from the spoke VPC route table.
func (o LookupAviatrixSpokeGatewayResultOutput) FilteredSpokeVpcRoutes() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.FilteredSpokeVpcRoutes }).(pulumi.StringOutput)
}

// Aviatrix spoke gateway name.
func (o LookupAviatrixSpokeGatewayResultOutput) GwName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.GwName }).(pulumi.StringOutput)
}

// Size of spoke gateway instance.
func (o LookupAviatrixSpokeGatewayResultOutput) GwSize() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.GwSize }).(pulumi.StringOutput)
}

// HA gateway availability domain for OCI.
func (o LookupAviatrixSpokeGatewayResultOutput) HaAvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.HaAvailabilityDomain }).(pulumi.StringOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) HaAzureEipNameResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.HaAzureEipNameResourceGroup }).(pulumi.StringOutput)
}

// Cloud instance ID of HA spoke gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) HaCloudInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.HaCloudInstanceId }).(pulumi.StringOutput)
}

// The EIP address of the HA Spoke Gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) HaEip() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.HaEip }).(pulumi.StringOutput)
}

// HA gateway fault domain for OCI.
func (o LookupAviatrixSpokeGatewayResultOutput) HaFaultDomain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.HaFaultDomain }).(pulumi.StringOutput)
}

// Aviatrix spoke gateway unique name of HA spoke gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) HaGwName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.HaGwName }).(pulumi.StringOutput)
}

// HA Gateway Size.
func (o LookupAviatrixSpokeGatewayResultOutput) HaGwSize() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.HaGwSize }).(pulumi.StringOutput)
}

// The image version of the HA gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) HaImageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.HaImageVersion }).(pulumi.StringOutput)
}

// AZ of subnet being created for Insane Mode Spoke HA Gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) HaInsaneModeAz() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.HaInsaneModeAz }).(pulumi.StringOutput)
}

// HA OOB availability zone.
func (o LookupAviatrixSpokeGatewayResultOutput) HaOobAvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.HaOobAvailabilityZone }).(pulumi.StringOutput)
}

// HA OOB management subnet.
func (o LookupAviatrixSpokeGatewayResultOutput) HaOobManagementSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.HaOobManagementSubnet }).(pulumi.StringOutput)
}

// Private IP address of HA spoke gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) HaPrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.HaPrivateIp }).(pulumi.StringOutput)
}

// Public IP address of the HA spoke gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) HaPublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.HaPublicIp }).(pulumi.StringOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) HaSecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.HaSecurityGroupId }).(pulumi.StringOutput)
}

// The software version of the HA gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) HaSoftwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.HaSoftwareVersion }).(pulumi.StringOutput)
}

// HA Subnet.
func (o LookupAviatrixSpokeGatewayResultOutput) HaSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.HaSubnet }).(pulumi.StringOutput)
}

// HA Zone.
func (o LookupAviatrixSpokeGatewayResultOutput) HaZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.HaZone }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAviatrixSpokeGatewayResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.Id }).(pulumi.StringOutput)
}

// The image version of the gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) ImageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.ImageVersion }).(pulumi.StringOutput)
}

// A list of comma separated CIDRs to be advertised to on-prem as "Included CIDR List".
func (o LookupAviatrixSpokeGatewayResultOutput) IncludedAdvertisedSpokeRoutes() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.IncludedAdvertisedSpokeRoutes }).(pulumi.StringOutput)
}

// Status of Insane Mode for Spoke Gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) InsaneMode() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) bool { return v.InsaneMode }).(pulumi.BoolOutput)
}

// AZ of subnet being created for Insane Mode spoke gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) InsaneModeAz() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.InsaneModeAz }).(pulumi.StringOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) LearnedCidrsApprovalMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.LearnedCidrsApprovalMode }).(pulumi.StringOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) LocalAsNumber() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.LocalAsNumber }).(pulumi.StringOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) MonitorExcludeLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) []string { return v.MonitorExcludeLists }).(pulumi.StringArrayOutput)
}

// OOB availability zone.
func (o LookupAviatrixSpokeGatewayResultOutput) OobAvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.OobAvailabilityZone }).(pulumi.StringOutput)
}

// OOB management subnet.
func (o LookupAviatrixSpokeGatewayResultOutput) OobManagementSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.OobManagementSubnet }).(pulumi.StringOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) PrependAsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) []string { return v.PrependAsPaths }).(pulumi.StringArrayOutput)
}

// Private IP address of the spoke gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.PrivateIp }).(pulumi.StringOutput)
}

// Public IP of spoke gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.PublicIp }).(pulumi.StringOutput)
}

// Security group used of the spoke gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// Status of Single AZ HA of spoke gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) SingleAzHa() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) bool { return v.SingleAzHa }).(pulumi.BoolOutput)
}

// Status of Single IP Source NAT mode of the spoke gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) SingleIpSnat() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) bool { return v.SingleIpSnat }).(pulumi.BoolOutput)
}

// The software version of the gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) SoftwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.SoftwareVersion }).(pulumi.StringOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) SpokeBgpManualAdvertiseCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) []string { return v.SpokeBgpManualAdvertiseCidrs }).(pulumi.StringArrayOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) SpotPrice() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.SpotPrice }).(pulumi.StringOutput)
}

// A VPC Network address range selected from one of the available network ranges.
func (o LookupAviatrixSpokeGatewayResultOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.Subnet }).(pulumi.StringOutput)
}

// Instance tag of cloud provider.
func (o LookupAviatrixSpokeGatewayResultOutput) TagLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) []string { return v.TagLists }).(pulumi.StringArrayOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Transit gateways attached to this spoke gateway.
func (o LookupAviatrixSpokeGatewayResultOutput) TransitGw() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.TransitGw }).(pulumi.StringOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) TunnelDetectionTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) int { return v.TunnelDetectionTime }).(pulumi.IntOutput)
}

// VPC-ID/VNet-Name of cloud provider.
func (o LookupAviatrixSpokeGatewayResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.VpcId }).(pulumi.StringOutput)
}

// Region of cloud provider.
func (o LookupAviatrixSpokeGatewayResultOutput) VpcReg() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.VpcReg }).(pulumi.StringOutput)
}

func (o LookupAviatrixSpokeGatewayResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAviatrixSpokeGatewayResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAviatrixSpokeGatewayResultOutput{})
}
