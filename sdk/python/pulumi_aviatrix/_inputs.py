# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AviatrixAppDomainSelectorArgs',
    'AviatrixAppDomainSelectorMatchExpressionArgs',
    'AviatrixAwsTgwSecurityDomainArgs',
    'AviatrixAwsTgwSecurityDomainAttachedVpcArgs',
    'AviatrixAwsTgwVpnConnVpnTunnelDataArgs',
    'AviatrixFqdnDomainNameArgs',
    'AviatrixFqdnGwFilterTagListArgs',
    'AviatrixTransitGatewayBgpLanInterfaceArgs',
    'AviatrixTransitGatewayHaBgpLanInterfaceArgs',
    'AviatrixVpcPrivateSubnetArgs',
    'AviatrixVpcPublicSubnetArgs',
    'AviatrixVpcSubnetArgs',
    'ProviderIgnoreTagsArgs',
]

@pulumi.input_type
class AviatrixAppDomainSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: pulumi.Input[Sequence[pulumi.Input['AviatrixAppDomainSelectorMatchExpressionArgs']]]):
        pulumi.set(__self__, "match_expressions", match_expressions)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> pulumi.Input[Sequence[pulumi.Input['AviatrixAppDomainSelectorMatchExpressionArgs']]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: pulumi.Input[Sequence[pulumi.Input['AviatrixAppDomainSelectorMatchExpressionArgs']]]):
        pulumi.set(self, "match_expressions", value)


@pulumi.input_type
class AviatrixAppDomainSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 res_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if res_id is not None:
            pulumi.set(__self__, "res_id", res_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resId")
    def res_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "res_id")

    @res_id.setter
    def res_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "res_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class AviatrixAwsTgwSecurityDomainArgs:
    def __init__(__self__, *,
                 security_domain_name: pulumi.Input[str],
                 attached_vpcs: Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixAwsTgwSecurityDomainAttachedVpcArgs']]]] = None,
                 aviatrix_firewall: Optional[pulumi.Input[bool]] = None,
                 connected_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 native_egress: Optional[pulumi.Input[bool]] = None,
                 native_firewall: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "security_domain_name", security_domain_name)
        if attached_vpcs is not None:
            warnings.warn("""Please set `manage_vpc_attachment` to false, and use the standalone aviatrix_aws_tgw_vpc_attachment resource instead.""", DeprecationWarning)
            pulumi.log.warn("""attached_vpcs is deprecated: Please set `manage_vpc_attachment` to false, and use the standalone aviatrix_aws_tgw_vpc_attachment resource instead.""")
        if attached_vpcs is not None:
            pulumi.set(__self__, "attached_vpcs", attached_vpcs)
        if aviatrix_firewall is not None:
            pulumi.set(__self__, "aviatrix_firewall", aviatrix_firewall)
        if connected_domains is not None:
            pulumi.set(__self__, "connected_domains", connected_domains)
        if native_egress is not None:
            pulumi.set(__self__, "native_egress", native_egress)
        if native_firewall is not None:
            pulumi.set(__self__, "native_firewall", native_firewall)

    @property
    @pulumi.getter(name="securityDomainName")
    def security_domain_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "security_domain_name")

    @security_domain_name.setter
    def security_domain_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "security_domain_name", value)

    @property
    @pulumi.getter(name="attachedVpcs")
    def attached_vpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixAwsTgwSecurityDomainAttachedVpcArgs']]]]:
        return pulumi.get(self, "attached_vpcs")

    @attached_vpcs.setter
    def attached_vpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixAwsTgwSecurityDomainAttachedVpcArgs']]]]):
        pulumi.set(self, "attached_vpcs", value)

    @property
    @pulumi.getter(name="aviatrixFirewall")
    def aviatrix_firewall(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "aviatrix_firewall")

    @aviatrix_firewall.setter
    def aviatrix_firewall(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aviatrix_firewall", value)

    @property
    @pulumi.getter(name="connectedDomains")
    def connected_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "connected_domains")

    @connected_domains.setter
    def connected_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "connected_domains", value)

    @property
    @pulumi.getter(name="nativeEgress")
    def native_egress(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "native_egress")

    @native_egress.setter
    def native_egress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "native_egress", value)

    @property
    @pulumi.getter(name="nativeFirewall")
    def native_firewall(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "native_firewall")

    @native_firewall.setter
    def native_firewall(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "native_firewall", value)


@pulumi.input_type
class AviatrixAwsTgwSecurityDomainAttachedVpcArgs:
    def __init__(__self__, *,
                 vpc_account_name: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 vpc_region: pulumi.Input[str],
                 customized_route_advertisement: Optional[pulumi.Input[str]] = None,
                 customized_routes: Optional[pulumi.Input[str]] = None,
                 disable_local_route_propagation: Optional[pulumi.Input[bool]] = None,
                 route_tables: Optional[pulumi.Input[str]] = None,
                 subnets: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "vpc_account_name", vpc_account_name)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vpc_region", vpc_region)
        if customized_route_advertisement is not None:
            pulumi.set(__self__, "customized_route_advertisement", customized_route_advertisement)
        if customized_routes is not None:
            pulumi.set(__self__, "customized_routes", customized_routes)
        if disable_local_route_propagation is not None:
            pulumi.set(__self__, "disable_local_route_propagation", disable_local_route_propagation)
        if route_tables is not None:
            pulumi.set(__self__, "route_tables", route_tables)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="vpcAccountName")
    def vpc_account_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vpc_account_name")

    @vpc_account_name.setter
    def vpc_account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_account_name", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="vpcRegion")
    def vpc_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vpc_region")

    @vpc_region.setter
    def vpc_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_region", value)

    @property
    @pulumi.getter(name="customizedRouteAdvertisement")
    def customized_route_advertisement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "customized_route_advertisement")

    @customized_route_advertisement.setter
    def customized_route_advertisement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customized_route_advertisement", value)

    @property
    @pulumi.getter(name="customizedRoutes")
    def customized_routes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "customized_routes")

    @customized_routes.setter
    def customized_routes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customized_routes", value)

    @property
    @pulumi.getter(name="disableLocalRoutePropagation")
    def disable_local_route_propagation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_local_route_propagation")

    @disable_local_route_propagation.setter
    def disable_local_route_propagation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_local_route_propagation", value)

    @property
    @pulumi.getter(name="routeTables")
    def route_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_tables")

    @route_tables.setter
    def route_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_tables", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class AviatrixAwsTgwVpnConnVpnTunnelDataArgs:
    def __init__(__self__, *,
                 last_status_change_time: Optional[pulumi.Input[str]] = None,
                 route_count: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 status_message: Optional[pulumi.Input[str]] = None,
                 tgw_asn: Optional[pulumi.Input[str]] = None,
                 tunnel_name: Optional[pulumi.Input[str]] = None,
                 vpn_inside_address: Optional[pulumi.Input[str]] = None,
                 vpn_outside_address: Optional[pulumi.Input[str]] = None):
        if last_status_change_time is not None:
            pulumi.set(__self__, "last_status_change_time", last_status_change_time)
        if route_count is not None:
            pulumi.set(__self__, "route_count", route_count)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_message is not None:
            pulumi.set(__self__, "status_message", status_message)
        if tgw_asn is not None:
            pulumi.set(__self__, "tgw_asn", tgw_asn)
        if tunnel_name is not None:
            pulumi.set(__self__, "tunnel_name", tunnel_name)
        if vpn_inside_address is not None:
            pulumi.set(__self__, "vpn_inside_address", vpn_inside_address)
        if vpn_outside_address is not None:
            pulumi.set(__self__, "vpn_outside_address", vpn_outside_address)

    @property
    @pulumi.getter(name="lastStatusChangeTime")
    def last_status_change_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_status_change_time")

    @last_status_change_time.setter
    def last_status_change_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_status_change_time", value)

    @property
    @pulumi.getter(name="routeCount")
    def route_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "route_count")

    @route_count.setter
    def route_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "route_count", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status_message")

    @status_message.setter
    def status_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_message", value)

    @property
    @pulumi.getter(name="tgwAsn")
    def tgw_asn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tgw_asn")

    @tgw_asn.setter
    def tgw_asn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tgw_asn", value)

    @property
    @pulumi.getter(name="tunnelName")
    def tunnel_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_name")

    @tunnel_name.setter
    def tunnel_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_name", value)

    @property
    @pulumi.getter(name="vpnInsideAddress")
    def vpn_inside_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpn_inside_address")

    @vpn_inside_address.setter
    def vpn_inside_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_inside_address", value)

    @property
    @pulumi.getter(name="vpnOutsideAddress")
    def vpn_outside_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpn_outside_address")

    @vpn_outside_address.setter
    def vpn_outside_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_outside_address", value)


@pulumi.input_type
class AviatrixFqdnDomainNameArgs:
    def __init__(__self__, *,
                 fqdn: pulumi.Input[str],
                 port: pulumi.Input[str],
                 proto: pulumi.Input[str],
                 action: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "proto", proto)
        if action is not None:
            pulumi.set(__self__, "action", action)

    @property
    @pulumi.getter
    def fqdn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: pulumi.Input[str]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def proto(self) -> pulumi.Input[str]:
        return pulumi.get(self, "proto")

    @proto.setter
    def proto(self, value: pulumi.Input[str]):
        pulumi.set(self, "proto", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)


@pulumi.input_type
class AviatrixFqdnGwFilterTagListArgs:
    def __init__(__self__, *,
                 gw_name: pulumi.Input[str],
                 source_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "gw_name", gw_name)
        if source_ip_lists is not None:
            pulumi.set(__self__, "source_ip_lists", source_ip_lists)

    @property
    @pulumi.getter(name="gwName")
    def gw_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gw_name")

    @gw_name.setter
    def gw_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "gw_name", value)

    @property
    @pulumi.getter(name="sourceIpLists")
    def source_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "source_ip_lists")

    @source_ip_lists.setter
    def source_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ip_lists", value)


@pulumi.input_type
class AviatrixTransitGatewayBgpLanInterfaceArgs:
    def __init__(__self__, *,
                 subnet: pulumi.Input[str],
                 vpc_id: pulumi.Input[str]):
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class AviatrixTransitGatewayHaBgpLanInterfaceArgs:
    def __init__(__self__, *,
                 subnet: pulumi.Input[str],
                 vpc_id: pulumi.Input[str]):
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class AviatrixVpcPrivateSubnetArgs:
    def __init__(__self__, *,
                 cidr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class AviatrixVpcPublicSubnetArgs:
    def __init__(__self__, *,
                 cidr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class AviatrixVpcSubnetArgs:
    def __init__(__self__, *,
                 cidr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class ProviderIgnoreTagsArgs:
    def __init__(__self__, *,
                 key_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if key_prefixes is not None:
            pulumi.set(__self__, "key_prefixes", key_prefixes)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)

    @property
    @pulumi.getter(name="keyPrefixes")
    def key_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "key_prefixes")

    @key_prefixes.setter
    def key_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_prefixes", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "keys", value)


