// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The **aviatrix_aws_tgw_peering_domain_conn** resource allows the creation and management of Aviatrix domain connections between peered AWS TGWs.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aviatrix from "@pulumi/aviatrix";
 *
 * // Create an Aviatrix Domian Connection between Peered AWS Tgws
 * const test = new aviatrix.AviatrixAwsTgwPeeringDomainConn("test", {
 *     domainName1: "Default_Domain",
 *     domainName2: "Default_Domain",
 *     tgwName1: "tgw1",
 *     tgwName2: "tgw2",
 * });
 * ```
 *
 * ## Import
 *
 * **aws_tgw_peering_domain_conn** can be imported using the `tgw_name1`, `domain_name1`, `tgw_name2` and `domain_name2`, e.g.
 *
 * ```sh
 *  $ pulumi import aviatrix:index/aviatrixAwsTgwPeeringDomainConn:AviatrixAwsTgwPeeringDomainConn test tgw_name1:domain_name1~tgw_name2:domain_name2
 * ```
 */
export class AviatrixAwsTgwPeeringDomainConn extends pulumi.CustomResource {
    /**
     * Get an existing AviatrixAwsTgwPeeringDomainConn resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AviatrixAwsTgwPeeringDomainConnState, opts?: pulumi.CustomResourceOptions): AviatrixAwsTgwPeeringDomainConn {
        return new AviatrixAwsTgwPeeringDomainConn(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/aviatrixAwsTgwPeeringDomainConn:AviatrixAwsTgwPeeringDomainConn';

    /**
     * Returns true if the given object is an instance of AviatrixAwsTgwPeeringDomainConn.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AviatrixAwsTgwPeeringDomainConn {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AviatrixAwsTgwPeeringDomainConn.__pulumiType;
    }

    /**
     * The name of the source domain to make a connection.
     */
    public readonly domainName1!: pulumi.Output<string>;
    /**
     * The name of the destination domain to make a connection.
     */
    public readonly domainName2!: pulumi.Output<string>;
    /**
     * The AWS TGW name of the source domain to make a connection.
     */
    public readonly tgwName1!: pulumi.Output<string>;
    /**
     * The AWS TGW name of the destination domain to make a connection.
     */
    public readonly tgwName2!: pulumi.Output<string>;

    /**
     * Create a AviatrixAwsTgwPeeringDomainConn resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AviatrixAwsTgwPeeringDomainConnArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AviatrixAwsTgwPeeringDomainConnArgs | AviatrixAwsTgwPeeringDomainConnState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AviatrixAwsTgwPeeringDomainConnState | undefined;
            resourceInputs["domainName1"] = state ? state.domainName1 : undefined;
            resourceInputs["domainName2"] = state ? state.domainName2 : undefined;
            resourceInputs["tgwName1"] = state ? state.tgwName1 : undefined;
            resourceInputs["tgwName2"] = state ? state.tgwName2 : undefined;
        } else {
            const args = argsOrState as AviatrixAwsTgwPeeringDomainConnArgs | undefined;
            if ((!args || args.domainName1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName1'");
            }
            if ((!args || args.domainName2 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName2'");
            }
            if ((!args || args.tgwName1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tgwName1'");
            }
            if ((!args || args.tgwName2 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tgwName2'");
            }
            resourceInputs["domainName1"] = args ? args.domainName1 : undefined;
            resourceInputs["domainName2"] = args ? args.domainName2 : undefined;
            resourceInputs["tgwName1"] = args ? args.tgwName1 : undefined;
            resourceInputs["tgwName2"] = args ? args.tgwName2 : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AviatrixAwsTgwPeeringDomainConn.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AviatrixAwsTgwPeeringDomainConn resources.
 */
export interface AviatrixAwsTgwPeeringDomainConnState {
    /**
     * The name of the source domain to make a connection.
     */
    domainName1?: pulumi.Input<string>;
    /**
     * The name of the destination domain to make a connection.
     */
    domainName2?: pulumi.Input<string>;
    /**
     * The AWS TGW name of the source domain to make a connection.
     */
    tgwName1?: pulumi.Input<string>;
    /**
     * The AWS TGW name of the destination domain to make a connection.
     */
    tgwName2?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AviatrixAwsTgwPeeringDomainConn resource.
 */
export interface AviatrixAwsTgwPeeringDomainConnArgs {
    /**
     * The name of the source domain to make a connection.
     */
    domainName1: pulumi.Input<string>;
    /**
     * The name of the destination domain to make a connection.
     */
    domainName2: pulumi.Input<string>;
    /**
     * The AWS TGW name of the source domain to make a connection.
     */
    tgwName1: pulumi.Input<string>;
    /**
     * The AWS TGW name of the destination domain to make a connection.
     */
    tgwName2: pulumi.Input<string>;
}
