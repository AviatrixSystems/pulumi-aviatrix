// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aviatrix.Outputs
{

    [OutputType]
    public sealed class GetAviatrixTransitGatewaysGatewayListResult
    {
        public readonly string AccountName;
        public readonly bool AllocateNewEip;
        public readonly string AvailabilityDomain;
        public readonly string AzureEipNameResourceGroup;
        public readonly bool BgpEcmp;
        public readonly int BgpHoldTime;
        public readonly ImmutableArray<Outputs.GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceResult> BgpLanInterfaces;
        public readonly ImmutableArray<string> BgpLanIpLists;
        public readonly string BgpPollingTime;
        public readonly string CloudInstanceId;
        public readonly int CloudType;
        public readonly bool ConnectedTransit;
        public readonly string CustomizedSpokeVpcRoutes;
        public readonly bool EnableActiveStandby;
        public readonly bool EnableActiveStandbyPreemptive;
        public readonly bool EnableBgpOverLan;
        public readonly bool EnableEncryptVolume;
        public readonly bool EnableGatewayLoadBalancer;
        public readonly bool EnableHybridConnection;
        public readonly bool EnableJumboFrame;
        public readonly bool EnableMonitorGatewaySubnets;
        public readonly bool EnableMultiTierTransit;
        public readonly bool EnablePrivateOob;
        public readonly bool EnableSegmentation;
        public readonly bool EnableSpotInstance;
        public readonly bool EnableTransitSummarizeCidrToTgw;
        public readonly bool EnableVpcDnsServer;
        public readonly string ExcludedAdvertisedSpokeRoutes;
        public readonly string FaultDomain;
        public readonly string FilteredSpokeVpcRoutes;
        public readonly string GwName;
        public readonly string GwSize;
        public readonly ImmutableArray<Outputs.GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceResult> HaBgpLanInterfaces;
        public readonly ImmutableArray<string> HaBgpLanIpLists;
        public readonly string ImageVersion;
        public readonly bool InsaneMode;
        public readonly string InsaneModeAz;
        public readonly string LanPrivateSubnet;
        public readonly string LanVpcId;
        public readonly string LearnedCidrsApprovalMode;
        public readonly string LocalAsNumber;
        public readonly ImmutableArray<string> MonitorExcludeLists;
        public readonly string OobAvailabilityZone;
        public readonly string OobManagementSubnet;
        public readonly ImmutableArray<string> PrependAsPaths;
        public readonly string PrivateIp;
        public readonly string PublicIp;
        public readonly string SecurityGroupId;
        public readonly bool SingleAzHa;
        public readonly bool SingleIpSnat;
        public readonly string SoftwareVersion;
        public readonly string SpotPrice;
        public readonly string Subnet;
        public readonly int TunnelDetectionTime;
        public readonly string VpcId;
        public readonly string VpcReg;
        public readonly string Zone;

        [OutputConstructor]
        private GetAviatrixTransitGatewaysGatewayListResult(
            string accountName,

            bool allocateNewEip,

            string availabilityDomain,

            string azureEipNameResourceGroup,

            bool bgpEcmp,

            int bgpHoldTime,

            ImmutableArray<Outputs.GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceResult> bgpLanInterfaces,

            ImmutableArray<string> bgpLanIpLists,

            string bgpPollingTime,

            string cloudInstanceId,

            int cloudType,

            bool connectedTransit,

            string customizedSpokeVpcRoutes,

            bool enableActiveStandby,

            bool enableActiveStandbyPreemptive,

            bool enableBgpOverLan,

            bool enableEncryptVolume,

            bool enableGatewayLoadBalancer,

            bool enableHybridConnection,

            bool enableJumboFrame,

            bool enableMonitorGatewaySubnets,

            bool enableMultiTierTransit,

            bool enablePrivateOob,

            bool enableSegmentation,

            bool enableSpotInstance,

            bool enableTransitSummarizeCidrToTgw,

            bool enableVpcDnsServer,

            string excludedAdvertisedSpokeRoutes,

            string faultDomain,

            string filteredSpokeVpcRoutes,

            string gwName,

            string gwSize,

            ImmutableArray<Outputs.GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceResult> haBgpLanInterfaces,

            ImmutableArray<string> haBgpLanIpLists,

            string imageVersion,

            bool insaneMode,

            string insaneModeAz,

            string lanPrivateSubnet,

            string lanVpcId,

            string learnedCidrsApprovalMode,

            string localAsNumber,

            ImmutableArray<string> monitorExcludeLists,

            string oobAvailabilityZone,

            string oobManagementSubnet,

            ImmutableArray<string> prependAsPaths,

            string privateIp,

            string publicIp,

            string securityGroupId,

            bool singleAzHa,

            bool singleIpSnat,

            string softwareVersion,

            string spotPrice,

            string subnet,

            int tunnelDetectionTime,

            string vpcId,

            string vpcReg,

            string zone)
        {
            AccountName = accountName;
            AllocateNewEip = allocateNewEip;
            AvailabilityDomain = availabilityDomain;
            AzureEipNameResourceGroup = azureEipNameResourceGroup;
            BgpEcmp = bgpEcmp;
            BgpHoldTime = bgpHoldTime;
            BgpLanInterfaces = bgpLanInterfaces;
            BgpLanIpLists = bgpLanIpLists;
            BgpPollingTime = bgpPollingTime;
            CloudInstanceId = cloudInstanceId;
            CloudType = cloudType;
            ConnectedTransit = connectedTransit;
            CustomizedSpokeVpcRoutes = customizedSpokeVpcRoutes;
            EnableActiveStandby = enableActiveStandby;
            EnableActiveStandbyPreemptive = enableActiveStandbyPreemptive;
            EnableBgpOverLan = enableBgpOverLan;
            EnableEncryptVolume = enableEncryptVolume;
            EnableGatewayLoadBalancer = enableGatewayLoadBalancer;
            EnableHybridConnection = enableHybridConnection;
            EnableJumboFrame = enableJumboFrame;
            EnableMonitorGatewaySubnets = enableMonitorGatewaySubnets;
            EnableMultiTierTransit = enableMultiTierTransit;
            EnablePrivateOob = enablePrivateOob;
            EnableSegmentation = enableSegmentation;
            EnableSpotInstance = enableSpotInstance;
            EnableTransitSummarizeCidrToTgw = enableTransitSummarizeCidrToTgw;
            EnableVpcDnsServer = enableVpcDnsServer;
            ExcludedAdvertisedSpokeRoutes = excludedAdvertisedSpokeRoutes;
            FaultDomain = faultDomain;
            FilteredSpokeVpcRoutes = filteredSpokeVpcRoutes;
            GwName = gwName;
            GwSize = gwSize;
            HaBgpLanInterfaces = haBgpLanInterfaces;
            HaBgpLanIpLists = haBgpLanIpLists;
            ImageVersion = imageVersion;
            InsaneMode = insaneMode;
            InsaneModeAz = insaneModeAz;
            LanPrivateSubnet = lanPrivateSubnet;
            LanVpcId = lanVpcId;
            LearnedCidrsApprovalMode = learnedCidrsApprovalMode;
            LocalAsNumber = localAsNumber;
            MonitorExcludeLists = monitorExcludeLists;
            OobAvailabilityZone = oobAvailabilityZone;
            OobManagementSubnet = oobManagementSubnet;
            PrependAsPaths = prependAsPaths;
            PrivateIp = privateIp;
            PublicIp = publicIp;
            SecurityGroupId = securityGroupId;
            SingleAzHa = singleAzHa;
            SingleIpSnat = singleIpSnat;
            SoftwareVersion = softwareVersion;
            SpotPrice = spotPrice;
            Subnet = subnet;
            TunnelDetectionTime = tunnelDetectionTime;
            VpcId = vpcId;
            VpcReg = vpcReg;
            Zone = zone;
        }
    }
}
