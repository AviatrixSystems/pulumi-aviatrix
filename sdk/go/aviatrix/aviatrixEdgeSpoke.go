// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixEdgeSpoke struct {
	pulumi.CustomResourceState

	// Approved learned CIDRs for BGP Spoke Gateway.
	ApprovedLearnedCidrs pulumi.StringArrayOutput `pulumi:"approvedLearnedCidrs"`
	// BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.
	BgpHoldTime pulumi.IntPtrOutput `pulumi:"bgpHoldTime"`
	// BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.
	BgpPollingTime pulumi.IntPtrOutput `pulumi:"bgpPollingTime"`
	// DNS server IP.
	DnsServerIp pulumi.StringPtrOutput `pulumi:"dnsServerIp"`
	// Enables Edge Active-Standby Mode.
	EnableEdgeActiveStandby pulumi.BoolPtrOutput `pulumi:"enableEdgeActiveStandby"`
	// Enables Preemptive Mode for Edge Active-Standby, available only with Active-Standby enabled.
	EnableEdgeActiveStandbyPreemptive pulumi.BoolPtrOutput `pulumi:"enableEdgeActiveStandbyPreemptive"`
	// Enable Edge transitive routing.
	EnableEdgeTransitiveRouting pulumi.BoolPtrOutput `pulumi:"enableEdgeTransitiveRouting"`
	// Enable jumbo frame.
	EnableJumboFrame pulumi.BoolPtrOutput `pulumi:"enableJumboFrame"`
	// Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.
	EnableLearnedCidrsApproval pulumi.BoolPtrOutput `pulumi:"enableLearnedCidrsApproval"`
	// Enable management over private network.
	EnableManagementOverPrivateNetwork pulumi.BoolPtrOutput `pulumi:"enableManagementOverPrivateNetwork"`
	// Enable preserve as path when advertising manual summary CIDRs on BGP spoke gateway.
	EnablePreserveAsPath pulumi.BoolPtrOutput `pulumi:"enablePreserveAsPath"`
	// Edge as a Spoke name.
	GwName pulumi.StringOutput `pulumi:"gwName"`
	// LAN interface IP/prefix.
	LanInterfaceIpPrefix pulumi.StringOutput `pulumi:"lanInterfaceIpPrefix"`
	// The latitude of the Edge as a Spoke.
	Latitude pulumi.StringOutput `pulumi:"latitude"`
	// Local AS number.
	LocalAsNumber pulumi.StringOutput `pulumi:"localAsNumber"`
	// The longitude of the Edge as a Spoke.
	Longitude pulumi.StringOutput `pulumi:"longitude"`
	// Management default gateway IP.
	ManagementDefaultGatewayIp pulumi.StringPtrOutput `pulumi:"managementDefaultGatewayIp"`
	// Management egress gateway IP/prefix.
	ManagementEgressIpPrefix pulumi.StringPtrOutput `pulumi:"managementEgressIpPrefix"`
	// Management interface configuration. Valid values: 'DHCP' and 'Static'.
	ManagementInterfaceConfig pulumi.StringOutput `pulumi:"managementInterfaceConfig"`
	// Management interface IP/prefix.
	ManagementInterfaceIpPrefix pulumi.StringPtrOutput `pulumi:"managementInterfaceIpPrefix"`
	// List of AS numbers to prepend gateway BGP AS_Path field.
	PrependAsPaths pulumi.StringArrayOutput `pulumi:"prependAsPaths"`
	// Ethernet interface RX queue size.
	RxQueueSize pulumi.StringPtrOutput `pulumi:"rxQueueSize"`
	// Secondary DNS server IP.
	SecondaryDnsServerIp pulumi.StringPtrOutput `pulumi:"secondaryDnsServerIp"`
	// Site ID.
	SiteId pulumi.StringOutput `pulumi:"siteId"`
	// Intended CIDR list to be advertised to external BGP router.
	SpokeBgpManualAdvertiseCidrs pulumi.StringArrayOutput `pulumi:"spokeBgpManualAdvertiseCidrs"`
	// State of Edge as a Spoke.
	State pulumi.StringOutput `pulumi:"state"`
	// WAN default gateway IP.
	WanDefaultGatewayIp pulumi.StringOutput `pulumi:"wanDefaultGatewayIp"`
	// WAN interface IP/prefix.
	WanInterfaceIpPrefix pulumi.StringOutput `pulumi:"wanInterfaceIpPrefix"`
	// WAN interface public IP.
	WanPublicIp pulumi.StringOutput `pulumi:"wanPublicIp"`
	// The location where the Edge as a CaaG ZTP file will be stored.
	ZtpFileDownloadPath pulumi.StringOutput `pulumi:"ztpFileDownloadPath"`
	// ZTP file type.
	ZtpFileType pulumi.StringOutput `pulumi:"ztpFileType"`
}

// NewAviatrixEdgeSpoke registers a new resource with the given unique name, arguments, and options.
func NewAviatrixEdgeSpoke(ctx *pulumi.Context,
	name string, args *AviatrixEdgeSpokeArgs, opts ...pulumi.ResourceOption) (*AviatrixEdgeSpoke, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GwName == nil {
		return nil, errors.New("invalid value for required argument 'GwName'")
	}
	if args.LanInterfaceIpPrefix == nil {
		return nil, errors.New("invalid value for required argument 'LanInterfaceIpPrefix'")
	}
	if args.ManagementInterfaceConfig == nil {
		return nil, errors.New("invalid value for required argument 'ManagementInterfaceConfig'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	if args.WanDefaultGatewayIp == nil {
		return nil, errors.New("invalid value for required argument 'WanDefaultGatewayIp'")
	}
	if args.WanInterfaceIpPrefix == nil {
		return nil, errors.New("invalid value for required argument 'WanInterfaceIpPrefix'")
	}
	if args.ZtpFileDownloadPath == nil {
		return nil, errors.New("invalid value for required argument 'ZtpFileDownloadPath'")
	}
	if args.ZtpFileType == nil {
		return nil, errors.New("invalid value for required argument 'ZtpFileType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixEdgeSpoke
	err := ctx.RegisterResource("aviatrix:index/aviatrixEdgeSpoke:AviatrixEdgeSpoke", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixEdgeSpoke gets an existing AviatrixEdgeSpoke resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixEdgeSpoke(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixEdgeSpokeState, opts ...pulumi.ResourceOption) (*AviatrixEdgeSpoke, error) {
	var resource AviatrixEdgeSpoke
	err := ctx.ReadResource("aviatrix:index/aviatrixEdgeSpoke:AviatrixEdgeSpoke", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixEdgeSpoke resources.
type aviatrixEdgeSpokeState struct {
	// Approved learned CIDRs for BGP Spoke Gateway.
	ApprovedLearnedCidrs []string `pulumi:"approvedLearnedCidrs"`
	// BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.
	BgpHoldTime *int `pulumi:"bgpHoldTime"`
	// BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.
	BgpPollingTime *int `pulumi:"bgpPollingTime"`
	// DNS server IP.
	DnsServerIp *string `pulumi:"dnsServerIp"`
	// Enables Edge Active-Standby Mode.
	EnableEdgeActiveStandby *bool `pulumi:"enableEdgeActiveStandby"`
	// Enables Preemptive Mode for Edge Active-Standby, available only with Active-Standby enabled.
	EnableEdgeActiveStandbyPreemptive *bool `pulumi:"enableEdgeActiveStandbyPreemptive"`
	// Enable Edge transitive routing.
	EnableEdgeTransitiveRouting *bool `pulumi:"enableEdgeTransitiveRouting"`
	// Enable jumbo frame.
	EnableJumboFrame *bool `pulumi:"enableJumboFrame"`
	// Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.
	EnableLearnedCidrsApproval *bool `pulumi:"enableLearnedCidrsApproval"`
	// Enable management over private network.
	EnableManagementOverPrivateNetwork *bool `pulumi:"enableManagementOverPrivateNetwork"`
	// Enable preserve as path when advertising manual summary CIDRs on BGP spoke gateway.
	EnablePreserveAsPath *bool `pulumi:"enablePreserveAsPath"`
	// Edge as a Spoke name.
	GwName *string `pulumi:"gwName"`
	// LAN interface IP/prefix.
	LanInterfaceIpPrefix *string `pulumi:"lanInterfaceIpPrefix"`
	// The latitude of the Edge as a Spoke.
	Latitude *string `pulumi:"latitude"`
	// Local AS number.
	LocalAsNumber *string `pulumi:"localAsNumber"`
	// The longitude of the Edge as a Spoke.
	Longitude *string `pulumi:"longitude"`
	// Management default gateway IP.
	ManagementDefaultGatewayIp *string `pulumi:"managementDefaultGatewayIp"`
	// Management egress gateway IP/prefix.
	ManagementEgressIpPrefix *string `pulumi:"managementEgressIpPrefix"`
	// Management interface configuration. Valid values: 'DHCP' and 'Static'.
	ManagementInterfaceConfig *string `pulumi:"managementInterfaceConfig"`
	// Management interface IP/prefix.
	ManagementInterfaceIpPrefix *string `pulumi:"managementInterfaceIpPrefix"`
	// List of AS numbers to prepend gateway BGP AS_Path field.
	PrependAsPaths []string `pulumi:"prependAsPaths"`
	// Ethernet interface RX queue size.
	RxQueueSize *string `pulumi:"rxQueueSize"`
	// Secondary DNS server IP.
	SecondaryDnsServerIp *string `pulumi:"secondaryDnsServerIp"`
	// Site ID.
	SiteId *string `pulumi:"siteId"`
	// Intended CIDR list to be advertised to external BGP router.
	SpokeBgpManualAdvertiseCidrs []string `pulumi:"spokeBgpManualAdvertiseCidrs"`
	// State of Edge as a Spoke.
	State *string `pulumi:"state"`
	// WAN default gateway IP.
	WanDefaultGatewayIp *string `pulumi:"wanDefaultGatewayIp"`
	// WAN interface IP/prefix.
	WanInterfaceIpPrefix *string `pulumi:"wanInterfaceIpPrefix"`
	// WAN interface public IP.
	WanPublicIp *string `pulumi:"wanPublicIp"`
	// The location where the Edge as a CaaG ZTP file will be stored.
	ZtpFileDownloadPath *string `pulumi:"ztpFileDownloadPath"`
	// ZTP file type.
	ZtpFileType *string `pulumi:"ztpFileType"`
}

type AviatrixEdgeSpokeState struct {
	// Approved learned CIDRs for BGP Spoke Gateway.
	ApprovedLearnedCidrs pulumi.StringArrayInput
	// BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.
	BgpHoldTime pulumi.IntPtrInput
	// BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.
	BgpPollingTime pulumi.IntPtrInput
	// DNS server IP.
	DnsServerIp pulumi.StringPtrInput
	// Enables Edge Active-Standby Mode.
	EnableEdgeActiveStandby pulumi.BoolPtrInput
	// Enables Preemptive Mode for Edge Active-Standby, available only with Active-Standby enabled.
	EnableEdgeActiveStandbyPreemptive pulumi.BoolPtrInput
	// Enable Edge transitive routing.
	EnableEdgeTransitiveRouting pulumi.BoolPtrInput
	// Enable jumbo frame.
	EnableJumboFrame pulumi.BoolPtrInput
	// Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.
	EnableLearnedCidrsApproval pulumi.BoolPtrInput
	// Enable management over private network.
	EnableManagementOverPrivateNetwork pulumi.BoolPtrInput
	// Enable preserve as path when advertising manual summary CIDRs on BGP spoke gateway.
	EnablePreserveAsPath pulumi.BoolPtrInput
	// Edge as a Spoke name.
	GwName pulumi.StringPtrInput
	// LAN interface IP/prefix.
	LanInterfaceIpPrefix pulumi.StringPtrInput
	// The latitude of the Edge as a Spoke.
	Latitude pulumi.StringPtrInput
	// Local AS number.
	LocalAsNumber pulumi.StringPtrInput
	// The longitude of the Edge as a Spoke.
	Longitude pulumi.StringPtrInput
	// Management default gateway IP.
	ManagementDefaultGatewayIp pulumi.StringPtrInput
	// Management egress gateway IP/prefix.
	ManagementEgressIpPrefix pulumi.StringPtrInput
	// Management interface configuration. Valid values: 'DHCP' and 'Static'.
	ManagementInterfaceConfig pulumi.StringPtrInput
	// Management interface IP/prefix.
	ManagementInterfaceIpPrefix pulumi.StringPtrInput
	// List of AS numbers to prepend gateway BGP AS_Path field.
	PrependAsPaths pulumi.StringArrayInput
	// Ethernet interface RX queue size.
	RxQueueSize pulumi.StringPtrInput
	// Secondary DNS server IP.
	SecondaryDnsServerIp pulumi.StringPtrInput
	// Site ID.
	SiteId pulumi.StringPtrInput
	// Intended CIDR list to be advertised to external BGP router.
	SpokeBgpManualAdvertiseCidrs pulumi.StringArrayInput
	// State of Edge as a Spoke.
	State pulumi.StringPtrInput
	// WAN default gateway IP.
	WanDefaultGatewayIp pulumi.StringPtrInput
	// WAN interface IP/prefix.
	WanInterfaceIpPrefix pulumi.StringPtrInput
	// WAN interface public IP.
	WanPublicIp pulumi.StringPtrInput
	// The location where the Edge as a CaaG ZTP file will be stored.
	ZtpFileDownloadPath pulumi.StringPtrInput
	// ZTP file type.
	ZtpFileType pulumi.StringPtrInput
}

func (AviatrixEdgeSpokeState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixEdgeSpokeState)(nil)).Elem()
}

type aviatrixEdgeSpokeArgs struct {
	// Approved learned CIDRs for BGP Spoke Gateway.
	ApprovedLearnedCidrs []string `pulumi:"approvedLearnedCidrs"`
	// BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.
	BgpHoldTime *int `pulumi:"bgpHoldTime"`
	// BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.
	BgpPollingTime *int `pulumi:"bgpPollingTime"`
	// DNS server IP.
	DnsServerIp *string `pulumi:"dnsServerIp"`
	// Enables Edge Active-Standby Mode.
	EnableEdgeActiveStandby *bool `pulumi:"enableEdgeActiveStandby"`
	// Enables Preemptive Mode for Edge Active-Standby, available only with Active-Standby enabled.
	EnableEdgeActiveStandbyPreemptive *bool `pulumi:"enableEdgeActiveStandbyPreemptive"`
	// Enable Edge transitive routing.
	EnableEdgeTransitiveRouting *bool `pulumi:"enableEdgeTransitiveRouting"`
	// Enable jumbo frame.
	EnableJumboFrame *bool `pulumi:"enableJumboFrame"`
	// Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.
	EnableLearnedCidrsApproval *bool `pulumi:"enableLearnedCidrsApproval"`
	// Enable management over private network.
	EnableManagementOverPrivateNetwork *bool `pulumi:"enableManagementOverPrivateNetwork"`
	// Enable preserve as path when advertising manual summary CIDRs on BGP spoke gateway.
	EnablePreserveAsPath *bool `pulumi:"enablePreserveAsPath"`
	// Edge as a Spoke name.
	GwName string `pulumi:"gwName"`
	// LAN interface IP/prefix.
	LanInterfaceIpPrefix string `pulumi:"lanInterfaceIpPrefix"`
	// The latitude of the Edge as a Spoke.
	Latitude *string `pulumi:"latitude"`
	// Local AS number.
	LocalAsNumber *string `pulumi:"localAsNumber"`
	// The longitude of the Edge as a Spoke.
	Longitude *string `pulumi:"longitude"`
	// Management default gateway IP.
	ManagementDefaultGatewayIp *string `pulumi:"managementDefaultGatewayIp"`
	// Management egress gateway IP/prefix.
	ManagementEgressIpPrefix *string `pulumi:"managementEgressIpPrefix"`
	// Management interface configuration. Valid values: 'DHCP' and 'Static'.
	ManagementInterfaceConfig string `pulumi:"managementInterfaceConfig"`
	// Management interface IP/prefix.
	ManagementInterfaceIpPrefix *string `pulumi:"managementInterfaceIpPrefix"`
	// List of AS numbers to prepend gateway BGP AS_Path field.
	PrependAsPaths []string `pulumi:"prependAsPaths"`
	// Ethernet interface RX queue size.
	RxQueueSize *string `pulumi:"rxQueueSize"`
	// Secondary DNS server IP.
	SecondaryDnsServerIp *string `pulumi:"secondaryDnsServerIp"`
	// Site ID.
	SiteId string `pulumi:"siteId"`
	// Intended CIDR list to be advertised to external BGP router.
	SpokeBgpManualAdvertiseCidrs []string `pulumi:"spokeBgpManualAdvertiseCidrs"`
	// WAN default gateway IP.
	WanDefaultGatewayIp string `pulumi:"wanDefaultGatewayIp"`
	// WAN interface IP/prefix.
	WanInterfaceIpPrefix string `pulumi:"wanInterfaceIpPrefix"`
	// WAN interface public IP.
	WanPublicIp *string `pulumi:"wanPublicIp"`
	// The location where the Edge as a CaaG ZTP file will be stored.
	ZtpFileDownloadPath string `pulumi:"ztpFileDownloadPath"`
	// ZTP file type.
	ZtpFileType string `pulumi:"ztpFileType"`
}

// The set of arguments for constructing a AviatrixEdgeSpoke resource.
type AviatrixEdgeSpokeArgs struct {
	// Approved learned CIDRs for BGP Spoke Gateway.
	ApprovedLearnedCidrs pulumi.StringArrayInput
	// BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.
	BgpHoldTime pulumi.IntPtrInput
	// BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.
	BgpPollingTime pulumi.IntPtrInput
	// DNS server IP.
	DnsServerIp pulumi.StringPtrInput
	// Enables Edge Active-Standby Mode.
	EnableEdgeActiveStandby pulumi.BoolPtrInput
	// Enables Preemptive Mode for Edge Active-Standby, available only with Active-Standby enabled.
	EnableEdgeActiveStandbyPreemptive pulumi.BoolPtrInput
	// Enable Edge transitive routing.
	EnableEdgeTransitiveRouting pulumi.BoolPtrInput
	// Enable jumbo frame.
	EnableJumboFrame pulumi.BoolPtrInput
	// Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.
	EnableLearnedCidrsApproval pulumi.BoolPtrInput
	// Enable management over private network.
	EnableManagementOverPrivateNetwork pulumi.BoolPtrInput
	// Enable preserve as path when advertising manual summary CIDRs on BGP spoke gateway.
	EnablePreserveAsPath pulumi.BoolPtrInput
	// Edge as a Spoke name.
	GwName pulumi.StringInput
	// LAN interface IP/prefix.
	LanInterfaceIpPrefix pulumi.StringInput
	// The latitude of the Edge as a Spoke.
	Latitude pulumi.StringPtrInput
	// Local AS number.
	LocalAsNumber pulumi.StringPtrInput
	// The longitude of the Edge as a Spoke.
	Longitude pulumi.StringPtrInput
	// Management default gateway IP.
	ManagementDefaultGatewayIp pulumi.StringPtrInput
	// Management egress gateway IP/prefix.
	ManagementEgressIpPrefix pulumi.StringPtrInput
	// Management interface configuration. Valid values: 'DHCP' and 'Static'.
	ManagementInterfaceConfig pulumi.StringInput
	// Management interface IP/prefix.
	ManagementInterfaceIpPrefix pulumi.StringPtrInput
	// List of AS numbers to prepend gateway BGP AS_Path field.
	PrependAsPaths pulumi.StringArrayInput
	// Ethernet interface RX queue size.
	RxQueueSize pulumi.StringPtrInput
	// Secondary DNS server IP.
	SecondaryDnsServerIp pulumi.StringPtrInput
	// Site ID.
	SiteId pulumi.StringInput
	// Intended CIDR list to be advertised to external BGP router.
	SpokeBgpManualAdvertiseCidrs pulumi.StringArrayInput
	// WAN default gateway IP.
	WanDefaultGatewayIp pulumi.StringInput
	// WAN interface IP/prefix.
	WanInterfaceIpPrefix pulumi.StringInput
	// WAN interface public IP.
	WanPublicIp pulumi.StringPtrInput
	// The location where the Edge as a CaaG ZTP file will be stored.
	ZtpFileDownloadPath pulumi.StringInput
	// ZTP file type.
	ZtpFileType pulumi.StringInput
}

func (AviatrixEdgeSpokeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixEdgeSpokeArgs)(nil)).Elem()
}

type AviatrixEdgeSpokeInput interface {
	pulumi.Input

	ToAviatrixEdgeSpokeOutput() AviatrixEdgeSpokeOutput
	ToAviatrixEdgeSpokeOutputWithContext(ctx context.Context) AviatrixEdgeSpokeOutput
}

func (*AviatrixEdgeSpoke) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixEdgeSpoke)(nil)).Elem()
}

func (i *AviatrixEdgeSpoke) ToAviatrixEdgeSpokeOutput() AviatrixEdgeSpokeOutput {
	return i.ToAviatrixEdgeSpokeOutputWithContext(context.Background())
}

func (i *AviatrixEdgeSpoke) ToAviatrixEdgeSpokeOutputWithContext(ctx context.Context) AviatrixEdgeSpokeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixEdgeSpokeOutput)
}

// AviatrixEdgeSpokeArrayInput is an input type that accepts AviatrixEdgeSpokeArray and AviatrixEdgeSpokeArrayOutput values.
// You can construct a concrete instance of `AviatrixEdgeSpokeArrayInput` via:
//
//	AviatrixEdgeSpokeArray{ AviatrixEdgeSpokeArgs{...} }
type AviatrixEdgeSpokeArrayInput interface {
	pulumi.Input

	ToAviatrixEdgeSpokeArrayOutput() AviatrixEdgeSpokeArrayOutput
	ToAviatrixEdgeSpokeArrayOutputWithContext(context.Context) AviatrixEdgeSpokeArrayOutput
}

type AviatrixEdgeSpokeArray []AviatrixEdgeSpokeInput

func (AviatrixEdgeSpokeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixEdgeSpoke)(nil)).Elem()
}

func (i AviatrixEdgeSpokeArray) ToAviatrixEdgeSpokeArrayOutput() AviatrixEdgeSpokeArrayOutput {
	return i.ToAviatrixEdgeSpokeArrayOutputWithContext(context.Background())
}

func (i AviatrixEdgeSpokeArray) ToAviatrixEdgeSpokeArrayOutputWithContext(ctx context.Context) AviatrixEdgeSpokeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixEdgeSpokeArrayOutput)
}

// AviatrixEdgeSpokeMapInput is an input type that accepts AviatrixEdgeSpokeMap and AviatrixEdgeSpokeMapOutput values.
// You can construct a concrete instance of `AviatrixEdgeSpokeMapInput` via:
//
//	AviatrixEdgeSpokeMap{ "key": AviatrixEdgeSpokeArgs{...} }
type AviatrixEdgeSpokeMapInput interface {
	pulumi.Input

	ToAviatrixEdgeSpokeMapOutput() AviatrixEdgeSpokeMapOutput
	ToAviatrixEdgeSpokeMapOutputWithContext(context.Context) AviatrixEdgeSpokeMapOutput
}

type AviatrixEdgeSpokeMap map[string]AviatrixEdgeSpokeInput

func (AviatrixEdgeSpokeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixEdgeSpoke)(nil)).Elem()
}

func (i AviatrixEdgeSpokeMap) ToAviatrixEdgeSpokeMapOutput() AviatrixEdgeSpokeMapOutput {
	return i.ToAviatrixEdgeSpokeMapOutputWithContext(context.Background())
}

func (i AviatrixEdgeSpokeMap) ToAviatrixEdgeSpokeMapOutputWithContext(ctx context.Context) AviatrixEdgeSpokeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixEdgeSpokeMapOutput)
}

type AviatrixEdgeSpokeOutput struct{ *pulumi.OutputState }

func (AviatrixEdgeSpokeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixEdgeSpoke)(nil)).Elem()
}

func (o AviatrixEdgeSpokeOutput) ToAviatrixEdgeSpokeOutput() AviatrixEdgeSpokeOutput {
	return o
}

func (o AviatrixEdgeSpokeOutput) ToAviatrixEdgeSpokeOutputWithContext(ctx context.Context) AviatrixEdgeSpokeOutput {
	return o
}

// Approved learned CIDRs for BGP Spoke Gateway.
func (o AviatrixEdgeSpokeOutput) ApprovedLearnedCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringArrayOutput { return v.ApprovedLearnedCidrs }).(pulumi.StringArrayOutput)
}

// BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.
func (o AviatrixEdgeSpokeOutput) BgpHoldTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.IntPtrOutput { return v.BgpHoldTime }).(pulumi.IntPtrOutput)
}

// BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.
func (o AviatrixEdgeSpokeOutput) BgpPollingTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.IntPtrOutput { return v.BgpPollingTime }).(pulumi.IntPtrOutput)
}

// DNS server IP.
func (o AviatrixEdgeSpokeOutput) DnsServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringPtrOutput { return v.DnsServerIp }).(pulumi.StringPtrOutput)
}

// Enables Edge Active-Standby Mode.
func (o AviatrixEdgeSpokeOutput) EnableEdgeActiveStandby() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.BoolPtrOutput { return v.EnableEdgeActiveStandby }).(pulumi.BoolPtrOutput)
}

// Enables Preemptive Mode for Edge Active-Standby, available only with Active-Standby enabled.
func (o AviatrixEdgeSpokeOutput) EnableEdgeActiveStandbyPreemptive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.BoolPtrOutput { return v.EnableEdgeActiveStandbyPreemptive }).(pulumi.BoolPtrOutput)
}

// Enable Edge transitive routing.
func (o AviatrixEdgeSpokeOutput) EnableEdgeTransitiveRouting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.BoolPtrOutput { return v.EnableEdgeTransitiveRouting }).(pulumi.BoolPtrOutput)
}

// Enable jumbo frame.
func (o AviatrixEdgeSpokeOutput) EnableJumboFrame() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.BoolPtrOutput { return v.EnableJumboFrame }).(pulumi.BoolPtrOutput)
}

// Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.
func (o AviatrixEdgeSpokeOutput) EnableLearnedCidrsApproval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.BoolPtrOutput { return v.EnableLearnedCidrsApproval }).(pulumi.BoolPtrOutput)
}

// Enable management over private network.
func (o AviatrixEdgeSpokeOutput) EnableManagementOverPrivateNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.BoolPtrOutput { return v.EnableManagementOverPrivateNetwork }).(pulumi.BoolPtrOutput)
}

// Enable preserve as path when advertising manual summary CIDRs on BGP spoke gateway.
func (o AviatrixEdgeSpokeOutput) EnablePreserveAsPath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.BoolPtrOutput { return v.EnablePreserveAsPath }).(pulumi.BoolPtrOutput)
}

// Edge as a Spoke name.
func (o AviatrixEdgeSpokeOutput) GwName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringOutput { return v.GwName }).(pulumi.StringOutput)
}

// LAN interface IP/prefix.
func (o AviatrixEdgeSpokeOutput) LanInterfaceIpPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringOutput { return v.LanInterfaceIpPrefix }).(pulumi.StringOutput)
}

// The latitude of the Edge as a Spoke.
func (o AviatrixEdgeSpokeOutput) Latitude() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringOutput { return v.Latitude }).(pulumi.StringOutput)
}

// Local AS number.
func (o AviatrixEdgeSpokeOutput) LocalAsNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringOutput { return v.LocalAsNumber }).(pulumi.StringOutput)
}

// The longitude of the Edge as a Spoke.
func (o AviatrixEdgeSpokeOutput) Longitude() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringOutput { return v.Longitude }).(pulumi.StringOutput)
}

// Management default gateway IP.
func (o AviatrixEdgeSpokeOutput) ManagementDefaultGatewayIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringPtrOutput { return v.ManagementDefaultGatewayIp }).(pulumi.StringPtrOutput)
}

// Management egress gateway IP/prefix.
func (o AviatrixEdgeSpokeOutput) ManagementEgressIpPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringPtrOutput { return v.ManagementEgressIpPrefix }).(pulumi.StringPtrOutput)
}

// Management interface configuration. Valid values: 'DHCP' and 'Static'.
func (o AviatrixEdgeSpokeOutput) ManagementInterfaceConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringOutput { return v.ManagementInterfaceConfig }).(pulumi.StringOutput)
}

// Management interface IP/prefix.
func (o AviatrixEdgeSpokeOutput) ManagementInterfaceIpPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringPtrOutput { return v.ManagementInterfaceIpPrefix }).(pulumi.StringPtrOutput)
}

// List of AS numbers to prepend gateway BGP AS_Path field.
func (o AviatrixEdgeSpokeOutput) PrependAsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringArrayOutput { return v.PrependAsPaths }).(pulumi.StringArrayOutput)
}

// Ethernet interface RX queue size.
func (o AviatrixEdgeSpokeOutput) RxQueueSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringPtrOutput { return v.RxQueueSize }).(pulumi.StringPtrOutput)
}

// Secondary DNS server IP.
func (o AviatrixEdgeSpokeOutput) SecondaryDnsServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringPtrOutput { return v.SecondaryDnsServerIp }).(pulumi.StringPtrOutput)
}

// Site ID.
func (o AviatrixEdgeSpokeOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringOutput { return v.SiteId }).(pulumi.StringOutput)
}

// Intended CIDR list to be advertised to external BGP router.
func (o AviatrixEdgeSpokeOutput) SpokeBgpManualAdvertiseCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringArrayOutput { return v.SpokeBgpManualAdvertiseCidrs }).(pulumi.StringArrayOutput)
}

// State of Edge as a Spoke.
func (o AviatrixEdgeSpokeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// WAN default gateway IP.
func (o AviatrixEdgeSpokeOutput) WanDefaultGatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringOutput { return v.WanDefaultGatewayIp }).(pulumi.StringOutput)
}

// WAN interface IP/prefix.
func (o AviatrixEdgeSpokeOutput) WanInterfaceIpPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringOutput { return v.WanInterfaceIpPrefix }).(pulumi.StringOutput)
}

// WAN interface public IP.
func (o AviatrixEdgeSpokeOutput) WanPublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringOutput { return v.WanPublicIp }).(pulumi.StringOutput)
}

// The location where the Edge as a CaaG ZTP file will be stored.
func (o AviatrixEdgeSpokeOutput) ZtpFileDownloadPath() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringOutput { return v.ZtpFileDownloadPath }).(pulumi.StringOutput)
}

// ZTP file type.
func (o AviatrixEdgeSpokeOutput) ZtpFileType() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpoke) pulumi.StringOutput { return v.ZtpFileType }).(pulumi.StringOutput)
}

type AviatrixEdgeSpokeArrayOutput struct{ *pulumi.OutputState }

func (AviatrixEdgeSpokeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixEdgeSpoke)(nil)).Elem()
}

func (o AviatrixEdgeSpokeArrayOutput) ToAviatrixEdgeSpokeArrayOutput() AviatrixEdgeSpokeArrayOutput {
	return o
}

func (o AviatrixEdgeSpokeArrayOutput) ToAviatrixEdgeSpokeArrayOutputWithContext(ctx context.Context) AviatrixEdgeSpokeArrayOutput {
	return o
}

func (o AviatrixEdgeSpokeArrayOutput) Index(i pulumi.IntInput) AviatrixEdgeSpokeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixEdgeSpoke {
		return vs[0].([]*AviatrixEdgeSpoke)[vs[1].(int)]
	}).(AviatrixEdgeSpokeOutput)
}

type AviatrixEdgeSpokeMapOutput struct{ *pulumi.OutputState }

func (AviatrixEdgeSpokeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixEdgeSpoke)(nil)).Elem()
}

func (o AviatrixEdgeSpokeMapOutput) ToAviatrixEdgeSpokeMapOutput() AviatrixEdgeSpokeMapOutput {
	return o
}

func (o AviatrixEdgeSpokeMapOutput) ToAviatrixEdgeSpokeMapOutputWithContext(ctx context.Context) AviatrixEdgeSpokeMapOutput {
	return o
}

func (o AviatrixEdgeSpokeMapOutput) MapIndex(k pulumi.StringInput) AviatrixEdgeSpokeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixEdgeSpoke {
		return vs[0].(map[string]*AviatrixEdgeSpoke)[vs[1].(string)]
	}).(AviatrixEdgeSpokeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixEdgeSpokeInput)(nil)).Elem(), &AviatrixEdgeSpoke{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixEdgeSpokeArrayInput)(nil)).Elem(), AviatrixEdgeSpokeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixEdgeSpokeMapInput)(nil)).Elem(), AviatrixEdgeSpokeMap{})
	pulumi.RegisterOutputType(AviatrixEdgeSpokeOutput{})
	pulumi.RegisterOutputType(AviatrixEdgeSpokeArrayOutput{})
	pulumi.RegisterOutputType(AviatrixEdgeSpokeMapOutput{})
}
