// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aviatrix
{
    public static class GetAviatrixGateway
    {
        public static Task<GetAviatrixGatewayResult> InvokeAsync(GetAviatrixGatewayArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAviatrixGatewayResult>("aviatrix:index/getAviatrixGateway:getAviatrixGateway", args ?? new GetAviatrixGatewayArgs(), options.WithDefaults());

        public static Output<GetAviatrixGatewayResult> Invoke(GetAviatrixGatewayInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAviatrixGatewayResult>("aviatrix:index/getAviatrixGateway:getAviatrixGateway", args ?? new GetAviatrixGatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAviatrixGatewayArgs : global::Pulumi.InvokeArgs
    {
        [Input("gwName", required: true)]
        public string GwName { get; set; } = null!;

        public GetAviatrixGatewayArgs()
        {
        }
        public static new GetAviatrixGatewayArgs Empty => new GetAviatrixGatewayArgs();
    }

    public sealed class GetAviatrixGatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("gwName", required: true)]
        public Input<string> GwName { get; set; } = null!;

        public GetAviatrixGatewayInvokeArgs()
        {
        }
        public static new GetAviatrixGatewayInvokeArgs Empty => new GetAviatrixGatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetAviatrixGatewayResult
    {
        public readonly string AccountName;
        public readonly string AdditionalCidrs;
        public readonly string AdditionalCidrsDesignatedGateway;
        public readonly bool AllocateNewEip;
        public readonly string AvailabilityDomain;
        public readonly string AzureEipNameResourceGroup;
        public readonly string CloudInstanceId;
        public readonly int CloudType;
        public readonly string DuoApiHostname;
        public readonly string DuoIntegrationKey;
        public readonly string DuoPushMode;
        public readonly string ElbDnsName;
        public readonly string ElbName;
        public readonly bool EnableDesignatedGateway;
        public readonly bool EnableElb;
        public readonly bool EnableEncryptVolume;
        public readonly bool EnableJumboFrame;
        public readonly bool EnableLdap;
        public readonly bool EnableMonitorGatewaySubnets;
        public readonly bool EnablePublicSubnetFiltering;
        public readonly bool EnableSpotInstance;
        public readonly bool EnableVpcDnsServer;
        public readonly bool EnableVpnNat;
        public readonly string FaultDomain;
        public readonly string FqdnLanCidr;
        public readonly string FqdnLanInterface;
        public readonly string FqdnLanVpcId;
        public readonly string GwName;
        public readonly string GwSize;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int IdleTimeout;
        public readonly string ImageVersion;
        public readonly bool InsaneMode;
        public readonly string InsaneModeAz;
        public readonly string LdapBaseDn;
        public readonly string LdapBindDn;
        public readonly string LdapServer;
        public readonly string LdapUsernameAttribute;
        public readonly string MaxVpnConn;
        public readonly ImmutableArray<string> MonitorExcludeLists;
        public readonly string NameServers;
        public readonly string OktaUrl;
        public readonly string OktaUsernameSuffix;
        public readonly string OtpMode;
        public readonly string PeeringHaAvailabilityDomain;
        public readonly string PeeringHaAzureEipNameResourceGroup;
        public readonly string PeeringHaCloudInstanceId;
        public readonly string PeeringHaFaultDomain;
        public readonly string PeeringHaGwName;
        public readonly string PeeringHaGwSize;
        public readonly string PeeringHaImageVersion;
        public readonly string PeeringHaInsaneModeAz;
        public readonly string PeeringHaPrivateIp;
        public readonly string PeeringHaPublicIp;
        public readonly string PeeringHaSecurityGroupId;
        public readonly string PeeringHaSoftwareVersion;
        public readonly string PeeringHaSubnet;
        public readonly string PeeringHaZone;
        public readonly string PrivateIp;
        public readonly string PublicDnsServer;
        public readonly string PublicIp;
        public readonly bool PublicSubnetFilteringGuardDutyEnforced;
        public readonly ImmutableArray<string> PublicSubnetFilteringHaRouteTables;
        public readonly ImmutableArray<string> PublicSubnetFilteringRouteTables;
        public readonly int RenegotiationInterval;
        public readonly bool SamlEnabled;
        public readonly string SearchDomains;
        public readonly string SecurityGroupId;
        public readonly bool SingleAzHa;
        public readonly bool SingleIpSnat;
        public readonly string SoftwareVersion;
        public readonly bool SplitTunnel;
        public readonly string SpotPrice;
        public readonly string Subnet;
        public readonly ImmutableArray<string> TagLists;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly int TunnelDetectionTime;
        public readonly string VpcId;
        public readonly string VpcReg;
        public readonly bool VpnAccess;
        public readonly string VpnCidr;
        public readonly string VpnProtocol;
        public readonly string Zone;

        [OutputConstructor]
        private GetAviatrixGatewayResult(
            string accountName,

            string additionalCidrs,

            string additionalCidrsDesignatedGateway,

            bool allocateNewEip,

            string availabilityDomain,

            string azureEipNameResourceGroup,

            string cloudInstanceId,

            int cloudType,

            string duoApiHostname,

            string duoIntegrationKey,

            string duoPushMode,

            string elbDnsName,

            string elbName,

            bool enableDesignatedGateway,

            bool enableElb,

            bool enableEncryptVolume,

            bool enableJumboFrame,

            bool enableLdap,

            bool enableMonitorGatewaySubnets,

            bool enablePublicSubnetFiltering,

            bool enableSpotInstance,

            bool enableVpcDnsServer,

            bool enableVpnNat,

            string faultDomain,

            string fqdnLanCidr,

            string fqdnLanInterface,

            string fqdnLanVpcId,

            string gwName,

            string gwSize,

            string id,

            int idleTimeout,

            string imageVersion,

            bool insaneMode,

            string insaneModeAz,

            string ldapBaseDn,

            string ldapBindDn,

            string ldapServer,

            string ldapUsernameAttribute,

            string maxVpnConn,

            ImmutableArray<string> monitorExcludeLists,

            string nameServers,

            string oktaUrl,

            string oktaUsernameSuffix,

            string otpMode,

            string peeringHaAvailabilityDomain,

            string peeringHaAzureEipNameResourceGroup,

            string peeringHaCloudInstanceId,

            string peeringHaFaultDomain,

            string peeringHaGwName,

            string peeringHaGwSize,

            string peeringHaImageVersion,

            string peeringHaInsaneModeAz,

            string peeringHaPrivateIp,

            string peeringHaPublicIp,

            string peeringHaSecurityGroupId,

            string peeringHaSoftwareVersion,

            string peeringHaSubnet,

            string peeringHaZone,

            string privateIp,

            string publicDnsServer,

            string publicIp,

            bool publicSubnetFilteringGuardDutyEnforced,

            ImmutableArray<string> publicSubnetFilteringHaRouteTables,

            ImmutableArray<string> publicSubnetFilteringRouteTables,

            int renegotiationInterval,

            bool samlEnabled,

            string searchDomains,

            string securityGroupId,

            bool singleAzHa,

            bool singleIpSnat,

            string softwareVersion,

            bool splitTunnel,

            string spotPrice,

            string subnet,

            ImmutableArray<string> tagLists,

            ImmutableDictionary<string, string> tags,

            int tunnelDetectionTime,

            string vpcId,

            string vpcReg,

            bool vpnAccess,

            string vpnCidr,

            string vpnProtocol,

            string zone)
        {
            AccountName = accountName;
            AdditionalCidrs = additionalCidrs;
            AdditionalCidrsDesignatedGateway = additionalCidrsDesignatedGateway;
            AllocateNewEip = allocateNewEip;
            AvailabilityDomain = availabilityDomain;
            AzureEipNameResourceGroup = azureEipNameResourceGroup;
            CloudInstanceId = cloudInstanceId;
            CloudType = cloudType;
            DuoApiHostname = duoApiHostname;
            DuoIntegrationKey = duoIntegrationKey;
            DuoPushMode = duoPushMode;
            ElbDnsName = elbDnsName;
            ElbName = elbName;
            EnableDesignatedGateway = enableDesignatedGateway;
            EnableElb = enableElb;
            EnableEncryptVolume = enableEncryptVolume;
            EnableJumboFrame = enableJumboFrame;
            EnableLdap = enableLdap;
            EnableMonitorGatewaySubnets = enableMonitorGatewaySubnets;
            EnablePublicSubnetFiltering = enablePublicSubnetFiltering;
            EnableSpotInstance = enableSpotInstance;
            EnableVpcDnsServer = enableVpcDnsServer;
            EnableVpnNat = enableVpnNat;
            FaultDomain = faultDomain;
            FqdnLanCidr = fqdnLanCidr;
            FqdnLanInterface = fqdnLanInterface;
            FqdnLanVpcId = fqdnLanVpcId;
            GwName = gwName;
            GwSize = gwSize;
            Id = id;
            IdleTimeout = idleTimeout;
            ImageVersion = imageVersion;
            InsaneMode = insaneMode;
            InsaneModeAz = insaneModeAz;
            LdapBaseDn = ldapBaseDn;
            LdapBindDn = ldapBindDn;
            LdapServer = ldapServer;
            LdapUsernameAttribute = ldapUsernameAttribute;
            MaxVpnConn = maxVpnConn;
            MonitorExcludeLists = monitorExcludeLists;
            NameServers = nameServers;
            OktaUrl = oktaUrl;
            OktaUsernameSuffix = oktaUsernameSuffix;
            OtpMode = otpMode;
            PeeringHaAvailabilityDomain = peeringHaAvailabilityDomain;
            PeeringHaAzureEipNameResourceGroup = peeringHaAzureEipNameResourceGroup;
            PeeringHaCloudInstanceId = peeringHaCloudInstanceId;
            PeeringHaFaultDomain = peeringHaFaultDomain;
            PeeringHaGwName = peeringHaGwName;
            PeeringHaGwSize = peeringHaGwSize;
            PeeringHaImageVersion = peeringHaImageVersion;
            PeeringHaInsaneModeAz = peeringHaInsaneModeAz;
            PeeringHaPrivateIp = peeringHaPrivateIp;
            PeeringHaPublicIp = peeringHaPublicIp;
            PeeringHaSecurityGroupId = peeringHaSecurityGroupId;
            PeeringHaSoftwareVersion = peeringHaSoftwareVersion;
            PeeringHaSubnet = peeringHaSubnet;
            PeeringHaZone = peeringHaZone;
            PrivateIp = privateIp;
            PublicDnsServer = publicDnsServer;
            PublicIp = publicIp;
            PublicSubnetFilteringGuardDutyEnforced = publicSubnetFilteringGuardDutyEnforced;
            PublicSubnetFilteringHaRouteTables = publicSubnetFilteringHaRouteTables;
            PublicSubnetFilteringRouteTables = publicSubnetFilteringRouteTables;
            RenegotiationInterval = renegotiationInterval;
            SamlEnabled = samlEnabled;
            SearchDomains = searchDomains;
            SecurityGroupId = securityGroupId;
            SingleAzHa = singleAzHa;
            SingleIpSnat = singleIpSnat;
            SoftwareVersion = softwareVersion;
            SplitTunnel = splitTunnel;
            SpotPrice = spotPrice;
            Subnet = subnet;
            TagLists = tagLists;
            Tags = tags;
            TunnelDetectionTime = tunnelDetectionTime;
            VpcId = vpcId;
            VpcReg = vpcReg;
            VpnAccess = vpnAccess;
            VpnCidr = vpnCidr;
            VpnProtocol = vpnProtocol;
            Zone = zone;
        }
    }
}
