// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixTransitFirenetPolicy struct {
	pulumi.CustomResourceState

	// Name of the resource to be added to transit firenet policy.
	InspectedResourceName pulumi.StringOutput `pulumi:"inspectedResourceName"`
	// Name of the transit firenet gateway.
	TransitFirenetGatewayName pulumi.StringOutput `pulumi:"transitFirenetGatewayName"`
}

// NewAviatrixTransitFirenetPolicy registers a new resource with the given unique name, arguments, and options.
func NewAviatrixTransitFirenetPolicy(ctx *pulumi.Context,
	name string, args *AviatrixTransitFirenetPolicyArgs, opts ...pulumi.ResourceOption) (*AviatrixTransitFirenetPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InspectedResourceName == nil {
		return nil, errors.New("invalid value for required argument 'InspectedResourceName'")
	}
	if args.TransitFirenetGatewayName == nil {
		return nil, errors.New("invalid value for required argument 'TransitFirenetGatewayName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixTransitFirenetPolicy
	err := ctx.RegisterResource("aviatrix:index/aviatrixTransitFirenetPolicy:AviatrixTransitFirenetPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixTransitFirenetPolicy gets an existing AviatrixTransitFirenetPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixTransitFirenetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixTransitFirenetPolicyState, opts ...pulumi.ResourceOption) (*AviatrixTransitFirenetPolicy, error) {
	var resource AviatrixTransitFirenetPolicy
	err := ctx.ReadResource("aviatrix:index/aviatrixTransitFirenetPolicy:AviatrixTransitFirenetPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixTransitFirenetPolicy resources.
type aviatrixTransitFirenetPolicyState struct {
	// Name of the resource to be added to transit firenet policy.
	InspectedResourceName *string `pulumi:"inspectedResourceName"`
	// Name of the transit firenet gateway.
	TransitFirenetGatewayName *string `pulumi:"transitFirenetGatewayName"`
}

type AviatrixTransitFirenetPolicyState struct {
	// Name of the resource to be added to transit firenet policy.
	InspectedResourceName pulumi.StringPtrInput
	// Name of the transit firenet gateway.
	TransitFirenetGatewayName pulumi.StringPtrInput
}

func (AviatrixTransitFirenetPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixTransitFirenetPolicyState)(nil)).Elem()
}

type aviatrixTransitFirenetPolicyArgs struct {
	// Name of the resource to be added to transit firenet policy.
	InspectedResourceName string `pulumi:"inspectedResourceName"`
	// Name of the transit firenet gateway.
	TransitFirenetGatewayName string `pulumi:"transitFirenetGatewayName"`
}

// The set of arguments for constructing a AviatrixTransitFirenetPolicy resource.
type AviatrixTransitFirenetPolicyArgs struct {
	// Name of the resource to be added to transit firenet policy.
	InspectedResourceName pulumi.StringInput
	// Name of the transit firenet gateway.
	TransitFirenetGatewayName pulumi.StringInput
}

func (AviatrixTransitFirenetPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixTransitFirenetPolicyArgs)(nil)).Elem()
}

type AviatrixTransitFirenetPolicyInput interface {
	pulumi.Input

	ToAviatrixTransitFirenetPolicyOutput() AviatrixTransitFirenetPolicyOutput
	ToAviatrixTransitFirenetPolicyOutputWithContext(ctx context.Context) AviatrixTransitFirenetPolicyOutput
}

func (*AviatrixTransitFirenetPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixTransitFirenetPolicy)(nil)).Elem()
}

func (i *AviatrixTransitFirenetPolicy) ToAviatrixTransitFirenetPolicyOutput() AviatrixTransitFirenetPolicyOutput {
	return i.ToAviatrixTransitFirenetPolicyOutputWithContext(context.Background())
}

func (i *AviatrixTransitFirenetPolicy) ToAviatrixTransitFirenetPolicyOutputWithContext(ctx context.Context) AviatrixTransitFirenetPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixTransitFirenetPolicyOutput)
}

// AviatrixTransitFirenetPolicyArrayInput is an input type that accepts AviatrixTransitFirenetPolicyArray and AviatrixTransitFirenetPolicyArrayOutput values.
// You can construct a concrete instance of `AviatrixTransitFirenetPolicyArrayInput` via:
//
//	AviatrixTransitFirenetPolicyArray{ AviatrixTransitFirenetPolicyArgs{...} }
type AviatrixTransitFirenetPolicyArrayInput interface {
	pulumi.Input

	ToAviatrixTransitFirenetPolicyArrayOutput() AviatrixTransitFirenetPolicyArrayOutput
	ToAviatrixTransitFirenetPolicyArrayOutputWithContext(context.Context) AviatrixTransitFirenetPolicyArrayOutput
}

type AviatrixTransitFirenetPolicyArray []AviatrixTransitFirenetPolicyInput

func (AviatrixTransitFirenetPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixTransitFirenetPolicy)(nil)).Elem()
}

func (i AviatrixTransitFirenetPolicyArray) ToAviatrixTransitFirenetPolicyArrayOutput() AviatrixTransitFirenetPolicyArrayOutput {
	return i.ToAviatrixTransitFirenetPolicyArrayOutputWithContext(context.Background())
}

func (i AviatrixTransitFirenetPolicyArray) ToAviatrixTransitFirenetPolicyArrayOutputWithContext(ctx context.Context) AviatrixTransitFirenetPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixTransitFirenetPolicyArrayOutput)
}

// AviatrixTransitFirenetPolicyMapInput is an input type that accepts AviatrixTransitFirenetPolicyMap and AviatrixTransitFirenetPolicyMapOutput values.
// You can construct a concrete instance of `AviatrixTransitFirenetPolicyMapInput` via:
//
//	AviatrixTransitFirenetPolicyMap{ "key": AviatrixTransitFirenetPolicyArgs{...} }
type AviatrixTransitFirenetPolicyMapInput interface {
	pulumi.Input

	ToAviatrixTransitFirenetPolicyMapOutput() AviatrixTransitFirenetPolicyMapOutput
	ToAviatrixTransitFirenetPolicyMapOutputWithContext(context.Context) AviatrixTransitFirenetPolicyMapOutput
}

type AviatrixTransitFirenetPolicyMap map[string]AviatrixTransitFirenetPolicyInput

func (AviatrixTransitFirenetPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixTransitFirenetPolicy)(nil)).Elem()
}

func (i AviatrixTransitFirenetPolicyMap) ToAviatrixTransitFirenetPolicyMapOutput() AviatrixTransitFirenetPolicyMapOutput {
	return i.ToAviatrixTransitFirenetPolicyMapOutputWithContext(context.Background())
}

func (i AviatrixTransitFirenetPolicyMap) ToAviatrixTransitFirenetPolicyMapOutputWithContext(ctx context.Context) AviatrixTransitFirenetPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixTransitFirenetPolicyMapOutput)
}

type AviatrixTransitFirenetPolicyOutput struct{ *pulumi.OutputState }

func (AviatrixTransitFirenetPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixTransitFirenetPolicy)(nil)).Elem()
}

func (o AviatrixTransitFirenetPolicyOutput) ToAviatrixTransitFirenetPolicyOutput() AviatrixTransitFirenetPolicyOutput {
	return o
}

func (o AviatrixTransitFirenetPolicyOutput) ToAviatrixTransitFirenetPolicyOutputWithContext(ctx context.Context) AviatrixTransitFirenetPolicyOutput {
	return o
}

// Name of the resource to be added to transit firenet policy.
func (o AviatrixTransitFirenetPolicyOutput) InspectedResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitFirenetPolicy) pulumi.StringOutput { return v.InspectedResourceName }).(pulumi.StringOutput)
}

// Name of the transit firenet gateway.
func (o AviatrixTransitFirenetPolicyOutput) TransitFirenetGatewayName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitFirenetPolicy) pulumi.StringOutput { return v.TransitFirenetGatewayName }).(pulumi.StringOutput)
}

type AviatrixTransitFirenetPolicyArrayOutput struct{ *pulumi.OutputState }

func (AviatrixTransitFirenetPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixTransitFirenetPolicy)(nil)).Elem()
}

func (o AviatrixTransitFirenetPolicyArrayOutput) ToAviatrixTransitFirenetPolicyArrayOutput() AviatrixTransitFirenetPolicyArrayOutput {
	return o
}

func (o AviatrixTransitFirenetPolicyArrayOutput) ToAviatrixTransitFirenetPolicyArrayOutputWithContext(ctx context.Context) AviatrixTransitFirenetPolicyArrayOutput {
	return o
}

func (o AviatrixTransitFirenetPolicyArrayOutput) Index(i pulumi.IntInput) AviatrixTransitFirenetPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixTransitFirenetPolicy {
		return vs[0].([]*AviatrixTransitFirenetPolicy)[vs[1].(int)]
	}).(AviatrixTransitFirenetPolicyOutput)
}

type AviatrixTransitFirenetPolicyMapOutput struct{ *pulumi.OutputState }

func (AviatrixTransitFirenetPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixTransitFirenetPolicy)(nil)).Elem()
}

func (o AviatrixTransitFirenetPolicyMapOutput) ToAviatrixTransitFirenetPolicyMapOutput() AviatrixTransitFirenetPolicyMapOutput {
	return o
}

func (o AviatrixTransitFirenetPolicyMapOutput) ToAviatrixTransitFirenetPolicyMapOutputWithContext(ctx context.Context) AviatrixTransitFirenetPolicyMapOutput {
	return o
}

func (o AviatrixTransitFirenetPolicyMapOutput) MapIndex(k pulumi.StringInput) AviatrixTransitFirenetPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixTransitFirenetPolicy {
		return vs[0].(map[string]*AviatrixTransitFirenetPolicy)[vs[1].(string)]
	}).(AviatrixTransitFirenetPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixTransitFirenetPolicyInput)(nil)).Elem(), &AviatrixTransitFirenetPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixTransitFirenetPolicyArrayInput)(nil)).Elem(), AviatrixTransitFirenetPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixTransitFirenetPolicyMapInput)(nil)).Elem(), AviatrixTransitFirenetPolicyMap{})
	pulumi.RegisterOutputType(AviatrixTransitFirenetPolicyOutput{})
	pulumi.RegisterOutputType(AviatrixTransitFirenetPolicyArrayOutput{})
	pulumi.RegisterOutputType(AviatrixTransitFirenetPolicyMapOutput{})
}
