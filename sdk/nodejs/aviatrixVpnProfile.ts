// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The **aviatrix_vpn_profile** resource allows the creation and management of Aviatrix VPN user profiles.
 *
 * > **NOTE:** As of R2.15, management of user/profile attachment can be set using `manageUserAttachment`. This argument must be set to *true* in either **aviatrix_vpn_user** or **aviatrix_vpn_profile**. If attachment is managed in the **aviatrix_vpn_profile** (set to *true*), it must be set to *false* in the **aviatrix_vpn_user** resource and vice versa.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aviatrix from "@pulumi/aviatrix";
 *
 * // Create an Aviatrix AWS VPN User Profile
 * const testVpnProfile = new aviatrix.AviatrixVpnProfile("test_vpn_profile", {
 *     baseRule: "allow_all",
 *     policies: [
 *         {
 *             action: "deny",
 *             port: "443",
 *             proto: "tcp",
 *             target: "10.0.0.0/32",
 *         },
 *         {
 *             action: "deny",
 *             port: "443",
 *             proto: "tcp",
 *             target: "10.0.0.1/32",
 *         },
 *     ],
 *     users: [
 *         "user1",
 *         "user2",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * **vpn_profile** can be imported using the VPN profile's `name`, e.g.
 *
 * ```sh
 *  $ pulumi import aviatrix:index/aviatrixVpnProfile:AviatrixVpnProfile test name
 * ```
 */
export class AviatrixVpnProfile extends pulumi.CustomResource {
    /**
     * Get an existing AviatrixVpnProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AviatrixVpnProfileState, opts?: pulumi.CustomResourceOptions): AviatrixVpnProfile {
        return new AviatrixVpnProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/aviatrixVpnProfile:AviatrixVpnProfile';

    /**
     * Returns true if the given object is an instance of AviatrixVpnProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AviatrixVpnProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AviatrixVpnProfile.__pulumiType;
    }

    /**
     * Base policy rule of the profile to be added. Enter "allowAll" or "denyAll", based on whether you want a whitelist or blacklist.
     */
    public readonly baseRule!: pulumi.Output<string | undefined>;
    /**
     * This parameter is a switch used to determine whether or not to manage VPN user attachments to the VPN profile using this resource. If this is set to false, attachment must be managed using the **aviatrix_vpn_user** resource. Valid values: true, false. Default value: true.
     */
    public readonly manageUserAttachment!: pulumi.Output<boolean | undefined>;
    /**
     * Enter any name for the VPN profile.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * New security policy for the profile. Each policy has the following attributes:
     */
    public readonly policies!: pulumi.Output<outputs.AviatrixVpnProfilePolicy[] | undefined>;
    /**
     * List of VPN users to attach to this profile. This should be set to null if `manageUserAttachment` is set to false.
     */
    public readonly users!: pulumi.Output<string[] | undefined>;

    /**
     * Create a AviatrixVpnProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AviatrixVpnProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AviatrixVpnProfileArgs | AviatrixVpnProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AviatrixVpnProfileState | undefined;
            resourceInputs["baseRule"] = state ? state.baseRule : undefined;
            resourceInputs["manageUserAttachment"] = state ? state.manageUserAttachment : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as AviatrixVpnProfileArgs | undefined;
            resourceInputs["baseRule"] = args ? args.baseRule : undefined;
            resourceInputs["manageUserAttachment"] = args ? args.manageUserAttachment : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AviatrixVpnProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AviatrixVpnProfile resources.
 */
export interface AviatrixVpnProfileState {
    /**
     * Base policy rule of the profile to be added. Enter "allowAll" or "denyAll", based on whether you want a whitelist or blacklist.
     */
    baseRule?: pulumi.Input<string>;
    /**
     * This parameter is a switch used to determine whether or not to manage VPN user attachments to the VPN profile using this resource. If this is set to false, attachment must be managed using the **aviatrix_vpn_user** resource. Valid values: true, false. Default value: true.
     */
    manageUserAttachment?: pulumi.Input<boolean>;
    /**
     * Enter any name for the VPN profile.
     */
    name?: pulumi.Input<string>;
    /**
     * New security policy for the profile. Each policy has the following attributes:
     */
    policies?: pulumi.Input<pulumi.Input<inputs.AviatrixVpnProfilePolicy>[]>;
    /**
     * List of VPN users to attach to this profile. This should be set to null if `manageUserAttachment` is set to false.
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a AviatrixVpnProfile resource.
 */
export interface AviatrixVpnProfileArgs {
    /**
     * Base policy rule of the profile to be added. Enter "allowAll" or "denyAll", based on whether you want a whitelist or blacklist.
     */
    baseRule?: pulumi.Input<string>;
    /**
     * This parameter is a switch used to determine whether or not to manage VPN user attachments to the VPN profile using this resource. If this is set to false, attachment must be managed using the **aviatrix_vpn_user** resource. Valid values: true, false. Default value: true.
     */
    manageUserAttachment?: pulumi.Input<boolean>;
    /**
     * Enter any name for the VPN profile.
     */
    name?: pulumi.Input<string>;
    /**
     * New security policy for the profile. Each policy has the following attributes:
     */
    policies?: pulumi.Input<pulumi.Input<inputs.AviatrixVpnProfilePolicy>[]>;
    /**
     * List of VPN users to attach to this profile. This should be set to null if `manageUserAttachment` is set to false.
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
}
