// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **aviatrix_edge_caag** resource creates the Aviatrix Edge as a CaaG. This resource is available as of provider version R2.22+.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/astipkovits/pulumi-aviatrix/sdk/go/aviatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aviatrix.NewAviatrixEdgeCaag(ctx, "test", &aviatrix.AviatrixEdgeCaagArgs{
//				LanInterfaceIpPrefix:      pulumi.String("10.60.0.0/24"),
//				LocalAsNumber:             pulumi.String("65000"),
//				ManagementInterfaceConfig: pulumi.String("DHCP"),
//				PrependAsPaths: pulumi.StringArray{
//					pulumi.String("65000"),
//					pulumi.String("65000"),
//				},
//				WanDefaultGatewayIp:  pulumi.String("10.60.0.0"),
//				WanInterfaceIpPrefix: pulumi.String("10.60.0.0/24"),
//				ZtpFileDownloadPath:  pulumi.String("/image/download/path"),
//				ZtpFileType:          pulumi.String("iso"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ```go
// package main
//
// import (
//
//	"github.com/astipkovits/pulumi-aviatrix/sdk/go/aviatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aviatrix.NewAviatrixEdgeCaag(ctx, "test", &aviatrix.AviatrixEdgeCaagArgs{
//				DnsServerIp:                 pulumi.String("10.60.0.0"),
//				LanInterfaceIpPrefix:        pulumi.String("10.60.0.0/24"),
//				LocalAsNumber:               pulumi.String("65000"),
//				ManagementDefaultGatewayIp:  pulumi.String("10.60.0.0"),
//				ManagementInterfaceConfig:   pulumi.String("Static"),
//				ManagementInterfaceIpPrefix: pulumi.String("10.60.0.0/24"),
//				PrependAsPaths: pulumi.StringArray{
//					pulumi.String("65000"),
//					pulumi.String("65000"),
//				},
//				SecondaryDnsServerIp: pulumi.String("10.60.0.0"),
//				WanDefaultGatewayIp:  pulumi.String("10.60.0.0"),
//				WanInterfaceIpPrefix: pulumi.String("10.60.0.0/24"),
//				ZtpFileDownloadPath:  pulumi.String("/image/download/path"),
//				ZtpFileType:          pulumi.String("iso"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// **edge_caag** can be imported using the `name`, e.g.
//
// ```sh
//
//	$ pulumi import aviatrix:index/aviatrixEdgeCaag:AviatrixEdgeCaag test name
//
// ```
type AviatrixEdgeCaag struct {
	pulumi.CustomResourceState

	// DNS server IP. Required and valid when `managementInterfaceConfig` is "Static".
	DnsServerIp pulumi.StringPtrOutput `pulumi:"dnsServerIp"`
	// Indicates whether it is public or private connection between controller and gateway. Valid values: true, false. Default value: false.
	EnableOverPrivateNetwork pulumi.BoolPtrOutput `pulumi:"enableOverPrivateNetwork"`
	// LAN interface IP and subnet prefix.
	LanInterfaceIpPrefix pulumi.StringOutput `pulumi:"lanInterfaceIpPrefix"`
	// BGP AS Number to assign to Edge as a CaaG.
	LocalAsNumber pulumi.StringOutput `pulumi:"localAsNumber"`
	// Management default gateway IP. Required and valid when `managementInterfaceConfig` is "Static".
	ManagementDefaultGatewayIp pulumi.StringPtrOutput `pulumi:"managementDefaultGatewayIp"`
	// Management egress gateway IP and subnet prefix.
	ManagementEgressIpPrefix pulumi.StringPtrOutput `pulumi:"managementEgressIpPrefix"`
	// Management interface configuration. Valid values: "DHCP", "Static".
	ManagementInterfaceConfig pulumi.StringOutput `pulumi:"managementInterfaceConfig"`
	// Management interface IP and subnet prefix. Required and valid when `managementInterfaceConfig` is "Static".
	ManagementInterfaceIpPrefix pulumi.StringPtrOutput `pulumi:"managementInterfaceIpPrefix"`
	// Edge as a CaaG name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Connection AS Path Prepend customized by specifying AS PATH for a BGP connection. Requires localAsNumber to be set. Type: List.
	PrependAsPaths pulumi.StringArrayOutput `pulumi:"prependAsPaths"`
	// Secondary DNS server IP. Required and valid when `managementInterfaceConfig` is "Static".
	SecondaryDnsServerIp pulumi.StringPtrOutput `pulumi:"secondaryDnsServerIp"`
	// State of Edge as a CaaG.
	State pulumi.StringOutput `pulumi:"state"`
	// WAN default gateway IP.
	WanDefaultGatewayIp pulumi.StringOutput `pulumi:"wanDefaultGatewayIp"`
	// WAN interface IP and subnet prefix.
	WanInterfaceIpPrefix pulumi.StringOutput `pulumi:"wanInterfaceIpPrefix"`
	// The folder path where the ZTP file will be downloaded.
	ZtpFileDownloadPath pulumi.StringOutput `pulumi:"ztpFileDownloadPath"`
	// ZTP file type. Valid values: "iso", "cloud-init".
	ZtpFileType pulumi.StringOutput `pulumi:"ztpFileType"`
}

// NewAviatrixEdgeCaag registers a new resource with the given unique name, arguments, and options.
func NewAviatrixEdgeCaag(ctx *pulumi.Context,
	name string, args *AviatrixEdgeCaagArgs, opts ...pulumi.ResourceOption) (*AviatrixEdgeCaag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LanInterfaceIpPrefix == nil {
		return nil, errors.New("invalid value for required argument 'LanInterfaceIpPrefix'")
	}
	if args.ManagementInterfaceConfig == nil {
		return nil, errors.New("invalid value for required argument 'ManagementInterfaceConfig'")
	}
	if args.WanDefaultGatewayIp == nil {
		return nil, errors.New("invalid value for required argument 'WanDefaultGatewayIp'")
	}
	if args.WanInterfaceIpPrefix == nil {
		return nil, errors.New("invalid value for required argument 'WanInterfaceIpPrefix'")
	}
	if args.ZtpFileDownloadPath == nil {
		return nil, errors.New("invalid value for required argument 'ZtpFileDownloadPath'")
	}
	if args.ZtpFileType == nil {
		return nil, errors.New("invalid value for required argument 'ZtpFileType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixEdgeCaag
	err := ctx.RegisterResource("aviatrix:index/aviatrixEdgeCaag:AviatrixEdgeCaag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixEdgeCaag gets an existing AviatrixEdgeCaag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixEdgeCaag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixEdgeCaagState, opts ...pulumi.ResourceOption) (*AviatrixEdgeCaag, error) {
	var resource AviatrixEdgeCaag
	err := ctx.ReadResource("aviatrix:index/aviatrixEdgeCaag:AviatrixEdgeCaag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixEdgeCaag resources.
type aviatrixEdgeCaagState struct {
	// DNS server IP. Required and valid when `managementInterfaceConfig` is "Static".
	DnsServerIp *string `pulumi:"dnsServerIp"`
	// Indicates whether it is public or private connection between controller and gateway. Valid values: true, false. Default value: false.
	EnableOverPrivateNetwork *bool `pulumi:"enableOverPrivateNetwork"`
	// LAN interface IP and subnet prefix.
	LanInterfaceIpPrefix *string `pulumi:"lanInterfaceIpPrefix"`
	// BGP AS Number to assign to Edge as a CaaG.
	LocalAsNumber *string `pulumi:"localAsNumber"`
	// Management default gateway IP. Required and valid when `managementInterfaceConfig` is "Static".
	ManagementDefaultGatewayIp *string `pulumi:"managementDefaultGatewayIp"`
	// Management egress gateway IP and subnet prefix.
	ManagementEgressIpPrefix *string `pulumi:"managementEgressIpPrefix"`
	// Management interface configuration. Valid values: "DHCP", "Static".
	ManagementInterfaceConfig *string `pulumi:"managementInterfaceConfig"`
	// Management interface IP and subnet prefix. Required and valid when `managementInterfaceConfig` is "Static".
	ManagementInterfaceIpPrefix *string `pulumi:"managementInterfaceIpPrefix"`
	// Edge as a CaaG name.
	Name *string `pulumi:"name"`
	// Connection AS Path Prepend customized by specifying AS PATH for a BGP connection. Requires localAsNumber to be set. Type: List.
	PrependAsPaths []string `pulumi:"prependAsPaths"`
	// Secondary DNS server IP. Required and valid when `managementInterfaceConfig` is "Static".
	SecondaryDnsServerIp *string `pulumi:"secondaryDnsServerIp"`
	// State of Edge as a CaaG.
	State *string `pulumi:"state"`
	// WAN default gateway IP.
	WanDefaultGatewayIp *string `pulumi:"wanDefaultGatewayIp"`
	// WAN interface IP and subnet prefix.
	WanInterfaceIpPrefix *string `pulumi:"wanInterfaceIpPrefix"`
	// The folder path where the ZTP file will be downloaded.
	ZtpFileDownloadPath *string `pulumi:"ztpFileDownloadPath"`
	// ZTP file type. Valid values: "iso", "cloud-init".
	ZtpFileType *string `pulumi:"ztpFileType"`
}

type AviatrixEdgeCaagState struct {
	// DNS server IP. Required and valid when `managementInterfaceConfig` is "Static".
	DnsServerIp pulumi.StringPtrInput
	// Indicates whether it is public or private connection between controller and gateway. Valid values: true, false. Default value: false.
	EnableOverPrivateNetwork pulumi.BoolPtrInput
	// LAN interface IP and subnet prefix.
	LanInterfaceIpPrefix pulumi.StringPtrInput
	// BGP AS Number to assign to Edge as a CaaG.
	LocalAsNumber pulumi.StringPtrInput
	// Management default gateway IP. Required and valid when `managementInterfaceConfig` is "Static".
	ManagementDefaultGatewayIp pulumi.StringPtrInput
	// Management egress gateway IP and subnet prefix.
	ManagementEgressIpPrefix pulumi.StringPtrInput
	// Management interface configuration. Valid values: "DHCP", "Static".
	ManagementInterfaceConfig pulumi.StringPtrInput
	// Management interface IP and subnet prefix. Required and valid when `managementInterfaceConfig` is "Static".
	ManagementInterfaceIpPrefix pulumi.StringPtrInput
	// Edge as a CaaG name.
	Name pulumi.StringPtrInput
	// Connection AS Path Prepend customized by specifying AS PATH for a BGP connection. Requires localAsNumber to be set. Type: List.
	PrependAsPaths pulumi.StringArrayInput
	// Secondary DNS server IP. Required and valid when `managementInterfaceConfig` is "Static".
	SecondaryDnsServerIp pulumi.StringPtrInput
	// State of Edge as a CaaG.
	State pulumi.StringPtrInput
	// WAN default gateway IP.
	WanDefaultGatewayIp pulumi.StringPtrInput
	// WAN interface IP and subnet prefix.
	WanInterfaceIpPrefix pulumi.StringPtrInput
	// The folder path where the ZTP file will be downloaded.
	ZtpFileDownloadPath pulumi.StringPtrInput
	// ZTP file type. Valid values: "iso", "cloud-init".
	ZtpFileType pulumi.StringPtrInput
}

func (AviatrixEdgeCaagState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixEdgeCaagState)(nil)).Elem()
}

type aviatrixEdgeCaagArgs struct {
	// DNS server IP. Required and valid when `managementInterfaceConfig` is "Static".
	DnsServerIp *string `pulumi:"dnsServerIp"`
	// Indicates whether it is public or private connection between controller and gateway. Valid values: true, false. Default value: false.
	EnableOverPrivateNetwork *bool `pulumi:"enableOverPrivateNetwork"`
	// LAN interface IP and subnet prefix.
	LanInterfaceIpPrefix string `pulumi:"lanInterfaceIpPrefix"`
	// BGP AS Number to assign to Edge as a CaaG.
	LocalAsNumber *string `pulumi:"localAsNumber"`
	// Management default gateway IP. Required and valid when `managementInterfaceConfig` is "Static".
	ManagementDefaultGatewayIp *string `pulumi:"managementDefaultGatewayIp"`
	// Management egress gateway IP and subnet prefix.
	ManagementEgressIpPrefix *string `pulumi:"managementEgressIpPrefix"`
	// Management interface configuration. Valid values: "DHCP", "Static".
	ManagementInterfaceConfig string `pulumi:"managementInterfaceConfig"`
	// Management interface IP and subnet prefix. Required and valid when `managementInterfaceConfig` is "Static".
	ManagementInterfaceIpPrefix *string `pulumi:"managementInterfaceIpPrefix"`
	// Edge as a CaaG name.
	Name *string `pulumi:"name"`
	// Connection AS Path Prepend customized by specifying AS PATH for a BGP connection. Requires localAsNumber to be set. Type: List.
	PrependAsPaths []string `pulumi:"prependAsPaths"`
	// Secondary DNS server IP. Required and valid when `managementInterfaceConfig` is "Static".
	SecondaryDnsServerIp *string `pulumi:"secondaryDnsServerIp"`
	// WAN default gateway IP.
	WanDefaultGatewayIp string `pulumi:"wanDefaultGatewayIp"`
	// WAN interface IP and subnet prefix.
	WanInterfaceIpPrefix string `pulumi:"wanInterfaceIpPrefix"`
	// The folder path where the ZTP file will be downloaded.
	ZtpFileDownloadPath string `pulumi:"ztpFileDownloadPath"`
	// ZTP file type. Valid values: "iso", "cloud-init".
	ZtpFileType string `pulumi:"ztpFileType"`
}

// The set of arguments for constructing a AviatrixEdgeCaag resource.
type AviatrixEdgeCaagArgs struct {
	// DNS server IP. Required and valid when `managementInterfaceConfig` is "Static".
	DnsServerIp pulumi.StringPtrInput
	// Indicates whether it is public or private connection between controller and gateway. Valid values: true, false. Default value: false.
	EnableOverPrivateNetwork pulumi.BoolPtrInput
	// LAN interface IP and subnet prefix.
	LanInterfaceIpPrefix pulumi.StringInput
	// BGP AS Number to assign to Edge as a CaaG.
	LocalAsNumber pulumi.StringPtrInput
	// Management default gateway IP. Required and valid when `managementInterfaceConfig` is "Static".
	ManagementDefaultGatewayIp pulumi.StringPtrInput
	// Management egress gateway IP and subnet prefix.
	ManagementEgressIpPrefix pulumi.StringPtrInput
	// Management interface configuration. Valid values: "DHCP", "Static".
	ManagementInterfaceConfig pulumi.StringInput
	// Management interface IP and subnet prefix. Required and valid when `managementInterfaceConfig` is "Static".
	ManagementInterfaceIpPrefix pulumi.StringPtrInput
	// Edge as a CaaG name.
	Name pulumi.StringPtrInput
	// Connection AS Path Prepend customized by specifying AS PATH for a BGP connection. Requires localAsNumber to be set. Type: List.
	PrependAsPaths pulumi.StringArrayInput
	// Secondary DNS server IP. Required and valid when `managementInterfaceConfig` is "Static".
	SecondaryDnsServerIp pulumi.StringPtrInput
	// WAN default gateway IP.
	WanDefaultGatewayIp pulumi.StringInput
	// WAN interface IP and subnet prefix.
	WanInterfaceIpPrefix pulumi.StringInput
	// The folder path where the ZTP file will be downloaded.
	ZtpFileDownloadPath pulumi.StringInput
	// ZTP file type. Valid values: "iso", "cloud-init".
	ZtpFileType pulumi.StringInput
}

func (AviatrixEdgeCaagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixEdgeCaagArgs)(nil)).Elem()
}

type AviatrixEdgeCaagInput interface {
	pulumi.Input

	ToAviatrixEdgeCaagOutput() AviatrixEdgeCaagOutput
	ToAviatrixEdgeCaagOutputWithContext(ctx context.Context) AviatrixEdgeCaagOutput
}

func (*AviatrixEdgeCaag) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixEdgeCaag)(nil)).Elem()
}

func (i *AviatrixEdgeCaag) ToAviatrixEdgeCaagOutput() AviatrixEdgeCaagOutput {
	return i.ToAviatrixEdgeCaagOutputWithContext(context.Background())
}

func (i *AviatrixEdgeCaag) ToAviatrixEdgeCaagOutputWithContext(ctx context.Context) AviatrixEdgeCaagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixEdgeCaagOutput)
}

// AviatrixEdgeCaagArrayInput is an input type that accepts AviatrixEdgeCaagArray and AviatrixEdgeCaagArrayOutput values.
// You can construct a concrete instance of `AviatrixEdgeCaagArrayInput` via:
//
//	AviatrixEdgeCaagArray{ AviatrixEdgeCaagArgs{...} }
type AviatrixEdgeCaagArrayInput interface {
	pulumi.Input

	ToAviatrixEdgeCaagArrayOutput() AviatrixEdgeCaagArrayOutput
	ToAviatrixEdgeCaagArrayOutputWithContext(context.Context) AviatrixEdgeCaagArrayOutput
}

type AviatrixEdgeCaagArray []AviatrixEdgeCaagInput

func (AviatrixEdgeCaagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixEdgeCaag)(nil)).Elem()
}

func (i AviatrixEdgeCaagArray) ToAviatrixEdgeCaagArrayOutput() AviatrixEdgeCaagArrayOutput {
	return i.ToAviatrixEdgeCaagArrayOutputWithContext(context.Background())
}

func (i AviatrixEdgeCaagArray) ToAviatrixEdgeCaagArrayOutputWithContext(ctx context.Context) AviatrixEdgeCaagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixEdgeCaagArrayOutput)
}

// AviatrixEdgeCaagMapInput is an input type that accepts AviatrixEdgeCaagMap and AviatrixEdgeCaagMapOutput values.
// You can construct a concrete instance of `AviatrixEdgeCaagMapInput` via:
//
//	AviatrixEdgeCaagMap{ "key": AviatrixEdgeCaagArgs{...} }
type AviatrixEdgeCaagMapInput interface {
	pulumi.Input

	ToAviatrixEdgeCaagMapOutput() AviatrixEdgeCaagMapOutput
	ToAviatrixEdgeCaagMapOutputWithContext(context.Context) AviatrixEdgeCaagMapOutput
}

type AviatrixEdgeCaagMap map[string]AviatrixEdgeCaagInput

func (AviatrixEdgeCaagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixEdgeCaag)(nil)).Elem()
}

func (i AviatrixEdgeCaagMap) ToAviatrixEdgeCaagMapOutput() AviatrixEdgeCaagMapOutput {
	return i.ToAviatrixEdgeCaagMapOutputWithContext(context.Background())
}

func (i AviatrixEdgeCaagMap) ToAviatrixEdgeCaagMapOutputWithContext(ctx context.Context) AviatrixEdgeCaagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixEdgeCaagMapOutput)
}

type AviatrixEdgeCaagOutput struct{ *pulumi.OutputState }

func (AviatrixEdgeCaagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixEdgeCaag)(nil)).Elem()
}

func (o AviatrixEdgeCaagOutput) ToAviatrixEdgeCaagOutput() AviatrixEdgeCaagOutput {
	return o
}

func (o AviatrixEdgeCaagOutput) ToAviatrixEdgeCaagOutputWithContext(ctx context.Context) AviatrixEdgeCaagOutput {
	return o
}

// DNS server IP. Required and valid when `managementInterfaceConfig` is "Static".
func (o AviatrixEdgeCaagOutput) DnsServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeCaag) pulumi.StringPtrOutput { return v.DnsServerIp }).(pulumi.StringPtrOutput)
}

// Indicates whether it is public or private connection between controller and gateway. Valid values: true, false. Default value: false.
func (o AviatrixEdgeCaagOutput) EnableOverPrivateNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeCaag) pulumi.BoolPtrOutput { return v.EnableOverPrivateNetwork }).(pulumi.BoolPtrOutput)
}

// LAN interface IP and subnet prefix.
func (o AviatrixEdgeCaagOutput) LanInterfaceIpPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeCaag) pulumi.StringOutput { return v.LanInterfaceIpPrefix }).(pulumi.StringOutput)
}

// BGP AS Number to assign to Edge as a CaaG.
func (o AviatrixEdgeCaagOutput) LocalAsNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeCaag) pulumi.StringOutput { return v.LocalAsNumber }).(pulumi.StringOutput)
}

// Management default gateway IP. Required and valid when `managementInterfaceConfig` is "Static".
func (o AviatrixEdgeCaagOutput) ManagementDefaultGatewayIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeCaag) pulumi.StringPtrOutput { return v.ManagementDefaultGatewayIp }).(pulumi.StringPtrOutput)
}

// Management egress gateway IP and subnet prefix.
func (o AviatrixEdgeCaagOutput) ManagementEgressIpPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeCaag) pulumi.StringPtrOutput { return v.ManagementEgressIpPrefix }).(pulumi.StringPtrOutput)
}

// Management interface configuration. Valid values: "DHCP", "Static".
func (o AviatrixEdgeCaagOutput) ManagementInterfaceConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeCaag) pulumi.StringOutput { return v.ManagementInterfaceConfig }).(pulumi.StringOutput)
}

// Management interface IP and subnet prefix. Required and valid when `managementInterfaceConfig` is "Static".
func (o AviatrixEdgeCaagOutput) ManagementInterfaceIpPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeCaag) pulumi.StringPtrOutput { return v.ManagementInterfaceIpPrefix }).(pulumi.StringPtrOutput)
}

// Edge as a CaaG name.
func (o AviatrixEdgeCaagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeCaag) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Connection AS Path Prepend customized by specifying AS PATH for a BGP connection. Requires localAsNumber to be set. Type: List.
func (o AviatrixEdgeCaagOutput) PrependAsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixEdgeCaag) pulumi.StringArrayOutput { return v.PrependAsPaths }).(pulumi.StringArrayOutput)
}

// Secondary DNS server IP. Required and valid when `managementInterfaceConfig` is "Static".
func (o AviatrixEdgeCaagOutput) SecondaryDnsServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeCaag) pulumi.StringPtrOutput { return v.SecondaryDnsServerIp }).(pulumi.StringPtrOutput)
}

// State of Edge as a CaaG.
func (o AviatrixEdgeCaagOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeCaag) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// WAN default gateway IP.
func (o AviatrixEdgeCaagOutput) WanDefaultGatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeCaag) pulumi.StringOutput { return v.WanDefaultGatewayIp }).(pulumi.StringOutput)
}

// WAN interface IP and subnet prefix.
func (o AviatrixEdgeCaagOutput) WanInterfaceIpPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeCaag) pulumi.StringOutput { return v.WanInterfaceIpPrefix }).(pulumi.StringOutput)
}

// The folder path where the ZTP file will be downloaded.
func (o AviatrixEdgeCaagOutput) ZtpFileDownloadPath() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeCaag) pulumi.StringOutput { return v.ZtpFileDownloadPath }).(pulumi.StringOutput)
}

// ZTP file type. Valid values: "iso", "cloud-init".
func (o AviatrixEdgeCaagOutput) ZtpFileType() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeCaag) pulumi.StringOutput { return v.ZtpFileType }).(pulumi.StringOutput)
}

type AviatrixEdgeCaagArrayOutput struct{ *pulumi.OutputState }

func (AviatrixEdgeCaagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixEdgeCaag)(nil)).Elem()
}

func (o AviatrixEdgeCaagArrayOutput) ToAviatrixEdgeCaagArrayOutput() AviatrixEdgeCaagArrayOutput {
	return o
}

func (o AviatrixEdgeCaagArrayOutput) ToAviatrixEdgeCaagArrayOutputWithContext(ctx context.Context) AviatrixEdgeCaagArrayOutput {
	return o
}

func (o AviatrixEdgeCaagArrayOutput) Index(i pulumi.IntInput) AviatrixEdgeCaagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixEdgeCaag {
		return vs[0].([]*AviatrixEdgeCaag)[vs[1].(int)]
	}).(AviatrixEdgeCaagOutput)
}

type AviatrixEdgeCaagMapOutput struct{ *pulumi.OutputState }

func (AviatrixEdgeCaagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixEdgeCaag)(nil)).Elem()
}

func (o AviatrixEdgeCaagMapOutput) ToAviatrixEdgeCaagMapOutput() AviatrixEdgeCaagMapOutput {
	return o
}

func (o AviatrixEdgeCaagMapOutput) ToAviatrixEdgeCaagMapOutputWithContext(ctx context.Context) AviatrixEdgeCaagMapOutput {
	return o
}

func (o AviatrixEdgeCaagMapOutput) MapIndex(k pulumi.StringInput) AviatrixEdgeCaagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixEdgeCaag {
		return vs[0].(map[string]*AviatrixEdgeCaag)[vs[1].(string)]
	}).(AviatrixEdgeCaagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixEdgeCaagInput)(nil)).Elem(), &AviatrixEdgeCaag{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixEdgeCaagArrayInput)(nil)).Elem(), AviatrixEdgeCaagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixEdgeCaagMapInput)(nil)).Elem(), AviatrixEdgeCaagMap{})
	pulumi.RegisterOutputType(AviatrixEdgeCaagOutput{})
	pulumi.RegisterOutputType(AviatrixEdgeCaagArrayOutput{})
	pulumi.RegisterOutputType(AviatrixEdgeCaagMapOutput{})
}
