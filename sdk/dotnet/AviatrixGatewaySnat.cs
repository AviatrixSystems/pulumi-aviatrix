// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aviatrix
{
    /// <summary>
    /// ## Import
    /// 
    /// **gateway_snat** can be imported using the `gw_name`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aviatrix:index/aviatrixGatewaySnat:AviatrixGatewaySnat test gw_name
    /// ```
    /// </summary>
    [AviatrixResourceType("aviatrix:index/aviatrixGatewaySnat:AviatrixGatewaySnat")]
    public partial class AviatrixGatewaySnat : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Computed attribute to store the previous connection policy.
        /// </summary>
        [Output("connectionPolicies")]
        public Output<ImmutableArray<Outputs.AviatrixGatewaySnatConnectionPolicy>> ConnectionPolicies { get; private set; } = null!;

        /// <summary>
        /// Name of the Aviatrix gateway the custom SNAT will be configured for.
        /// </summary>
        [Output("gwName")]
        public Output<string> GwName { get; private set; } = null!;

        /// <summary>
        /// Computed attribute to store the previous interface policy.
        /// </summary>
        [Output("interfacePolicies")]
        public Output<ImmutableArray<Outputs.AviatrixGatewaySnatInterfacePolicy>> InterfacePolicies { get; private set; } = null!;

        /// <summary>
        /// NAT mode. Valid values: "customized_snat". Default value: "customized_snat".
        /// </summary>
        [Output("snatMode")]
        public Output<string?> SnatMode { get; private set; } = null!;

        /// <summary>
        /// Policy rule applied for enabling source NAT (mode: "customized_snat"). Currently only supports AWS(1) and Azure(8).
        /// </summary>
        [Output("snatPolicies")]
        public Output<ImmutableArray<Outputs.AviatrixGatewaySnatSnatPolicy>> SnatPolicies { get; private set; } = null!;

        /// <summary>
        /// Sync the policies to the HA gateway. Valid values: true, false. Default: false.
        /// </summary>
        [Output("syncToHa")]
        public Output<bool?> SyncToHa { get; private set; } = null!;


        /// <summary>
        /// Create a AviatrixGatewaySnat resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AviatrixGatewaySnat(string name, AviatrixGatewaySnatArgs args, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixGatewaySnat:AviatrixGatewaySnat", name, args ?? new AviatrixGatewaySnatArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AviatrixGatewaySnat(string name, Input<string> id, AviatrixGatewaySnatState? state = null, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixGatewaySnat:AviatrixGatewaySnat", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/astipkovits",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AviatrixGatewaySnat resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AviatrixGatewaySnat Get(string name, Input<string> id, AviatrixGatewaySnatState? state = null, CustomResourceOptions? options = null)
        {
            return new AviatrixGatewaySnat(name, id, state, options);
        }
    }

    public sealed class AviatrixGatewaySnatArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the Aviatrix gateway the custom SNAT will be configured for.
        /// </summary>
        [Input("gwName", required: true)]
        public Input<string> GwName { get; set; } = null!;

        /// <summary>
        /// NAT mode. Valid values: "customized_snat". Default value: "customized_snat".
        /// </summary>
        [Input("snatMode")]
        public Input<string>? SnatMode { get; set; }

        [Input("snatPolicies")]
        private InputList<Inputs.AviatrixGatewaySnatSnatPolicyArgs>? _snatPolicies;

        /// <summary>
        /// Policy rule applied for enabling source NAT (mode: "customized_snat"). Currently only supports AWS(1) and Azure(8).
        /// </summary>
        public InputList<Inputs.AviatrixGatewaySnatSnatPolicyArgs> SnatPolicies
        {
            get => _snatPolicies ?? (_snatPolicies = new InputList<Inputs.AviatrixGatewaySnatSnatPolicyArgs>());
            set => _snatPolicies = value;
        }

        /// <summary>
        /// Sync the policies to the HA gateway. Valid values: true, false. Default: false.
        /// </summary>
        [Input("syncToHa")]
        public Input<bool>? SyncToHa { get; set; }

        public AviatrixGatewaySnatArgs()
        {
        }
        public static new AviatrixGatewaySnatArgs Empty => new AviatrixGatewaySnatArgs();
    }

    public sealed class AviatrixGatewaySnatState : global::Pulumi.ResourceArgs
    {
        [Input("connectionPolicies")]
        private InputList<Inputs.AviatrixGatewaySnatConnectionPolicyGetArgs>? _connectionPolicies;

        /// <summary>
        /// Computed attribute to store the previous connection policy.
        /// </summary>
        public InputList<Inputs.AviatrixGatewaySnatConnectionPolicyGetArgs> ConnectionPolicies
        {
            get => _connectionPolicies ?? (_connectionPolicies = new InputList<Inputs.AviatrixGatewaySnatConnectionPolicyGetArgs>());
            set => _connectionPolicies = value;
        }

        /// <summary>
        /// Name of the Aviatrix gateway the custom SNAT will be configured for.
        /// </summary>
        [Input("gwName")]
        public Input<string>? GwName { get; set; }

        [Input("interfacePolicies")]
        private InputList<Inputs.AviatrixGatewaySnatInterfacePolicyGetArgs>? _interfacePolicies;

        /// <summary>
        /// Computed attribute to store the previous interface policy.
        /// </summary>
        public InputList<Inputs.AviatrixGatewaySnatInterfacePolicyGetArgs> InterfacePolicies
        {
            get => _interfacePolicies ?? (_interfacePolicies = new InputList<Inputs.AviatrixGatewaySnatInterfacePolicyGetArgs>());
            set => _interfacePolicies = value;
        }

        /// <summary>
        /// NAT mode. Valid values: "customized_snat". Default value: "customized_snat".
        /// </summary>
        [Input("snatMode")]
        public Input<string>? SnatMode { get; set; }

        [Input("snatPolicies")]
        private InputList<Inputs.AviatrixGatewaySnatSnatPolicyGetArgs>? _snatPolicies;

        /// <summary>
        /// Policy rule applied for enabling source NAT (mode: "customized_snat"). Currently only supports AWS(1) and Azure(8).
        /// </summary>
        public InputList<Inputs.AviatrixGatewaySnatSnatPolicyGetArgs> SnatPolicies
        {
            get => _snatPolicies ?? (_snatPolicies = new InputList<Inputs.AviatrixGatewaySnatSnatPolicyGetArgs>());
            set => _snatPolicies = value;
        }

        /// <summary>
        /// Sync the policies to the HA gateway. Valid values: true, false. Default: false.
        /// </summary>
        [Input("syncToHa")]
        public Input<bool>? SyncToHa { get; set; }

        public AviatrixGatewaySnatState()
        {
        }
        public static new AviatrixGatewaySnatState Empty => new AviatrixGatewaySnatState();
    }
}
