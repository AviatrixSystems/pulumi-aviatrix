// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aviatrix
{
    /// <summary>
    /// The **aviatrix_remote_syslog** resource allows the enabling and disabling of remote syslog.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aviatrix = Pulumi.Aviatrix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Enable remote syslog without TLS
    ///     var testRemoteSyslog = new Aviatrix.AviatrixRemoteSyslog("testRemoteSyslog", new()
    ///     {
    ///         Index = 0,
    ///         Port = 10,
    ///         Protocol = "TCP",
    ///         Server = "1.2.3.4",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using Pulumi;
    /// using Aviatrix = Pulumi.Aviatrix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Enable remote syslog with TLS
    ///     var testRemoteSyslog = new Aviatrix.AviatrixRemoteSyslog("testRemoteSyslog", new()
    ///     {
    ///         Index = 0,
    ///         Server = "1.2.3.4",
    ///         Port = 10,
    ///         Protocol = "TCP",
    ///         CaCertificateFile = File.ReadAllText("/path/to/ca.pem"),
    ///         PublicCertificateFile = File.ReadAllText("/path/to/server.pem"),
    ///         PrivateKeyFile = File.ReadAllText("/path/to/client.pem"),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// **remote_syslog** can be imported using "remote_syslog_" + `index`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aviatrix:index/aviatrixRemoteSyslog:AviatrixRemoteSyslog test remote_syslog_0
    /// ```
    /// </summary>
    [AviatrixResourceType("aviatrix:index/aviatrixRemoteSyslog:AviatrixRemoteSyslog")]
    public partial class AviatrixRemoteSyslog : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Certificate Authority (CA) certificate. Use the `file` function to read from a file.
        /// </summary>
        [Output("caCertificateFile")]
        public Output<string?> CaCertificateFile { get; private set; } = null!;

        /// <summary>
        /// List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].
        /// </summary>
        [Output("excludedGateways")]
        public Output<ImmutableArray<string>> ExcludedGateways { get; private set; } = null!;

        /// <summary>
        /// Profile index. An index from 0 to 9 is supported. 0 by default.
        /// </summary>
        [Output("index")]
        public Output<int?> Index { get; private set; } = null!;

        /// <summary>
        /// Profile name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// This attribute is true if the remote syslog is not protected by TLS.
        /// </summary>
        [Output("notls")]
        public Output<bool> Notls { get; private set; } = null!;

        /// <summary>
        /// Port number.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The private key of the controller that pairs with the public certificate. Use the `file` function to read from a file.
        /// </summary>
        [Output("privateKeyFile")]
        public Output<string?> PrivateKeyFile { get; private set; } = null!;

        /// <summary>
        /// TCP or UDP. TCP by default.
        /// </summary>
        [Output("protocol")]
        public Output<string?> Protocol { get; private set; } = null!;

        /// <summary>
        /// The public certificate of the controller signed by the same CA. Use the `file` function to read from a file.
        /// </summary>
        [Output("publicCertificateFile")]
        public Output<string?> PublicCertificateFile { get; private set; } = null!;

        /// <summary>
        /// Server IP.
        /// </summary>
        [Output("server")]
        public Output<string> Server { get; private set; } = null!;

        /// <summary>
        /// The status of remote syslog.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Optional custom template.
        /// </summary>
        [Output("template")]
        public Output<string?> Template { get; private set; } = null!;


        /// <summary>
        /// Create a AviatrixRemoteSyslog resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AviatrixRemoteSyslog(string name, AviatrixRemoteSyslogArgs args, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixRemoteSyslog:AviatrixRemoteSyslog", name, args ?? new AviatrixRemoteSyslogArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AviatrixRemoteSyslog(string name, Input<string> id, AviatrixRemoteSyslogState? state = null, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixRemoteSyslog:AviatrixRemoteSyslog", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/astipkovits",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AviatrixRemoteSyslog resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AviatrixRemoteSyslog Get(string name, Input<string> id, AviatrixRemoteSyslogState? state = null, CustomResourceOptions? options = null)
        {
            return new AviatrixRemoteSyslog(name, id, state, options);
        }
    }

    public sealed class AviatrixRemoteSyslogArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Certificate Authority (CA) certificate. Use the `file` function to read from a file.
        /// </summary>
        [Input("caCertificateFile")]
        public Input<string>? CaCertificateFile { get; set; }

        [Input("excludedGateways")]
        private InputList<string>? _excludedGateways;

        /// <summary>
        /// List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].
        /// </summary>
        public InputList<string> ExcludedGateways
        {
            get => _excludedGateways ?? (_excludedGateways = new InputList<string>());
            set => _excludedGateways = value;
        }

        /// <summary>
        /// Profile index. An index from 0 to 9 is supported. 0 by default.
        /// </summary>
        [Input("index")]
        public Input<int>? Index { get; set; }

        /// <summary>
        /// Profile name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Port number.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// The private key of the controller that pairs with the public certificate. Use the `file` function to read from a file.
        /// </summary>
        [Input("privateKeyFile")]
        public Input<string>? PrivateKeyFile { get; set; }

        /// <summary>
        /// TCP or UDP. TCP by default.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The public certificate of the controller signed by the same CA. Use the `file` function to read from a file.
        /// </summary>
        [Input("publicCertificateFile")]
        public Input<string>? PublicCertificateFile { get; set; }

        /// <summary>
        /// Server IP.
        /// </summary>
        [Input("server", required: true)]
        public Input<string> Server { get; set; } = null!;

        /// <summary>
        /// Optional custom template.
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        public AviatrixRemoteSyslogArgs()
        {
        }
        public static new AviatrixRemoteSyslogArgs Empty => new AviatrixRemoteSyslogArgs();
    }

    public sealed class AviatrixRemoteSyslogState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Certificate Authority (CA) certificate. Use the `file` function to read from a file.
        /// </summary>
        [Input("caCertificateFile")]
        public Input<string>? CaCertificateFile { get; set; }

        [Input("excludedGateways")]
        private InputList<string>? _excludedGateways;

        /// <summary>
        /// List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].
        /// </summary>
        public InputList<string> ExcludedGateways
        {
            get => _excludedGateways ?? (_excludedGateways = new InputList<string>());
            set => _excludedGateways = value;
        }

        /// <summary>
        /// Profile index. An index from 0 to 9 is supported. 0 by default.
        /// </summary>
        [Input("index")]
        public Input<int>? Index { get; set; }

        /// <summary>
        /// Profile name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// This attribute is true if the remote syslog is not protected by TLS.
        /// </summary>
        [Input("notls")]
        public Input<bool>? Notls { get; set; }

        /// <summary>
        /// Port number.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The private key of the controller that pairs with the public certificate. Use the `file` function to read from a file.
        /// </summary>
        [Input("privateKeyFile")]
        public Input<string>? PrivateKeyFile { get; set; }

        /// <summary>
        /// TCP or UDP. TCP by default.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The public certificate of the controller signed by the same CA. Use the `file` function to read from a file.
        /// </summary>
        [Input("publicCertificateFile")]
        public Input<string>? PublicCertificateFile { get; set; }

        /// <summary>
        /// Server IP.
        /// </summary>
        [Input("server")]
        public Input<string>? Server { get; set; }

        /// <summary>
        /// The status of remote syslog.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Optional custom template.
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        public AviatrixRemoteSyslogState()
        {
        }
        public static new AviatrixRemoteSyslogState Empty => new AviatrixRemoteSyslogState();
    }
}
