// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **aviatrix_rbac_group_user_attachment** resource allows the creation and management of user attachments to Aviatrix (Role-Based Access Control) RBAC groups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/astipkovits/pulumi-aviatrix/sdk/go/aviatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aviatrix.NewAviatrixRbacGroupUserAttachment(ctx, "testAttachment", &aviatrix.AviatrixRbacGroupUserAttachmentArgs{
//				GroupName: pulumi.String("write_only"),
//				UserName:  pulumi.String("user_name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// **rbac_group_user_attachment** can be imported using the `group_name` and `user_name`, e.g.
//
// ```sh
//
//	$ pulumi import aviatrix:index/aviatrixRbacGroupUserAttachment:AviatrixRbacGroupUserAttachment test group_name~user_name
//
// ```
type AviatrixRbacGroupUserAttachment struct {
	pulumi.CustomResourceState

	// This parameter represents the name of a RBAC group.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// Username of the account user.
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewAviatrixRbacGroupUserAttachment registers a new resource with the given unique name, arguments, and options.
func NewAviatrixRbacGroupUserAttachment(ctx *pulumi.Context,
	name string, args *AviatrixRbacGroupUserAttachmentArgs, opts ...pulumi.ResourceOption) (*AviatrixRbacGroupUserAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixRbacGroupUserAttachment
	err := ctx.RegisterResource("aviatrix:index/aviatrixRbacGroupUserAttachment:AviatrixRbacGroupUserAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixRbacGroupUserAttachment gets an existing AviatrixRbacGroupUserAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixRbacGroupUserAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixRbacGroupUserAttachmentState, opts ...pulumi.ResourceOption) (*AviatrixRbacGroupUserAttachment, error) {
	var resource AviatrixRbacGroupUserAttachment
	err := ctx.ReadResource("aviatrix:index/aviatrixRbacGroupUserAttachment:AviatrixRbacGroupUserAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixRbacGroupUserAttachment resources.
type aviatrixRbacGroupUserAttachmentState struct {
	// This parameter represents the name of a RBAC group.
	GroupName *string `pulumi:"groupName"`
	// Username of the account user.
	UserName *string `pulumi:"userName"`
}

type AviatrixRbacGroupUserAttachmentState struct {
	// This parameter represents the name of a RBAC group.
	GroupName pulumi.StringPtrInput
	// Username of the account user.
	UserName pulumi.StringPtrInput
}

func (AviatrixRbacGroupUserAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixRbacGroupUserAttachmentState)(nil)).Elem()
}

type aviatrixRbacGroupUserAttachmentArgs struct {
	// This parameter represents the name of a RBAC group.
	GroupName string `pulumi:"groupName"`
	// Username of the account user.
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a AviatrixRbacGroupUserAttachment resource.
type AviatrixRbacGroupUserAttachmentArgs struct {
	// This parameter represents the name of a RBAC group.
	GroupName pulumi.StringInput
	// Username of the account user.
	UserName pulumi.StringInput
}

func (AviatrixRbacGroupUserAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixRbacGroupUserAttachmentArgs)(nil)).Elem()
}

type AviatrixRbacGroupUserAttachmentInput interface {
	pulumi.Input

	ToAviatrixRbacGroupUserAttachmentOutput() AviatrixRbacGroupUserAttachmentOutput
	ToAviatrixRbacGroupUserAttachmentOutputWithContext(ctx context.Context) AviatrixRbacGroupUserAttachmentOutput
}

func (*AviatrixRbacGroupUserAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixRbacGroupUserAttachment)(nil)).Elem()
}

func (i *AviatrixRbacGroupUserAttachment) ToAviatrixRbacGroupUserAttachmentOutput() AviatrixRbacGroupUserAttachmentOutput {
	return i.ToAviatrixRbacGroupUserAttachmentOutputWithContext(context.Background())
}

func (i *AviatrixRbacGroupUserAttachment) ToAviatrixRbacGroupUserAttachmentOutputWithContext(ctx context.Context) AviatrixRbacGroupUserAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixRbacGroupUserAttachmentOutput)
}

// AviatrixRbacGroupUserAttachmentArrayInput is an input type that accepts AviatrixRbacGroupUserAttachmentArray and AviatrixRbacGroupUserAttachmentArrayOutput values.
// You can construct a concrete instance of `AviatrixRbacGroupUserAttachmentArrayInput` via:
//
//	AviatrixRbacGroupUserAttachmentArray{ AviatrixRbacGroupUserAttachmentArgs{...} }
type AviatrixRbacGroupUserAttachmentArrayInput interface {
	pulumi.Input

	ToAviatrixRbacGroupUserAttachmentArrayOutput() AviatrixRbacGroupUserAttachmentArrayOutput
	ToAviatrixRbacGroupUserAttachmentArrayOutputWithContext(context.Context) AviatrixRbacGroupUserAttachmentArrayOutput
}

type AviatrixRbacGroupUserAttachmentArray []AviatrixRbacGroupUserAttachmentInput

func (AviatrixRbacGroupUserAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixRbacGroupUserAttachment)(nil)).Elem()
}

func (i AviatrixRbacGroupUserAttachmentArray) ToAviatrixRbacGroupUserAttachmentArrayOutput() AviatrixRbacGroupUserAttachmentArrayOutput {
	return i.ToAviatrixRbacGroupUserAttachmentArrayOutputWithContext(context.Background())
}

func (i AviatrixRbacGroupUserAttachmentArray) ToAviatrixRbacGroupUserAttachmentArrayOutputWithContext(ctx context.Context) AviatrixRbacGroupUserAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixRbacGroupUserAttachmentArrayOutput)
}

// AviatrixRbacGroupUserAttachmentMapInput is an input type that accepts AviatrixRbacGroupUserAttachmentMap and AviatrixRbacGroupUserAttachmentMapOutput values.
// You can construct a concrete instance of `AviatrixRbacGroupUserAttachmentMapInput` via:
//
//	AviatrixRbacGroupUserAttachmentMap{ "key": AviatrixRbacGroupUserAttachmentArgs{...} }
type AviatrixRbacGroupUserAttachmentMapInput interface {
	pulumi.Input

	ToAviatrixRbacGroupUserAttachmentMapOutput() AviatrixRbacGroupUserAttachmentMapOutput
	ToAviatrixRbacGroupUserAttachmentMapOutputWithContext(context.Context) AviatrixRbacGroupUserAttachmentMapOutput
}

type AviatrixRbacGroupUserAttachmentMap map[string]AviatrixRbacGroupUserAttachmentInput

func (AviatrixRbacGroupUserAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixRbacGroupUserAttachment)(nil)).Elem()
}

func (i AviatrixRbacGroupUserAttachmentMap) ToAviatrixRbacGroupUserAttachmentMapOutput() AviatrixRbacGroupUserAttachmentMapOutput {
	return i.ToAviatrixRbacGroupUserAttachmentMapOutputWithContext(context.Background())
}

func (i AviatrixRbacGroupUserAttachmentMap) ToAviatrixRbacGroupUserAttachmentMapOutputWithContext(ctx context.Context) AviatrixRbacGroupUserAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixRbacGroupUserAttachmentMapOutput)
}

type AviatrixRbacGroupUserAttachmentOutput struct{ *pulumi.OutputState }

func (AviatrixRbacGroupUserAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixRbacGroupUserAttachment)(nil)).Elem()
}

func (o AviatrixRbacGroupUserAttachmentOutput) ToAviatrixRbacGroupUserAttachmentOutput() AviatrixRbacGroupUserAttachmentOutput {
	return o
}

func (o AviatrixRbacGroupUserAttachmentOutput) ToAviatrixRbacGroupUserAttachmentOutputWithContext(ctx context.Context) AviatrixRbacGroupUserAttachmentOutput {
	return o
}

// This parameter represents the name of a RBAC group.
func (o AviatrixRbacGroupUserAttachmentOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixRbacGroupUserAttachment) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

// Username of the account user.
func (o AviatrixRbacGroupUserAttachmentOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixRbacGroupUserAttachment) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type AviatrixRbacGroupUserAttachmentArrayOutput struct{ *pulumi.OutputState }

func (AviatrixRbacGroupUserAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixRbacGroupUserAttachment)(nil)).Elem()
}

func (o AviatrixRbacGroupUserAttachmentArrayOutput) ToAviatrixRbacGroupUserAttachmentArrayOutput() AviatrixRbacGroupUserAttachmentArrayOutput {
	return o
}

func (o AviatrixRbacGroupUserAttachmentArrayOutput) ToAviatrixRbacGroupUserAttachmentArrayOutputWithContext(ctx context.Context) AviatrixRbacGroupUserAttachmentArrayOutput {
	return o
}

func (o AviatrixRbacGroupUserAttachmentArrayOutput) Index(i pulumi.IntInput) AviatrixRbacGroupUserAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixRbacGroupUserAttachment {
		return vs[0].([]*AviatrixRbacGroupUserAttachment)[vs[1].(int)]
	}).(AviatrixRbacGroupUserAttachmentOutput)
}

type AviatrixRbacGroupUserAttachmentMapOutput struct{ *pulumi.OutputState }

func (AviatrixRbacGroupUserAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixRbacGroupUserAttachment)(nil)).Elem()
}

func (o AviatrixRbacGroupUserAttachmentMapOutput) ToAviatrixRbacGroupUserAttachmentMapOutput() AviatrixRbacGroupUserAttachmentMapOutput {
	return o
}

func (o AviatrixRbacGroupUserAttachmentMapOutput) ToAviatrixRbacGroupUserAttachmentMapOutputWithContext(ctx context.Context) AviatrixRbacGroupUserAttachmentMapOutput {
	return o
}

func (o AviatrixRbacGroupUserAttachmentMapOutput) MapIndex(k pulumi.StringInput) AviatrixRbacGroupUserAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixRbacGroupUserAttachment {
		return vs[0].(map[string]*AviatrixRbacGroupUserAttachment)[vs[1].(string)]
	}).(AviatrixRbacGroupUserAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixRbacGroupUserAttachmentInput)(nil)).Elem(), &AviatrixRbacGroupUserAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixRbacGroupUserAttachmentArrayInput)(nil)).Elem(), AviatrixRbacGroupUserAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixRbacGroupUserAttachmentMapInput)(nil)).Elem(), AviatrixRbacGroupUserAttachmentMap{})
	pulumi.RegisterOutputType(AviatrixRbacGroupUserAttachmentOutput{})
	pulumi.RegisterOutputType(AviatrixRbacGroupUserAttachmentArrayOutput{})
	pulumi.RegisterOutputType(AviatrixRbacGroupUserAttachmentMapOutput{})
}
