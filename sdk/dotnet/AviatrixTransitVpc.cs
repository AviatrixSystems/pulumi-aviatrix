// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aviatrix
{
    [AviatrixResourceType("aviatrix:index/aviatrixTransitVpc:AviatrixTransitVpc")]
    public partial class AviatrixTransitVpc : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This parameter represents the name of a Cloud-Account in Aviatrix controller.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// Type of cloud service provider, requires an integer value. Use 1 for AWS.
        /// </summary>
        [Output("cloudType")]
        public Output<int> CloudType { get; private set; } = null!;

        /// <summary>
        /// Specify Connected Transit status.
        /// </summary>
        [Output("connectedTransit")]
        public Output<string?> ConnectedTransit { get; private set; } = null!;

        /// <summary>
        /// Specify whether to enable firenet interfaces or not.
        /// </summary>
        [Output("enableFirenetInterfaces")]
        public Output<bool?> EnableFirenetInterfaces { get; private set; } = null!;

        /// <summary>
        /// Sign of readiness for TGW connection.
        /// </summary>
        [Output("enableHybridConnection")]
        public Output<bool?> EnableHybridConnection { get; private set; } = null!;

        /// <summary>
        /// Enable NAT for this container.
        /// </summary>
        [Output("enableNat")]
        public Output<string?> EnableNat { get; private set; } = null!;

        /// <summary>
        /// Name of the gateway which is going to be created.
        /// </summary>
        [Output("gwName")]
        public Output<string> GwName { get; private set; } = null!;

        /// <summary>
        /// HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).
        /// </summary>
        [Output("haGwSize")]
        public Output<string?> HaGwSize { get; private set; } = null!;

        /// <summary>
        /// AZ of subnet being created for Insane Mode Transit HA Gateway. Required if insane_mode is enabled and ha_subnet is set.
        /// </summary>
        [Output("haInsaneModeAz")]
        public Output<string?> HaInsaneModeAz { get; private set; } = null!;

        /// <summary>
        /// HA Subnet.
        /// </summary>
        [Output("haSubnet")]
        public Output<string?> HaSubnet { get; private set; } = null!;

        /// <summary>
        /// Enable Insane Mode for Transit. Valid values: true, false. If insane mode is enabled, gateway size has to at least be c5
        /// size.
        /// </summary>
        [Output("insaneMode")]
        public Output<bool?> InsaneMode { get; private set; } = null!;

        /// <summary>
        /// AZ of subnet being created for Insane Mode Transit Gateway. Required if insane_mode is enabled.
        /// </summary>
        [Output("insaneModeAz")]
        public Output<string?> InsaneModeAz { get; private set; } = null!;

        /// <summary>
        /// Public Subnet Name.
        /// </summary>
        [Output("subnet")]
        public Output<string> Subnet { get; private set; } = null!;

        /// <summary>
        /// Instance tag of cloud provider.
        /// </summary>
        [Output("tagLists")]
        public Output<ImmutableArray<string>> TagLists { get; private set; } = null!;

        /// <summary>
        /// VPC-ID/VNet-Name of cloud provider.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// Region of cloud provider.
        /// </summary>
        [Output("vpcReg")]
        public Output<string> VpcReg { get; private set; } = null!;

        /// <summary>
        /// Size of the gateway instance.
        /// </summary>
        [Output("vpcSize")]
        public Output<string> VpcSize { get; private set; } = null!;


        /// <summary>
        /// Create a AviatrixTransitVpc resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AviatrixTransitVpc(string name, AviatrixTransitVpcArgs args, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixTransitVpc:AviatrixTransitVpc", name, args ?? new AviatrixTransitVpcArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AviatrixTransitVpc(string name, Input<string> id, AviatrixTransitVpcState? state = null, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixTransitVpc:AviatrixTransitVpc", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/astipkovits/pulumi-aviatrix/releases/download/${VERSION}/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AviatrixTransitVpc resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AviatrixTransitVpc Get(string name, Input<string> id, AviatrixTransitVpcState? state = null, CustomResourceOptions? options = null)
        {
            return new AviatrixTransitVpc(name, id, state, options);
        }
    }

    public sealed class AviatrixTransitVpcArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This parameter represents the name of a Cloud-Account in Aviatrix controller.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// Type of cloud service provider, requires an integer value. Use 1 for AWS.
        /// </summary>
        [Input("cloudType", required: true)]
        public Input<int> CloudType { get; set; } = null!;

        /// <summary>
        /// Specify Connected Transit status.
        /// </summary>
        [Input("connectedTransit")]
        public Input<string>? ConnectedTransit { get; set; }

        /// <summary>
        /// Specify whether to enable firenet interfaces or not.
        /// </summary>
        [Input("enableFirenetInterfaces")]
        public Input<bool>? EnableFirenetInterfaces { get; set; }

        /// <summary>
        /// Sign of readiness for TGW connection.
        /// </summary>
        [Input("enableHybridConnection")]
        public Input<bool>? EnableHybridConnection { get; set; }

        /// <summary>
        /// Enable NAT for this container.
        /// </summary>
        [Input("enableNat")]
        public Input<string>? EnableNat { get; set; }

        /// <summary>
        /// Name of the gateway which is going to be created.
        /// </summary>
        [Input("gwName", required: true)]
        public Input<string> GwName { get; set; } = null!;

        /// <summary>
        /// HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).
        /// </summary>
        [Input("haGwSize")]
        public Input<string>? HaGwSize { get; set; }

        /// <summary>
        /// AZ of subnet being created for Insane Mode Transit HA Gateway. Required if insane_mode is enabled and ha_subnet is set.
        /// </summary>
        [Input("haInsaneModeAz")]
        public Input<string>? HaInsaneModeAz { get; set; }

        /// <summary>
        /// HA Subnet.
        /// </summary>
        [Input("haSubnet")]
        public Input<string>? HaSubnet { get; set; }

        /// <summary>
        /// Enable Insane Mode for Transit. Valid values: true, false. If insane mode is enabled, gateway size has to at least be c5
        /// size.
        /// </summary>
        [Input("insaneMode")]
        public Input<bool>? InsaneMode { get; set; }

        /// <summary>
        /// AZ of subnet being created for Insane Mode Transit Gateway. Required if insane_mode is enabled.
        /// </summary>
        [Input("insaneModeAz")]
        public Input<string>? InsaneModeAz { get; set; }

        /// <summary>
        /// Public Subnet Name.
        /// </summary>
        [Input("subnet", required: true)]
        public Input<string> Subnet { get; set; } = null!;

        [Input("tagLists")]
        private InputList<string>? _tagLists;

        /// <summary>
        /// Instance tag of cloud provider.
        /// </summary>
        public InputList<string> TagLists
        {
            get => _tagLists ?? (_tagLists = new InputList<string>());
            set => _tagLists = value;
        }

        /// <summary>
        /// VPC-ID/VNet-Name of cloud provider.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        /// <summary>
        /// Region of cloud provider.
        /// </summary>
        [Input("vpcReg", required: true)]
        public Input<string> VpcReg { get; set; } = null!;

        /// <summary>
        /// Size of the gateway instance.
        /// </summary>
        [Input("vpcSize", required: true)]
        public Input<string> VpcSize { get; set; } = null!;

        public AviatrixTransitVpcArgs()
        {
        }
        public static new AviatrixTransitVpcArgs Empty => new AviatrixTransitVpcArgs();
    }

    public sealed class AviatrixTransitVpcState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This parameter represents the name of a Cloud-Account in Aviatrix controller.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// Type of cloud service provider, requires an integer value. Use 1 for AWS.
        /// </summary>
        [Input("cloudType")]
        public Input<int>? CloudType { get; set; }

        /// <summary>
        /// Specify Connected Transit status.
        /// </summary>
        [Input("connectedTransit")]
        public Input<string>? ConnectedTransit { get; set; }

        /// <summary>
        /// Specify whether to enable firenet interfaces or not.
        /// </summary>
        [Input("enableFirenetInterfaces")]
        public Input<bool>? EnableFirenetInterfaces { get; set; }

        /// <summary>
        /// Sign of readiness for TGW connection.
        /// </summary>
        [Input("enableHybridConnection")]
        public Input<bool>? EnableHybridConnection { get; set; }

        /// <summary>
        /// Enable NAT for this container.
        /// </summary>
        [Input("enableNat")]
        public Input<string>? EnableNat { get; set; }

        /// <summary>
        /// Name of the gateway which is going to be created.
        /// </summary>
        [Input("gwName")]
        public Input<string>? GwName { get; set; }

        /// <summary>
        /// HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).
        /// </summary>
        [Input("haGwSize")]
        public Input<string>? HaGwSize { get; set; }

        /// <summary>
        /// AZ of subnet being created for Insane Mode Transit HA Gateway. Required if insane_mode is enabled and ha_subnet is set.
        /// </summary>
        [Input("haInsaneModeAz")]
        public Input<string>? HaInsaneModeAz { get; set; }

        /// <summary>
        /// HA Subnet.
        /// </summary>
        [Input("haSubnet")]
        public Input<string>? HaSubnet { get; set; }

        /// <summary>
        /// Enable Insane Mode for Transit. Valid values: true, false. If insane mode is enabled, gateway size has to at least be c5
        /// size.
        /// </summary>
        [Input("insaneMode")]
        public Input<bool>? InsaneMode { get; set; }

        /// <summary>
        /// AZ of subnet being created for Insane Mode Transit Gateway. Required if insane_mode is enabled.
        /// </summary>
        [Input("insaneModeAz")]
        public Input<string>? InsaneModeAz { get; set; }

        /// <summary>
        /// Public Subnet Name.
        /// </summary>
        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        [Input("tagLists")]
        private InputList<string>? _tagLists;

        /// <summary>
        /// Instance tag of cloud provider.
        /// </summary>
        public InputList<string> TagLists
        {
            get => _tagLists ?? (_tagLists = new InputList<string>());
            set => _tagLists = value;
        }

        /// <summary>
        /// VPC-ID/VNet-Name of cloud provider.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// Region of cloud provider.
        /// </summary>
        [Input("vpcReg")]
        public Input<string>? VpcReg { get; set; }

        /// <summary>
        /// Size of the gateway instance.
        /// </summary>
        [Input("vpcSize")]
        public Input<string>? VpcSize { get; set; }

        public AviatrixTransitVpcState()
        {
        }
        public static new AviatrixTransitVpcState Empty => new AviatrixTransitVpcState();
    }
}
