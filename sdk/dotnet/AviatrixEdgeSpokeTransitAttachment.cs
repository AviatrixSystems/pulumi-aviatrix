// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aviatrix
{
    [AviatrixResourceType("aviatrix:index/aviatrixEdgeSpokeTransitAttachment:AviatrixEdgeSpokeTransitAttachment")]
    public partial class AviatrixEdgeSpokeTransitAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable jumbo frame.
        /// </summary>
        [Output("enableInsaneMode")]
        public Output<bool?> EnableInsaneMode { get; private set; } = null!;

        /// <summary>
        /// Enable jumbo frame.
        /// </summary>
        [Output("enableJumboFrame")]
        public Output<bool?> EnableJumboFrame { get; private set; } = null!;

        /// <summary>
        /// Enable over private network.
        /// </summary>
        [Output("enableOverPrivateNetwork")]
        public Output<bool?> EnableOverPrivateNetwork { get; private set; } = null!;

        /// <summary>
        /// Insane mode tunnel number.
        /// </summary>
        [Output("insaneModeTunnelNumber")]
        public Output<int?> InsaneModeTunnelNumber { get; private set; } = null!;

        /// <summary>
        /// Name of the Edge as a Spoke to attach to the transit network.
        /// </summary>
        [Output("spokeGwName")]
        public Output<string> SpokeGwName { get; private set; } = null!;

        /// <summary>
        /// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on Edge as a Spoke.
        /// </summary>
        [Output("spokePrependAsPaths")]
        public Output<ImmutableArray<string>> SpokePrependAsPaths { get; private set; } = null!;

        /// <summary>
        /// Name of the transit gateway to attach the Edge as a Spoke to.
        /// </summary>
        [Output("transitGwName")]
        public Output<string> TransitGwName { get; private set; } = null!;

        /// <summary>
        /// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.
        /// </summary>
        [Output("transitPrependAsPaths")]
        public Output<ImmutableArray<string>> TransitPrependAsPaths { get; private set; } = null!;


        /// <summary>
        /// Create a AviatrixEdgeSpokeTransitAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AviatrixEdgeSpokeTransitAttachment(string name, AviatrixEdgeSpokeTransitAttachmentArgs args, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixEdgeSpokeTransitAttachment:AviatrixEdgeSpokeTransitAttachment", name, args ?? new AviatrixEdgeSpokeTransitAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AviatrixEdgeSpokeTransitAttachment(string name, Input<string> id, AviatrixEdgeSpokeTransitAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixEdgeSpokeTransitAttachment:AviatrixEdgeSpokeTransitAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/astipkovits/pulumi-aviatrix/releases/download/${VERSION}/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AviatrixEdgeSpokeTransitAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AviatrixEdgeSpokeTransitAttachment Get(string name, Input<string> id, AviatrixEdgeSpokeTransitAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new AviatrixEdgeSpokeTransitAttachment(name, id, state, options);
        }
    }

    public sealed class AviatrixEdgeSpokeTransitAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable jumbo frame.
        /// </summary>
        [Input("enableInsaneMode")]
        public Input<bool>? EnableInsaneMode { get; set; }

        /// <summary>
        /// Enable jumbo frame.
        /// </summary>
        [Input("enableJumboFrame")]
        public Input<bool>? EnableJumboFrame { get; set; }

        /// <summary>
        /// Enable over private network.
        /// </summary>
        [Input("enableOverPrivateNetwork")]
        public Input<bool>? EnableOverPrivateNetwork { get; set; }

        /// <summary>
        /// Insane mode tunnel number.
        /// </summary>
        [Input("insaneModeTunnelNumber")]
        public Input<int>? InsaneModeTunnelNumber { get; set; }

        /// <summary>
        /// Name of the Edge as a Spoke to attach to the transit network.
        /// </summary>
        [Input("spokeGwName", required: true)]
        public Input<string> SpokeGwName { get; set; } = null!;

        [Input("spokePrependAsPaths")]
        private InputList<string>? _spokePrependAsPaths;

        /// <summary>
        /// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on Edge as a Spoke.
        /// </summary>
        public InputList<string> SpokePrependAsPaths
        {
            get => _spokePrependAsPaths ?? (_spokePrependAsPaths = new InputList<string>());
            set => _spokePrependAsPaths = value;
        }

        /// <summary>
        /// Name of the transit gateway to attach the Edge as a Spoke to.
        /// </summary>
        [Input("transitGwName", required: true)]
        public Input<string> TransitGwName { get; set; } = null!;

        [Input("transitPrependAsPaths")]
        private InputList<string>? _transitPrependAsPaths;

        /// <summary>
        /// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.
        /// </summary>
        public InputList<string> TransitPrependAsPaths
        {
            get => _transitPrependAsPaths ?? (_transitPrependAsPaths = new InputList<string>());
            set => _transitPrependAsPaths = value;
        }

        public AviatrixEdgeSpokeTransitAttachmentArgs()
        {
        }
        public static new AviatrixEdgeSpokeTransitAttachmentArgs Empty => new AviatrixEdgeSpokeTransitAttachmentArgs();
    }

    public sealed class AviatrixEdgeSpokeTransitAttachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable jumbo frame.
        /// </summary>
        [Input("enableInsaneMode")]
        public Input<bool>? EnableInsaneMode { get; set; }

        /// <summary>
        /// Enable jumbo frame.
        /// </summary>
        [Input("enableJumboFrame")]
        public Input<bool>? EnableJumboFrame { get; set; }

        /// <summary>
        /// Enable over private network.
        /// </summary>
        [Input("enableOverPrivateNetwork")]
        public Input<bool>? EnableOverPrivateNetwork { get; set; }

        /// <summary>
        /// Insane mode tunnel number.
        /// </summary>
        [Input("insaneModeTunnelNumber")]
        public Input<int>? InsaneModeTunnelNumber { get; set; }

        /// <summary>
        /// Name of the Edge as a Spoke to attach to the transit network.
        /// </summary>
        [Input("spokeGwName")]
        public Input<string>? SpokeGwName { get; set; }

        [Input("spokePrependAsPaths")]
        private InputList<string>? _spokePrependAsPaths;

        /// <summary>
        /// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on Edge as a Spoke.
        /// </summary>
        public InputList<string> SpokePrependAsPaths
        {
            get => _spokePrependAsPaths ?? (_spokePrependAsPaths = new InputList<string>());
            set => _spokePrependAsPaths = value;
        }

        /// <summary>
        /// Name of the transit gateway to attach the Edge as a Spoke to.
        /// </summary>
        [Input("transitGwName")]
        public Input<string>? TransitGwName { get; set; }

        [Input("transitPrependAsPaths")]
        private InputList<string>? _transitPrependAsPaths;

        /// <summary>
        /// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.
        /// </summary>
        public InputList<string> TransitPrependAsPaths
        {
            get => _transitPrependAsPaths ?? (_transitPrependAsPaths = new InputList<string>());
            set => _transitPrependAsPaths = value;
        }

        public AviatrixEdgeSpokeTransitAttachmentState()
        {
        }
        public static new AviatrixEdgeSpokeTransitAttachmentState Empty => new AviatrixEdgeSpokeTransitAttachmentState();
    }
}
