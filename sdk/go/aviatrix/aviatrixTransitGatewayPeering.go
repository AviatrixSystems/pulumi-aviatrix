// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **aviatrix_transit_gateway_peering** resource allows the creation and management of peerings between Aviatrix transit gateways.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/astipkovits/pulumi-aviatrix/sdk/go/aviatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aviatrix.NewAviatrixTransitGatewayPeering(ctx, "testTransitGatewayPeering", &aviatrix.AviatrixTransitGatewayPeeringArgs{
//				EnableInsaneModeEncryptionOverInternet: pulumi.Bool(false),
//				EnablePeeringOverPrivateNetwork:        pulumi.Bool(false),
//				Gateway1ExcludedNetworkCidrs: pulumi.StringArray{
//					pulumi.String("10.0.0.48/28"),
//				},
//				Gateway1ExcludedTgwConnections: pulumi.StringArray{
//					pulumi.String("vpn_connection_a"),
//				},
//				Gateway2ExcludedNetworkCidrs: pulumi.StringArray{
//					pulumi.String("10.0.0.48/28"),
//				},
//				Gateway2ExcludedTgwConnections: pulumi.StringArray{
//					pulumi.String("vpn_connection_b"),
//				},
//				PrependAsPath1s: pulumi.StringArray{
//					pulumi.String("65001"),
//					pulumi.String("65001"),
//					pulumi.String("65001"),
//				},
//				PrependAsPath2s: pulumi.StringArray{
//					pulumi.String("65002"),
//				},
//				TransitGatewayName1: pulumi.String("transit-Gw1"),
//				TransitGatewayName2: pulumi.String("transit-Gw2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// **transit_gateway_peering** can be imported using the `transit_gateway_name1` and `transit_gateway_name2`, e.g.
//
// ```sh
//
//	$ pulumi import aviatrix:index/aviatrixTransitGatewayPeering:AviatrixTransitGatewayPeering test transit_gateway_name1~transit_gateway_name2
//
// ```
type AviatrixTransitGatewayPeering struct {
	pulumi.CustomResourceState

	// Advanced option. Enable Insane Mode Encryption over Internet. Transit gateways must be in Insane Mode. Currently, only inter-cloud connections between AWS and Azure are supported. Required with valid `tunnelCount`. Conflicts with `enablePeeringOverPrivateNetwork` and `enableSingleTunnelMode`. Type: Boolean. Default: false. Available as of provider version R2.19+.
	EnableInsaneModeEncryptionOverInternet pulumi.BoolPtrOutput `pulumi:"enableInsaneModeEncryptionOverInternet"`
	// Indicates whether the maximum amount of HPE tunnels will be created. Only valid when the two transit gateways are each launched in Insane Mode and in the same cloud type. Default value: true. Available as of provider version R2.22.2+.
	EnableMaxPerformance pulumi.BoolPtrOutput `pulumi:"enableMaxPerformance"`
	// Advanced option. Enable peering over private network. Only appears and applies to when the two Multi-cloud Transit Gateways are each launched in Insane Mode and in a different cloud type. Conflicts with `enableInsaneModeEncryptionOverInternet` and `tunnelCount`. Type: Boolean. Default: false. Available in provider version R2.17.1+.
	EnablePeeringOverPrivateNetwork pulumi.BoolPtrOutput `pulumi:"enablePeeringOverPrivateNetwork"`
	// Advanced option. Enable peering with Single-Tunnel mode. Only appears and applies to when the two Multi-cloud Transit Gateways are each launched in Insane Mode and in a different cloud type. Required with `enablePeeringOverPrivateNetwork`. Conflicts with `enableInsaneModeEncryptionOverInternet` and `tunnelCount`. Type: Boolean. Default: false. Available as of provider version R2.18+.
	EnableSingleTunnelMode pulumi.BoolPtrOutput `pulumi:"enableSingleTunnelMode"`
	// List of excluded network CIDRs for the first transit gateway.
	Gateway1ExcludedNetworkCidrs pulumi.StringArrayOutput `pulumi:"gateway1ExcludedNetworkCidrs"`
	// List of excluded TGW connections for the first transit gateway.
	Gateway1ExcludedTgwConnections pulumi.StringArrayOutput `pulumi:"gateway1ExcludedTgwConnections"`
	// List of excluded network CIDRs for the second transit gateway.
	Gateway2ExcludedNetworkCidrs pulumi.StringArrayOutput `pulumi:"gateway2ExcludedNetworkCidrs"`
	// List of excluded TGW connections for the second transit gateway.
	Gateway2ExcludedTgwConnections pulumi.StringArrayOutput `pulumi:"gateway2ExcludedTgwConnections"`
	// AS Path Prepend for BGP connection. Can only use the transit's own local AS number, repeated up to 25 times. Applies on transit_gateway_name1. Available in provider version R2.17.2+.
	PrependAsPath1s pulumi.StringArrayOutput `pulumi:"prependAsPath1s"`
	// AS Path Prepend for BGP connection. Can only use the transit's own local AS number, repeated up to 25 times. Applies on transit_gateway_name2. Available in provider version R2.17.2+.
	PrependAsPath2s pulumi.StringArrayOutput `pulumi:"prependAsPath2s"`
	// The first transit gateway name to make a peer pair.
	TransitGatewayName1 pulumi.StringOutput `pulumi:"transitGatewayName1"`
	// The second transit gateway name to make a peer pair.
	TransitGatewayName2 pulumi.StringOutput `pulumi:"transitGatewayName2"`
	// Advanced option. Number of public tunnels. Required with `enableInsaneModeEncryptionOverInternet`. Conflicts with `enablePeeringOverPrivateNetwork` and `enableSingleTunnelMode`. Type: Integer. Valid Range: 2-20. Available as of provider version R2.19+.
	TunnelCount pulumi.IntPtrOutput `pulumi:"tunnelCount"`
}

// NewAviatrixTransitGatewayPeering registers a new resource with the given unique name, arguments, and options.
func NewAviatrixTransitGatewayPeering(ctx *pulumi.Context,
	name string, args *AviatrixTransitGatewayPeeringArgs, opts ...pulumi.ResourceOption) (*AviatrixTransitGatewayPeering, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TransitGatewayName1 == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayName1'")
	}
	if args.TransitGatewayName2 == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayName2'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixTransitGatewayPeering
	err := ctx.RegisterResource("aviatrix:index/aviatrixTransitGatewayPeering:AviatrixTransitGatewayPeering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixTransitGatewayPeering gets an existing AviatrixTransitGatewayPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixTransitGatewayPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixTransitGatewayPeeringState, opts ...pulumi.ResourceOption) (*AviatrixTransitGatewayPeering, error) {
	var resource AviatrixTransitGatewayPeering
	err := ctx.ReadResource("aviatrix:index/aviatrixTransitGatewayPeering:AviatrixTransitGatewayPeering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixTransitGatewayPeering resources.
type aviatrixTransitGatewayPeeringState struct {
	// Advanced option. Enable Insane Mode Encryption over Internet. Transit gateways must be in Insane Mode. Currently, only inter-cloud connections between AWS and Azure are supported. Required with valid `tunnelCount`. Conflicts with `enablePeeringOverPrivateNetwork` and `enableSingleTunnelMode`. Type: Boolean. Default: false. Available as of provider version R2.19+.
	EnableInsaneModeEncryptionOverInternet *bool `pulumi:"enableInsaneModeEncryptionOverInternet"`
	// Indicates whether the maximum amount of HPE tunnels will be created. Only valid when the two transit gateways are each launched in Insane Mode and in the same cloud type. Default value: true. Available as of provider version R2.22.2+.
	EnableMaxPerformance *bool `pulumi:"enableMaxPerformance"`
	// Advanced option. Enable peering over private network. Only appears and applies to when the two Multi-cloud Transit Gateways are each launched in Insane Mode and in a different cloud type. Conflicts with `enableInsaneModeEncryptionOverInternet` and `tunnelCount`. Type: Boolean. Default: false. Available in provider version R2.17.1+.
	EnablePeeringOverPrivateNetwork *bool `pulumi:"enablePeeringOverPrivateNetwork"`
	// Advanced option. Enable peering with Single-Tunnel mode. Only appears and applies to when the two Multi-cloud Transit Gateways are each launched in Insane Mode and in a different cloud type. Required with `enablePeeringOverPrivateNetwork`. Conflicts with `enableInsaneModeEncryptionOverInternet` and `tunnelCount`. Type: Boolean. Default: false. Available as of provider version R2.18+.
	EnableSingleTunnelMode *bool `pulumi:"enableSingleTunnelMode"`
	// List of excluded network CIDRs for the first transit gateway.
	Gateway1ExcludedNetworkCidrs []string `pulumi:"gateway1ExcludedNetworkCidrs"`
	// List of excluded TGW connections for the first transit gateway.
	Gateway1ExcludedTgwConnections []string `pulumi:"gateway1ExcludedTgwConnections"`
	// List of excluded network CIDRs for the second transit gateway.
	Gateway2ExcludedNetworkCidrs []string `pulumi:"gateway2ExcludedNetworkCidrs"`
	// List of excluded TGW connections for the second transit gateway.
	Gateway2ExcludedTgwConnections []string `pulumi:"gateway2ExcludedTgwConnections"`
	// AS Path Prepend for BGP connection. Can only use the transit's own local AS number, repeated up to 25 times. Applies on transit_gateway_name1. Available in provider version R2.17.2+.
	PrependAsPath1s []string `pulumi:"prependAsPath1s"`
	// AS Path Prepend for BGP connection. Can only use the transit's own local AS number, repeated up to 25 times. Applies on transit_gateway_name2. Available in provider version R2.17.2+.
	PrependAsPath2s []string `pulumi:"prependAsPath2s"`
	// The first transit gateway name to make a peer pair.
	TransitGatewayName1 *string `pulumi:"transitGatewayName1"`
	// The second transit gateway name to make a peer pair.
	TransitGatewayName2 *string `pulumi:"transitGatewayName2"`
	// Advanced option. Number of public tunnels. Required with `enableInsaneModeEncryptionOverInternet`. Conflicts with `enablePeeringOverPrivateNetwork` and `enableSingleTunnelMode`. Type: Integer. Valid Range: 2-20. Available as of provider version R2.19+.
	TunnelCount *int `pulumi:"tunnelCount"`
}

type AviatrixTransitGatewayPeeringState struct {
	// Advanced option. Enable Insane Mode Encryption over Internet. Transit gateways must be in Insane Mode. Currently, only inter-cloud connections between AWS and Azure are supported. Required with valid `tunnelCount`. Conflicts with `enablePeeringOverPrivateNetwork` and `enableSingleTunnelMode`. Type: Boolean. Default: false. Available as of provider version R2.19+.
	EnableInsaneModeEncryptionOverInternet pulumi.BoolPtrInput
	// Indicates whether the maximum amount of HPE tunnels will be created. Only valid when the two transit gateways are each launched in Insane Mode and in the same cloud type. Default value: true. Available as of provider version R2.22.2+.
	EnableMaxPerformance pulumi.BoolPtrInput
	// Advanced option. Enable peering over private network. Only appears and applies to when the two Multi-cloud Transit Gateways are each launched in Insane Mode and in a different cloud type. Conflicts with `enableInsaneModeEncryptionOverInternet` and `tunnelCount`. Type: Boolean. Default: false. Available in provider version R2.17.1+.
	EnablePeeringOverPrivateNetwork pulumi.BoolPtrInput
	// Advanced option. Enable peering with Single-Tunnel mode. Only appears and applies to when the two Multi-cloud Transit Gateways are each launched in Insane Mode and in a different cloud type. Required with `enablePeeringOverPrivateNetwork`. Conflicts with `enableInsaneModeEncryptionOverInternet` and `tunnelCount`. Type: Boolean. Default: false. Available as of provider version R2.18+.
	EnableSingleTunnelMode pulumi.BoolPtrInput
	// List of excluded network CIDRs for the first transit gateway.
	Gateway1ExcludedNetworkCidrs pulumi.StringArrayInput
	// List of excluded TGW connections for the first transit gateway.
	Gateway1ExcludedTgwConnections pulumi.StringArrayInput
	// List of excluded network CIDRs for the second transit gateway.
	Gateway2ExcludedNetworkCidrs pulumi.StringArrayInput
	// List of excluded TGW connections for the second transit gateway.
	Gateway2ExcludedTgwConnections pulumi.StringArrayInput
	// AS Path Prepend for BGP connection. Can only use the transit's own local AS number, repeated up to 25 times. Applies on transit_gateway_name1. Available in provider version R2.17.2+.
	PrependAsPath1s pulumi.StringArrayInput
	// AS Path Prepend for BGP connection. Can only use the transit's own local AS number, repeated up to 25 times. Applies on transit_gateway_name2. Available in provider version R2.17.2+.
	PrependAsPath2s pulumi.StringArrayInput
	// The first transit gateway name to make a peer pair.
	TransitGatewayName1 pulumi.StringPtrInput
	// The second transit gateway name to make a peer pair.
	TransitGatewayName2 pulumi.StringPtrInput
	// Advanced option. Number of public tunnels. Required with `enableInsaneModeEncryptionOverInternet`. Conflicts with `enablePeeringOverPrivateNetwork` and `enableSingleTunnelMode`. Type: Integer. Valid Range: 2-20. Available as of provider version R2.19+.
	TunnelCount pulumi.IntPtrInput
}

func (AviatrixTransitGatewayPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixTransitGatewayPeeringState)(nil)).Elem()
}

type aviatrixTransitGatewayPeeringArgs struct {
	// Advanced option. Enable Insane Mode Encryption over Internet. Transit gateways must be in Insane Mode. Currently, only inter-cloud connections between AWS and Azure are supported. Required with valid `tunnelCount`. Conflicts with `enablePeeringOverPrivateNetwork` and `enableSingleTunnelMode`. Type: Boolean. Default: false. Available as of provider version R2.19+.
	EnableInsaneModeEncryptionOverInternet *bool `pulumi:"enableInsaneModeEncryptionOverInternet"`
	// Indicates whether the maximum amount of HPE tunnels will be created. Only valid when the two transit gateways are each launched in Insane Mode and in the same cloud type. Default value: true. Available as of provider version R2.22.2+.
	EnableMaxPerformance *bool `pulumi:"enableMaxPerformance"`
	// Advanced option. Enable peering over private network. Only appears and applies to when the two Multi-cloud Transit Gateways are each launched in Insane Mode and in a different cloud type. Conflicts with `enableInsaneModeEncryptionOverInternet` and `tunnelCount`. Type: Boolean. Default: false. Available in provider version R2.17.1+.
	EnablePeeringOverPrivateNetwork *bool `pulumi:"enablePeeringOverPrivateNetwork"`
	// Advanced option. Enable peering with Single-Tunnel mode. Only appears and applies to when the two Multi-cloud Transit Gateways are each launched in Insane Mode and in a different cloud type. Required with `enablePeeringOverPrivateNetwork`. Conflicts with `enableInsaneModeEncryptionOverInternet` and `tunnelCount`. Type: Boolean. Default: false. Available as of provider version R2.18+.
	EnableSingleTunnelMode *bool `pulumi:"enableSingleTunnelMode"`
	// List of excluded network CIDRs for the first transit gateway.
	Gateway1ExcludedNetworkCidrs []string `pulumi:"gateway1ExcludedNetworkCidrs"`
	// List of excluded TGW connections for the first transit gateway.
	Gateway1ExcludedTgwConnections []string `pulumi:"gateway1ExcludedTgwConnections"`
	// List of excluded network CIDRs for the second transit gateway.
	Gateway2ExcludedNetworkCidrs []string `pulumi:"gateway2ExcludedNetworkCidrs"`
	// List of excluded TGW connections for the second transit gateway.
	Gateway2ExcludedTgwConnections []string `pulumi:"gateway2ExcludedTgwConnections"`
	// AS Path Prepend for BGP connection. Can only use the transit's own local AS number, repeated up to 25 times. Applies on transit_gateway_name1. Available in provider version R2.17.2+.
	PrependAsPath1s []string `pulumi:"prependAsPath1s"`
	// AS Path Prepend for BGP connection. Can only use the transit's own local AS number, repeated up to 25 times. Applies on transit_gateway_name2. Available in provider version R2.17.2+.
	PrependAsPath2s []string `pulumi:"prependAsPath2s"`
	// The first transit gateway name to make a peer pair.
	TransitGatewayName1 string `pulumi:"transitGatewayName1"`
	// The second transit gateway name to make a peer pair.
	TransitGatewayName2 string `pulumi:"transitGatewayName2"`
	// Advanced option. Number of public tunnels. Required with `enableInsaneModeEncryptionOverInternet`. Conflicts with `enablePeeringOverPrivateNetwork` and `enableSingleTunnelMode`. Type: Integer. Valid Range: 2-20. Available as of provider version R2.19+.
	TunnelCount *int `pulumi:"tunnelCount"`
}

// The set of arguments for constructing a AviatrixTransitGatewayPeering resource.
type AviatrixTransitGatewayPeeringArgs struct {
	// Advanced option. Enable Insane Mode Encryption over Internet. Transit gateways must be in Insane Mode. Currently, only inter-cloud connections between AWS and Azure are supported. Required with valid `tunnelCount`. Conflicts with `enablePeeringOverPrivateNetwork` and `enableSingleTunnelMode`. Type: Boolean. Default: false. Available as of provider version R2.19+.
	EnableInsaneModeEncryptionOverInternet pulumi.BoolPtrInput
	// Indicates whether the maximum amount of HPE tunnels will be created. Only valid when the two transit gateways are each launched in Insane Mode and in the same cloud type. Default value: true. Available as of provider version R2.22.2+.
	EnableMaxPerformance pulumi.BoolPtrInput
	// Advanced option. Enable peering over private network. Only appears and applies to when the two Multi-cloud Transit Gateways are each launched in Insane Mode and in a different cloud type. Conflicts with `enableInsaneModeEncryptionOverInternet` and `tunnelCount`. Type: Boolean. Default: false. Available in provider version R2.17.1+.
	EnablePeeringOverPrivateNetwork pulumi.BoolPtrInput
	// Advanced option. Enable peering with Single-Tunnel mode. Only appears and applies to when the two Multi-cloud Transit Gateways are each launched in Insane Mode and in a different cloud type. Required with `enablePeeringOverPrivateNetwork`. Conflicts with `enableInsaneModeEncryptionOverInternet` and `tunnelCount`. Type: Boolean. Default: false. Available as of provider version R2.18+.
	EnableSingleTunnelMode pulumi.BoolPtrInput
	// List of excluded network CIDRs for the first transit gateway.
	Gateway1ExcludedNetworkCidrs pulumi.StringArrayInput
	// List of excluded TGW connections for the first transit gateway.
	Gateway1ExcludedTgwConnections pulumi.StringArrayInput
	// List of excluded network CIDRs for the second transit gateway.
	Gateway2ExcludedNetworkCidrs pulumi.StringArrayInput
	// List of excluded TGW connections for the second transit gateway.
	Gateway2ExcludedTgwConnections pulumi.StringArrayInput
	// AS Path Prepend for BGP connection. Can only use the transit's own local AS number, repeated up to 25 times. Applies on transit_gateway_name1. Available in provider version R2.17.2+.
	PrependAsPath1s pulumi.StringArrayInput
	// AS Path Prepend for BGP connection. Can only use the transit's own local AS number, repeated up to 25 times. Applies on transit_gateway_name2. Available in provider version R2.17.2+.
	PrependAsPath2s pulumi.StringArrayInput
	// The first transit gateway name to make a peer pair.
	TransitGatewayName1 pulumi.StringInput
	// The second transit gateway name to make a peer pair.
	TransitGatewayName2 pulumi.StringInput
	// Advanced option. Number of public tunnels. Required with `enableInsaneModeEncryptionOverInternet`. Conflicts with `enablePeeringOverPrivateNetwork` and `enableSingleTunnelMode`. Type: Integer. Valid Range: 2-20. Available as of provider version R2.19+.
	TunnelCount pulumi.IntPtrInput
}

func (AviatrixTransitGatewayPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixTransitGatewayPeeringArgs)(nil)).Elem()
}

type AviatrixTransitGatewayPeeringInput interface {
	pulumi.Input

	ToAviatrixTransitGatewayPeeringOutput() AviatrixTransitGatewayPeeringOutput
	ToAviatrixTransitGatewayPeeringOutputWithContext(ctx context.Context) AviatrixTransitGatewayPeeringOutput
}

func (*AviatrixTransitGatewayPeering) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixTransitGatewayPeering)(nil)).Elem()
}

func (i *AviatrixTransitGatewayPeering) ToAviatrixTransitGatewayPeeringOutput() AviatrixTransitGatewayPeeringOutput {
	return i.ToAviatrixTransitGatewayPeeringOutputWithContext(context.Background())
}

func (i *AviatrixTransitGatewayPeering) ToAviatrixTransitGatewayPeeringOutputWithContext(ctx context.Context) AviatrixTransitGatewayPeeringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixTransitGatewayPeeringOutput)
}

// AviatrixTransitGatewayPeeringArrayInput is an input type that accepts AviatrixTransitGatewayPeeringArray and AviatrixTransitGatewayPeeringArrayOutput values.
// You can construct a concrete instance of `AviatrixTransitGatewayPeeringArrayInput` via:
//
//	AviatrixTransitGatewayPeeringArray{ AviatrixTransitGatewayPeeringArgs{...} }
type AviatrixTransitGatewayPeeringArrayInput interface {
	pulumi.Input

	ToAviatrixTransitGatewayPeeringArrayOutput() AviatrixTransitGatewayPeeringArrayOutput
	ToAviatrixTransitGatewayPeeringArrayOutputWithContext(context.Context) AviatrixTransitGatewayPeeringArrayOutput
}

type AviatrixTransitGatewayPeeringArray []AviatrixTransitGatewayPeeringInput

func (AviatrixTransitGatewayPeeringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixTransitGatewayPeering)(nil)).Elem()
}

func (i AviatrixTransitGatewayPeeringArray) ToAviatrixTransitGatewayPeeringArrayOutput() AviatrixTransitGatewayPeeringArrayOutput {
	return i.ToAviatrixTransitGatewayPeeringArrayOutputWithContext(context.Background())
}

func (i AviatrixTransitGatewayPeeringArray) ToAviatrixTransitGatewayPeeringArrayOutputWithContext(ctx context.Context) AviatrixTransitGatewayPeeringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixTransitGatewayPeeringArrayOutput)
}

// AviatrixTransitGatewayPeeringMapInput is an input type that accepts AviatrixTransitGatewayPeeringMap and AviatrixTransitGatewayPeeringMapOutput values.
// You can construct a concrete instance of `AviatrixTransitGatewayPeeringMapInput` via:
//
//	AviatrixTransitGatewayPeeringMap{ "key": AviatrixTransitGatewayPeeringArgs{...} }
type AviatrixTransitGatewayPeeringMapInput interface {
	pulumi.Input

	ToAviatrixTransitGatewayPeeringMapOutput() AviatrixTransitGatewayPeeringMapOutput
	ToAviatrixTransitGatewayPeeringMapOutputWithContext(context.Context) AviatrixTransitGatewayPeeringMapOutput
}

type AviatrixTransitGatewayPeeringMap map[string]AviatrixTransitGatewayPeeringInput

func (AviatrixTransitGatewayPeeringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixTransitGatewayPeering)(nil)).Elem()
}

func (i AviatrixTransitGatewayPeeringMap) ToAviatrixTransitGatewayPeeringMapOutput() AviatrixTransitGatewayPeeringMapOutput {
	return i.ToAviatrixTransitGatewayPeeringMapOutputWithContext(context.Background())
}

func (i AviatrixTransitGatewayPeeringMap) ToAviatrixTransitGatewayPeeringMapOutputWithContext(ctx context.Context) AviatrixTransitGatewayPeeringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixTransitGatewayPeeringMapOutput)
}

type AviatrixTransitGatewayPeeringOutput struct{ *pulumi.OutputState }

func (AviatrixTransitGatewayPeeringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixTransitGatewayPeering)(nil)).Elem()
}

func (o AviatrixTransitGatewayPeeringOutput) ToAviatrixTransitGatewayPeeringOutput() AviatrixTransitGatewayPeeringOutput {
	return o
}

func (o AviatrixTransitGatewayPeeringOutput) ToAviatrixTransitGatewayPeeringOutputWithContext(ctx context.Context) AviatrixTransitGatewayPeeringOutput {
	return o
}

// Advanced option. Enable Insane Mode Encryption over Internet. Transit gateways must be in Insane Mode. Currently, only inter-cloud connections between AWS and Azure are supported. Required with valid `tunnelCount`. Conflicts with `enablePeeringOverPrivateNetwork` and `enableSingleTunnelMode`. Type: Boolean. Default: false. Available as of provider version R2.19+.
func (o AviatrixTransitGatewayPeeringOutput) EnableInsaneModeEncryptionOverInternet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitGatewayPeering) pulumi.BoolPtrOutput {
		return v.EnableInsaneModeEncryptionOverInternet
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether the maximum amount of HPE tunnels will be created. Only valid when the two transit gateways are each launched in Insane Mode and in the same cloud type. Default value: true. Available as of provider version R2.22.2+.
func (o AviatrixTransitGatewayPeeringOutput) EnableMaxPerformance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitGatewayPeering) pulumi.BoolPtrOutput { return v.EnableMaxPerformance }).(pulumi.BoolPtrOutput)
}

// Advanced option. Enable peering over private network. Only appears and applies to when the two Multi-cloud Transit Gateways are each launched in Insane Mode and in a different cloud type. Conflicts with `enableInsaneModeEncryptionOverInternet` and `tunnelCount`. Type: Boolean. Default: false. Available in provider version R2.17.1+.
func (o AviatrixTransitGatewayPeeringOutput) EnablePeeringOverPrivateNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitGatewayPeering) pulumi.BoolPtrOutput { return v.EnablePeeringOverPrivateNetwork }).(pulumi.BoolPtrOutput)
}

// Advanced option. Enable peering with Single-Tunnel mode. Only appears and applies to when the two Multi-cloud Transit Gateways are each launched in Insane Mode and in a different cloud type. Required with `enablePeeringOverPrivateNetwork`. Conflicts with `enableInsaneModeEncryptionOverInternet` and `tunnelCount`. Type: Boolean. Default: false. Available as of provider version R2.18+.
func (o AviatrixTransitGatewayPeeringOutput) EnableSingleTunnelMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitGatewayPeering) pulumi.BoolPtrOutput { return v.EnableSingleTunnelMode }).(pulumi.BoolPtrOutput)
}

// List of excluded network CIDRs for the first transit gateway.
func (o AviatrixTransitGatewayPeeringOutput) Gateway1ExcludedNetworkCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixTransitGatewayPeering) pulumi.StringArrayOutput { return v.Gateway1ExcludedNetworkCidrs }).(pulumi.StringArrayOutput)
}

// List of excluded TGW connections for the first transit gateway.
func (o AviatrixTransitGatewayPeeringOutput) Gateway1ExcludedTgwConnections() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixTransitGatewayPeering) pulumi.StringArrayOutput {
		return v.Gateway1ExcludedTgwConnections
	}).(pulumi.StringArrayOutput)
}

// List of excluded network CIDRs for the second transit gateway.
func (o AviatrixTransitGatewayPeeringOutput) Gateway2ExcludedNetworkCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixTransitGatewayPeering) pulumi.StringArrayOutput { return v.Gateway2ExcludedNetworkCidrs }).(pulumi.StringArrayOutput)
}

// List of excluded TGW connections for the second transit gateway.
func (o AviatrixTransitGatewayPeeringOutput) Gateway2ExcludedTgwConnections() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixTransitGatewayPeering) pulumi.StringArrayOutput {
		return v.Gateway2ExcludedTgwConnections
	}).(pulumi.StringArrayOutput)
}

// AS Path Prepend for BGP connection. Can only use the transit's own local AS number, repeated up to 25 times. Applies on transit_gateway_name1. Available in provider version R2.17.2+.
func (o AviatrixTransitGatewayPeeringOutput) PrependAsPath1s() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixTransitGatewayPeering) pulumi.StringArrayOutput { return v.PrependAsPath1s }).(pulumi.StringArrayOutput)
}

// AS Path Prepend for BGP connection. Can only use the transit's own local AS number, repeated up to 25 times. Applies on transit_gateway_name2. Available in provider version R2.17.2+.
func (o AviatrixTransitGatewayPeeringOutput) PrependAsPath2s() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixTransitGatewayPeering) pulumi.StringArrayOutput { return v.PrependAsPath2s }).(pulumi.StringArrayOutput)
}

// The first transit gateway name to make a peer pair.
func (o AviatrixTransitGatewayPeeringOutput) TransitGatewayName1() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitGatewayPeering) pulumi.StringOutput { return v.TransitGatewayName1 }).(pulumi.StringOutput)
}

// The second transit gateway name to make a peer pair.
func (o AviatrixTransitGatewayPeeringOutput) TransitGatewayName2() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitGatewayPeering) pulumi.StringOutput { return v.TransitGatewayName2 }).(pulumi.StringOutput)
}

// Advanced option. Number of public tunnels. Required with `enableInsaneModeEncryptionOverInternet`. Conflicts with `enablePeeringOverPrivateNetwork` and `enableSingleTunnelMode`. Type: Integer. Valid Range: 2-20. Available as of provider version R2.19+.
func (o AviatrixTransitGatewayPeeringOutput) TunnelCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitGatewayPeering) pulumi.IntPtrOutput { return v.TunnelCount }).(pulumi.IntPtrOutput)
}

type AviatrixTransitGatewayPeeringArrayOutput struct{ *pulumi.OutputState }

func (AviatrixTransitGatewayPeeringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixTransitGatewayPeering)(nil)).Elem()
}

func (o AviatrixTransitGatewayPeeringArrayOutput) ToAviatrixTransitGatewayPeeringArrayOutput() AviatrixTransitGatewayPeeringArrayOutput {
	return o
}

func (o AviatrixTransitGatewayPeeringArrayOutput) ToAviatrixTransitGatewayPeeringArrayOutputWithContext(ctx context.Context) AviatrixTransitGatewayPeeringArrayOutput {
	return o
}

func (o AviatrixTransitGatewayPeeringArrayOutput) Index(i pulumi.IntInput) AviatrixTransitGatewayPeeringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixTransitGatewayPeering {
		return vs[0].([]*AviatrixTransitGatewayPeering)[vs[1].(int)]
	}).(AviatrixTransitGatewayPeeringOutput)
}

type AviatrixTransitGatewayPeeringMapOutput struct{ *pulumi.OutputState }

func (AviatrixTransitGatewayPeeringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixTransitGatewayPeering)(nil)).Elem()
}

func (o AviatrixTransitGatewayPeeringMapOutput) ToAviatrixTransitGatewayPeeringMapOutput() AviatrixTransitGatewayPeeringMapOutput {
	return o
}

func (o AviatrixTransitGatewayPeeringMapOutput) ToAviatrixTransitGatewayPeeringMapOutputWithContext(ctx context.Context) AviatrixTransitGatewayPeeringMapOutput {
	return o
}

func (o AviatrixTransitGatewayPeeringMapOutput) MapIndex(k pulumi.StringInput) AviatrixTransitGatewayPeeringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixTransitGatewayPeering {
		return vs[0].(map[string]*AviatrixTransitGatewayPeering)[vs[1].(string)]
	}).(AviatrixTransitGatewayPeeringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixTransitGatewayPeeringInput)(nil)).Elem(), &AviatrixTransitGatewayPeering{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixTransitGatewayPeeringArrayInput)(nil)).Elem(), AviatrixTransitGatewayPeeringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixTransitGatewayPeeringMapInput)(nil)).Elem(), AviatrixTransitGatewayPeeringMap{})
	pulumi.RegisterOutputType(AviatrixTransitGatewayPeeringOutput{})
	pulumi.RegisterOutputType(AviatrixTransitGatewayPeeringArrayOutput{})
	pulumi.RegisterOutputType(AviatrixTransitGatewayPeeringMapOutput{})
}
