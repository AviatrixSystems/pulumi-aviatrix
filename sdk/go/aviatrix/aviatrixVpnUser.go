// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **aviatrix_vpn_user** resource creates and manages Aviatrix VPN users.
//
// > **NOTE:** As of R2.15, management of user/profile attachment can be set using `manageUserAttachment`. This argument must be to *true* in either **aviatrix_vpn_user** or **aviatrix_vpn_profile**. If attachment is managed in the **aviatrix_vpn_user** (set to *true*), it must be set to *false* in the **aviatrix_vpn_profile** resource and vice versa.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/astipkovits/pulumi-aviatrix/sdk/go/aviatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aviatrix.NewAviatrixVpnUser(ctx, "testVpnUser", &aviatrix.AviatrixVpnUserArgs{
//				GwName:    pulumi.String("gw1"),
//				UserEmail: pulumi.String("user@aviatrix.com"),
//				UserName:  pulumi.String("username1"),
//				VpcId:     pulumi.String("vpc-abcd1234"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ```go
// package main
//
// import (
//
//	"github.com/astipkovits/pulumi-aviatrix/sdk/go/aviatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aviatrix.NewAviatrixVpnUser(ctx, "testVpnUser", &aviatrix.AviatrixVpnUserArgs{
//				DnsName:   pulumi.String("vpn.testuser.com"),
//				UserEmail: pulumi.String("user@aviatrix.com"),
//				UserName:  pulumi.String("username1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/astipkovits/pulumi-aviatrix/sdk/go/aviatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aviatrix.NewAviatrixVpnUser(ctx, "testVpnUser", &aviatrix.AviatrixVpnUserArgs{
//				GwName:    pulumi.String("gw1"),
//				UserEmail: pulumi.String("user@aviatrix.com"),
//				UserName:  pulumi.String("username1"),
//				VpcId:     pulumi.String(fmt.Sprintf("%v~-~%v", aviatrix_vpc.Test_vpc.Vpc_id, aviatrix_account.Test_account.Gcloud_project_id)),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// **vpn_user** can be imported using the `user_name`, e.g.
//
// ```sh
//
//	$ pulumi import aviatrix:index/aviatrixVpnUser:AviatrixVpnUser test user_name
//
// ```
type AviatrixVpnUser struct {
	pulumi.CustomResourceState

	// FQDN of a DNS based VPN service such as GeoVPN or UDP load balancer. Example: "vpn.testuser.com".
	DnsName pulumi.StringPtrOutput `pulumi:"dnsName"`
	// If ELB is enabled, this will be the name of the ELB, else it will be the name of the Aviatrix VPN gateway. Used together with `vpcId`. Example: "gw1".
	GwName pulumi.StringPtrOutput `pulumi:"gwName"`
	// This parameter is a switch to determine whether or not to manage VPN user attachments to the VPN profile using this resource. If this is set to false, attachment must be managed using the **aviatrix_vpn_profile** resource. Valid values: true, false. Default value: false.
	ManageUserAttachment pulumi.BoolPtrOutput `pulumi:"manageUserAttachment"`
	// List of VPN profiles for user to attach to. This should be set to null if `manageUserAttachment` is set to false.
	Profiles pulumi.StringArrayOutput `pulumi:"profiles"`
	// This is the name of the SAML endpoint to which the user is to be associated. This is required if adding user to a SAML gateway/LB.
	SamlEndpoint pulumi.StringPtrOutput `pulumi:"samlEndpoint"`
	// VPN user's email. Example: "abc@xyz.com".
	UserEmail pulumi.StringPtrOutput `pulumi:"userEmail"`
	// VPN user name. Example: "user".
	UserName pulumi.StringOutput `pulumi:"userName"`
	// VPC ID of Aviatrix VPN gateway. Used together with `gwName`. Example: "vpc-abcd1234".
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
}

// NewAviatrixVpnUser registers a new resource with the given unique name, arguments, and options.
func NewAviatrixVpnUser(ctx *pulumi.Context,
	name string, args *AviatrixVpnUserArgs, opts ...pulumi.ResourceOption) (*AviatrixVpnUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixVpnUser
	err := ctx.RegisterResource("aviatrix:index/aviatrixVpnUser:AviatrixVpnUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixVpnUser gets an existing AviatrixVpnUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixVpnUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixVpnUserState, opts ...pulumi.ResourceOption) (*AviatrixVpnUser, error) {
	var resource AviatrixVpnUser
	err := ctx.ReadResource("aviatrix:index/aviatrixVpnUser:AviatrixVpnUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixVpnUser resources.
type aviatrixVpnUserState struct {
	// FQDN of a DNS based VPN service such as GeoVPN or UDP load balancer. Example: "vpn.testuser.com".
	DnsName *string `pulumi:"dnsName"`
	// If ELB is enabled, this will be the name of the ELB, else it will be the name of the Aviatrix VPN gateway. Used together with `vpcId`. Example: "gw1".
	GwName *string `pulumi:"gwName"`
	// This parameter is a switch to determine whether or not to manage VPN user attachments to the VPN profile using this resource. If this is set to false, attachment must be managed using the **aviatrix_vpn_profile** resource. Valid values: true, false. Default value: false.
	ManageUserAttachment *bool `pulumi:"manageUserAttachment"`
	// List of VPN profiles for user to attach to. This should be set to null if `manageUserAttachment` is set to false.
	Profiles []string `pulumi:"profiles"`
	// This is the name of the SAML endpoint to which the user is to be associated. This is required if adding user to a SAML gateway/LB.
	SamlEndpoint *string `pulumi:"samlEndpoint"`
	// VPN user's email. Example: "abc@xyz.com".
	UserEmail *string `pulumi:"userEmail"`
	// VPN user name. Example: "user".
	UserName *string `pulumi:"userName"`
	// VPC ID of Aviatrix VPN gateway. Used together with `gwName`. Example: "vpc-abcd1234".
	VpcId *string `pulumi:"vpcId"`
}

type AviatrixVpnUserState struct {
	// FQDN of a DNS based VPN service such as GeoVPN or UDP load balancer. Example: "vpn.testuser.com".
	DnsName pulumi.StringPtrInput
	// If ELB is enabled, this will be the name of the ELB, else it will be the name of the Aviatrix VPN gateway. Used together with `vpcId`. Example: "gw1".
	GwName pulumi.StringPtrInput
	// This parameter is a switch to determine whether or not to manage VPN user attachments to the VPN profile using this resource. If this is set to false, attachment must be managed using the **aviatrix_vpn_profile** resource. Valid values: true, false. Default value: false.
	ManageUserAttachment pulumi.BoolPtrInput
	// List of VPN profiles for user to attach to. This should be set to null if `manageUserAttachment` is set to false.
	Profiles pulumi.StringArrayInput
	// This is the name of the SAML endpoint to which the user is to be associated. This is required if adding user to a SAML gateway/LB.
	SamlEndpoint pulumi.StringPtrInput
	// VPN user's email. Example: "abc@xyz.com".
	UserEmail pulumi.StringPtrInput
	// VPN user name. Example: "user".
	UserName pulumi.StringPtrInput
	// VPC ID of Aviatrix VPN gateway. Used together with `gwName`. Example: "vpc-abcd1234".
	VpcId pulumi.StringPtrInput
}

func (AviatrixVpnUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixVpnUserState)(nil)).Elem()
}

type aviatrixVpnUserArgs struct {
	// FQDN of a DNS based VPN service such as GeoVPN or UDP load balancer. Example: "vpn.testuser.com".
	DnsName *string `pulumi:"dnsName"`
	// If ELB is enabled, this will be the name of the ELB, else it will be the name of the Aviatrix VPN gateway. Used together with `vpcId`. Example: "gw1".
	GwName *string `pulumi:"gwName"`
	// This parameter is a switch to determine whether or not to manage VPN user attachments to the VPN profile using this resource. If this is set to false, attachment must be managed using the **aviatrix_vpn_profile** resource. Valid values: true, false. Default value: false.
	ManageUserAttachment *bool `pulumi:"manageUserAttachment"`
	// List of VPN profiles for user to attach to. This should be set to null if `manageUserAttachment` is set to false.
	Profiles []string `pulumi:"profiles"`
	// This is the name of the SAML endpoint to which the user is to be associated. This is required if adding user to a SAML gateway/LB.
	SamlEndpoint *string `pulumi:"samlEndpoint"`
	// VPN user's email. Example: "abc@xyz.com".
	UserEmail *string `pulumi:"userEmail"`
	// VPN user name. Example: "user".
	UserName string `pulumi:"userName"`
	// VPC ID of Aviatrix VPN gateway. Used together with `gwName`. Example: "vpc-abcd1234".
	VpcId *string `pulumi:"vpcId"`
}

// The set of arguments for constructing a AviatrixVpnUser resource.
type AviatrixVpnUserArgs struct {
	// FQDN of a DNS based VPN service such as GeoVPN or UDP load balancer. Example: "vpn.testuser.com".
	DnsName pulumi.StringPtrInput
	// If ELB is enabled, this will be the name of the ELB, else it will be the name of the Aviatrix VPN gateway. Used together with `vpcId`. Example: "gw1".
	GwName pulumi.StringPtrInput
	// This parameter is a switch to determine whether or not to manage VPN user attachments to the VPN profile using this resource. If this is set to false, attachment must be managed using the **aviatrix_vpn_profile** resource. Valid values: true, false. Default value: false.
	ManageUserAttachment pulumi.BoolPtrInput
	// List of VPN profiles for user to attach to. This should be set to null if `manageUserAttachment` is set to false.
	Profiles pulumi.StringArrayInput
	// This is the name of the SAML endpoint to which the user is to be associated. This is required if adding user to a SAML gateway/LB.
	SamlEndpoint pulumi.StringPtrInput
	// VPN user's email. Example: "abc@xyz.com".
	UserEmail pulumi.StringPtrInput
	// VPN user name. Example: "user".
	UserName pulumi.StringInput
	// VPC ID of Aviatrix VPN gateway. Used together with `gwName`. Example: "vpc-abcd1234".
	VpcId pulumi.StringPtrInput
}

func (AviatrixVpnUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixVpnUserArgs)(nil)).Elem()
}

type AviatrixVpnUserInput interface {
	pulumi.Input

	ToAviatrixVpnUserOutput() AviatrixVpnUserOutput
	ToAviatrixVpnUserOutputWithContext(ctx context.Context) AviatrixVpnUserOutput
}

func (*AviatrixVpnUser) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixVpnUser)(nil)).Elem()
}

func (i *AviatrixVpnUser) ToAviatrixVpnUserOutput() AviatrixVpnUserOutput {
	return i.ToAviatrixVpnUserOutputWithContext(context.Background())
}

func (i *AviatrixVpnUser) ToAviatrixVpnUserOutputWithContext(ctx context.Context) AviatrixVpnUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixVpnUserOutput)
}

// AviatrixVpnUserArrayInput is an input type that accepts AviatrixVpnUserArray and AviatrixVpnUserArrayOutput values.
// You can construct a concrete instance of `AviatrixVpnUserArrayInput` via:
//
//	AviatrixVpnUserArray{ AviatrixVpnUserArgs{...} }
type AviatrixVpnUserArrayInput interface {
	pulumi.Input

	ToAviatrixVpnUserArrayOutput() AviatrixVpnUserArrayOutput
	ToAviatrixVpnUserArrayOutputWithContext(context.Context) AviatrixVpnUserArrayOutput
}

type AviatrixVpnUserArray []AviatrixVpnUserInput

func (AviatrixVpnUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixVpnUser)(nil)).Elem()
}

func (i AviatrixVpnUserArray) ToAviatrixVpnUserArrayOutput() AviatrixVpnUserArrayOutput {
	return i.ToAviatrixVpnUserArrayOutputWithContext(context.Background())
}

func (i AviatrixVpnUserArray) ToAviatrixVpnUserArrayOutputWithContext(ctx context.Context) AviatrixVpnUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixVpnUserArrayOutput)
}

// AviatrixVpnUserMapInput is an input type that accepts AviatrixVpnUserMap and AviatrixVpnUserMapOutput values.
// You can construct a concrete instance of `AviatrixVpnUserMapInput` via:
//
//	AviatrixVpnUserMap{ "key": AviatrixVpnUserArgs{...} }
type AviatrixVpnUserMapInput interface {
	pulumi.Input

	ToAviatrixVpnUserMapOutput() AviatrixVpnUserMapOutput
	ToAviatrixVpnUserMapOutputWithContext(context.Context) AviatrixVpnUserMapOutput
}

type AviatrixVpnUserMap map[string]AviatrixVpnUserInput

func (AviatrixVpnUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixVpnUser)(nil)).Elem()
}

func (i AviatrixVpnUserMap) ToAviatrixVpnUserMapOutput() AviatrixVpnUserMapOutput {
	return i.ToAviatrixVpnUserMapOutputWithContext(context.Background())
}

func (i AviatrixVpnUserMap) ToAviatrixVpnUserMapOutputWithContext(ctx context.Context) AviatrixVpnUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixVpnUserMapOutput)
}

type AviatrixVpnUserOutput struct{ *pulumi.OutputState }

func (AviatrixVpnUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixVpnUser)(nil)).Elem()
}

func (o AviatrixVpnUserOutput) ToAviatrixVpnUserOutput() AviatrixVpnUserOutput {
	return o
}

func (o AviatrixVpnUserOutput) ToAviatrixVpnUserOutputWithContext(ctx context.Context) AviatrixVpnUserOutput {
	return o
}

// FQDN of a DNS based VPN service such as GeoVPN or UDP load balancer. Example: "vpn.testuser.com".
func (o AviatrixVpnUserOutput) DnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixVpnUser) pulumi.StringPtrOutput { return v.DnsName }).(pulumi.StringPtrOutput)
}

// If ELB is enabled, this will be the name of the ELB, else it will be the name of the Aviatrix VPN gateway. Used together with `vpcId`. Example: "gw1".
func (o AviatrixVpnUserOutput) GwName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixVpnUser) pulumi.StringPtrOutput { return v.GwName }).(pulumi.StringPtrOutput)
}

// This parameter is a switch to determine whether or not to manage VPN user attachments to the VPN profile using this resource. If this is set to false, attachment must be managed using the **aviatrix_vpn_profile** resource. Valid values: true, false. Default value: false.
func (o AviatrixVpnUserOutput) ManageUserAttachment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixVpnUser) pulumi.BoolPtrOutput { return v.ManageUserAttachment }).(pulumi.BoolPtrOutput)
}

// List of VPN profiles for user to attach to. This should be set to null if `manageUserAttachment` is set to false.
func (o AviatrixVpnUserOutput) Profiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixVpnUser) pulumi.StringArrayOutput { return v.Profiles }).(pulumi.StringArrayOutput)
}

// This is the name of the SAML endpoint to which the user is to be associated. This is required if adding user to a SAML gateway/LB.
func (o AviatrixVpnUserOutput) SamlEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixVpnUser) pulumi.StringPtrOutput { return v.SamlEndpoint }).(pulumi.StringPtrOutput)
}

// VPN user's email. Example: "abc@xyz.com".
func (o AviatrixVpnUserOutput) UserEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixVpnUser) pulumi.StringPtrOutput { return v.UserEmail }).(pulumi.StringPtrOutput)
}

// VPN user name. Example: "user".
func (o AviatrixVpnUserOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixVpnUser) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

// VPC ID of Aviatrix VPN gateway. Used together with `gwName`. Example: "vpc-abcd1234".
func (o AviatrixVpnUserOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixVpnUser) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

type AviatrixVpnUserArrayOutput struct{ *pulumi.OutputState }

func (AviatrixVpnUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixVpnUser)(nil)).Elem()
}

func (o AviatrixVpnUserArrayOutput) ToAviatrixVpnUserArrayOutput() AviatrixVpnUserArrayOutput {
	return o
}

func (o AviatrixVpnUserArrayOutput) ToAviatrixVpnUserArrayOutputWithContext(ctx context.Context) AviatrixVpnUserArrayOutput {
	return o
}

func (o AviatrixVpnUserArrayOutput) Index(i pulumi.IntInput) AviatrixVpnUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixVpnUser {
		return vs[0].([]*AviatrixVpnUser)[vs[1].(int)]
	}).(AviatrixVpnUserOutput)
}

type AviatrixVpnUserMapOutput struct{ *pulumi.OutputState }

func (AviatrixVpnUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixVpnUser)(nil)).Elem()
}

func (o AviatrixVpnUserMapOutput) ToAviatrixVpnUserMapOutput() AviatrixVpnUserMapOutput {
	return o
}

func (o AviatrixVpnUserMapOutput) ToAviatrixVpnUserMapOutputWithContext(ctx context.Context) AviatrixVpnUserMapOutput {
	return o
}

func (o AviatrixVpnUserMapOutput) MapIndex(k pulumi.StringInput) AviatrixVpnUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixVpnUser {
		return vs[0].(map[string]*AviatrixVpnUser)[vs[1].(string)]
	}).(AviatrixVpnUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixVpnUserInput)(nil)).Elem(), &AviatrixVpnUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixVpnUserArrayInput)(nil)).Elem(), AviatrixVpnUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixVpnUserMapInput)(nil)).Elem(), AviatrixVpnUserMap{})
	pulumi.RegisterOutputType(AviatrixVpnUserOutput{})
	pulumi.RegisterOutputType(AviatrixVpnUserArrayOutput{})
	pulumi.RegisterOutputType(AviatrixVpnUserMapOutput{})
}
