// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixRbacGroup struct {
	pulumi.CustomResourceState

	// RBAC permission group name.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// Whether to allow members of an RBAC group to bypass LDAP/MFA for Duo login
	LocalLogin pulumi.BoolPtrOutput `pulumi:"localLogin"`
}

// NewAviatrixRbacGroup registers a new resource with the given unique name, arguments, and options.
func NewAviatrixRbacGroup(ctx *pulumi.Context,
	name string, args *AviatrixRbacGroupArgs, opts ...pulumi.ResourceOption) (*AviatrixRbacGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixRbacGroup
	err := ctx.RegisterResource("aviatrix:index/aviatrixRbacGroup:AviatrixRbacGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixRbacGroup gets an existing AviatrixRbacGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixRbacGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixRbacGroupState, opts ...pulumi.ResourceOption) (*AviatrixRbacGroup, error) {
	var resource AviatrixRbacGroup
	err := ctx.ReadResource("aviatrix:index/aviatrixRbacGroup:AviatrixRbacGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixRbacGroup resources.
type aviatrixRbacGroupState struct {
	// RBAC permission group name.
	GroupName *string `pulumi:"groupName"`
	// Whether to allow members of an RBAC group to bypass LDAP/MFA for Duo login
	LocalLogin *bool `pulumi:"localLogin"`
}

type AviatrixRbacGroupState struct {
	// RBAC permission group name.
	GroupName pulumi.StringPtrInput
	// Whether to allow members of an RBAC group to bypass LDAP/MFA for Duo login
	LocalLogin pulumi.BoolPtrInput
}

func (AviatrixRbacGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixRbacGroupState)(nil)).Elem()
}

type aviatrixRbacGroupArgs struct {
	// RBAC permission group name.
	GroupName string `pulumi:"groupName"`
	// Whether to allow members of an RBAC group to bypass LDAP/MFA for Duo login
	LocalLogin *bool `pulumi:"localLogin"`
}

// The set of arguments for constructing a AviatrixRbacGroup resource.
type AviatrixRbacGroupArgs struct {
	// RBAC permission group name.
	GroupName pulumi.StringInput
	// Whether to allow members of an RBAC group to bypass LDAP/MFA for Duo login
	LocalLogin pulumi.BoolPtrInput
}

func (AviatrixRbacGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixRbacGroupArgs)(nil)).Elem()
}

type AviatrixRbacGroupInput interface {
	pulumi.Input

	ToAviatrixRbacGroupOutput() AviatrixRbacGroupOutput
	ToAviatrixRbacGroupOutputWithContext(ctx context.Context) AviatrixRbacGroupOutput
}

func (*AviatrixRbacGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixRbacGroup)(nil)).Elem()
}

func (i *AviatrixRbacGroup) ToAviatrixRbacGroupOutput() AviatrixRbacGroupOutput {
	return i.ToAviatrixRbacGroupOutputWithContext(context.Background())
}

func (i *AviatrixRbacGroup) ToAviatrixRbacGroupOutputWithContext(ctx context.Context) AviatrixRbacGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixRbacGroupOutput)
}

// AviatrixRbacGroupArrayInput is an input type that accepts AviatrixRbacGroupArray and AviatrixRbacGroupArrayOutput values.
// You can construct a concrete instance of `AviatrixRbacGroupArrayInput` via:
//
//	AviatrixRbacGroupArray{ AviatrixRbacGroupArgs{...} }
type AviatrixRbacGroupArrayInput interface {
	pulumi.Input

	ToAviatrixRbacGroupArrayOutput() AviatrixRbacGroupArrayOutput
	ToAviatrixRbacGroupArrayOutputWithContext(context.Context) AviatrixRbacGroupArrayOutput
}

type AviatrixRbacGroupArray []AviatrixRbacGroupInput

func (AviatrixRbacGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixRbacGroup)(nil)).Elem()
}

func (i AviatrixRbacGroupArray) ToAviatrixRbacGroupArrayOutput() AviatrixRbacGroupArrayOutput {
	return i.ToAviatrixRbacGroupArrayOutputWithContext(context.Background())
}

func (i AviatrixRbacGroupArray) ToAviatrixRbacGroupArrayOutputWithContext(ctx context.Context) AviatrixRbacGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixRbacGroupArrayOutput)
}

// AviatrixRbacGroupMapInput is an input type that accepts AviatrixRbacGroupMap and AviatrixRbacGroupMapOutput values.
// You can construct a concrete instance of `AviatrixRbacGroupMapInput` via:
//
//	AviatrixRbacGroupMap{ "key": AviatrixRbacGroupArgs{...} }
type AviatrixRbacGroupMapInput interface {
	pulumi.Input

	ToAviatrixRbacGroupMapOutput() AviatrixRbacGroupMapOutput
	ToAviatrixRbacGroupMapOutputWithContext(context.Context) AviatrixRbacGroupMapOutput
}

type AviatrixRbacGroupMap map[string]AviatrixRbacGroupInput

func (AviatrixRbacGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixRbacGroup)(nil)).Elem()
}

func (i AviatrixRbacGroupMap) ToAviatrixRbacGroupMapOutput() AviatrixRbacGroupMapOutput {
	return i.ToAviatrixRbacGroupMapOutputWithContext(context.Background())
}

func (i AviatrixRbacGroupMap) ToAviatrixRbacGroupMapOutputWithContext(ctx context.Context) AviatrixRbacGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixRbacGroupMapOutput)
}

type AviatrixRbacGroupOutput struct{ *pulumi.OutputState }

func (AviatrixRbacGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixRbacGroup)(nil)).Elem()
}

func (o AviatrixRbacGroupOutput) ToAviatrixRbacGroupOutput() AviatrixRbacGroupOutput {
	return o
}

func (o AviatrixRbacGroupOutput) ToAviatrixRbacGroupOutputWithContext(ctx context.Context) AviatrixRbacGroupOutput {
	return o
}

// RBAC permission group name.
func (o AviatrixRbacGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixRbacGroup) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

// Whether to allow members of an RBAC group to bypass LDAP/MFA for Duo login
func (o AviatrixRbacGroupOutput) LocalLogin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixRbacGroup) pulumi.BoolPtrOutput { return v.LocalLogin }).(pulumi.BoolPtrOutput)
}

type AviatrixRbacGroupArrayOutput struct{ *pulumi.OutputState }

func (AviatrixRbacGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixRbacGroup)(nil)).Elem()
}

func (o AviatrixRbacGroupArrayOutput) ToAviatrixRbacGroupArrayOutput() AviatrixRbacGroupArrayOutput {
	return o
}

func (o AviatrixRbacGroupArrayOutput) ToAviatrixRbacGroupArrayOutputWithContext(ctx context.Context) AviatrixRbacGroupArrayOutput {
	return o
}

func (o AviatrixRbacGroupArrayOutput) Index(i pulumi.IntInput) AviatrixRbacGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixRbacGroup {
		return vs[0].([]*AviatrixRbacGroup)[vs[1].(int)]
	}).(AviatrixRbacGroupOutput)
}

type AviatrixRbacGroupMapOutput struct{ *pulumi.OutputState }

func (AviatrixRbacGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixRbacGroup)(nil)).Elem()
}

func (o AviatrixRbacGroupMapOutput) ToAviatrixRbacGroupMapOutput() AviatrixRbacGroupMapOutput {
	return o
}

func (o AviatrixRbacGroupMapOutput) ToAviatrixRbacGroupMapOutputWithContext(ctx context.Context) AviatrixRbacGroupMapOutput {
	return o
}

func (o AviatrixRbacGroupMapOutput) MapIndex(k pulumi.StringInput) AviatrixRbacGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixRbacGroup {
		return vs[0].(map[string]*AviatrixRbacGroup)[vs[1].(string)]
	}).(AviatrixRbacGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixRbacGroupInput)(nil)).Elem(), &AviatrixRbacGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixRbacGroupArrayInput)(nil)).Elem(), AviatrixRbacGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixRbacGroupMapInput)(nil)).Elem(), AviatrixRbacGroupMap{})
	pulumi.RegisterOutputType(AviatrixRbacGroupOutput{})
	pulumi.RegisterOutputType(AviatrixRbacGroupArrayOutput{})
	pulumi.RegisterOutputType(AviatrixRbacGroupMapOutput{})
}
