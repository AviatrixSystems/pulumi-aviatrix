// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getAviatrixGateway(args: GetAviatrixGatewayArgs, opts?: pulumi.InvokeOptions): Promise<GetAviatrixGatewayResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aviatrix:index/getAviatrixGateway:getAviatrixGateway", {
        "gwName": args.gwName,
    }, opts);
}

/**
 * A collection of arguments for invoking getAviatrixGateway.
 */
export interface GetAviatrixGatewayArgs {
    gwName: string;
}

/**
 * A collection of values returned by getAviatrixGateway.
 */
export interface GetAviatrixGatewayResult {
    readonly accountName: string;
    readonly additionalCidrs: string;
    readonly additionalCidrsDesignatedGateway: string;
    readonly allocateNewEip: boolean;
    readonly availabilityDomain: string;
    readonly azureEipNameResourceGroup: string;
    readonly cloudInstanceId: string;
    readonly cloudType: number;
    readonly duoApiHostname: string;
    readonly duoIntegrationKey: string;
    readonly duoPushMode: string;
    readonly elbDnsName: string;
    readonly elbName: string;
    readonly enableDesignatedGateway: boolean;
    readonly enableElb: boolean;
    readonly enableEncryptVolume: boolean;
    readonly enableJumboFrame: boolean;
    readonly enableLdap: boolean;
    readonly enableMonitorGatewaySubnets: boolean;
    readonly enablePublicSubnetFiltering: boolean;
    readonly enableSpotInstance: boolean;
    readonly enableVpcDnsServer: boolean;
    readonly enableVpnNat: boolean;
    readonly faultDomain: string;
    readonly fqdnLanCidr: string;
    readonly fqdnLanInterface: string;
    readonly fqdnLanVpcId: string;
    readonly gwName: string;
    readonly gwSize: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly idleTimeout: number;
    readonly imageVersion: string;
    readonly insaneMode: boolean;
    readonly insaneModeAz: string;
    readonly ldapBaseDn: string;
    readonly ldapBindDn: string;
    readonly ldapServer: string;
    readonly ldapUsernameAttribute: string;
    readonly maxVpnConn: string;
    readonly monitorExcludeLists: string[];
    readonly nameServers: string;
    readonly oktaUrl: string;
    readonly oktaUsernameSuffix: string;
    readonly otpMode: string;
    readonly peeringHaAvailabilityDomain: string;
    readonly peeringHaAzureEipNameResourceGroup: string;
    readonly peeringHaCloudInstanceId: string;
    readonly peeringHaFaultDomain: string;
    readonly peeringHaGwName: string;
    readonly peeringHaGwSize: string;
    readonly peeringHaImageVersion: string;
    readonly peeringHaInsaneModeAz: string;
    readonly peeringHaPrivateIp: string;
    readonly peeringHaPublicIp: string;
    readonly peeringHaSecurityGroupId: string;
    readonly peeringHaSoftwareVersion: string;
    readonly peeringHaSubnet: string;
    readonly peeringHaZone: string;
    readonly privateIp: string;
    readonly publicDnsServer: string;
    readonly publicIp: string;
    readonly publicSubnetFilteringGuardDutyEnforced: boolean;
    readonly publicSubnetFilteringHaRouteTables: string[];
    readonly publicSubnetFilteringRouteTables: string[];
    readonly renegotiationInterval: number;
    readonly samlEnabled: boolean;
    readonly searchDomains: string;
    readonly securityGroupId: string;
    readonly singleAzHa: boolean;
    readonly singleIpSnat: boolean;
    readonly softwareVersion: string;
    readonly splitTunnel: boolean;
    readonly spotPrice: string;
    readonly subnet: string;
    readonly tagLists: string[];
    readonly tags: {[key: string]: string};
    readonly tunnelDetectionTime: number;
    readonly vpcId: string;
    readonly vpcReg: string;
    readonly vpnAccess: boolean;
    readonly vpnCidr: string;
    readonly vpnProtocol: string;
    readonly zone: string;
}

export function getAviatrixGatewayOutput(args: GetAviatrixGatewayOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAviatrixGatewayResult> {
    return pulumi.output(args).apply(a => getAviatrixGateway(a, opts))
}

/**
 * A collection of arguments for invoking getAviatrixGateway.
 */
export interface GetAviatrixGatewayOutputArgs {
    gwName: pulumi.Input<string>;
}
