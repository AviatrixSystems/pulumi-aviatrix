// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aviatrix
{
    [AviatrixResourceType("aviatrix:index/aviatrixRemoteSyslog:AviatrixRemoteSyslog")]
    public partial class AviatrixRemoteSyslog : global::Pulumi.CustomResource
    {
        /// <summary>
        /// CA certificate file.
        /// </summary>
        [Output("caCertificateFile")]
        public Output<string?> CaCertificateFile { get; private set; } = null!;

        /// <summary>
        /// List of excluded gateways.
        /// </summary>
        [Output("excludedGateways")]
        public Output<ImmutableArray<string>> ExcludedGateways { get; private set; } = null!;

        /// <summary>
        /// A total of 10 profiles from index 0 to 9 are supported for remote syslog, while index 9 is reserved for CoPilot.
        /// </summary>
        [Output("index")]
        public Output<int?> Index { get; private set; } = null!;

        /// <summary>
        /// Profile name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// True if not protected by TLS.
        /// </summary>
        [Output("notls")]
        public Output<bool> Notls { get; private set; } = null!;

        /// <summary>
        /// Listening port of the remote syslog server.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// Private key of the controller that pairs with the public certificate.
        /// </summary>
        [Output("privateKeyFile")]
        public Output<string?> PrivateKeyFile { get; private set; } = null!;

        /// <summary>
        /// TCP or UDP (TCP by default).
        /// </summary>
        [Output("protocol")]
        public Output<string?> Protocol { get; private set; } = null!;

        /// <summary>
        /// Public certificate of the controller signed by the same CA.
        /// </summary>
        [Output("publicCertificateFile")]
        public Output<string?> PublicCertificateFile { get; private set; } = null!;

        /// <summary>
        /// FQDN or IP address of the remote syslog server.
        /// </summary>
        [Output("server")]
        public Output<string> Server { get; private set; } = null!;

        /// <summary>
        /// Enabled or not.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Useful when forwarding to 3rd party servers like Datadog or Sumo
        /// </summary>
        [Output("template")]
        public Output<string?> Template { get; private set; } = null!;


        /// <summary>
        /// Create a AviatrixRemoteSyslog resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AviatrixRemoteSyslog(string name, AviatrixRemoteSyslogArgs args, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixRemoteSyslog:AviatrixRemoteSyslog", name, args ?? new AviatrixRemoteSyslogArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AviatrixRemoteSyslog(string name, Input<string> id, AviatrixRemoteSyslogState? state = null, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixRemoteSyslog:AviatrixRemoteSyslog", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/astipkovits/pulumi-aviatrix/raw/main/releases/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AviatrixRemoteSyslog resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AviatrixRemoteSyslog Get(string name, Input<string> id, AviatrixRemoteSyslogState? state = null, CustomResourceOptions? options = null)
        {
            return new AviatrixRemoteSyslog(name, id, state, options);
        }
    }

    public sealed class AviatrixRemoteSyslogArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// CA certificate file.
        /// </summary>
        [Input("caCertificateFile")]
        public Input<string>? CaCertificateFile { get; set; }

        [Input("excludedGateways")]
        private InputList<string>? _excludedGateways;

        /// <summary>
        /// List of excluded gateways.
        /// </summary>
        public InputList<string> ExcludedGateways
        {
            get => _excludedGateways ?? (_excludedGateways = new InputList<string>());
            set => _excludedGateways = value;
        }

        /// <summary>
        /// A total of 10 profiles from index 0 to 9 are supported for remote syslog, while index 9 is reserved for CoPilot.
        /// </summary>
        [Input("index")]
        public Input<int>? Index { get; set; }

        /// <summary>
        /// Profile name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Listening port of the remote syslog server.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// Private key of the controller that pairs with the public certificate.
        /// </summary>
        [Input("privateKeyFile")]
        public Input<string>? PrivateKeyFile { get; set; }

        /// <summary>
        /// TCP or UDP (TCP by default).
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Public certificate of the controller signed by the same CA.
        /// </summary>
        [Input("publicCertificateFile")]
        public Input<string>? PublicCertificateFile { get; set; }

        /// <summary>
        /// FQDN or IP address of the remote syslog server.
        /// </summary>
        [Input("server", required: true)]
        public Input<string> Server { get; set; } = null!;

        /// <summary>
        /// Useful when forwarding to 3rd party servers like Datadog or Sumo
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        public AviatrixRemoteSyslogArgs()
        {
        }
        public static new AviatrixRemoteSyslogArgs Empty => new AviatrixRemoteSyslogArgs();
    }

    public sealed class AviatrixRemoteSyslogState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// CA certificate file.
        /// </summary>
        [Input("caCertificateFile")]
        public Input<string>? CaCertificateFile { get; set; }

        [Input("excludedGateways")]
        private InputList<string>? _excludedGateways;

        /// <summary>
        /// List of excluded gateways.
        /// </summary>
        public InputList<string> ExcludedGateways
        {
            get => _excludedGateways ?? (_excludedGateways = new InputList<string>());
            set => _excludedGateways = value;
        }

        /// <summary>
        /// A total of 10 profiles from index 0 to 9 are supported for remote syslog, while index 9 is reserved for CoPilot.
        /// </summary>
        [Input("index")]
        public Input<int>? Index { get; set; }

        /// <summary>
        /// Profile name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// True if not protected by TLS.
        /// </summary>
        [Input("notls")]
        public Input<bool>? Notls { get; set; }

        /// <summary>
        /// Listening port of the remote syslog server.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Private key of the controller that pairs with the public certificate.
        /// </summary>
        [Input("privateKeyFile")]
        public Input<string>? PrivateKeyFile { get; set; }

        /// <summary>
        /// TCP or UDP (TCP by default).
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Public certificate of the controller signed by the same CA.
        /// </summary>
        [Input("publicCertificateFile")]
        public Input<string>? PublicCertificateFile { get; set; }

        /// <summary>
        /// FQDN or IP address of the remote syslog server.
        /// </summary>
        [Input("server")]
        public Input<string>? Server { get; set; }

        /// <summary>
        /// Enabled or not.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Useful when forwarding to 3rd party servers like Datadog or Sumo
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        public AviatrixRemoteSyslogState()
        {
        }
        public static new AviatrixRemoteSyslogState Empty => new AviatrixRemoteSyslogState();
    }
}
