// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AviatrixFqdnTagRule extends pulumi.CustomResource {
    /**
     * Get an existing AviatrixFqdnTagRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AviatrixFqdnTagRuleState, opts?: pulumi.CustomResourceOptions): AviatrixFqdnTagRule {
        return new AviatrixFqdnTagRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/aviatrixFqdnTagRule:AviatrixFqdnTagRule';

    /**
     * Returns true if the given object is an instance of AviatrixFqdnTagRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AviatrixFqdnTagRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AviatrixFqdnTagRule.__pulumiType;
    }

    /**
     * What action should happen to matching requests. Possible values are: 'Base Policy', 'Allow' or 'Deny'. Defaults to 'Base
     * Policy' if no value is provided.
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * FQDN.
     */
    public readonly fqdn!: pulumi.Output<string>;
    /**
     * FQDN Filter Tag Name to attach this domain.
     */
    public readonly fqdnTagName!: pulumi.Output<string>;
    /**
     * Port.
     */
    public readonly port!: pulumi.Output<string>;
    /**
     * Protocol.
     */
    public readonly protocol!: pulumi.Output<string>;

    /**
     * Create a AviatrixFqdnTagRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AviatrixFqdnTagRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AviatrixFqdnTagRuleArgs | AviatrixFqdnTagRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AviatrixFqdnTagRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["fqdnTagName"] = state ? state.fqdnTagName : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
        } else {
            const args = argsOrState as AviatrixFqdnTagRuleArgs | undefined;
            if ((!args || args.fqdn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fqdn'");
            }
            if ((!args || args.fqdnTagName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fqdnTagName'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["fqdn"] = args ? args.fqdn : undefined;
            resourceInputs["fqdnTagName"] = args ? args.fqdnTagName : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AviatrixFqdnTagRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AviatrixFqdnTagRule resources.
 */
export interface AviatrixFqdnTagRuleState {
    /**
     * What action should happen to matching requests. Possible values are: 'Base Policy', 'Allow' or 'Deny'. Defaults to 'Base
     * Policy' if no value is provided.
     */
    action?: pulumi.Input<string>;
    /**
     * FQDN.
     */
    fqdn?: pulumi.Input<string>;
    /**
     * FQDN Filter Tag Name to attach this domain.
     */
    fqdnTagName?: pulumi.Input<string>;
    /**
     * Port.
     */
    port?: pulumi.Input<string>;
    /**
     * Protocol.
     */
    protocol?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AviatrixFqdnTagRule resource.
 */
export interface AviatrixFqdnTagRuleArgs {
    /**
     * What action should happen to matching requests. Possible values are: 'Base Policy', 'Allow' or 'Deny'. Defaults to 'Base
     * Policy' if no value is provided.
     */
    action?: pulumi.Input<string>;
    /**
     * FQDN.
     */
    fqdn: pulumi.Input<string>;
    /**
     * FQDN Filter Tag Name to attach this domain.
     */
    fqdnTagName: pulumi.Input<string>;
    /**
     * Port.
     */
    port: pulumi.Input<string>;
    /**
     * Protocol.
     */
    protocol: pulumi.Input<string>;
}
