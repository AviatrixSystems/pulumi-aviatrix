// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Aviatrix_spoke_external_device_conn struct {
	pulumi.CustomResourceState

	// Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).
	ApprovedCidrs pulumi.StringArrayOutput `pulumi:"approvedCidrs"`
	// Backup BGP MD5 authentication key.
	BackupBgpMd5Key pulumi.StringPtrOutput `pulumi:"backupBgpMd5Key"`
	// Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BackupBgpRemoteAsNum pulumi.StringPtrOutput `pulumi:"backupBgpRemoteAsNum"`
	// Backup direct connect for backup external device.
	BackupDirectConnect pulumi.BoolPtrOutput `pulumi:"backupDirectConnect"`
	// Source CIDR for the tunnel from the backup Aviatrix spoke gateway.
	BackupLocalTunnelCidr pulumi.StringOutput `pulumi:"backupLocalTunnelCidr"`
	// Backup pre shared key.
	BackupPreSharedKey pulumi.StringPtrOutput `pulumi:"backupPreSharedKey"`
	// Backup remote gateway IP.
	BackupRemoteGatewayIp pulumi.StringPtrOutput `pulumi:"backupRemoteGatewayIp"`
	// Destination CIDR for the tunnel to the backup external device.
	BackupRemoteTunnelCidr pulumi.StringOutput `pulumi:"backupRemoteTunnelCidr"`
	// BGP local ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpLocalAsNum pulumi.StringPtrOutput `pulumi:"bgpLocalAsNum"`
	// BGP MD5 authentication key.
	BgpMd5Key pulumi.StringPtrOutput `pulumi:"bgpMd5Key"`
	// BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpRemoteAsNum pulumi.StringPtrOutput `pulumi:"bgpRemoteAsNum"`
	// The name of the spoke external device connection which is going to be created.
	ConnectionName pulumi.StringOutput `pulumi:"connectionName"`
	// Connection type. Valid values: 'bgp', 'static'. Default value: 'bgp'.
	ConnectionType pulumi.StringPtrOutput `pulumi:"connectionType"`
	// Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.
	CustomAlgorithms pulumi.BoolPtrOutput `pulumi:"customAlgorithms"`
	// Set true for private network infrastructure.
	DirectConnect pulumi.BoolPtrOutput `pulumi:"directConnect"`
	// Enable Event Triggered HA.
	EnableEventTriggeredHa pulumi.BoolPtrOutput `pulumi:"enableEventTriggeredHa"`
	// Set as true if use IKEv2.
	EnableIkev2 pulumi.BoolPtrOutput `pulumi:"enableIkev2"`
	// Enable learned CIDR approval for the connection. Only valid with 'connection_type' = 'bgp'. Requires the spoke_gateway's
	// 'learned_cidrs_approval_mode' attribute be set to 'connection'. Valid values: true, false. Default value: false.
	EnableLearnedCidrsApproval pulumi.BoolPtrOutput `pulumi:"enableLearnedCidrsApproval"`
	// Name of the BGP Spoke Gateway.
	GwName pulumi.StringOutput `pulumi:"gwName"`
	// Set as true if there are two external devices.
	HaEnabled pulumi.BoolPtrOutput `pulumi:"haEnabled"`
	// Source CIDR for the tunnel from the Aviatrix spoke gateway.
	LocalTunnelCidr pulumi.StringOutput `pulumi:"localTunnelCidr"`
	// Configure manual BGP advertised CIDRs for this connection. Only valid with 'connection_type' = 'bgp'.
	ManualBgpAdvertisedCidrs pulumi.StringArrayOutput `pulumi:"manualBgpAdvertisedCidrs"`
	// Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.
	Phase1Authentication pulumi.StringPtrOutput `pulumi:"phase1Authentication"`
	// Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase1DhGroups pulumi.StringPtrOutput `pulumi:"phase1DhGroups"`
	// Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.
	Phase1Encryption pulumi.StringPtrOutput `pulumi:"phase1Encryption"`
	// Phase 1 remote identifier of the IPsec tunnel.
	Phase1RemoteIdentifiers pulumi.StringArrayOutput `pulumi:"phase1RemoteIdentifiers"`
	// Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.
	Phase2Authentication pulumi.StringPtrOutput `pulumi:"phase2Authentication"`
	// Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase2DhGroups pulumi.StringPtrOutput `pulumi:"phase2DhGroups"`
	// Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.
	Phase2Encryption pulumi.StringPtrOutput `pulumi:"phase2Encryption"`
	// If left blank, the pre-shared key will be auto generated.
	PreSharedKey pulumi.StringPtrOutput `pulumi:"preSharedKey"`
	// Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.
	PrependAsPaths pulumi.StringArrayOutput `pulumi:"prependAsPaths"`
	// Remote Gateway IP.
	RemoteGatewayIp pulumi.StringOutput `pulumi:"remoteGatewayIp"`
	// Remote CIDRs joined as a string with ','. Required for a 'static' type connection.
	RemoteSubnet pulumi.StringPtrOutput `pulumi:"remoteSubnet"`
	// Destination CIDR for the tunnel to the external device.
	RemoteTunnelCidr pulumi.StringOutput `pulumi:"remoteTunnelCidr"`
	// Tunnel Protocol. Valid value: 'IPsec'. Default value: 'IPsec'. Case insensitive.
	TunnelProtocol pulumi.StringPtrOutput `pulumi:"tunnelProtocol"`
	// ID of the VPC where the BGP Spoke Gateway is located.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewAviatrix_spoke_external_device_conn registers a new resource with the given unique name, arguments, and options.
func NewAviatrix_spoke_external_device_conn(ctx *pulumi.Context,
	name string, args *Aviatrix_spoke_external_device_connArgs, opts ...pulumi.ResourceOption) (*Aviatrix_spoke_external_device_conn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionName == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionName'")
	}
	if args.GwName == nil {
		return nil, errors.New("invalid value for required argument 'GwName'")
	}
	if args.RemoteGatewayIp == nil {
		return nil, errors.New("invalid value for required argument 'RemoteGatewayIp'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Aviatrix_spoke_external_device_conn
	err := ctx.RegisterResource("aviatrix:index/aviatrix_spoke_external_device_conn:aviatrix_spoke_external_device_conn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrix_spoke_external_device_conn gets an existing Aviatrix_spoke_external_device_conn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrix_spoke_external_device_conn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Aviatrix_spoke_external_device_connState, opts ...pulumi.ResourceOption) (*Aviatrix_spoke_external_device_conn, error) {
	var resource Aviatrix_spoke_external_device_conn
	err := ctx.ReadResource("aviatrix:index/aviatrix_spoke_external_device_conn:aviatrix_spoke_external_device_conn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Aviatrix_spoke_external_device_conn resources.
type aviatrix_spoke_external_device_connState struct {
	// Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).
	ApprovedCidrs []string `pulumi:"approvedCidrs"`
	// Backup BGP MD5 authentication key.
	BackupBgpMd5Key *string `pulumi:"backupBgpMd5Key"`
	// Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BackupBgpRemoteAsNum *string `pulumi:"backupBgpRemoteAsNum"`
	// Backup direct connect for backup external device.
	BackupDirectConnect *bool `pulumi:"backupDirectConnect"`
	// Source CIDR for the tunnel from the backup Aviatrix spoke gateway.
	BackupLocalTunnelCidr *string `pulumi:"backupLocalTunnelCidr"`
	// Backup pre shared key.
	BackupPreSharedKey *string `pulumi:"backupPreSharedKey"`
	// Backup remote gateway IP.
	BackupRemoteGatewayIp *string `pulumi:"backupRemoteGatewayIp"`
	// Destination CIDR for the tunnel to the backup external device.
	BackupRemoteTunnelCidr *string `pulumi:"backupRemoteTunnelCidr"`
	// BGP local ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpLocalAsNum *string `pulumi:"bgpLocalAsNum"`
	// BGP MD5 authentication key.
	BgpMd5Key *string `pulumi:"bgpMd5Key"`
	// BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpRemoteAsNum *string `pulumi:"bgpRemoteAsNum"`
	// The name of the spoke external device connection which is going to be created.
	ConnectionName *string `pulumi:"connectionName"`
	// Connection type. Valid values: 'bgp', 'static'. Default value: 'bgp'.
	ConnectionType *string `pulumi:"connectionType"`
	// Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.
	CustomAlgorithms *bool `pulumi:"customAlgorithms"`
	// Set true for private network infrastructure.
	DirectConnect *bool `pulumi:"directConnect"`
	// Enable Event Triggered HA.
	EnableEventTriggeredHa *bool `pulumi:"enableEventTriggeredHa"`
	// Set as true if use IKEv2.
	EnableIkev2 *bool `pulumi:"enableIkev2"`
	// Enable learned CIDR approval for the connection. Only valid with 'connection_type' = 'bgp'. Requires the spoke_gateway's
	// 'learned_cidrs_approval_mode' attribute be set to 'connection'. Valid values: true, false. Default value: false.
	EnableLearnedCidrsApproval *bool `pulumi:"enableLearnedCidrsApproval"`
	// Name of the BGP Spoke Gateway.
	GwName *string `pulumi:"gwName"`
	// Set as true if there are two external devices.
	HaEnabled *bool `pulumi:"haEnabled"`
	// Source CIDR for the tunnel from the Aviatrix spoke gateway.
	LocalTunnelCidr *string `pulumi:"localTunnelCidr"`
	// Configure manual BGP advertised CIDRs for this connection. Only valid with 'connection_type' = 'bgp'.
	ManualBgpAdvertisedCidrs []string `pulumi:"manualBgpAdvertisedCidrs"`
	// Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.
	Phase1Authentication *string `pulumi:"phase1Authentication"`
	// Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase1DhGroups *string `pulumi:"phase1DhGroups"`
	// Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.
	Phase1Encryption *string `pulumi:"phase1Encryption"`
	// Phase 1 remote identifier of the IPsec tunnel.
	Phase1RemoteIdentifiers []string `pulumi:"phase1RemoteIdentifiers"`
	// Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.
	Phase2Authentication *string `pulumi:"phase2Authentication"`
	// Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase2DhGroups *string `pulumi:"phase2DhGroups"`
	// Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.
	Phase2Encryption *string `pulumi:"phase2Encryption"`
	// If left blank, the pre-shared key will be auto generated.
	PreSharedKey *string `pulumi:"preSharedKey"`
	// Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.
	PrependAsPaths []string `pulumi:"prependAsPaths"`
	// Remote Gateway IP.
	RemoteGatewayIp *string `pulumi:"remoteGatewayIp"`
	// Remote CIDRs joined as a string with ','. Required for a 'static' type connection.
	RemoteSubnet *string `pulumi:"remoteSubnet"`
	// Destination CIDR for the tunnel to the external device.
	RemoteTunnelCidr *string `pulumi:"remoteTunnelCidr"`
	// Tunnel Protocol. Valid value: 'IPsec'. Default value: 'IPsec'. Case insensitive.
	TunnelProtocol *string `pulumi:"tunnelProtocol"`
	// ID of the VPC where the BGP Spoke Gateway is located.
	VpcId *string `pulumi:"vpcId"`
}

type Aviatrix_spoke_external_device_connState struct {
	// Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).
	ApprovedCidrs pulumi.StringArrayInput
	// Backup BGP MD5 authentication key.
	BackupBgpMd5Key pulumi.StringPtrInput
	// Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BackupBgpRemoteAsNum pulumi.StringPtrInput
	// Backup direct connect for backup external device.
	BackupDirectConnect pulumi.BoolPtrInput
	// Source CIDR for the tunnel from the backup Aviatrix spoke gateway.
	BackupLocalTunnelCidr pulumi.StringPtrInput
	// Backup pre shared key.
	BackupPreSharedKey pulumi.StringPtrInput
	// Backup remote gateway IP.
	BackupRemoteGatewayIp pulumi.StringPtrInput
	// Destination CIDR for the tunnel to the backup external device.
	BackupRemoteTunnelCidr pulumi.StringPtrInput
	// BGP local ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpLocalAsNum pulumi.StringPtrInput
	// BGP MD5 authentication key.
	BgpMd5Key pulumi.StringPtrInput
	// BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpRemoteAsNum pulumi.StringPtrInput
	// The name of the spoke external device connection which is going to be created.
	ConnectionName pulumi.StringPtrInput
	// Connection type. Valid values: 'bgp', 'static'. Default value: 'bgp'.
	ConnectionType pulumi.StringPtrInput
	// Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.
	CustomAlgorithms pulumi.BoolPtrInput
	// Set true for private network infrastructure.
	DirectConnect pulumi.BoolPtrInput
	// Enable Event Triggered HA.
	EnableEventTriggeredHa pulumi.BoolPtrInput
	// Set as true if use IKEv2.
	EnableIkev2 pulumi.BoolPtrInput
	// Enable learned CIDR approval for the connection. Only valid with 'connection_type' = 'bgp'. Requires the spoke_gateway's
	// 'learned_cidrs_approval_mode' attribute be set to 'connection'. Valid values: true, false. Default value: false.
	EnableLearnedCidrsApproval pulumi.BoolPtrInput
	// Name of the BGP Spoke Gateway.
	GwName pulumi.StringPtrInput
	// Set as true if there are two external devices.
	HaEnabled pulumi.BoolPtrInput
	// Source CIDR for the tunnel from the Aviatrix spoke gateway.
	LocalTunnelCidr pulumi.StringPtrInput
	// Configure manual BGP advertised CIDRs for this connection. Only valid with 'connection_type' = 'bgp'.
	ManualBgpAdvertisedCidrs pulumi.StringArrayInput
	// Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.
	Phase1Authentication pulumi.StringPtrInput
	// Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase1DhGroups pulumi.StringPtrInput
	// Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.
	Phase1Encryption pulumi.StringPtrInput
	// Phase 1 remote identifier of the IPsec tunnel.
	Phase1RemoteIdentifiers pulumi.StringArrayInput
	// Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.
	Phase2Authentication pulumi.StringPtrInput
	// Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase2DhGroups pulumi.StringPtrInput
	// Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.
	Phase2Encryption pulumi.StringPtrInput
	// If left blank, the pre-shared key will be auto generated.
	PreSharedKey pulumi.StringPtrInput
	// Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.
	PrependAsPaths pulumi.StringArrayInput
	// Remote Gateway IP.
	RemoteGatewayIp pulumi.StringPtrInput
	// Remote CIDRs joined as a string with ','. Required for a 'static' type connection.
	RemoteSubnet pulumi.StringPtrInput
	// Destination CIDR for the tunnel to the external device.
	RemoteTunnelCidr pulumi.StringPtrInput
	// Tunnel Protocol. Valid value: 'IPsec'. Default value: 'IPsec'. Case insensitive.
	TunnelProtocol pulumi.StringPtrInput
	// ID of the VPC where the BGP Spoke Gateway is located.
	VpcId pulumi.StringPtrInput
}

func (Aviatrix_spoke_external_device_connState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrix_spoke_external_device_connState)(nil)).Elem()
}

type aviatrix_spoke_external_device_connArgs struct {
	// Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).
	ApprovedCidrs []string `pulumi:"approvedCidrs"`
	// Backup BGP MD5 authentication key.
	BackupBgpMd5Key *string `pulumi:"backupBgpMd5Key"`
	// Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BackupBgpRemoteAsNum *string `pulumi:"backupBgpRemoteAsNum"`
	// Backup direct connect for backup external device.
	BackupDirectConnect *bool `pulumi:"backupDirectConnect"`
	// Source CIDR for the tunnel from the backup Aviatrix spoke gateway.
	BackupLocalTunnelCidr *string `pulumi:"backupLocalTunnelCidr"`
	// Backup pre shared key.
	BackupPreSharedKey *string `pulumi:"backupPreSharedKey"`
	// Backup remote gateway IP.
	BackupRemoteGatewayIp *string `pulumi:"backupRemoteGatewayIp"`
	// Destination CIDR for the tunnel to the backup external device.
	BackupRemoteTunnelCidr *string `pulumi:"backupRemoteTunnelCidr"`
	// BGP local ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpLocalAsNum *string `pulumi:"bgpLocalAsNum"`
	// BGP MD5 authentication key.
	BgpMd5Key *string `pulumi:"bgpMd5Key"`
	// BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpRemoteAsNum *string `pulumi:"bgpRemoteAsNum"`
	// The name of the spoke external device connection which is going to be created.
	ConnectionName string `pulumi:"connectionName"`
	// Connection type. Valid values: 'bgp', 'static'. Default value: 'bgp'.
	ConnectionType *string `pulumi:"connectionType"`
	// Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.
	CustomAlgorithms *bool `pulumi:"customAlgorithms"`
	// Set true for private network infrastructure.
	DirectConnect *bool `pulumi:"directConnect"`
	// Enable Event Triggered HA.
	EnableEventTriggeredHa *bool `pulumi:"enableEventTriggeredHa"`
	// Set as true if use IKEv2.
	EnableIkev2 *bool `pulumi:"enableIkev2"`
	// Enable learned CIDR approval for the connection. Only valid with 'connection_type' = 'bgp'. Requires the spoke_gateway's
	// 'learned_cidrs_approval_mode' attribute be set to 'connection'. Valid values: true, false. Default value: false.
	EnableLearnedCidrsApproval *bool `pulumi:"enableLearnedCidrsApproval"`
	// Name of the BGP Spoke Gateway.
	GwName string `pulumi:"gwName"`
	// Set as true if there are two external devices.
	HaEnabled *bool `pulumi:"haEnabled"`
	// Source CIDR for the tunnel from the Aviatrix spoke gateway.
	LocalTunnelCidr *string `pulumi:"localTunnelCidr"`
	// Configure manual BGP advertised CIDRs for this connection. Only valid with 'connection_type' = 'bgp'.
	ManualBgpAdvertisedCidrs []string `pulumi:"manualBgpAdvertisedCidrs"`
	// Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.
	Phase1Authentication *string `pulumi:"phase1Authentication"`
	// Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase1DhGroups *string `pulumi:"phase1DhGroups"`
	// Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.
	Phase1Encryption *string `pulumi:"phase1Encryption"`
	// Phase 1 remote identifier of the IPsec tunnel.
	Phase1RemoteIdentifiers []string `pulumi:"phase1RemoteIdentifiers"`
	// Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.
	Phase2Authentication *string `pulumi:"phase2Authentication"`
	// Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase2DhGroups *string `pulumi:"phase2DhGroups"`
	// Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.
	Phase2Encryption *string `pulumi:"phase2Encryption"`
	// If left blank, the pre-shared key will be auto generated.
	PreSharedKey *string `pulumi:"preSharedKey"`
	// Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.
	PrependAsPaths []string `pulumi:"prependAsPaths"`
	// Remote Gateway IP.
	RemoteGatewayIp string `pulumi:"remoteGatewayIp"`
	// Remote CIDRs joined as a string with ','. Required for a 'static' type connection.
	RemoteSubnet *string `pulumi:"remoteSubnet"`
	// Destination CIDR for the tunnel to the external device.
	RemoteTunnelCidr *string `pulumi:"remoteTunnelCidr"`
	// Tunnel Protocol. Valid value: 'IPsec'. Default value: 'IPsec'. Case insensitive.
	TunnelProtocol *string `pulumi:"tunnelProtocol"`
	// ID of the VPC where the BGP Spoke Gateway is located.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Aviatrix_spoke_external_device_conn resource.
type Aviatrix_spoke_external_device_connArgs struct {
	// Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).
	ApprovedCidrs pulumi.StringArrayInput
	// Backup BGP MD5 authentication key.
	BackupBgpMd5Key pulumi.StringPtrInput
	// Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BackupBgpRemoteAsNum pulumi.StringPtrInput
	// Backup direct connect for backup external device.
	BackupDirectConnect pulumi.BoolPtrInput
	// Source CIDR for the tunnel from the backup Aviatrix spoke gateway.
	BackupLocalTunnelCidr pulumi.StringPtrInput
	// Backup pre shared key.
	BackupPreSharedKey pulumi.StringPtrInput
	// Backup remote gateway IP.
	BackupRemoteGatewayIp pulumi.StringPtrInput
	// Destination CIDR for the tunnel to the backup external device.
	BackupRemoteTunnelCidr pulumi.StringPtrInput
	// BGP local ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpLocalAsNum pulumi.StringPtrInput
	// BGP MD5 authentication key.
	BgpMd5Key pulumi.StringPtrInput
	// BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpRemoteAsNum pulumi.StringPtrInput
	// The name of the spoke external device connection which is going to be created.
	ConnectionName pulumi.StringInput
	// Connection type. Valid values: 'bgp', 'static'. Default value: 'bgp'.
	ConnectionType pulumi.StringPtrInput
	// Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.
	CustomAlgorithms pulumi.BoolPtrInput
	// Set true for private network infrastructure.
	DirectConnect pulumi.BoolPtrInput
	// Enable Event Triggered HA.
	EnableEventTriggeredHa pulumi.BoolPtrInput
	// Set as true if use IKEv2.
	EnableIkev2 pulumi.BoolPtrInput
	// Enable learned CIDR approval for the connection. Only valid with 'connection_type' = 'bgp'. Requires the spoke_gateway's
	// 'learned_cidrs_approval_mode' attribute be set to 'connection'. Valid values: true, false. Default value: false.
	EnableLearnedCidrsApproval pulumi.BoolPtrInput
	// Name of the BGP Spoke Gateway.
	GwName pulumi.StringInput
	// Set as true if there are two external devices.
	HaEnabled pulumi.BoolPtrInput
	// Source CIDR for the tunnel from the Aviatrix spoke gateway.
	LocalTunnelCidr pulumi.StringPtrInput
	// Configure manual BGP advertised CIDRs for this connection. Only valid with 'connection_type' = 'bgp'.
	ManualBgpAdvertisedCidrs pulumi.StringArrayInput
	// Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.
	Phase1Authentication pulumi.StringPtrInput
	// Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase1DhGroups pulumi.StringPtrInput
	// Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.
	Phase1Encryption pulumi.StringPtrInput
	// Phase 1 remote identifier of the IPsec tunnel.
	Phase1RemoteIdentifiers pulumi.StringArrayInput
	// Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.
	Phase2Authentication pulumi.StringPtrInput
	// Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase2DhGroups pulumi.StringPtrInput
	// Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.
	Phase2Encryption pulumi.StringPtrInput
	// If left blank, the pre-shared key will be auto generated.
	PreSharedKey pulumi.StringPtrInput
	// Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.
	PrependAsPaths pulumi.StringArrayInput
	// Remote Gateway IP.
	RemoteGatewayIp pulumi.StringInput
	// Remote CIDRs joined as a string with ','. Required for a 'static' type connection.
	RemoteSubnet pulumi.StringPtrInput
	// Destination CIDR for the tunnel to the external device.
	RemoteTunnelCidr pulumi.StringPtrInput
	// Tunnel Protocol. Valid value: 'IPsec'. Default value: 'IPsec'. Case insensitive.
	TunnelProtocol pulumi.StringPtrInput
	// ID of the VPC where the BGP Spoke Gateway is located.
	VpcId pulumi.StringInput
}

func (Aviatrix_spoke_external_device_connArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrix_spoke_external_device_connArgs)(nil)).Elem()
}

type Aviatrix_spoke_external_device_connInput interface {
	pulumi.Input

	ToAviatrix_spoke_external_device_connOutput() Aviatrix_spoke_external_device_connOutput
	ToAviatrix_spoke_external_device_connOutputWithContext(ctx context.Context) Aviatrix_spoke_external_device_connOutput
}

func (*Aviatrix_spoke_external_device_conn) ElementType() reflect.Type {
	return reflect.TypeOf((**Aviatrix_spoke_external_device_conn)(nil)).Elem()
}

func (i *Aviatrix_spoke_external_device_conn) ToAviatrix_spoke_external_device_connOutput() Aviatrix_spoke_external_device_connOutput {
	return i.ToAviatrix_spoke_external_device_connOutputWithContext(context.Background())
}

func (i *Aviatrix_spoke_external_device_conn) ToAviatrix_spoke_external_device_connOutputWithContext(ctx context.Context) Aviatrix_spoke_external_device_connOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Aviatrix_spoke_external_device_connOutput)
}

// Aviatrix_spoke_external_device_connArrayInput is an input type that accepts Aviatrix_spoke_external_device_connArray and Aviatrix_spoke_external_device_connArrayOutput values.
// You can construct a concrete instance of `Aviatrix_spoke_external_device_connArrayInput` via:
//
//	Aviatrix_spoke_external_device_connArray{ Aviatrix_spoke_external_device_connArgs{...} }
type Aviatrix_spoke_external_device_connArrayInput interface {
	pulumi.Input

	ToAviatrix_spoke_external_device_connArrayOutput() Aviatrix_spoke_external_device_connArrayOutput
	ToAviatrix_spoke_external_device_connArrayOutputWithContext(context.Context) Aviatrix_spoke_external_device_connArrayOutput
}

type Aviatrix_spoke_external_device_connArray []Aviatrix_spoke_external_device_connInput

func (Aviatrix_spoke_external_device_connArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Aviatrix_spoke_external_device_conn)(nil)).Elem()
}

func (i Aviatrix_spoke_external_device_connArray) ToAviatrix_spoke_external_device_connArrayOutput() Aviatrix_spoke_external_device_connArrayOutput {
	return i.ToAviatrix_spoke_external_device_connArrayOutputWithContext(context.Background())
}

func (i Aviatrix_spoke_external_device_connArray) ToAviatrix_spoke_external_device_connArrayOutputWithContext(ctx context.Context) Aviatrix_spoke_external_device_connArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Aviatrix_spoke_external_device_connArrayOutput)
}

// Aviatrix_spoke_external_device_connMapInput is an input type that accepts Aviatrix_spoke_external_device_connMap and Aviatrix_spoke_external_device_connMapOutput values.
// You can construct a concrete instance of `Aviatrix_spoke_external_device_connMapInput` via:
//
//	Aviatrix_spoke_external_device_connMap{ "key": Aviatrix_spoke_external_device_connArgs{...} }
type Aviatrix_spoke_external_device_connMapInput interface {
	pulumi.Input

	ToAviatrix_spoke_external_device_connMapOutput() Aviatrix_spoke_external_device_connMapOutput
	ToAviatrix_spoke_external_device_connMapOutputWithContext(context.Context) Aviatrix_spoke_external_device_connMapOutput
}

type Aviatrix_spoke_external_device_connMap map[string]Aviatrix_spoke_external_device_connInput

func (Aviatrix_spoke_external_device_connMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Aviatrix_spoke_external_device_conn)(nil)).Elem()
}

func (i Aviatrix_spoke_external_device_connMap) ToAviatrix_spoke_external_device_connMapOutput() Aviatrix_spoke_external_device_connMapOutput {
	return i.ToAviatrix_spoke_external_device_connMapOutputWithContext(context.Background())
}

func (i Aviatrix_spoke_external_device_connMap) ToAviatrix_spoke_external_device_connMapOutputWithContext(ctx context.Context) Aviatrix_spoke_external_device_connMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Aviatrix_spoke_external_device_connMapOutput)
}

type Aviatrix_spoke_external_device_connOutput struct{ *pulumi.OutputState }

func (Aviatrix_spoke_external_device_connOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Aviatrix_spoke_external_device_conn)(nil)).Elem()
}

func (o Aviatrix_spoke_external_device_connOutput) ToAviatrix_spoke_external_device_connOutput() Aviatrix_spoke_external_device_connOutput {
	return o
}

func (o Aviatrix_spoke_external_device_connOutput) ToAviatrix_spoke_external_device_connOutputWithContext(ctx context.Context) Aviatrix_spoke_external_device_connOutput {
	return o
}

// Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).
func (o Aviatrix_spoke_external_device_connOutput) ApprovedCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringArrayOutput { return v.ApprovedCidrs }).(pulumi.StringArrayOutput)
}

// Backup BGP MD5 authentication key.
func (o Aviatrix_spoke_external_device_connOutput) BackupBgpMd5Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringPtrOutput { return v.BackupBgpMd5Key }).(pulumi.StringPtrOutput)
}

// Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
func (o Aviatrix_spoke_external_device_connOutput) BackupBgpRemoteAsNum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringPtrOutput { return v.BackupBgpRemoteAsNum }).(pulumi.StringPtrOutput)
}

// Backup direct connect for backup external device.
func (o Aviatrix_spoke_external_device_connOutput) BackupDirectConnect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.BoolPtrOutput { return v.BackupDirectConnect }).(pulumi.BoolPtrOutput)
}

// Source CIDR for the tunnel from the backup Aviatrix spoke gateway.
func (o Aviatrix_spoke_external_device_connOutput) BackupLocalTunnelCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringOutput { return v.BackupLocalTunnelCidr }).(pulumi.StringOutput)
}

// Backup pre shared key.
func (o Aviatrix_spoke_external_device_connOutput) BackupPreSharedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringPtrOutput { return v.BackupPreSharedKey }).(pulumi.StringPtrOutput)
}

// Backup remote gateway IP.
func (o Aviatrix_spoke_external_device_connOutput) BackupRemoteGatewayIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringPtrOutput { return v.BackupRemoteGatewayIp }).(pulumi.StringPtrOutput)
}

// Destination CIDR for the tunnel to the backup external device.
func (o Aviatrix_spoke_external_device_connOutput) BackupRemoteTunnelCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringOutput { return v.BackupRemoteTunnelCidr }).(pulumi.StringOutput)
}

// BGP local ASN (Autonomous System Number). Integer between 1-4294967294.
func (o Aviatrix_spoke_external_device_connOutput) BgpLocalAsNum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringPtrOutput { return v.BgpLocalAsNum }).(pulumi.StringPtrOutput)
}

// BGP MD5 authentication key.
func (o Aviatrix_spoke_external_device_connOutput) BgpMd5Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringPtrOutput { return v.BgpMd5Key }).(pulumi.StringPtrOutput)
}

// BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
func (o Aviatrix_spoke_external_device_connOutput) BgpRemoteAsNum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringPtrOutput { return v.BgpRemoteAsNum }).(pulumi.StringPtrOutput)
}

// The name of the spoke external device connection which is going to be created.
func (o Aviatrix_spoke_external_device_connOutput) ConnectionName() pulumi.StringOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringOutput { return v.ConnectionName }).(pulumi.StringOutput)
}

// Connection type. Valid values: 'bgp', 'static'. Default value: 'bgp'.
func (o Aviatrix_spoke_external_device_connOutput) ConnectionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringPtrOutput { return v.ConnectionType }).(pulumi.StringPtrOutput)
}

// Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.
func (o Aviatrix_spoke_external_device_connOutput) CustomAlgorithms() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.BoolPtrOutput { return v.CustomAlgorithms }).(pulumi.BoolPtrOutput)
}

// Set true for private network infrastructure.
func (o Aviatrix_spoke_external_device_connOutput) DirectConnect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.BoolPtrOutput { return v.DirectConnect }).(pulumi.BoolPtrOutput)
}

// Enable Event Triggered HA.
func (o Aviatrix_spoke_external_device_connOutput) EnableEventTriggeredHa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.BoolPtrOutput { return v.EnableEventTriggeredHa }).(pulumi.BoolPtrOutput)
}

// Set as true if use IKEv2.
func (o Aviatrix_spoke_external_device_connOutput) EnableIkev2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.BoolPtrOutput { return v.EnableIkev2 }).(pulumi.BoolPtrOutput)
}

// Enable learned CIDR approval for the connection. Only valid with 'connection_type' = 'bgp'. Requires the spoke_gateway's
// 'learned_cidrs_approval_mode' attribute be set to 'connection'. Valid values: true, false. Default value: false.
func (o Aviatrix_spoke_external_device_connOutput) EnableLearnedCidrsApproval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.BoolPtrOutput { return v.EnableLearnedCidrsApproval }).(pulumi.BoolPtrOutput)
}

// Name of the BGP Spoke Gateway.
func (o Aviatrix_spoke_external_device_connOutput) GwName() pulumi.StringOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringOutput { return v.GwName }).(pulumi.StringOutput)
}

// Set as true if there are two external devices.
func (o Aviatrix_spoke_external_device_connOutput) HaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.BoolPtrOutput { return v.HaEnabled }).(pulumi.BoolPtrOutput)
}

// Source CIDR for the tunnel from the Aviatrix spoke gateway.
func (o Aviatrix_spoke_external_device_connOutput) LocalTunnelCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringOutput { return v.LocalTunnelCidr }).(pulumi.StringOutput)
}

// Configure manual BGP advertised CIDRs for this connection. Only valid with 'connection_type' = 'bgp'.
func (o Aviatrix_spoke_external_device_connOutput) ManualBgpAdvertisedCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringArrayOutput {
		return v.ManualBgpAdvertisedCidrs
	}).(pulumi.StringArrayOutput)
}

// Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.
func (o Aviatrix_spoke_external_device_connOutput) Phase1Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringPtrOutput { return v.Phase1Authentication }).(pulumi.StringPtrOutput)
}

// Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
func (o Aviatrix_spoke_external_device_connOutput) Phase1DhGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringPtrOutput { return v.Phase1DhGroups }).(pulumi.StringPtrOutput)
}

// Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',
// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.
func (o Aviatrix_spoke_external_device_connOutput) Phase1Encryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringPtrOutput { return v.Phase1Encryption }).(pulumi.StringPtrOutput)
}

// Phase 1 remote identifier of the IPsec tunnel.
func (o Aviatrix_spoke_external_device_connOutput) Phase1RemoteIdentifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringArrayOutput {
		return v.Phase1RemoteIdentifiers
	}).(pulumi.StringArrayOutput)
}

// Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.
func (o Aviatrix_spoke_external_device_connOutput) Phase2Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringPtrOutput { return v.Phase2Authentication }).(pulumi.StringPtrOutput)
}

// Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
func (o Aviatrix_spoke_external_device_connOutput) Phase2DhGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringPtrOutput { return v.Phase2DhGroups }).(pulumi.StringPtrOutput)
}

// Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',
// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.
func (o Aviatrix_spoke_external_device_connOutput) Phase2Encryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringPtrOutput { return v.Phase2Encryption }).(pulumi.StringPtrOutput)
}

// If left blank, the pre-shared key will be auto generated.
func (o Aviatrix_spoke_external_device_connOutput) PreSharedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringPtrOutput { return v.PreSharedKey }).(pulumi.StringPtrOutput)
}

// Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.
func (o Aviatrix_spoke_external_device_connOutput) PrependAsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringArrayOutput { return v.PrependAsPaths }).(pulumi.StringArrayOutput)
}

// Remote Gateway IP.
func (o Aviatrix_spoke_external_device_connOutput) RemoteGatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringOutput { return v.RemoteGatewayIp }).(pulumi.StringOutput)
}

// Remote CIDRs joined as a string with ','. Required for a 'static' type connection.
func (o Aviatrix_spoke_external_device_connOutput) RemoteSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringPtrOutput { return v.RemoteSubnet }).(pulumi.StringPtrOutput)
}

// Destination CIDR for the tunnel to the external device.
func (o Aviatrix_spoke_external_device_connOutput) RemoteTunnelCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringOutput { return v.RemoteTunnelCidr }).(pulumi.StringOutput)
}

// Tunnel Protocol. Valid value: 'IPsec'. Default value: 'IPsec'. Case insensitive.
func (o Aviatrix_spoke_external_device_connOutput) TunnelProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringPtrOutput { return v.TunnelProtocol }).(pulumi.StringPtrOutput)
}

// ID of the VPC where the BGP Spoke Gateway is located.
func (o Aviatrix_spoke_external_device_connOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Aviatrix_spoke_external_device_conn) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type Aviatrix_spoke_external_device_connArrayOutput struct{ *pulumi.OutputState }

func (Aviatrix_spoke_external_device_connArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Aviatrix_spoke_external_device_conn)(nil)).Elem()
}

func (o Aviatrix_spoke_external_device_connArrayOutput) ToAviatrix_spoke_external_device_connArrayOutput() Aviatrix_spoke_external_device_connArrayOutput {
	return o
}

func (o Aviatrix_spoke_external_device_connArrayOutput) ToAviatrix_spoke_external_device_connArrayOutputWithContext(ctx context.Context) Aviatrix_spoke_external_device_connArrayOutput {
	return o
}

func (o Aviatrix_spoke_external_device_connArrayOutput) Index(i pulumi.IntInput) Aviatrix_spoke_external_device_connOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Aviatrix_spoke_external_device_conn {
		return vs[0].([]*Aviatrix_spoke_external_device_conn)[vs[1].(int)]
	}).(Aviatrix_spoke_external_device_connOutput)
}

type Aviatrix_spoke_external_device_connMapOutput struct{ *pulumi.OutputState }

func (Aviatrix_spoke_external_device_connMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Aviatrix_spoke_external_device_conn)(nil)).Elem()
}

func (o Aviatrix_spoke_external_device_connMapOutput) ToAviatrix_spoke_external_device_connMapOutput() Aviatrix_spoke_external_device_connMapOutput {
	return o
}

func (o Aviatrix_spoke_external_device_connMapOutput) ToAviatrix_spoke_external_device_connMapOutputWithContext(ctx context.Context) Aviatrix_spoke_external_device_connMapOutput {
	return o
}

func (o Aviatrix_spoke_external_device_connMapOutput) MapIndex(k pulumi.StringInput) Aviatrix_spoke_external_device_connOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Aviatrix_spoke_external_device_conn {
		return vs[0].(map[string]*Aviatrix_spoke_external_device_conn)[vs[1].(string)]
	}).(Aviatrix_spoke_external_device_connOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Aviatrix_spoke_external_device_connInput)(nil)).Elem(), &Aviatrix_spoke_external_device_conn{})
	pulumi.RegisterInputType(reflect.TypeOf((*Aviatrix_spoke_external_device_connArrayInput)(nil)).Elem(), Aviatrix_spoke_external_device_connArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Aviatrix_spoke_external_device_connMapInput)(nil)).Elem(), Aviatrix_spoke_external_device_connMap{})
	pulumi.RegisterOutputType(Aviatrix_spoke_external_device_connOutput{})
	pulumi.RegisterOutputType(Aviatrix_spoke_external_device_connArrayOutput{})
	pulumi.RegisterOutputType(Aviatrix_spoke_external_device_connMapOutput{})
}
