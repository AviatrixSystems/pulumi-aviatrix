// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixArmPeer struct {
	pulumi.CustomResourceState

	// This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.
	AccountName1 pulumi.StringOutput `pulumi:"accountName1"`
	// This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.
	AccountName2 pulumi.StringOutput `pulumi:"accountName2"`
	// List of VNet CIDR of vnet_name_resource_group1.
	VnetCidr1s pulumi.StringArrayOutput `pulumi:"vnetCidr1s"`
	// List of VNet CIDR of vnet_name_resource_group2.
	VnetCidr2s pulumi.StringArrayOutput `pulumi:"vnetCidr2s"`
	// VNet-Name of Azure cloud.
	VnetNameResourceGroup1 pulumi.StringOutput `pulumi:"vnetNameResourceGroup1"`
	// VNet-Name of Azure cloud.
	VnetNameResourceGroup2 pulumi.StringOutput `pulumi:"vnetNameResourceGroup2"`
	// Region of Azure cloud.
	VnetReg1 pulumi.StringOutput `pulumi:"vnetReg1"`
	// Region of Azure cloud.
	VnetReg2 pulumi.StringOutput `pulumi:"vnetReg2"`
}

// NewAviatrixArmPeer registers a new resource with the given unique name, arguments, and options.
func NewAviatrixArmPeer(ctx *pulumi.Context,
	name string, args *AviatrixArmPeerArgs, opts ...pulumi.ResourceOption) (*AviatrixArmPeer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName1 == nil {
		return nil, errors.New("invalid value for required argument 'AccountName1'")
	}
	if args.AccountName2 == nil {
		return nil, errors.New("invalid value for required argument 'AccountName2'")
	}
	if args.VnetNameResourceGroup1 == nil {
		return nil, errors.New("invalid value for required argument 'VnetNameResourceGroup1'")
	}
	if args.VnetNameResourceGroup2 == nil {
		return nil, errors.New("invalid value for required argument 'VnetNameResourceGroup2'")
	}
	if args.VnetReg1 == nil {
		return nil, errors.New("invalid value for required argument 'VnetReg1'")
	}
	if args.VnetReg2 == nil {
		return nil, errors.New("invalid value for required argument 'VnetReg2'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixArmPeer
	err := ctx.RegisterResource("aviatrix:index/aviatrixArmPeer:AviatrixArmPeer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixArmPeer gets an existing AviatrixArmPeer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixArmPeer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixArmPeerState, opts ...pulumi.ResourceOption) (*AviatrixArmPeer, error) {
	var resource AviatrixArmPeer
	err := ctx.ReadResource("aviatrix:index/aviatrixArmPeer:AviatrixArmPeer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixArmPeer resources.
type aviatrixArmPeerState struct {
	// This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.
	AccountName1 *string `pulumi:"accountName1"`
	// This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.
	AccountName2 *string `pulumi:"accountName2"`
	// List of VNet CIDR of vnet_name_resource_group1.
	VnetCidr1s []string `pulumi:"vnetCidr1s"`
	// List of VNet CIDR of vnet_name_resource_group2.
	VnetCidr2s []string `pulumi:"vnetCidr2s"`
	// VNet-Name of Azure cloud.
	VnetNameResourceGroup1 *string `pulumi:"vnetNameResourceGroup1"`
	// VNet-Name of Azure cloud.
	VnetNameResourceGroup2 *string `pulumi:"vnetNameResourceGroup2"`
	// Region of Azure cloud.
	VnetReg1 *string `pulumi:"vnetReg1"`
	// Region of Azure cloud.
	VnetReg2 *string `pulumi:"vnetReg2"`
}

type AviatrixArmPeerState struct {
	// This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.
	AccountName1 pulumi.StringPtrInput
	// This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.
	AccountName2 pulumi.StringPtrInput
	// List of VNet CIDR of vnet_name_resource_group1.
	VnetCidr1s pulumi.StringArrayInput
	// List of VNet CIDR of vnet_name_resource_group2.
	VnetCidr2s pulumi.StringArrayInput
	// VNet-Name of Azure cloud.
	VnetNameResourceGroup1 pulumi.StringPtrInput
	// VNet-Name of Azure cloud.
	VnetNameResourceGroup2 pulumi.StringPtrInput
	// Region of Azure cloud.
	VnetReg1 pulumi.StringPtrInput
	// Region of Azure cloud.
	VnetReg2 pulumi.StringPtrInput
}

func (AviatrixArmPeerState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixArmPeerState)(nil)).Elem()
}

type aviatrixArmPeerArgs struct {
	// This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.
	AccountName1 string `pulumi:"accountName1"`
	// This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.
	AccountName2 string `pulumi:"accountName2"`
	// VNet-Name of Azure cloud.
	VnetNameResourceGroup1 string `pulumi:"vnetNameResourceGroup1"`
	// VNet-Name of Azure cloud.
	VnetNameResourceGroup2 string `pulumi:"vnetNameResourceGroup2"`
	// Region of Azure cloud.
	VnetReg1 string `pulumi:"vnetReg1"`
	// Region of Azure cloud.
	VnetReg2 string `pulumi:"vnetReg2"`
}

// The set of arguments for constructing a AviatrixArmPeer resource.
type AviatrixArmPeerArgs struct {
	// This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.
	AccountName1 pulumi.StringInput
	// This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.
	AccountName2 pulumi.StringInput
	// VNet-Name of Azure cloud.
	VnetNameResourceGroup1 pulumi.StringInput
	// VNet-Name of Azure cloud.
	VnetNameResourceGroup2 pulumi.StringInput
	// Region of Azure cloud.
	VnetReg1 pulumi.StringInput
	// Region of Azure cloud.
	VnetReg2 pulumi.StringInput
}

func (AviatrixArmPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixArmPeerArgs)(nil)).Elem()
}

type AviatrixArmPeerInput interface {
	pulumi.Input

	ToAviatrixArmPeerOutput() AviatrixArmPeerOutput
	ToAviatrixArmPeerOutputWithContext(ctx context.Context) AviatrixArmPeerOutput
}

func (*AviatrixArmPeer) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixArmPeer)(nil)).Elem()
}

func (i *AviatrixArmPeer) ToAviatrixArmPeerOutput() AviatrixArmPeerOutput {
	return i.ToAviatrixArmPeerOutputWithContext(context.Background())
}

func (i *AviatrixArmPeer) ToAviatrixArmPeerOutputWithContext(ctx context.Context) AviatrixArmPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixArmPeerOutput)
}

// AviatrixArmPeerArrayInput is an input type that accepts AviatrixArmPeerArray and AviatrixArmPeerArrayOutput values.
// You can construct a concrete instance of `AviatrixArmPeerArrayInput` via:
//
//	AviatrixArmPeerArray{ AviatrixArmPeerArgs{...} }
type AviatrixArmPeerArrayInput interface {
	pulumi.Input

	ToAviatrixArmPeerArrayOutput() AviatrixArmPeerArrayOutput
	ToAviatrixArmPeerArrayOutputWithContext(context.Context) AviatrixArmPeerArrayOutput
}

type AviatrixArmPeerArray []AviatrixArmPeerInput

func (AviatrixArmPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixArmPeer)(nil)).Elem()
}

func (i AviatrixArmPeerArray) ToAviatrixArmPeerArrayOutput() AviatrixArmPeerArrayOutput {
	return i.ToAviatrixArmPeerArrayOutputWithContext(context.Background())
}

func (i AviatrixArmPeerArray) ToAviatrixArmPeerArrayOutputWithContext(ctx context.Context) AviatrixArmPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixArmPeerArrayOutput)
}

// AviatrixArmPeerMapInput is an input type that accepts AviatrixArmPeerMap and AviatrixArmPeerMapOutput values.
// You can construct a concrete instance of `AviatrixArmPeerMapInput` via:
//
//	AviatrixArmPeerMap{ "key": AviatrixArmPeerArgs{...} }
type AviatrixArmPeerMapInput interface {
	pulumi.Input

	ToAviatrixArmPeerMapOutput() AviatrixArmPeerMapOutput
	ToAviatrixArmPeerMapOutputWithContext(context.Context) AviatrixArmPeerMapOutput
}

type AviatrixArmPeerMap map[string]AviatrixArmPeerInput

func (AviatrixArmPeerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixArmPeer)(nil)).Elem()
}

func (i AviatrixArmPeerMap) ToAviatrixArmPeerMapOutput() AviatrixArmPeerMapOutput {
	return i.ToAviatrixArmPeerMapOutputWithContext(context.Background())
}

func (i AviatrixArmPeerMap) ToAviatrixArmPeerMapOutputWithContext(ctx context.Context) AviatrixArmPeerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixArmPeerMapOutput)
}

type AviatrixArmPeerOutput struct{ *pulumi.OutputState }

func (AviatrixArmPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixArmPeer)(nil)).Elem()
}

func (o AviatrixArmPeerOutput) ToAviatrixArmPeerOutput() AviatrixArmPeerOutput {
	return o
}

func (o AviatrixArmPeerOutput) ToAviatrixArmPeerOutputWithContext(ctx context.Context) AviatrixArmPeerOutput {
	return o
}

// This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.
func (o AviatrixArmPeerOutput) AccountName1() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixArmPeer) pulumi.StringOutput { return v.AccountName1 }).(pulumi.StringOutput)
}

// This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.
func (o AviatrixArmPeerOutput) AccountName2() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixArmPeer) pulumi.StringOutput { return v.AccountName2 }).(pulumi.StringOutput)
}

// List of VNet CIDR of vnet_name_resource_group1.
func (o AviatrixArmPeerOutput) VnetCidr1s() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixArmPeer) pulumi.StringArrayOutput { return v.VnetCidr1s }).(pulumi.StringArrayOutput)
}

// List of VNet CIDR of vnet_name_resource_group2.
func (o AviatrixArmPeerOutput) VnetCidr2s() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixArmPeer) pulumi.StringArrayOutput { return v.VnetCidr2s }).(pulumi.StringArrayOutput)
}

// VNet-Name of Azure cloud.
func (o AviatrixArmPeerOutput) VnetNameResourceGroup1() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixArmPeer) pulumi.StringOutput { return v.VnetNameResourceGroup1 }).(pulumi.StringOutput)
}

// VNet-Name of Azure cloud.
func (o AviatrixArmPeerOutput) VnetNameResourceGroup2() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixArmPeer) pulumi.StringOutput { return v.VnetNameResourceGroup2 }).(pulumi.StringOutput)
}

// Region of Azure cloud.
func (o AviatrixArmPeerOutput) VnetReg1() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixArmPeer) pulumi.StringOutput { return v.VnetReg1 }).(pulumi.StringOutput)
}

// Region of Azure cloud.
func (o AviatrixArmPeerOutput) VnetReg2() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixArmPeer) pulumi.StringOutput { return v.VnetReg2 }).(pulumi.StringOutput)
}

type AviatrixArmPeerArrayOutput struct{ *pulumi.OutputState }

func (AviatrixArmPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixArmPeer)(nil)).Elem()
}

func (o AviatrixArmPeerArrayOutput) ToAviatrixArmPeerArrayOutput() AviatrixArmPeerArrayOutput {
	return o
}

func (o AviatrixArmPeerArrayOutput) ToAviatrixArmPeerArrayOutputWithContext(ctx context.Context) AviatrixArmPeerArrayOutput {
	return o
}

func (o AviatrixArmPeerArrayOutput) Index(i pulumi.IntInput) AviatrixArmPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixArmPeer {
		return vs[0].([]*AviatrixArmPeer)[vs[1].(int)]
	}).(AviatrixArmPeerOutput)
}

type AviatrixArmPeerMapOutput struct{ *pulumi.OutputState }

func (AviatrixArmPeerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixArmPeer)(nil)).Elem()
}

func (o AviatrixArmPeerMapOutput) ToAviatrixArmPeerMapOutput() AviatrixArmPeerMapOutput {
	return o
}

func (o AviatrixArmPeerMapOutput) ToAviatrixArmPeerMapOutputWithContext(ctx context.Context) AviatrixArmPeerMapOutput {
	return o
}

func (o AviatrixArmPeerMapOutput) MapIndex(k pulumi.StringInput) AviatrixArmPeerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixArmPeer {
		return vs[0].(map[string]*AviatrixArmPeer)[vs[1].(string)]
	}).(AviatrixArmPeerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixArmPeerInput)(nil)).Elem(), &AviatrixArmPeer{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixArmPeerArrayInput)(nil)).Elem(), AviatrixArmPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixArmPeerMapInput)(nil)).Elem(), AviatrixArmPeerMap{})
	pulumi.RegisterOutputType(AviatrixArmPeerOutput{})
	pulumi.RegisterOutputType(AviatrixArmPeerArrayOutput{})
	pulumi.RegisterOutputType(AviatrixArmPeerMapOutput{})
}
