// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixPrivateModeLb struct {
	pulumi.CustomResourceState

	// Name of the access account.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// Type of load balancer to create. Must be one of controller or multicloud.
	LbType pulumi.StringOutput `pulumi:"lbType"`
	// VPC ID of multicloud access VPC to connect to. Required when lb_type is multicloud.
	MulticloudAccessVpcId pulumi.StringPtrOutput `pulumi:"multicloudAccessVpcId"`
	// List of multicloud proxies.
	Proxies AviatrixPrivateModeLbProxyArrayOutput `pulumi:"proxies"`
	// Name of the VPC region.
	Region pulumi.StringOutput `pulumi:"region"`
	// ID of the VPC for the load balancer.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewAviatrixPrivateModeLb registers a new resource with the given unique name, arguments, and options.
func NewAviatrixPrivateModeLb(ctx *pulumi.Context,
	name string, args *AviatrixPrivateModeLbArgs, opts ...pulumi.ResourceOption) (*AviatrixPrivateModeLb, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.LbType == nil {
		return nil, errors.New("invalid value for required argument 'LbType'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixPrivateModeLb
	err := ctx.RegisterResource("aviatrix:index/aviatrixPrivateModeLb:AviatrixPrivateModeLb", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixPrivateModeLb gets an existing AviatrixPrivateModeLb resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixPrivateModeLb(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixPrivateModeLbState, opts ...pulumi.ResourceOption) (*AviatrixPrivateModeLb, error) {
	var resource AviatrixPrivateModeLb
	err := ctx.ReadResource("aviatrix:index/aviatrixPrivateModeLb:AviatrixPrivateModeLb", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixPrivateModeLb resources.
type aviatrixPrivateModeLbState struct {
	// Name of the access account.
	AccountName *string `pulumi:"accountName"`
	// Type of load balancer to create. Must be one of controller or multicloud.
	LbType *string `pulumi:"lbType"`
	// VPC ID of multicloud access VPC to connect to. Required when lb_type is multicloud.
	MulticloudAccessVpcId *string `pulumi:"multicloudAccessVpcId"`
	// List of multicloud proxies.
	Proxies []AviatrixPrivateModeLbProxy `pulumi:"proxies"`
	// Name of the VPC region.
	Region *string `pulumi:"region"`
	// ID of the VPC for the load balancer.
	VpcId *string `pulumi:"vpcId"`
}

type AviatrixPrivateModeLbState struct {
	// Name of the access account.
	AccountName pulumi.StringPtrInput
	// Type of load balancer to create. Must be one of controller or multicloud.
	LbType pulumi.StringPtrInput
	// VPC ID of multicloud access VPC to connect to. Required when lb_type is multicloud.
	MulticloudAccessVpcId pulumi.StringPtrInput
	// List of multicloud proxies.
	Proxies AviatrixPrivateModeLbProxyArrayInput
	// Name of the VPC region.
	Region pulumi.StringPtrInput
	// ID of the VPC for the load balancer.
	VpcId pulumi.StringPtrInput
}

func (AviatrixPrivateModeLbState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixPrivateModeLbState)(nil)).Elem()
}

type aviatrixPrivateModeLbArgs struct {
	// Name of the access account.
	AccountName string `pulumi:"accountName"`
	// Type of load balancer to create. Must be one of controller or multicloud.
	LbType string `pulumi:"lbType"`
	// VPC ID of multicloud access VPC to connect to. Required when lb_type is multicloud.
	MulticloudAccessVpcId *string `pulumi:"multicloudAccessVpcId"`
	// List of multicloud proxies.
	Proxies []AviatrixPrivateModeLbProxy `pulumi:"proxies"`
	// Name of the VPC region.
	Region string `pulumi:"region"`
	// ID of the VPC for the load balancer.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a AviatrixPrivateModeLb resource.
type AviatrixPrivateModeLbArgs struct {
	// Name of the access account.
	AccountName pulumi.StringInput
	// Type of load balancer to create. Must be one of controller or multicloud.
	LbType pulumi.StringInput
	// VPC ID of multicloud access VPC to connect to. Required when lb_type is multicloud.
	MulticloudAccessVpcId pulumi.StringPtrInput
	// List of multicloud proxies.
	Proxies AviatrixPrivateModeLbProxyArrayInput
	// Name of the VPC region.
	Region pulumi.StringInput
	// ID of the VPC for the load balancer.
	VpcId pulumi.StringInput
}

func (AviatrixPrivateModeLbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixPrivateModeLbArgs)(nil)).Elem()
}

type AviatrixPrivateModeLbInput interface {
	pulumi.Input

	ToAviatrixPrivateModeLbOutput() AviatrixPrivateModeLbOutput
	ToAviatrixPrivateModeLbOutputWithContext(ctx context.Context) AviatrixPrivateModeLbOutput
}

func (*AviatrixPrivateModeLb) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixPrivateModeLb)(nil)).Elem()
}

func (i *AviatrixPrivateModeLb) ToAviatrixPrivateModeLbOutput() AviatrixPrivateModeLbOutput {
	return i.ToAviatrixPrivateModeLbOutputWithContext(context.Background())
}

func (i *AviatrixPrivateModeLb) ToAviatrixPrivateModeLbOutputWithContext(ctx context.Context) AviatrixPrivateModeLbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixPrivateModeLbOutput)
}

// AviatrixPrivateModeLbArrayInput is an input type that accepts AviatrixPrivateModeLbArray and AviatrixPrivateModeLbArrayOutput values.
// You can construct a concrete instance of `AviatrixPrivateModeLbArrayInput` via:
//
//	AviatrixPrivateModeLbArray{ AviatrixPrivateModeLbArgs{...} }
type AviatrixPrivateModeLbArrayInput interface {
	pulumi.Input

	ToAviatrixPrivateModeLbArrayOutput() AviatrixPrivateModeLbArrayOutput
	ToAviatrixPrivateModeLbArrayOutputWithContext(context.Context) AviatrixPrivateModeLbArrayOutput
}

type AviatrixPrivateModeLbArray []AviatrixPrivateModeLbInput

func (AviatrixPrivateModeLbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixPrivateModeLb)(nil)).Elem()
}

func (i AviatrixPrivateModeLbArray) ToAviatrixPrivateModeLbArrayOutput() AviatrixPrivateModeLbArrayOutput {
	return i.ToAviatrixPrivateModeLbArrayOutputWithContext(context.Background())
}

func (i AviatrixPrivateModeLbArray) ToAviatrixPrivateModeLbArrayOutputWithContext(ctx context.Context) AviatrixPrivateModeLbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixPrivateModeLbArrayOutput)
}

// AviatrixPrivateModeLbMapInput is an input type that accepts AviatrixPrivateModeLbMap and AviatrixPrivateModeLbMapOutput values.
// You can construct a concrete instance of `AviatrixPrivateModeLbMapInput` via:
//
//	AviatrixPrivateModeLbMap{ "key": AviatrixPrivateModeLbArgs{...} }
type AviatrixPrivateModeLbMapInput interface {
	pulumi.Input

	ToAviatrixPrivateModeLbMapOutput() AviatrixPrivateModeLbMapOutput
	ToAviatrixPrivateModeLbMapOutputWithContext(context.Context) AviatrixPrivateModeLbMapOutput
}

type AviatrixPrivateModeLbMap map[string]AviatrixPrivateModeLbInput

func (AviatrixPrivateModeLbMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixPrivateModeLb)(nil)).Elem()
}

func (i AviatrixPrivateModeLbMap) ToAviatrixPrivateModeLbMapOutput() AviatrixPrivateModeLbMapOutput {
	return i.ToAviatrixPrivateModeLbMapOutputWithContext(context.Background())
}

func (i AviatrixPrivateModeLbMap) ToAviatrixPrivateModeLbMapOutputWithContext(ctx context.Context) AviatrixPrivateModeLbMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixPrivateModeLbMapOutput)
}

type AviatrixPrivateModeLbOutput struct{ *pulumi.OutputState }

func (AviatrixPrivateModeLbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixPrivateModeLb)(nil)).Elem()
}

func (o AviatrixPrivateModeLbOutput) ToAviatrixPrivateModeLbOutput() AviatrixPrivateModeLbOutput {
	return o
}

func (o AviatrixPrivateModeLbOutput) ToAviatrixPrivateModeLbOutputWithContext(ctx context.Context) AviatrixPrivateModeLbOutput {
	return o
}

// Name of the access account.
func (o AviatrixPrivateModeLbOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixPrivateModeLb) pulumi.StringOutput { return v.AccountName }).(pulumi.StringOutput)
}

// Type of load balancer to create. Must be one of controller or multicloud.
func (o AviatrixPrivateModeLbOutput) LbType() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixPrivateModeLb) pulumi.StringOutput { return v.LbType }).(pulumi.StringOutput)
}

// VPC ID of multicloud access VPC to connect to. Required when lb_type is multicloud.
func (o AviatrixPrivateModeLbOutput) MulticloudAccessVpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixPrivateModeLb) pulumi.StringPtrOutput { return v.MulticloudAccessVpcId }).(pulumi.StringPtrOutput)
}

// List of multicloud proxies.
func (o AviatrixPrivateModeLbOutput) Proxies() AviatrixPrivateModeLbProxyArrayOutput {
	return o.ApplyT(func(v *AviatrixPrivateModeLb) AviatrixPrivateModeLbProxyArrayOutput { return v.Proxies }).(AviatrixPrivateModeLbProxyArrayOutput)
}

// Name of the VPC region.
func (o AviatrixPrivateModeLbOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixPrivateModeLb) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// ID of the VPC for the load balancer.
func (o AviatrixPrivateModeLbOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixPrivateModeLb) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type AviatrixPrivateModeLbArrayOutput struct{ *pulumi.OutputState }

func (AviatrixPrivateModeLbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixPrivateModeLb)(nil)).Elem()
}

func (o AviatrixPrivateModeLbArrayOutput) ToAviatrixPrivateModeLbArrayOutput() AviatrixPrivateModeLbArrayOutput {
	return o
}

func (o AviatrixPrivateModeLbArrayOutput) ToAviatrixPrivateModeLbArrayOutputWithContext(ctx context.Context) AviatrixPrivateModeLbArrayOutput {
	return o
}

func (o AviatrixPrivateModeLbArrayOutput) Index(i pulumi.IntInput) AviatrixPrivateModeLbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixPrivateModeLb {
		return vs[0].([]*AviatrixPrivateModeLb)[vs[1].(int)]
	}).(AviatrixPrivateModeLbOutput)
}

type AviatrixPrivateModeLbMapOutput struct{ *pulumi.OutputState }

func (AviatrixPrivateModeLbMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixPrivateModeLb)(nil)).Elem()
}

func (o AviatrixPrivateModeLbMapOutput) ToAviatrixPrivateModeLbMapOutput() AviatrixPrivateModeLbMapOutput {
	return o
}

func (o AviatrixPrivateModeLbMapOutput) ToAviatrixPrivateModeLbMapOutputWithContext(ctx context.Context) AviatrixPrivateModeLbMapOutput {
	return o
}

func (o AviatrixPrivateModeLbMapOutput) MapIndex(k pulumi.StringInput) AviatrixPrivateModeLbOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixPrivateModeLb {
		return vs[0].(map[string]*AviatrixPrivateModeLb)[vs[1].(string)]
	}).(AviatrixPrivateModeLbOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixPrivateModeLbInput)(nil)).Elem(), &AviatrixPrivateModeLb{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixPrivateModeLbArrayInput)(nil)).Elem(), AviatrixPrivateModeLbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixPrivateModeLbMapInput)(nil)).Elem(), AviatrixPrivateModeLbMap{})
	pulumi.RegisterOutputType(AviatrixPrivateModeLbOutput{})
	pulumi.RegisterOutputType(AviatrixPrivateModeLbArrayOutput{})
	pulumi.RegisterOutputType(AviatrixPrivateModeLbMapOutput{})
}
