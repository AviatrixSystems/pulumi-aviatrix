// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The **aviatrix_proxy_config** resource allows management of an Aviatrix Controller's proxy configurations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aviatrix from "@astipkovits/aviatrix";
 * import * as fs from "fs";
 *
 * // Create an Aviatrix Controller Proxy Config
 * const testProxyConfig = new aviatrix.AviatrixProxyConfig("testProxyConfig", {
 *     httpProxy: "172.31.52.145:3127",
 *     httpsProxy: "172.31.52.145:3129",
 *     proxyCaCertificate: fs.readFileSync("/path/to/ca.pem"),
 * });
 * ```
 *
 * ## Import
 *
 * **controller_proxy_config** can be imported using controller IP, e.g. controller IP is 10.11.12.13
 *
 * ```sh
 *  $ pulumi import aviatrix:index/aviatrixProxyConfig:AviatrixProxyConfig test 10-11-12-13
 * ```
 */
export class AviatrixProxyConfig extends pulumi.CustomResource {
    /**
     * Get an existing AviatrixProxyConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AviatrixProxyConfigState, opts?: pulumi.CustomResourceOptions): AviatrixProxyConfig {
        return new AviatrixProxyConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/aviatrixProxyConfig:AviatrixProxyConfig';

    /**
     * Returns true if the given object is an instance of AviatrixProxyConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AviatrixProxyConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AviatrixProxyConfig.__pulumiType;
    }

    /**
     * Http proxy URL.
     */
    public readonly httpProxy!: pulumi.Output<string>;
    /**
     * Https proxy URL.
     */
    public readonly httpsProxy!: pulumi.Output<string>;
    /**
     * Server CA Certificate file. Use the `file` function to read from a file.
     */
    public readonly proxyCaCertificate!: pulumi.Output<string | undefined>;

    /**
     * Create a AviatrixProxyConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AviatrixProxyConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AviatrixProxyConfigArgs | AviatrixProxyConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AviatrixProxyConfigState | undefined;
            resourceInputs["httpProxy"] = state ? state.httpProxy : undefined;
            resourceInputs["httpsProxy"] = state ? state.httpsProxy : undefined;
            resourceInputs["proxyCaCertificate"] = state ? state.proxyCaCertificate : undefined;
        } else {
            const args = argsOrState as AviatrixProxyConfigArgs | undefined;
            if ((!args || args.httpProxy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpProxy'");
            }
            if ((!args || args.httpsProxy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpsProxy'");
            }
            resourceInputs["httpProxy"] = args ? args.httpProxy : undefined;
            resourceInputs["httpsProxy"] = args ? args.httpsProxy : undefined;
            resourceInputs["proxyCaCertificate"] = args ? args.proxyCaCertificate : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AviatrixProxyConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AviatrixProxyConfig resources.
 */
export interface AviatrixProxyConfigState {
    /**
     * Http proxy URL.
     */
    httpProxy?: pulumi.Input<string>;
    /**
     * Https proxy URL.
     */
    httpsProxy?: pulumi.Input<string>;
    /**
     * Server CA Certificate file. Use the `file` function to read from a file.
     */
    proxyCaCertificate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AviatrixProxyConfig resource.
 */
export interface AviatrixProxyConfigArgs {
    /**
     * Http proxy URL.
     */
    httpProxy: pulumi.Input<string>;
    /**
     * Https proxy URL.
     */
    httpsProxy: pulumi.Input<string>;
    /**
     * Server CA Certificate file. Use the `file` function to read from a file.
     */
    proxyCaCertificate?: pulumi.Input<string>;
}
