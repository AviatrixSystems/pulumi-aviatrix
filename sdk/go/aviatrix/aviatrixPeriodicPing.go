// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **aviatrix_periodic_ping** resource manages the periodic ping feature for Aviatrix gateways.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/astipkovits/pulumi-aviatrix/sdk/go/aviatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aviatrix.NewAviatrixPeriodicPing(ctx, "testPing", &aviatrix.AviatrixPeriodicPingArgs{
//				GwName:    pulumi.String("test-gw"),
//				Interval:  pulumi.Int(600),
//				IpAddress: pulumi.String("127.0.0.1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// **aviatrix_periodic_ping** can be imported using the `gw_name`, e.g.
//
// ```sh
//
//	$ pulumi import aviatrix:index/aviatrixPeriodicPing:AviatrixPeriodicPing test gw_name
//
// ```
type AviatrixPeriodicPing struct {
	pulumi.CustomResourceState

	// Name of the gateway.
	GwName pulumi.StringOutput `pulumi:"gwName"`
	// Interval between pings in seconds.
	Interval pulumi.IntOutput `pulumi:"interval"`
	// IP Address to ping.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
}

// NewAviatrixPeriodicPing registers a new resource with the given unique name, arguments, and options.
func NewAviatrixPeriodicPing(ctx *pulumi.Context,
	name string, args *AviatrixPeriodicPingArgs, opts ...pulumi.ResourceOption) (*AviatrixPeriodicPing, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GwName == nil {
		return nil, errors.New("invalid value for required argument 'GwName'")
	}
	if args.Interval == nil {
		return nil, errors.New("invalid value for required argument 'Interval'")
	}
	if args.IpAddress == nil {
		return nil, errors.New("invalid value for required argument 'IpAddress'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixPeriodicPing
	err := ctx.RegisterResource("aviatrix:index/aviatrixPeriodicPing:AviatrixPeriodicPing", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixPeriodicPing gets an existing AviatrixPeriodicPing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixPeriodicPing(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixPeriodicPingState, opts ...pulumi.ResourceOption) (*AviatrixPeriodicPing, error) {
	var resource AviatrixPeriodicPing
	err := ctx.ReadResource("aviatrix:index/aviatrixPeriodicPing:AviatrixPeriodicPing", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixPeriodicPing resources.
type aviatrixPeriodicPingState struct {
	// Name of the gateway.
	GwName *string `pulumi:"gwName"`
	// Interval between pings in seconds.
	Interval *int `pulumi:"interval"`
	// IP Address to ping.
	IpAddress *string `pulumi:"ipAddress"`
}

type AviatrixPeriodicPingState struct {
	// Name of the gateway.
	GwName pulumi.StringPtrInput
	// Interval between pings in seconds.
	Interval pulumi.IntPtrInput
	// IP Address to ping.
	IpAddress pulumi.StringPtrInput
}

func (AviatrixPeriodicPingState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixPeriodicPingState)(nil)).Elem()
}

type aviatrixPeriodicPingArgs struct {
	// Name of the gateway.
	GwName string `pulumi:"gwName"`
	// Interval between pings in seconds.
	Interval int `pulumi:"interval"`
	// IP Address to ping.
	IpAddress string `pulumi:"ipAddress"`
}

// The set of arguments for constructing a AviatrixPeriodicPing resource.
type AviatrixPeriodicPingArgs struct {
	// Name of the gateway.
	GwName pulumi.StringInput
	// Interval between pings in seconds.
	Interval pulumi.IntInput
	// IP Address to ping.
	IpAddress pulumi.StringInput
}

func (AviatrixPeriodicPingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixPeriodicPingArgs)(nil)).Elem()
}

type AviatrixPeriodicPingInput interface {
	pulumi.Input

	ToAviatrixPeriodicPingOutput() AviatrixPeriodicPingOutput
	ToAviatrixPeriodicPingOutputWithContext(ctx context.Context) AviatrixPeriodicPingOutput
}

func (*AviatrixPeriodicPing) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixPeriodicPing)(nil)).Elem()
}

func (i *AviatrixPeriodicPing) ToAviatrixPeriodicPingOutput() AviatrixPeriodicPingOutput {
	return i.ToAviatrixPeriodicPingOutputWithContext(context.Background())
}

func (i *AviatrixPeriodicPing) ToAviatrixPeriodicPingOutputWithContext(ctx context.Context) AviatrixPeriodicPingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixPeriodicPingOutput)
}

// AviatrixPeriodicPingArrayInput is an input type that accepts AviatrixPeriodicPingArray and AviatrixPeriodicPingArrayOutput values.
// You can construct a concrete instance of `AviatrixPeriodicPingArrayInput` via:
//
//	AviatrixPeriodicPingArray{ AviatrixPeriodicPingArgs{...} }
type AviatrixPeriodicPingArrayInput interface {
	pulumi.Input

	ToAviatrixPeriodicPingArrayOutput() AviatrixPeriodicPingArrayOutput
	ToAviatrixPeriodicPingArrayOutputWithContext(context.Context) AviatrixPeriodicPingArrayOutput
}

type AviatrixPeriodicPingArray []AviatrixPeriodicPingInput

func (AviatrixPeriodicPingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixPeriodicPing)(nil)).Elem()
}

func (i AviatrixPeriodicPingArray) ToAviatrixPeriodicPingArrayOutput() AviatrixPeriodicPingArrayOutput {
	return i.ToAviatrixPeriodicPingArrayOutputWithContext(context.Background())
}

func (i AviatrixPeriodicPingArray) ToAviatrixPeriodicPingArrayOutputWithContext(ctx context.Context) AviatrixPeriodicPingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixPeriodicPingArrayOutput)
}

// AviatrixPeriodicPingMapInput is an input type that accepts AviatrixPeriodicPingMap and AviatrixPeriodicPingMapOutput values.
// You can construct a concrete instance of `AviatrixPeriodicPingMapInput` via:
//
//	AviatrixPeriodicPingMap{ "key": AviatrixPeriodicPingArgs{...} }
type AviatrixPeriodicPingMapInput interface {
	pulumi.Input

	ToAviatrixPeriodicPingMapOutput() AviatrixPeriodicPingMapOutput
	ToAviatrixPeriodicPingMapOutputWithContext(context.Context) AviatrixPeriodicPingMapOutput
}

type AviatrixPeriodicPingMap map[string]AviatrixPeriodicPingInput

func (AviatrixPeriodicPingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixPeriodicPing)(nil)).Elem()
}

func (i AviatrixPeriodicPingMap) ToAviatrixPeriodicPingMapOutput() AviatrixPeriodicPingMapOutput {
	return i.ToAviatrixPeriodicPingMapOutputWithContext(context.Background())
}

func (i AviatrixPeriodicPingMap) ToAviatrixPeriodicPingMapOutputWithContext(ctx context.Context) AviatrixPeriodicPingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixPeriodicPingMapOutput)
}

type AviatrixPeriodicPingOutput struct{ *pulumi.OutputState }

func (AviatrixPeriodicPingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixPeriodicPing)(nil)).Elem()
}

func (o AviatrixPeriodicPingOutput) ToAviatrixPeriodicPingOutput() AviatrixPeriodicPingOutput {
	return o
}

func (o AviatrixPeriodicPingOutput) ToAviatrixPeriodicPingOutputWithContext(ctx context.Context) AviatrixPeriodicPingOutput {
	return o
}

// Name of the gateway.
func (o AviatrixPeriodicPingOutput) GwName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixPeriodicPing) pulumi.StringOutput { return v.GwName }).(pulumi.StringOutput)
}

// Interval between pings in seconds.
func (o AviatrixPeriodicPingOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v *AviatrixPeriodicPing) pulumi.IntOutput { return v.Interval }).(pulumi.IntOutput)
}

// IP Address to ping.
func (o AviatrixPeriodicPingOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixPeriodicPing) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

type AviatrixPeriodicPingArrayOutput struct{ *pulumi.OutputState }

func (AviatrixPeriodicPingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixPeriodicPing)(nil)).Elem()
}

func (o AviatrixPeriodicPingArrayOutput) ToAviatrixPeriodicPingArrayOutput() AviatrixPeriodicPingArrayOutput {
	return o
}

func (o AviatrixPeriodicPingArrayOutput) ToAviatrixPeriodicPingArrayOutputWithContext(ctx context.Context) AviatrixPeriodicPingArrayOutput {
	return o
}

func (o AviatrixPeriodicPingArrayOutput) Index(i pulumi.IntInput) AviatrixPeriodicPingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixPeriodicPing {
		return vs[0].([]*AviatrixPeriodicPing)[vs[1].(int)]
	}).(AviatrixPeriodicPingOutput)
}

type AviatrixPeriodicPingMapOutput struct{ *pulumi.OutputState }

func (AviatrixPeriodicPingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixPeriodicPing)(nil)).Elem()
}

func (o AviatrixPeriodicPingMapOutput) ToAviatrixPeriodicPingMapOutput() AviatrixPeriodicPingMapOutput {
	return o
}

func (o AviatrixPeriodicPingMapOutput) ToAviatrixPeriodicPingMapOutputWithContext(ctx context.Context) AviatrixPeriodicPingMapOutput {
	return o
}

func (o AviatrixPeriodicPingMapOutput) MapIndex(k pulumi.StringInput) AviatrixPeriodicPingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixPeriodicPing {
		return vs[0].(map[string]*AviatrixPeriodicPing)[vs[1].(string)]
	}).(AviatrixPeriodicPingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixPeriodicPingInput)(nil)).Elem(), &AviatrixPeriodicPing{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixPeriodicPingArrayInput)(nil)).Elem(), AviatrixPeriodicPingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixPeriodicPingMapInput)(nil)).Elem(), AviatrixPeriodicPingMap{})
	pulumi.RegisterOutputType(AviatrixPeriodicPingOutput{})
	pulumi.RegisterOutputType(AviatrixPeriodicPingArrayOutput{})
	pulumi.RegisterOutputType(AviatrixPeriodicPingMapOutput{})
}
