// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixMicrosegPolicyList struct {
	pulumi.CustomResourceState

	// List of micro-segmentation policies.
	Policies AviatrixMicrosegPolicyListPolicyArrayOutput `pulumi:"policies"`
}

// NewAviatrixMicrosegPolicyList registers a new resource with the given unique name, arguments, and options.
func NewAviatrixMicrosegPolicyList(ctx *pulumi.Context,
	name string, args *AviatrixMicrosegPolicyListArgs, opts ...pulumi.ResourceOption) (*AviatrixMicrosegPolicyList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Policies == nil {
		return nil, errors.New("invalid value for required argument 'Policies'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixMicrosegPolicyList
	err := ctx.RegisterResource("aviatrix:index/aviatrixMicrosegPolicyList:AviatrixMicrosegPolicyList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixMicrosegPolicyList gets an existing AviatrixMicrosegPolicyList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixMicrosegPolicyList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixMicrosegPolicyListState, opts ...pulumi.ResourceOption) (*AviatrixMicrosegPolicyList, error) {
	var resource AviatrixMicrosegPolicyList
	err := ctx.ReadResource("aviatrix:index/aviatrixMicrosegPolicyList:AviatrixMicrosegPolicyList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixMicrosegPolicyList resources.
type aviatrixMicrosegPolicyListState struct {
	// List of micro-segmentation policies.
	Policies []AviatrixMicrosegPolicyListPolicy `pulumi:"policies"`
}

type AviatrixMicrosegPolicyListState struct {
	// List of micro-segmentation policies.
	Policies AviatrixMicrosegPolicyListPolicyArrayInput
}

func (AviatrixMicrosegPolicyListState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixMicrosegPolicyListState)(nil)).Elem()
}

type aviatrixMicrosegPolicyListArgs struct {
	// List of micro-segmentation policies.
	Policies []AviatrixMicrosegPolicyListPolicy `pulumi:"policies"`
}

// The set of arguments for constructing a AviatrixMicrosegPolicyList resource.
type AviatrixMicrosegPolicyListArgs struct {
	// List of micro-segmentation policies.
	Policies AviatrixMicrosegPolicyListPolicyArrayInput
}

func (AviatrixMicrosegPolicyListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixMicrosegPolicyListArgs)(nil)).Elem()
}

type AviatrixMicrosegPolicyListInput interface {
	pulumi.Input

	ToAviatrixMicrosegPolicyListOutput() AviatrixMicrosegPolicyListOutput
	ToAviatrixMicrosegPolicyListOutputWithContext(ctx context.Context) AviatrixMicrosegPolicyListOutput
}

func (*AviatrixMicrosegPolicyList) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixMicrosegPolicyList)(nil)).Elem()
}

func (i *AviatrixMicrosegPolicyList) ToAviatrixMicrosegPolicyListOutput() AviatrixMicrosegPolicyListOutput {
	return i.ToAviatrixMicrosegPolicyListOutputWithContext(context.Background())
}

func (i *AviatrixMicrosegPolicyList) ToAviatrixMicrosegPolicyListOutputWithContext(ctx context.Context) AviatrixMicrosegPolicyListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixMicrosegPolicyListOutput)
}

// AviatrixMicrosegPolicyListArrayInput is an input type that accepts AviatrixMicrosegPolicyListArray and AviatrixMicrosegPolicyListArrayOutput values.
// You can construct a concrete instance of `AviatrixMicrosegPolicyListArrayInput` via:
//
//	AviatrixMicrosegPolicyListArray{ AviatrixMicrosegPolicyListArgs{...} }
type AviatrixMicrosegPolicyListArrayInput interface {
	pulumi.Input

	ToAviatrixMicrosegPolicyListArrayOutput() AviatrixMicrosegPolicyListArrayOutput
	ToAviatrixMicrosegPolicyListArrayOutputWithContext(context.Context) AviatrixMicrosegPolicyListArrayOutput
}

type AviatrixMicrosegPolicyListArray []AviatrixMicrosegPolicyListInput

func (AviatrixMicrosegPolicyListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixMicrosegPolicyList)(nil)).Elem()
}

func (i AviatrixMicrosegPolicyListArray) ToAviatrixMicrosegPolicyListArrayOutput() AviatrixMicrosegPolicyListArrayOutput {
	return i.ToAviatrixMicrosegPolicyListArrayOutputWithContext(context.Background())
}

func (i AviatrixMicrosegPolicyListArray) ToAviatrixMicrosegPolicyListArrayOutputWithContext(ctx context.Context) AviatrixMicrosegPolicyListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixMicrosegPolicyListArrayOutput)
}

// AviatrixMicrosegPolicyListMapInput is an input type that accepts AviatrixMicrosegPolicyListMap and AviatrixMicrosegPolicyListMapOutput values.
// You can construct a concrete instance of `AviatrixMicrosegPolicyListMapInput` via:
//
//	AviatrixMicrosegPolicyListMap{ "key": AviatrixMicrosegPolicyListArgs{...} }
type AviatrixMicrosegPolicyListMapInput interface {
	pulumi.Input

	ToAviatrixMicrosegPolicyListMapOutput() AviatrixMicrosegPolicyListMapOutput
	ToAviatrixMicrosegPolicyListMapOutputWithContext(context.Context) AviatrixMicrosegPolicyListMapOutput
}

type AviatrixMicrosegPolicyListMap map[string]AviatrixMicrosegPolicyListInput

func (AviatrixMicrosegPolicyListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixMicrosegPolicyList)(nil)).Elem()
}

func (i AviatrixMicrosegPolicyListMap) ToAviatrixMicrosegPolicyListMapOutput() AviatrixMicrosegPolicyListMapOutput {
	return i.ToAviatrixMicrosegPolicyListMapOutputWithContext(context.Background())
}

func (i AviatrixMicrosegPolicyListMap) ToAviatrixMicrosegPolicyListMapOutputWithContext(ctx context.Context) AviatrixMicrosegPolicyListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixMicrosegPolicyListMapOutput)
}

type AviatrixMicrosegPolicyListOutput struct{ *pulumi.OutputState }

func (AviatrixMicrosegPolicyListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixMicrosegPolicyList)(nil)).Elem()
}

func (o AviatrixMicrosegPolicyListOutput) ToAviatrixMicrosegPolicyListOutput() AviatrixMicrosegPolicyListOutput {
	return o
}

func (o AviatrixMicrosegPolicyListOutput) ToAviatrixMicrosegPolicyListOutputWithContext(ctx context.Context) AviatrixMicrosegPolicyListOutput {
	return o
}

// List of micro-segmentation policies.
func (o AviatrixMicrosegPolicyListOutput) Policies() AviatrixMicrosegPolicyListPolicyArrayOutput {
	return o.ApplyT(func(v *AviatrixMicrosegPolicyList) AviatrixMicrosegPolicyListPolicyArrayOutput { return v.Policies }).(AviatrixMicrosegPolicyListPolicyArrayOutput)
}

type AviatrixMicrosegPolicyListArrayOutput struct{ *pulumi.OutputState }

func (AviatrixMicrosegPolicyListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixMicrosegPolicyList)(nil)).Elem()
}

func (o AviatrixMicrosegPolicyListArrayOutput) ToAviatrixMicrosegPolicyListArrayOutput() AviatrixMicrosegPolicyListArrayOutput {
	return o
}

func (o AviatrixMicrosegPolicyListArrayOutput) ToAviatrixMicrosegPolicyListArrayOutputWithContext(ctx context.Context) AviatrixMicrosegPolicyListArrayOutput {
	return o
}

func (o AviatrixMicrosegPolicyListArrayOutput) Index(i pulumi.IntInput) AviatrixMicrosegPolicyListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixMicrosegPolicyList {
		return vs[0].([]*AviatrixMicrosegPolicyList)[vs[1].(int)]
	}).(AviatrixMicrosegPolicyListOutput)
}

type AviatrixMicrosegPolicyListMapOutput struct{ *pulumi.OutputState }

func (AviatrixMicrosegPolicyListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixMicrosegPolicyList)(nil)).Elem()
}

func (o AviatrixMicrosegPolicyListMapOutput) ToAviatrixMicrosegPolicyListMapOutput() AviatrixMicrosegPolicyListMapOutput {
	return o
}

func (o AviatrixMicrosegPolicyListMapOutput) ToAviatrixMicrosegPolicyListMapOutputWithContext(ctx context.Context) AviatrixMicrosegPolicyListMapOutput {
	return o
}

func (o AviatrixMicrosegPolicyListMapOutput) MapIndex(k pulumi.StringInput) AviatrixMicrosegPolicyListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixMicrosegPolicyList {
		return vs[0].(map[string]*AviatrixMicrosegPolicyList)[vs[1].(string)]
	}).(AviatrixMicrosegPolicyListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixMicrosegPolicyListInput)(nil)).Elem(), &AviatrixMicrosegPolicyList{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixMicrosegPolicyListArrayInput)(nil)).Elem(), AviatrixMicrosegPolicyListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixMicrosegPolicyListMapInput)(nil)).Elem(), AviatrixMicrosegPolicyListMap{})
	pulumi.RegisterOutputType(AviatrixMicrosegPolicyListOutput{})
	pulumi.RegisterOutputType(AviatrixMicrosegPolicyListArrayOutput{})
	pulumi.RegisterOutputType(AviatrixMicrosegPolicyListMapOutput{})
}
