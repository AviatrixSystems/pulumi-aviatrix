// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The **aviatrix_controller_config** resource allows management of an Aviatrix Controller's configurations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aviatrix from "@pulumi/aviatrix";
 *
 * // Create an Aviatrix Controller Config
 * const testControllerConfig = new aviatrix.AviatrixControllerConfig("test_controller_config", {
 *     fqdnExceptionRule: false,
 *     httpAccess: true,
 * });
 * ```
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aviatrix from "@pulumi/aviatrix";
 *
 * // Create an Aviatrix Controller Config with Controller Upgrade Without Upgrading Gateways
 * const testControllerConfig = new aviatrix.AviatrixControllerConfig("test_controller_config", {
 *     fqdnExceptionRule: false,
 *     httpAccess: true,
 *     manageGatewayUpgrades: false,
 *     targetVersion: "latest",
 * });
 * ```
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aviatrix from "@pulumi/aviatrix";
 *
 * // Create an Aviatrix Controller Config with Controller Upgrade + Upgrade All Gateways
 * const testControllerConfig = new aviatrix.AviatrixControllerConfig("test_controller_config", {
 *     fqdnExceptionRule: false,
 *     httpAccess: true,
 *     targetVersion: "latest",
 * });
 * ```
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aviatrix from "@pulumi/aviatrix";
 *
 * // Create an Aviatrix Controller Config with Cloudn Backup Configuration Enabled
 * const testControllerConfig = new aviatrix.AviatrixControllerConfig("test_controller_config", {
 *     backupAccountName: "account_example",
 *     backupBucketName: "bucket_example",
 *     backupCloudType: 1,
 *     backupConfiguration: true,
 * });
 * ```
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aviatrix from "@pulumi/aviatrix";
 *
 * // Create an Aviatrix Controller Config and import HTTPS certificates
 * const testControllerConfig = new aviatrix.AviatrixControllerConfig("test_controller_config", {
 *     caCertificateFilePath: "/path/to/ca_certificate.pem",
 *     serverPrivateKeyFilePath: "/path/to/server.key",
 *     serverPublicCertificateFilePath: "/path/to/server.crt",
 * });
 * ```
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aviatrix from "@pulumi/aviatrix";
 *
 * // Create an Aviatrix Controller Config and configure the AWS Guard Duty Scanning Interval
 * const testControllerConfig = new aviatrix.AviatrixControllerConfig("test_controller_config", {
 *     awsGuardDutyScanningInterval: 10,
 * });
 * ```
 *
 * ## Import
 *
 * Instance controller_config can be imported using controller IP, e.g. controller IP is 10.11.12.13
 *
 * ```sh
 *  $ pulumi import aviatrix:index/aviatrixControllerConfig:AviatrixControllerConfig test 10-11-12-13
 * ```
 */
export class AviatrixControllerConfig extends pulumi.CustomResource {
    /**
     * Get an existing AviatrixControllerConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AviatrixControllerConfigState, opts?: pulumi.CustomResourceOptions): AviatrixControllerConfig {
        return new AviatrixControllerConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/aviatrixControllerConfig:AviatrixControllerConfig';

    /**
     * Returns true if the given object is an instance of AviatrixControllerConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AviatrixControllerConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AviatrixControllerConfig.__pulumiType;
    }

    /**
     * Configure the AWS Guard Duty scanning interval. Valid values: 5, 10, 15, 30 or 60. Default value: 60. Available as of provider version R2.18+.
     */
    public readonly awsGuardDutyScanningInterval!: pulumi.Output<number | undefined>;
    /**
     * Name of the cloud account in the Aviatrix controller.
     */
    public readonly backupAccountName!: pulumi.Output<string | undefined>;
    /**
     * Bucket Name. Required to enable configuration backup for AWS, AWSGov, GCP and OCI.
     */
    public readonly backupBucketName!: pulumi.Output<string | undefined>;
    /**
     * Type of cloud service provider, requires an integer value. Use 1 for AWS, 4 for GCP, 8 for Azure, 16 for OCI, and 256 for AWSGov.
     */
    public readonly backupCloudType!: pulumi.Output<number | undefined>;
    /**
     * Switch to enable/disable controller CloudN backup config. Valid values: true, false. Default value: false.
     */
    public readonly backupConfiguration!: pulumi.Output<boolean | undefined>;
    /**
     * Container name. Required to enable configuration backup for Azure.
     */
    public readonly backupContainerName!: pulumi.Output<string | undefined>;
    /**
     * Name of region. Required to enable configuration backup for Azure and OCI.
     */
    public readonly backupRegion!: pulumi.Output<string | undefined>;
    /**
     * Storage name. Required to enable configuration backup for Azure.
     */
    public readonly backupStorageName!: pulumi.Output<string | undefined>;
    /**
     * CA certificate. To read certificate file from a file, please use the built-in `file` function. Available as of provider version R2.21.2+.
     */
    public readonly caCertificateFile!: pulumi.Output<string | undefined>;
    /**
     * File path to CA certificate. Available as of provider version R2.18+.
     */
    public readonly caCertificateFilePath!: pulumi.Output<string | undefined>;
    /**
     * Current version of the controller including the build number. Example: "6.5.123". Available as of provider version R2.20.0+.
     */
    public /*out*/ readonly currentVersion!: pulumi.Output<string>;
    /**
     * Enable VPC/VNET DNS Server for the controller. Valid values: true, false. Default value: false.
     */
    public readonly enableVpcDnsServer!: pulumi.Output<boolean | undefined>;
    /**
     * Enable/disable packets without an SNI field to pass through gateway(s). Valid values: true, false. Default value: true. For more information on this setting, please see [here](https://docs.aviatrix.com/HowTos/FQDN_Whitelists_Ref_Design.html#exception-rule)
     */
    public readonly fqdnExceptionRule!: pulumi.Output<boolean | undefined>;
    /**
     * Switch for HTTP access. Valid values: true, false. Default value: false.
     */
    public readonly httpAccess!: pulumi.Output<boolean | undefined>;
    /**
     * If true, aviatrix.AviatrixControllerConfig will upgrade all gateways when targetVersion is set. If false, only the controller will be upgraded when targetVersion is set. In that case gateway upgrades should be handled in each gateway resource individually using the softwareVersion and imageVersion attributes. Type: boolean. Default: true. Available as of provider version R2.20.0+.
     */
    public readonly manageGatewayUpgrades!: pulumi.Output<boolean | undefined>;
    /**
     * Switch to enable the Controller to backup up to a maximum of 3 rotating backups. Valid values: true, false. Default value: false.
     */
    public readonly multipleBackups!: pulumi.Output<boolean | undefined>;
    /**
     * Previous version of the controller including the build number. Example: "6.5.123". Available as of provider version R2.20.0+.
     */
    public /*out*/ readonly previousVersion!: pulumi.Output<string>;
    /**
     * Server private key. To read the private key from a file, please use the built-in `file` function. Available as of provider version R2.21.2+.
     */
    public readonly serverPrivateKeyFile!: pulumi.Output<string | undefined>;
    /**
     * File path to server private key. Available as of provider version R2.18+.
     */
    public readonly serverPrivateKeyFilePath!: pulumi.Output<string | undefined>;
    /**
     * Server public certificate. To read certificate file from a file, please use the built-in `file` function. Available as of provider version R2.21.2+.
     */
    public readonly serverPublicCertificateFile!: pulumi.Output<string | undefined>;
    /**
     * File path to the server public certificate. Available as of provider version R2.18+.
     */
    public readonly serverPublicCertificateFilePath!: pulumi.Output<string | undefined>;
    /**
     * The release version number to which the controller will be upgraded to. If not specified, controller will not be upgraded. If set to "latest", controller will be upgraded to the latest release. Please see the [Controller upgrade guide](https://docs.aviatrix.com/HowTos/inline_upgrade.html) for more information.
     */
    public readonly targetVersion!: pulumi.Output<string | undefined>;
    /**
     * Current version of the controller without build number. Example: "6.5"
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a AviatrixControllerConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AviatrixControllerConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AviatrixControllerConfigArgs | AviatrixControllerConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AviatrixControllerConfigState | undefined;
            resourceInputs["awsGuardDutyScanningInterval"] = state ? state.awsGuardDutyScanningInterval : undefined;
            resourceInputs["backupAccountName"] = state ? state.backupAccountName : undefined;
            resourceInputs["backupBucketName"] = state ? state.backupBucketName : undefined;
            resourceInputs["backupCloudType"] = state ? state.backupCloudType : undefined;
            resourceInputs["backupConfiguration"] = state ? state.backupConfiguration : undefined;
            resourceInputs["backupContainerName"] = state ? state.backupContainerName : undefined;
            resourceInputs["backupRegion"] = state ? state.backupRegion : undefined;
            resourceInputs["backupStorageName"] = state ? state.backupStorageName : undefined;
            resourceInputs["caCertificateFile"] = state ? state.caCertificateFile : undefined;
            resourceInputs["caCertificateFilePath"] = state ? state.caCertificateFilePath : undefined;
            resourceInputs["currentVersion"] = state ? state.currentVersion : undefined;
            resourceInputs["enableVpcDnsServer"] = state ? state.enableVpcDnsServer : undefined;
            resourceInputs["fqdnExceptionRule"] = state ? state.fqdnExceptionRule : undefined;
            resourceInputs["httpAccess"] = state ? state.httpAccess : undefined;
            resourceInputs["manageGatewayUpgrades"] = state ? state.manageGatewayUpgrades : undefined;
            resourceInputs["multipleBackups"] = state ? state.multipleBackups : undefined;
            resourceInputs["previousVersion"] = state ? state.previousVersion : undefined;
            resourceInputs["serverPrivateKeyFile"] = state ? state.serverPrivateKeyFile : undefined;
            resourceInputs["serverPrivateKeyFilePath"] = state ? state.serverPrivateKeyFilePath : undefined;
            resourceInputs["serverPublicCertificateFile"] = state ? state.serverPublicCertificateFile : undefined;
            resourceInputs["serverPublicCertificateFilePath"] = state ? state.serverPublicCertificateFilePath : undefined;
            resourceInputs["targetVersion"] = state ? state.targetVersion : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as AviatrixControllerConfigArgs | undefined;
            resourceInputs["awsGuardDutyScanningInterval"] = args ? args.awsGuardDutyScanningInterval : undefined;
            resourceInputs["backupAccountName"] = args ? args.backupAccountName : undefined;
            resourceInputs["backupBucketName"] = args ? args.backupBucketName : undefined;
            resourceInputs["backupCloudType"] = args ? args.backupCloudType : undefined;
            resourceInputs["backupConfiguration"] = args ? args.backupConfiguration : undefined;
            resourceInputs["backupContainerName"] = args ? args.backupContainerName : undefined;
            resourceInputs["backupRegion"] = args ? args.backupRegion : undefined;
            resourceInputs["backupStorageName"] = args ? args.backupStorageName : undefined;
            resourceInputs["caCertificateFile"] = args?.caCertificateFile ? pulumi.secret(args.caCertificateFile) : undefined;
            resourceInputs["caCertificateFilePath"] = args ? args.caCertificateFilePath : undefined;
            resourceInputs["enableVpcDnsServer"] = args ? args.enableVpcDnsServer : undefined;
            resourceInputs["fqdnExceptionRule"] = args ? args.fqdnExceptionRule : undefined;
            resourceInputs["httpAccess"] = args ? args.httpAccess : undefined;
            resourceInputs["manageGatewayUpgrades"] = args ? args.manageGatewayUpgrades : undefined;
            resourceInputs["multipleBackups"] = args ? args.multipleBackups : undefined;
            resourceInputs["serverPrivateKeyFile"] = args?.serverPrivateKeyFile ? pulumi.secret(args.serverPrivateKeyFile) : undefined;
            resourceInputs["serverPrivateKeyFilePath"] = args ? args.serverPrivateKeyFilePath : undefined;
            resourceInputs["serverPublicCertificateFile"] = args?.serverPublicCertificateFile ? pulumi.secret(args.serverPublicCertificateFile) : undefined;
            resourceInputs["serverPublicCertificateFilePath"] = args ? args.serverPublicCertificateFilePath : undefined;
            resourceInputs["targetVersion"] = args ? args.targetVersion : undefined;
            resourceInputs["currentVersion"] = undefined /*out*/;
            resourceInputs["previousVersion"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["caCertificateFile", "serverPrivateKeyFile", "serverPublicCertificateFile"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AviatrixControllerConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AviatrixControllerConfig resources.
 */
export interface AviatrixControllerConfigState {
    /**
     * Configure the AWS Guard Duty scanning interval. Valid values: 5, 10, 15, 30 or 60. Default value: 60. Available as of provider version R2.18+.
     */
    awsGuardDutyScanningInterval?: pulumi.Input<number>;
    /**
     * Name of the cloud account in the Aviatrix controller.
     */
    backupAccountName?: pulumi.Input<string>;
    /**
     * Bucket Name. Required to enable configuration backup for AWS, AWSGov, GCP and OCI.
     */
    backupBucketName?: pulumi.Input<string>;
    /**
     * Type of cloud service provider, requires an integer value. Use 1 for AWS, 4 for GCP, 8 for Azure, 16 for OCI, and 256 for AWSGov.
     */
    backupCloudType?: pulumi.Input<number>;
    /**
     * Switch to enable/disable controller CloudN backup config. Valid values: true, false. Default value: false.
     */
    backupConfiguration?: pulumi.Input<boolean>;
    /**
     * Container name. Required to enable configuration backup for Azure.
     */
    backupContainerName?: pulumi.Input<string>;
    /**
     * Name of region. Required to enable configuration backup for Azure and OCI.
     */
    backupRegion?: pulumi.Input<string>;
    /**
     * Storage name. Required to enable configuration backup for Azure.
     */
    backupStorageName?: pulumi.Input<string>;
    /**
     * CA certificate. To read certificate file from a file, please use the built-in `file` function. Available as of provider version R2.21.2+.
     */
    caCertificateFile?: pulumi.Input<string>;
    /**
     * File path to CA certificate. Available as of provider version R2.18+.
     */
    caCertificateFilePath?: pulumi.Input<string>;
    /**
     * Current version of the controller including the build number. Example: "6.5.123". Available as of provider version R2.20.0+.
     */
    currentVersion?: pulumi.Input<string>;
    /**
     * Enable VPC/VNET DNS Server for the controller. Valid values: true, false. Default value: false.
     */
    enableVpcDnsServer?: pulumi.Input<boolean>;
    /**
     * Enable/disable packets without an SNI field to pass through gateway(s). Valid values: true, false. Default value: true. For more information on this setting, please see [here](https://docs.aviatrix.com/HowTos/FQDN_Whitelists_Ref_Design.html#exception-rule)
     */
    fqdnExceptionRule?: pulumi.Input<boolean>;
    /**
     * Switch for HTTP access. Valid values: true, false. Default value: false.
     */
    httpAccess?: pulumi.Input<boolean>;
    /**
     * If true, aviatrix.AviatrixControllerConfig will upgrade all gateways when targetVersion is set. If false, only the controller will be upgraded when targetVersion is set. In that case gateway upgrades should be handled in each gateway resource individually using the softwareVersion and imageVersion attributes. Type: boolean. Default: true. Available as of provider version R2.20.0+.
     */
    manageGatewayUpgrades?: pulumi.Input<boolean>;
    /**
     * Switch to enable the Controller to backup up to a maximum of 3 rotating backups. Valid values: true, false. Default value: false.
     */
    multipleBackups?: pulumi.Input<boolean>;
    /**
     * Previous version of the controller including the build number. Example: "6.5.123". Available as of provider version R2.20.0+.
     */
    previousVersion?: pulumi.Input<string>;
    /**
     * Server private key. To read the private key from a file, please use the built-in `file` function. Available as of provider version R2.21.2+.
     */
    serverPrivateKeyFile?: pulumi.Input<string>;
    /**
     * File path to server private key. Available as of provider version R2.18+.
     */
    serverPrivateKeyFilePath?: pulumi.Input<string>;
    /**
     * Server public certificate. To read certificate file from a file, please use the built-in `file` function. Available as of provider version R2.21.2+.
     */
    serverPublicCertificateFile?: pulumi.Input<string>;
    /**
     * File path to the server public certificate. Available as of provider version R2.18+.
     */
    serverPublicCertificateFilePath?: pulumi.Input<string>;
    /**
     * The release version number to which the controller will be upgraded to. If not specified, controller will not be upgraded. If set to "latest", controller will be upgraded to the latest release. Please see the [Controller upgrade guide](https://docs.aviatrix.com/HowTos/inline_upgrade.html) for more information.
     */
    targetVersion?: pulumi.Input<string>;
    /**
     * Current version of the controller without build number. Example: "6.5"
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AviatrixControllerConfig resource.
 */
export interface AviatrixControllerConfigArgs {
    /**
     * Configure the AWS Guard Duty scanning interval. Valid values: 5, 10, 15, 30 or 60. Default value: 60. Available as of provider version R2.18+.
     */
    awsGuardDutyScanningInterval?: pulumi.Input<number>;
    /**
     * Name of the cloud account in the Aviatrix controller.
     */
    backupAccountName?: pulumi.Input<string>;
    /**
     * Bucket Name. Required to enable configuration backup for AWS, AWSGov, GCP and OCI.
     */
    backupBucketName?: pulumi.Input<string>;
    /**
     * Type of cloud service provider, requires an integer value. Use 1 for AWS, 4 for GCP, 8 for Azure, 16 for OCI, and 256 for AWSGov.
     */
    backupCloudType?: pulumi.Input<number>;
    /**
     * Switch to enable/disable controller CloudN backup config. Valid values: true, false. Default value: false.
     */
    backupConfiguration?: pulumi.Input<boolean>;
    /**
     * Container name. Required to enable configuration backup for Azure.
     */
    backupContainerName?: pulumi.Input<string>;
    /**
     * Name of region. Required to enable configuration backup for Azure and OCI.
     */
    backupRegion?: pulumi.Input<string>;
    /**
     * Storage name. Required to enable configuration backup for Azure.
     */
    backupStorageName?: pulumi.Input<string>;
    /**
     * CA certificate. To read certificate file from a file, please use the built-in `file` function. Available as of provider version R2.21.2+.
     */
    caCertificateFile?: pulumi.Input<string>;
    /**
     * File path to CA certificate. Available as of provider version R2.18+.
     */
    caCertificateFilePath?: pulumi.Input<string>;
    /**
     * Enable VPC/VNET DNS Server for the controller. Valid values: true, false. Default value: false.
     */
    enableVpcDnsServer?: pulumi.Input<boolean>;
    /**
     * Enable/disable packets without an SNI field to pass through gateway(s). Valid values: true, false. Default value: true. For more information on this setting, please see [here](https://docs.aviatrix.com/HowTos/FQDN_Whitelists_Ref_Design.html#exception-rule)
     */
    fqdnExceptionRule?: pulumi.Input<boolean>;
    /**
     * Switch for HTTP access. Valid values: true, false. Default value: false.
     */
    httpAccess?: pulumi.Input<boolean>;
    /**
     * If true, aviatrix.AviatrixControllerConfig will upgrade all gateways when targetVersion is set. If false, only the controller will be upgraded when targetVersion is set. In that case gateway upgrades should be handled in each gateway resource individually using the softwareVersion and imageVersion attributes. Type: boolean. Default: true. Available as of provider version R2.20.0+.
     */
    manageGatewayUpgrades?: pulumi.Input<boolean>;
    /**
     * Switch to enable the Controller to backup up to a maximum of 3 rotating backups. Valid values: true, false. Default value: false.
     */
    multipleBackups?: pulumi.Input<boolean>;
    /**
     * Server private key. To read the private key from a file, please use the built-in `file` function. Available as of provider version R2.21.2+.
     */
    serverPrivateKeyFile?: pulumi.Input<string>;
    /**
     * File path to server private key. Available as of provider version R2.18+.
     */
    serverPrivateKeyFilePath?: pulumi.Input<string>;
    /**
     * Server public certificate. To read certificate file from a file, please use the built-in `file` function. Available as of provider version R2.21.2+.
     */
    serverPublicCertificateFile?: pulumi.Input<string>;
    /**
     * File path to the server public certificate. Available as of provider version R2.18+.
     */
    serverPublicCertificateFilePath?: pulumi.Input<string>;
    /**
     * The release version number to which the controller will be upgraded to. If not specified, controller will not be upgraded. If set to "latest", controller will be upgraded to the latest release. Please see the [Controller upgrade guide](https://docs.aviatrix.com/HowTos/inline_upgrade.html) for more information.
     */
    targetVersion?: pulumi.Input<string>;
}
