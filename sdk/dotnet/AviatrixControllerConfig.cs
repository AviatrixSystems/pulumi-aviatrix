// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aviatrix
{
    [AviatrixResourceType("aviatrix:index/aviatrixControllerConfig:AviatrixControllerConfig")]
    public partial class AviatrixControllerConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Scanning Interval for AWS Guard Duty.
        /// </summary>
        [Output("awsGuardDutyScanningInterval")]
        public Output<int?> AwsGuardDutyScanningInterval { get; private set; } = null!;

        /// <summary>
        /// This parameter represents the name of a Cloud-Account in Aviatrix controller.
        /// </summary>
        [Output("backupAccountName")]
        public Output<string?> BackupAccountName { get; private set; } = null!;

        /// <summary>
        /// Bucket name. Required for AWS, AWSGov, GCP and OCI.
        /// </summary>
        [Output("backupBucketName")]
        public Output<string?> BackupBucketName { get; private set; } = null!;

        /// <summary>
        /// Type of cloud service provider, requires an integer value. Use 1 for AWS.
        /// </summary>
        [Output("backupCloudType")]
        public Output<int?> BackupCloudType { get; private set; } = null!;

        /// <summary>
        /// Switch to enable/disable controller cloudn backup config.
        /// </summary>
        [Output("backupConfiguration")]
        public Output<bool?> BackupConfiguration { get; private set; } = null!;

        /// <summary>
        /// Container name. Required for Azure.
        /// </summary>
        [Output("backupContainerName")]
        public Output<string?> BackupContainerName { get; private set; } = null!;

        /// <summary>
        /// Name of region. Required for Azure and OCI.
        /// </summary>
        [Output("backupRegion")]
        public Output<string?> BackupRegion { get; private set; } = null!;

        /// <summary>
        /// Storage name. Required for Azure.
        /// </summary>
        [Output("backupStorageName")]
        public Output<string?> BackupStorageName { get; private set; } = null!;

        /// <summary>
        /// CA certificate file.
        /// </summary>
        [Output("caCertificateFile")]
        public Output<string?> CaCertificateFile { get; private set; } = null!;

        /// <summary>
        /// File path to the CA certificate.
        /// </summary>
        [Output("caCertificateFilePath")]
        public Output<string?> CaCertificateFilePath { get; private set; } = null!;

        /// <summary>
        /// Current version of the controller.
        /// </summary>
        [Output("currentVersion")]
        public Output<string> CurrentVersion { get; private set; } = null!;

        /// <summary>
        /// Enable VPC/VNET DNS Server.
        /// </summary>
        [Output("enableVpcDnsServer")]
        public Output<bool?> EnableVpcDnsServer { get; private set; } = null!;

        /// <summary>
        /// A system-wide mode. Default: true.
        /// </summary>
        [Output("fqdnExceptionRule")]
        public Output<bool?> FqdnExceptionRule { get; private set; } = null!;

        /// <summary>
        /// Switch for http access. Default: false.
        /// </summary>
        [Output("httpAccess")]
        public Output<bool?> HttpAccess { get; private set; } = null!;

        /// <summary>
        /// If true, aviatrix_controller_config will upgrade all gateways when target_version is set. If false, only the controller
        /// will be upgraded when target_version is set. In that case gateway upgrades should be handled in each gateway resource
        /// individually using the software_version and image_version attributes.
        /// </summary>
        [Output("manageGatewayUpgrades")]
        public Output<bool?> ManageGatewayUpgrades { get; private set; } = null!;

        /// <summary>
        /// Switch to enable the controller to backup up to a maximum of 3 rotating backups.
        /// </summary>
        [Output("multipleBackups")]
        public Output<bool?> MultipleBackups { get; private set; } = null!;

        /// <summary>
        /// Previous version of the controller.
        /// </summary>
        [Output("previousVersion")]
        public Output<string> PreviousVersion { get; private set; } = null!;

        /// <summary>
        /// Server private key file.
        /// </summary>
        [Output("serverPrivateKeyFile")]
        public Output<string?> ServerPrivateKeyFile { get; private set; } = null!;

        /// <summary>
        /// File path to the server private key.
        /// </summary>
        [Output("serverPrivateKeyFilePath")]
        public Output<string?> ServerPrivateKeyFilePath { get; private set; } = null!;

        /// <summary>
        /// Server public certificate file.
        /// </summary>
        [Output("serverPublicCertificateFile")]
        public Output<string?> ServerPublicCertificateFile { get; private set; } = null!;

        /// <summary>
        /// File path to the server public certificate.
        /// </summary>
        [Output("serverPublicCertificateFilePath")]
        public Output<string?> ServerPublicCertificateFilePath { get; private set; } = null!;

        /// <summary>
        /// The release version number to which the controller will be upgraded to.
        /// </summary>
        [Output("targetVersion")]
        public Output<string?> TargetVersion { get; private set; } = null!;

        /// <summary>
        /// Current version of the controller without the build number.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a AviatrixControllerConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AviatrixControllerConfig(string name, AviatrixControllerConfigArgs? args = null, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixControllerConfig:AviatrixControllerConfig", name, args ?? new AviatrixControllerConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AviatrixControllerConfig(string name, Input<string> id, AviatrixControllerConfigState? state = null, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixControllerConfig:AviatrixControllerConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/astipkovits",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AviatrixControllerConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AviatrixControllerConfig Get(string name, Input<string> id, AviatrixControllerConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new AviatrixControllerConfig(name, id, state, options);
        }
    }

    public sealed class AviatrixControllerConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Scanning Interval for AWS Guard Duty.
        /// </summary>
        [Input("awsGuardDutyScanningInterval")]
        public Input<int>? AwsGuardDutyScanningInterval { get; set; }

        /// <summary>
        /// This parameter represents the name of a Cloud-Account in Aviatrix controller.
        /// </summary>
        [Input("backupAccountName")]
        public Input<string>? BackupAccountName { get; set; }

        /// <summary>
        /// Bucket name. Required for AWS, AWSGov, GCP and OCI.
        /// </summary>
        [Input("backupBucketName")]
        public Input<string>? BackupBucketName { get; set; }

        /// <summary>
        /// Type of cloud service provider, requires an integer value. Use 1 for AWS.
        /// </summary>
        [Input("backupCloudType")]
        public Input<int>? BackupCloudType { get; set; }

        /// <summary>
        /// Switch to enable/disable controller cloudn backup config.
        /// </summary>
        [Input("backupConfiguration")]
        public Input<bool>? BackupConfiguration { get; set; }

        /// <summary>
        /// Container name. Required for Azure.
        /// </summary>
        [Input("backupContainerName")]
        public Input<string>? BackupContainerName { get; set; }

        /// <summary>
        /// Name of region. Required for Azure and OCI.
        /// </summary>
        [Input("backupRegion")]
        public Input<string>? BackupRegion { get; set; }

        /// <summary>
        /// Storage name. Required for Azure.
        /// </summary>
        [Input("backupStorageName")]
        public Input<string>? BackupStorageName { get; set; }

        /// <summary>
        /// CA certificate file.
        /// </summary>
        [Input("caCertificateFile")]
        public Input<string>? CaCertificateFile { get; set; }

        /// <summary>
        /// File path to the CA certificate.
        /// </summary>
        [Input("caCertificateFilePath")]
        public Input<string>? CaCertificateFilePath { get; set; }

        /// <summary>
        /// Enable VPC/VNET DNS Server.
        /// </summary>
        [Input("enableVpcDnsServer")]
        public Input<bool>? EnableVpcDnsServer { get; set; }

        /// <summary>
        /// A system-wide mode. Default: true.
        /// </summary>
        [Input("fqdnExceptionRule")]
        public Input<bool>? FqdnExceptionRule { get; set; }

        /// <summary>
        /// Switch for http access. Default: false.
        /// </summary>
        [Input("httpAccess")]
        public Input<bool>? HttpAccess { get; set; }

        /// <summary>
        /// If true, aviatrix_controller_config will upgrade all gateways when target_version is set. If false, only the controller
        /// will be upgraded when target_version is set. In that case gateway upgrades should be handled in each gateway resource
        /// individually using the software_version and image_version attributes.
        /// </summary>
        [Input("manageGatewayUpgrades")]
        public Input<bool>? ManageGatewayUpgrades { get; set; }

        /// <summary>
        /// Switch to enable the controller to backup up to a maximum of 3 rotating backups.
        /// </summary>
        [Input("multipleBackups")]
        public Input<bool>? MultipleBackups { get; set; }

        /// <summary>
        /// Server private key file.
        /// </summary>
        [Input("serverPrivateKeyFile")]
        public Input<string>? ServerPrivateKeyFile { get; set; }

        /// <summary>
        /// File path to the server private key.
        /// </summary>
        [Input("serverPrivateKeyFilePath")]
        public Input<string>? ServerPrivateKeyFilePath { get; set; }

        /// <summary>
        /// Server public certificate file.
        /// </summary>
        [Input("serverPublicCertificateFile")]
        public Input<string>? ServerPublicCertificateFile { get; set; }

        /// <summary>
        /// File path to the server public certificate.
        /// </summary>
        [Input("serverPublicCertificateFilePath")]
        public Input<string>? ServerPublicCertificateFilePath { get; set; }

        /// <summary>
        /// The release version number to which the controller will be upgraded to.
        /// </summary>
        [Input("targetVersion")]
        public Input<string>? TargetVersion { get; set; }

        public AviatrixControllerConfigArgs()
        {
        }
        public static new AviatrixControllerConfigArgs Empty => new AviatrixControllerConfigArgs();
    }

    public sealed class AviatrixControllerConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Scanning Interval for AWS Guard Duty.
        /// </summary>
        [Input("awsGuardDutyScanningInterval")]
        public Input<int>? AwsGuardDutyScanningInterval { get; set; }

        /// <summary>
        /// This parameter represents the name of a Cloud-Account in Aviatrix controller.
        /// </summary>
        [Input("backupAccountName")]
        public Input<string>? BackupAccountName { get; set; }

        /// <summary>
        /// Bucket name. Required for AWS, AWSGov, GCP and OCI.
        /// </summary>
        [Input("backupBucketName")]
        public Input<string>? BackupBucketName { get; set; }

        /// <summary>
        /// Type of cloud service provider, requires an integer value. Use 1 for AWS.
        /// </summary>
        [Input("backupCloudType")]
        public Input<int>? BackupCloudType { get; set; }

        /// <summary>
        /// Switch to enable/disable controller cloudn backup config.
        /// </summary>
        [Input("backupConfiguration")]
        public Input<bool>? BackupConfiguration { get; set; }

        /// <summary>
        /// Container name. Required for Azure.
        /// </summary>
        [Input("backupContainerName")]
        public Input<string>? BackupContainerName { get; set; }

        /// <summary>
        /// Name of region. Required for Azure and OCI.
        /// </summary>
        [Input("backupRegion")]
        public Input<string>? BackupRegion { get; set; }

        /// <summary>
        /// Storage name. Required for Azure.
        /// </summary>
        [Input("backupStorageName")]
        public Input<string>? BackupStorageName { get; set; }

        /// <summary>
        /// CA certificate file.
        /// </summary>
        [Input("caCertificateFile")]
        public Input<string>? CaCertificateFile { get; set; }

        /// <summary>
        /// File path to the CA certificate.
        /// </summary>
        [Input("caCertificateFilePath")]
        public Input<string>? CaCertificateFilePath { get; set; }

        /// <summary>
        /// Current version of the controller.
        /// </summary>
        [Input("currentVersion")]
        public Input<string>? CurrentVersion { get; set; }

        /// <summary>
        /// Enable VPC/VNET DNS Server.
        /// </summary>
        [Input("enableVpcDnsServer")]
        public Input<bool>? EnableVpcDnsServer { get; set; }

        /// <summary>
        /// A system-wide mode. Default: true.
        /// </summary>
        [Input("fqdnExceptionRule")]
        public Input<bool>? FqdnExceptionRule { get; set; }

        /// <summary>
        /// Switch for http access. Default: false.
        /// </summary>
        [Input("httpAccess")]
        public Input<bool>? HttpAccess { get; set; }

        /// <summary>
        /// If true, aviatrix_controller_config will upgrade all gateways when target_version is set. If false, only the controller
        /// will be upgraded when target_version is set. In that case gateway upgrades should be handled in each gateway resource
        /// individually using the software_version and image_version attributes.
        /// </summary>
        [Input("manageGatewayUpgrades")]
        public Input<bool>? ManageGatewayUpgrades { get; set; }

        /// <summary>
        /// Switch to enable the controller to backup up to a maximum of 3 rotating backups.
        /// </summary>
        [Input("multipleBackups")]
        public Input<bool>? MultipleBackups { get; set; }

        /// <summary>
        /// Previous version of the controller.
        /// </summary>
        [Input("previousVersion")]
        public Input<string>? PreviousVersion { get; set; }

        /// <summary>
        /// Server private key file.
        /// </summary>
        [Input("serverPrivateKeyFile")]
        public Input<string>? ServerPrivateKeyFile { get; set; }

        /// <summary>
        /// File path to the server private key.
        /// </summary>
        [Input("serverPrivateKeyFilePath")]
        public Input<string>? ServerPrivateKeyFilePath { get; set; }

        /// <summary>
        /// Server public certificate file.
        /// </summary>
        [Input("serverPublicCertificateFile")]
        public Input<string>? ServerPublicCertificateFile { get; set; }

        /// <summary>
        /// File path to the server public certificate.
        /// </summary>
        [Input("serverPublicCertificateFilePath")]
        public Input<string>? ServerPublicCertificateFilePath { get; set; }

        /// <summary>
        /// The release version number to which the controller will be upgraded to.
        /// </summary>
        [Input("targetVersion")]
        public Input<string>? TargetVersion { get; set; }

        /// <summary>
        /// Current version of the controller without the build number.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public AviatrixControllerConfigState()
        {
        }
        public static new AviatrixControllerConfigState Empty => new AviatrixControllerConfigState();
    }
}
