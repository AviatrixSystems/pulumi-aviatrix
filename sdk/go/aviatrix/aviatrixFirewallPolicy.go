// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/astipkovits/pulumi-aviatrix/sdk/go/aviatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aviatrix.NewAviatrixFirewallPolicy(ctx, "testFirewallPolicy", &aviatrix.AviatrixFirewallPolicyArgs{
//				GwName:      pulumi.Any(aviatrix_firewall.Test_firewall.Gw_name),
//				SrcIp:       pulumi.String("10.15.0.224/32"),
//				DstIp:       pulumi.String("10.12.0.172/32"),
//				Protocol:    pulumi.String("tcp"),
//				Port:        pulumi.String("0:65535"),
//				Action:      pulumi.String("allow"),
//				LogEnabled:  pulumi.Bool(true),
//				Description: pulumi.String("Test policy."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ```go
// package main
//
// import (
//
//	"github.com/astipkovits/pulumi-aviatrix/sdk/go/aviatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aviatrix.NewAviatrixFirewallPolicy(ctx, "testFirewallPolicy", &aviatrix.AviatrixFirewallPolicyArgs{
//				GwName:      pulumi.Any(aviatrix_firewall.Test_firewall.Gw_name),
//				SrcIp:       pulumi.String("10.15.0.225/32"),
//				DstIp:       pulumi.String("10.12.0.173/32"),
//				Protocol:    pulumi.String("tcp"),
//				Port:        pulumi.String("0:65535"),
//				Action:      pulumi.String("allow"),
//				LogEnabled:  pulumi.Bool(true),
//				Description: pulumi.String("Test policy."),
//				Position:    pulumi.Int(2),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// **firewall_policy** can be imported using the `gw_name`, `src_ip`, `dst_ip`, `protocol`, `port` and `action` separated by `~`, e.g.
//
// ```sh
//
//	$ pulumi import aviatrix:index/aviatrixFirewallPolicy:AviatrixFirewallPolicy test "gw_name~src_ip~dst_ip~protocol~port~action"
//
// ```
type AviatrixFirewallPolicy struct {
	pulumi.CustomResourceState

	// Valid values: "allow", "deny" and "force-drop" (in stateful firewall rule to allow immediate packet dropping on established sessions).
	Action pulumi.StringOutput `pulumi:"action"`
	// Description of the policy. Example: "This is policy no.1".
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// CIDRs separated by comma or tag names such "HR" or "marketing" etc. Example: "10.30.0.0/16,10.45.0.0/20". The **aviatrix_firewall_tag** resource should be created prior to using the tag name.
	DstIp pulumi.StringOutput `pulumi:"dstIp"`
	// Gateway name to attach firewall policy to.
	GwName pulumi.StringOutput `pulumi:"gwName"`
	// Valid values: true, false. Default value: false.
	LogEnabled pulumi.BoolPtrOutput `pulumi:"logEnabled"`
	// A single port or a range of port numbers. Example: "25", "25:1024".
	Port pulumi.StringOutput `pulumi:"port"`
	// Position in the policy list, where the firewall policy will be inserted to. Valid values: any positive integer. Example: 2. If it is larger than the size of policy list, the policy will be inserted to the end.
	Position pulumi.IntOutput `pulumi:"position"`
	// : "all", "tcp", "udp", "icmp", "sctp", "rdp", "dccp".
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// CIDRs separated by comma or tag names such "HR" or "marketing" etc. Example: "10.30.0.0/16,10.45.0.0/20". The **aviatrix_firewall_tag** resource should be created prior to using the tag name.
	SrcIp pulumi.StringOutput `pulumi:"srcIp"`
}

// NewAviatrixFirewallPolicy registers a new resource with the given unique name, arguments, and options.
func NewAviatrixFirewallPolicy(ctx *pulumi.Context,
	name string, args *AviatrixFirewallPolicyArgs, opts ...pulumi.ResourceOption) (*AviatrixFirewallPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.DstIp == nil {
		return nil, errors.New("invalid value for required argument 'DstIp'")
	}
	if args.GwName == nil {
		return nil, errors.New("invalid value for required argument 'GwName'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.SrcIp == nil {
		return nil, errors.New("invalid value for required argument 'SrcIp'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixFirewallPolicy
	err := ctx.RegisterResource("aviatrix:index/aviatrixFirewallPolicy:AviatrixFirewallPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixFirewallPolicy gets an existing AviatrixFirewallPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixFirewallPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixFirewallPolicyState, opts ...pulumi.ResourceOption) (*AviatrixFirewallPolicy, error) {
	var resource AviatrixFirewallPolicy
	err := ctx.ReadResource("aviatrix:index/aviatrixFirewallPolicy:AviatrixFirewallPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixFirewallPolicy resources.
type aviatrixFirewallPolicyState struct {
	// Valid values: "allow", "deny" and "force-drop" (in stateful firewall rule to allow immediate packet dropping on established sessions).
	Action *string `pulumi:"action"`
	// Description of the policy. Example: "This is policy no.1".
	Description *string `pulumi:"description"`
	// CIDRs separated by comma or tag names such "HR" or "marketing" etc. Example: "10.30.0.0/16,10.45.0.0/20". The **aviatrix_firewall_tag** resource should be created prior to using the tag name.
	DstIp *string `pulumi:"dstIp"`
	// Gateway name to attach firewall policy to.
	GwName *string `pulumi:"gwName"`
	// Valid values: true, false. Default value: false.
	LogEnabled *bool `pulumi:"logEnabled"`
	// A single port or a range of port numbers. Example: "25", "25:1024".
	Port *string `pulumi:"port"`
	// Position in the policy list, where the firewall policy will be inserted to. Valid values: any positive integer. Example: 2. If it is larger than the size of policy list, the policy will be inserted to the end.
	Position *int `pulumi:"position"`
	// : "all", "tcp", "udp", "icmp", "sctp", "rdp", "dccp".
	Protocol *string `pulumi:"protocol"`
	// CIDRs separated by comma or tag names such "HR" or "marketing" etc. Example: "10.30.0.0/16,10.45.0.0/20". The **aviatrix_firewall_tag** resource should be created prior to using the tag name.
	SrcIp *string `pulumi:"srcIp"`
}

type AviatrixFirewallPolicyState struct {
	// Valid values: "allow", "deny" and "force-drop" (in stateful firewall rule to allow immediate packet dropping on established sessions).
	Action pulumi.StringPtrInput
	// Description of the policy. Example: "This is policy no.1".
	Description pulumi.StringPtrInput
	// CIDRs separated by comma or tag names such "HR" or "marketing" etc. Example: "10.30.0.0/16,10.45.0.0/20". The **aviatrix_firewall_tag** resource should be created prior to using the tag name.
	DstIp pulumi.StringPtrInput
	// Gateway name to attach firewall policy to.
	GwName pulumi.StringPtrInput
	// Valid values: true, false. Default value: false.
	LogEnabled pulumi.BoolPtrInput
	// A single port or a range of port numbers. Example: "25", "25:1024".
	Port pulumi.StringPtrInput
	// Position in the policy list, where the firewall policy will be inserted to. Valid values: any positive integer. Example: 2. If it is larger than the size of policy list, the policy will be inserted to the end.
	Position pulumi.IntPtrInput
	// : "all", "tcp", "udp", "icmp", "sctp", "rdp", "dccp".
	Protocol pulumi.StringPtrInput
	// CIDRs separated by comma or tag names such "HR" or "marketing" etc. Example: "10.30.0.0/16,10.45.0.0/20". The **aviatrix_firewall_tag** resource should be created prior to using the tag name.
	SrcIp pulumi.StringPtrInput
}

func (AviatrixFirewallPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixFirewallPolicyState)(nil)).Elem()
}

type aviatrixFirewallPolicyArgs struct {
	// Valid values: "allow", "deny" and "force-drop" (in stateful firewall rule to allow immediate packet dropping on established sessions).
	Action string `pulumi:"action"`
	// Description of the policy. Example: "This is policy no.1".
	Description *string `pulumi:"description"`
	// CIDRs separated by comma or tag names such "HR" or "marketing" etc. Example: "10.30.0.0/16,10.45.0.0/20". The **aviatrix_firewall_tag** resource should be created prior to using the tag name.
	DstIp string `pulumi:"dstIp"`
	// Gateway name to attach firewall policy to.
	GwName string `pulumi:"gwName"`
	// Valid values: true, false. Default value: false.
	LogEnabled *bool `pulumi:"logEnabled"`
	// A single port or a range of port numbers. Example: "25", "25:1024".
	Port string `pulumi:"port"`
	// Position in the policy list, where the firewall policy will be inserted to. Valid values: any positive integer. Example: 2. If it is larger than the size of policy list, the policy will be inserted to the end.
	Position *int `pulumi:"position"`
	// : "all", "tcp", "udp", "icmp", "sctp", "rdp", "dccp".
	Protocol *string `pulumi:"protocol"`
	// CIDRs separated by comma or tag names such "HR" or "marketing" etc. Example: "10.30.0.0/16,10.45.0.0/20". The **aviatrix_firewall_tag** resource should be created prior to using the tag name.
	SrcIp string `pulumi:"srcIp"`
}

// The set of arguments for constructing a AviatrixFirewallPolicy resource.
type AviatrixFirewallPolicyArgs struct {
	// Valid values: "allow", "deny" and "force-drop" (in stateful firewall rule to allow immediate packet dropping on established sessions).
	Action pulumi.StringInput
	// Description of the policy. Example: "This is policy no.1".
	Description pulumi.StringPtrInput
	// CIDRs separated by comma or tag names such "HR" or "marketing" etc. Example: "10.30.0.0/16,10.45.0.0/20". The **aviatrix_firewall_tag** resource should be created prior to using the tag name.
	DstIp pulumi.StringInput
	// Gateway name to attach firewall policy to.
	GwName pulumi.StringInput
	// Valid values: true, false. Default value: false.
	LogEnabled pulumi.BoolPtrInput
	// A single port or a range of port numbers. Example: "25", "25:1024".
	Port pulumi.StringInput
	// Position in the policy list, where the firewall policy will be inserted to. Valid values: any positive integer. Example: 2. If it is larger than the size of policy list, the policy will be inserted to the end.
	Position pulumi.IntPtrInput
	// : "all", "tcp", "udp", "icmp", "sctp", "rdp", "dccp".
	Protocol pulumi.StringPtrInput
	// CIDRs separated by comma or tag names such "HR" or "marketing" etc. Example: "10.30.0.0/16,10.45.0.0/20". The **aviatrix_firewall_tag** resource should be created prior to using the tag name.
	SrcIp pulumi.StringInput
}

func (AviatrixFirewallPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixFirewallPolicyArgs)(nil)).Elem()
}

type AviatrixFirewallPolicyInput interface {
	pulumi.Input

	ToAviatrixFirewallPolicyOutput() AviatrixFirewallPolicyOutput
	ToAviatrixFirewallPolicyOutputWithContext(ctx context.Context) AviatrixFirewallPolicyOutput
}

func (*AviatrixFirewallPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixFirewallPolicy)(nil)).Elem()
}

func (i *AviatrixFirewallPolicy) ToAviatrixFirewallPolicyOutput() AviatrixFirewallPolicyOutput {
	return i.ToAviatrixFirewallPolicyOutputWithContext(context.Background())
}

func (i *AviatrixFirewallPolicy) ToAviatrixFirewallPolicyOutputWithContext(ctx context.Context) AviatrixFirewallPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFirewallPolicyOutput)
}

// AviatrixFirewallPolicyArrayInput is an input type that accepts AviatrixFirewallPolicyArray and AviatrixFirewallPolicyArrayOutput values.
// You can construct a concrete instance of `AviatrixFirewallPolicyArrayInput` via:
//
//	AviatrixFirewallPolicyArray{ AviatrixFirewallPolicyArgs{...} }
type AviatrixFirewallPolicyArrayInput interface {
	pulumi.Input

	ToAviatrixFirewallPolicyArrayOutput() AviatrixFirewallPolicyArrayOutput
	ToAviatrixFirewallPolicyArrayOutputWithContext(context.Context) AviatrixFirewallPolicyArrayOutput
}

type AviatrixFirewallPolicyArray []AviatrixFirewallPolicyInput

func (AviatrixFirewallPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixFirewallPolicy)(nil)).Elem()
}

func (i AviatrixFirewallPolicyArray) ToAviatrixFirewallPolicyArrayOutput() AviatrixFirewallPolicyArrayOutput {
	return i.ToAviatrixFirewallPolicyArrayOutputWithContext(context.Background())
}

func (i AviatrixFirewallPolicyArray) ToAviatrixFirewallPolicyArrayOutputWithContext(ctx context.Context) AviatrixFirewallPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFirewallPolicyArrayOutput)
}

// AviatrixFirewallPolicyMapInput is an input type that accepts AviatrixFirewallPolicyMap and AviatrixFirewallPolicyMapOutput values.
// You can construct a concrete instance of `AviatrixFirewallPolicyMapInput` via:
//
//	AviatrixFirewallPolicyMap{ "key": AviatrixFirewallPolicyArgs{...} }
type AviatrixFirewallPolicyMapInput interface {
	pulumi.Input

	ToAviatrixFirewallPolicyMapOutput() AviatrixFirewallPolicyMapOutput
	ToAviatrixFirewallPolicyMapOutputWithContext(context.Context) AviatrixFirewallPolicyMapOutput
}

type AviatrixFirewallPolicyMap map[string]AviatrixFirewallPolicyInput

func (AviatrixFirewallPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixFirewallPolicy)(nil)).Elem()
}

func (i AviatrixFirewallPolicyMap) ToAviatrixFirewallPolicyMapOutput() AviatrixFirewallPolicyMapOutput {
	return i.ToAviatrixFirewallPolicyMapOutputWithContext(context.Background())
}

func (i AviatrixFirewallPolicyMap) ToAviatrixFirewallPolicyMapOutputWithContext(ctx context.Context) AviatrixFirewallPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFirewallPolicyMapOutput)
}

type AviatrixFirewallPolicyOutput struct{ *pulumi.OutputState }

func (AviatrixFirewallPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixFirewallPolicy)(nil)).Elem()
}

func (o AviatrixFirewallPolicyOutput) ToAviatrixFirewallPolicyOutput() AviatrixFirewallPolicyOutput {
	return o
}

func (o AviatrixFirewallPolicyOutput) ToAviatrixFirewallPolicyOutputWithContext(ctx context.Context) AviatrixFirewallPolicyOutput {
	return o
}

// Valid values: "allow", "deny" and "force-drop" (in stateful firewall rule to allow immediate packet dropping on established sessions).
func (o AviatrixFirewallPolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixFirewallPolicy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Description of the policy. Example: "This is policy no.1".
func (o AviatrixFirewallPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixFirewallPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// CIDRs separated by comma or tag names such "HR" or "marketing" etc. Example: "10.30.0.0/16,10.45.0.0/20". The **aviatrix_firewall_tag** resource should be created prior to using the tag name.
func (o AviatrixFirewallPolicyOutput) DstIp() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixFirewallPolicy) pulumi.StringOutput { return v.DstIp }).(pulumi.StringOutput)
}

// Gateway name to attach firewall policy to.
func (o AviatrixFirewallPolicyOutput) GwName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixFirewallPolicy) pulumi.StringOutput { return v.GwName }).(pulumi.StringOutput)
}

// Valid values: true, false. Default value: false.
func (o AviatrixFirewallPolicyOutput) LogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixFirewallPolicy) pulumi.BoolPtrOutput { return v.LogEnabled }).(pulumi.BoolPtrOutput)
}

// A single port or a range of port numbers. Example: "25", "25:1024".
func (o AviatrixFirewallPolicyOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixFirewallPolicy) pulumi.StringOutput { return v.Port }).(pulumi.StringOutput)
}

// Position in the policy list, where the firewall policy will be inserted to. Valid values: any positive integer. Example: 2. If it is larger than the size of policy list, the policy will be inserted to the end.
func (o AviatrixFirewallPolicyOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *AviatrixFirewallPolicy) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// : "all", "tcp", "udp", "icmp", "sctp", "rdp", "dccp".
func (o AviatrixFirewallPolicyOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixFirewallPolicy) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// CIDRs separated by comma or tag names such "HR" or "marketing" etc. Example: "10.30.0.0/16,10.45.0.0/20". The **aviatrix_firewall_tag** resource should be created prior to using the tag name.
func (o AviatrixFirewallPolicyOutput) SrcIp() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixFirewallPolicy) pulumi.StringOutput { return v.SrcIp }).(pulumi.StringOutput)
}

type AviatrixFirewallPolicyArrayOutput struct{ *pulumi.OutputState }

func (AviatrixFirewallPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixFirewallPolicy)(nil)).Elem()
}

func (o AviatrixFirewallPolicyArrayOutput) ToAviatrixFirewallPolicyArrayOutput() AviatrixFirewallPolicyArrayOutput {
	return o
}

func (o AviatrixFirewallPolicyArrayOutput) ToAviatrixFirewallPolicyArrayOutputWithContext(ctx context.Context) AviatrixFirewallPolicyArrayOutput {
	return o
}

func (o AviatrixFirewallPolicyArrayOutput) Index(i pulumi.IntInput) AviatrixFirewallPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixFirewallPolicy {
		return vs[0].([]*AviatrixFirewallPolicy)[vs[1].(int)]
	}).(AviatrixFirewallPolicyOutput)
}

type AviatrixFirewallPolicyMapOutput struct{ *pulumi.OutputState }

func (AviatrixFirewallPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixFirewallPolicy)(nil)).Elem()
}

func (o AviatrixFirewallPolicyMapOutput) ToAviatrixFirewallPolicyMapOutput() AviatrixFirewallPolicyMapOutput {
	return o
}

func (o AviatrixFirewallPolicyMapOutput) ToAviatrixFirewallPolicyMapOutputWithContext(ctx context.Context) AviatrixFirewallPolicyMapOutput {
	return o
}

func (o AviatrixFirewallPolicyMapOutput) MapIndex(k pulumi.StringInput) AviatrixFirewallPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixFirewallPolicy {
		return vs[0].(map[string]*AviatrixFirewallPolicy)[vs[1].(string)]
	}).(AviatrixFirewallPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFirewallPolicyInput)(nil)).Elem(), &AviatrixFirewallPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFirewallPolicyArrayInput)(nil)).Elem(), AviatrixFirewallPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFirewallPolicyMapInput)(nil)).Elem(), AviatrixFirewallPolicyMap{})
	pulumi.RegisterOutputType(AviatrixFirewallPolicyOutput{})
	pulumi.RegisterOutputType(AviatrixFirewallPolicyArrayOutput{})
	pulumi.RegisterOutputType(AviatrixFirewallPolicyMapOutput{})
}
