// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aviatrix
{
    [AviatrixResourceType("aviatrix:index/aviatrixTunnel:AviatrixTunnel")]
    public partial class AviatrixTunnel : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether Peering HA is enabled. Valid inputs: true or false.
        /// </summary>
        [Output("enableHa")]
        public Output<bool?> EnableHa { get; private set; } = null!;

        /// <summary>
        /// The first VPC Container name to make a peer pair.
        /// </summary>
        [Output("gwName1")]
        public Output<string> GwName1 { get; private set; } = null!;

        /// <summary>
        /// The second VPC Container name to make a peer pair.
        /// </summary>
        [Output("gwName2")]
        public Output<string> GwName2 { get; private set; } = null!;

        /// <summary>
        /// Status of the HA tunnel.
        /// </summary>
        [Output("peeringHastatus")]
        public Output<string> PeeringHastatus { get; private set; } = null!;

        /// <summary>
        /// Name of the peering link.
        /// </summary>
        [Output("peeringLink")]
        public Output<string> PeeringLink { get; private set; } = null!;

        /// <summary>
        /// Status of the tunnel.
        /// </summary>
        [Output("peeringState")]
        public Output<string> PeeringState { get; private set; } = null!;


        /// <summary>
        /// Create a AviatrixTunnel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AviatrixTunnel(string name, AviatrixTunnelArgs args, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixTunnel:AviatrixTunnel", name, args ?? new AviatrixTunnelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AviatrixTunnel(string name, Input<string> id, AviatrixTunnelState? state = null, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixTunnel:AviatrixTunnel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/astipkovits",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AviatrixTunnel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AviatrixTunnel Get(string name, Input<string> id, AviatrixTunnelState? state = null, CustomResourceOptions? options = null)
        {
            return new AviatrixTunnel(name, id, state, options);
        }
    }

    public sealed class AviatrixTunnelArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether Peering HA is enabled. Valid inputs: true or false.
        /// </summary>
        [Input("enableHa")]
        public Input<bool>? EnableHa { get; set; }

        /// <summary>
        /// The first VPC Container name to make a peer pair.
        /// </summary>
        [Input("gwName1", required: true)]
        public Input<string> GwName1 { get; set; } = null!;

        /// <summary>
        /// The second VPC Container name to make a peer pair.
        /// </summary>
        [Input("gwName2", required: true)]
        public Input<string> GwName2 { get; set; } = null!;

        public AviatrixTunnelArgs()
        {
        }
        public static new AviatrixTunnelArgs Empty => new AviatrixTunnelArgs();
    }

    public sealed class AviatrixTunnelState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether Peering HA is enabled. Valid inputs: true or false.
        /// </summary>
        [Input("enableHa")]
        public Input<bool>? EnableHa { get; set; }

        /// <summary>
        /// The first VPC Container name to make a peer pair.
        /// </summary>
        [Input("gwName1")]
        public Input<string>? GwName1 { get; set; }

        /// <summary>
        /// The second VPC Container name to make a peer pair.
        /// </summary>
        [Input("gwName2")]
        public Input<string>? GwName2 { get; set; }

        /// <summary>
        /// Status of the HA tunnel.
        /// </summary>
        [Input("peeringHastatus")]
        public Input<string>? PeeringHastatus { get; set; }

        /// <summary>
        /// Name of the peering link.
        /// </summary>
        [Input("peeringLink")]
        public Input<string>? PeeringLink { get; set; }

        /// <summary>
        /// Status of the tunnel.
        /// </summary>
        [Input("peeringState")]
        public Input<string>? PeeringState { get; set; }

        public AviatrixTunnelState()
        {
        }
        public static new AviatrixTunnelState Empty => new AviatrixTunnelState();
    }
}
