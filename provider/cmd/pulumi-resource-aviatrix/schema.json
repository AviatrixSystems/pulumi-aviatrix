{
    "name": "aviatrix",
    "displayName": "Aviatrix",
    "description": "A Pulumi package for creating and managing aviatrix cloud resources.",
    "keywords": [
        "pulumi",
        "aviatrix",
        "category/cloud"
    ],
    "homepage": "https://www.aviatrix.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`aviatrix` Terraform Provider](https://github.com/AviatrixSystems/terraform-provider-aviatrix).",
    "repository": "https://github.com/astipkovits/pulumi-aviatrix",
    "pluginDownloadURL": "https://github.com/astipkovits/pulumi-aviatrix/raw/main/releases/",
    "publisher": "Aviatrix",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/astipkovits/pulumi-aviatrix/sdk/v2/go/aviatrix"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing aviatrix cloud resources.",
            "packageName": "@astipkovits/aviatrix",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/AviatrixSystems/terraform-provider-aviatrix)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-aviatrix` repo](https://github.com/astipkovits/pulumi-aviatrix/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-aviatrix` repo](https://github.com/AviatrixSystems/terraform-provider-aviatrix/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/AviatrixSystems/terraform-provider-aviatrix)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-aviatrix` repo](https://github.com/astipkovits/pulumi-aviatrix/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-aviatrix` repo](https://github.com/AviatrixSystems/terraform-provider-aviatrix/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "controllerIp": {
                "type": "string"
            },
            "ignoreTags": {
                "$ref": "#/types/aviatrix:config/ignoreTags:ignoreTags",
                "description": "Configuration block with settings to ignore tags across all resources.\n"
            },
            "password": {
                "type": "string"
            },
            "pathToCaCertificate": {
                "type": "string"
            },
            "skipVersionValidation": {
                "type": "boolean"
            },
            "username": {
                "type": "string"
            },
            "verifySslCertificate": {
                "type": "boolean"
            }
        },
        "defaults": [
            "controllerIp",
            "password",
            "username"
        ]
    },
    "types": {
        "aviatrix:config/ignoreTags:ignoreTags": {
            "properties": {
                "keyPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "aviatrix:index/AviatrixAppDomainSelector:AviatrixAppDomainSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixAppDomainSelectorMatchExpression:AviatrixAppDomainSelectorMatchExpression"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "matchExpressions"
            ]
        },
        "aviatrix:index/AviatrixAppDomainSelectorMatchExpression:AviatrixAppDomainSelectorMatchExpression": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aviatrix:index/AviatrixAwsTgwSecurityDomain:AviatrixAwsTgwSecurityDomain": {
            "properties": {
                "attachedVpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixAwsTgwSecurityDomainAttachedVpc:AviatrixAwsTgwSecurityDomainAttachedVpc"
                    },
                    "deprecationMessage": "Please set `manage_vpc_attachment` to false, and use the standalone aviatrix_aws_tgw_vpc_attachment resource instead.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aviatrixFirewall": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectedDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nativeEgress": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nativeFirewall": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityDomainName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "securityDomainName"
            ]
        },
        "aviatrix:index/AviatrixAwsTgwSecurityDomainAttachedVpc:AviatrixAwsTgwSecurityDomainAttachedVpc": {
            "properties": {
                "customizedRouteAdvertisement": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customizedRoutes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableLocalRoutePropagation": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTables": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnets": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcAccountName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcRegion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "vpcAccountName",
                "vpcId",
                "vpcRegion"
            ]
        },
        "aviatrix:index/AviatrixAwsTgwVpnConnVpnTunnelData:AviatrixAwsTgwVpnConnVpnTunnelData": {
            "properties": {
                "lastStatusChangeTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusMessage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tgwAsn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tunnelName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpnInsideAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpnOutsideAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "lastStatusChangeTime",
                        "routeCount",
                        "status",
                        "statusMessage",
                        "tgwAsn",
                        "tunnelName",
                        "vpnInsideAddress",
                        "vpnOutsideAddress"
                    ]
                }
            }
        },
        "aviatrix:index/AviatrixFirenetFirewallInstanceAssociation:AviatrixFirenetFirewallInstanceAssociation": {
            "properties": {
                "attached": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "egressInterface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "firenetGwName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "firewallName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lanInterface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "managementInterface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "firenetGwName",
                "instanceId"
            ]
        },
        "aviatrix:index/AviatrixFirewallPolicy:AviatrixFirewallPolicy": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "dstIp",
                "port",
                "srcIp"
            ]
        },
        "aviatrix:index/AviatrixFirewallTagCidrList:AviatrixFirewallTagCidrList": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cidrTagName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cidr",
                "cidrTagName"
            ]
        },
        "aviatrix:index/AviatrixFqdnDomainName:AviatrixFqdnDomainName": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "proto": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fqdn",
                "port",
                "proto"
            ]
        },
        "aviatrix:index/AviatrixFqdnGwFilterTagList:AviatrixFqdnGwFilterTagList": {
            "properties": {
                "gwName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "gwName"
            ]
        },
        "aviatrix:index/AviatrixGatewayDnatConnectionPolicy:AviatrixGatewayDnatConnectionPolicy": {
            "properties": {
                "applyRouteEntry": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connection": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnatIps": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnatPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstCidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeRtb": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mark": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcCidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "applyRouteEntry",
                        "connection",
                        "dnatIps",
                        "dnatPort",
                        "dstCidr",
                        "dstPort",
                        "excludeRtb",
                        "interface",
                        "mark",
                        "protocol",
                        "srcCidr",
                        "srcPort"
                    ]
                }
            }
        },
        "aviatrix:index/AviatrixGatewayDnatDnatPolicy:AviatrixGatewayDnatDnatPolicy": {
            "properties": {
                "applyRouteEntry": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connection": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnatIps": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnatPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstCidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeRtb": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mark": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcCidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aviatrix:index/AviatrixGatewayDnatInterfacePolicy:AviatrixGatewayDnatInterfacePolicy": {
            "properties": {
                "applyRouteEntry": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connection": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnatIps": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnatPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstCidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeRtb": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mark": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcCidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "applyRouteEntry",
                        "connection",
                        "dnatIps",
                        "dnatPort",
                        "dstCidr",
                        "dstPort",
                        "excludeRtb",
                        "interface",
                        "mark",
                        "protocol",
                        "srcCidr",
                        "srcPort"
                    ]
                }
            }
        },
        "aviatrix:index/AviatrixGatewaySnatConnectionPolicy:AviatrixGatewaySnatConnectionPolicy": {
            "properties": {
                "applyRouteEntry": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connection": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstCidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeRtb": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mark": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snatIps": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snatPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcCidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "applyRouteEntry",
                        "connection",
                        "dstCidr",
                        "dstPort",
                        "excludeRtb",
                        "interface",
                        "mark",
                        "protocol",
                        "snatIps",
                        "snatPort",
                        "srcCidr",
                        "srcPort"
                    ]
                }
            }
        },
        "aviatrix:index/AviatrixGatewaySnatInterfacePolicy:AviatrixGatewaySnatInterfacePolicy": {
            "properties": {
                "applyRouteEntry": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connection": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstCidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeRtb": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mark": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snatIps": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snatPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcCidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "applyRouteEntry",
                        "connection",
                        "dstCidr",
                        "dstPort",
                        "excludeRtb",
                        "interface",
                        "mark",
                        "protocol",
                        "snatIps",
                        "snatPort",
                        "srcCidr",
                        "srcPort"
                    ]
                }
            }
        },
        "aviatrix:index/AviatrixGatewaySnatSnatPolicy:AviatrixGatewaySnatSnatPolicy": {
            "properties": {
                "applyRouteEntry": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connection": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstCidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeRtb": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mark": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snatIps": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snatPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcCidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aviatrix:index/AviatrixMicrosegPolicyListPolicy:AviatrixMicrosegPolicyListPolicy": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstAppDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logging": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixMicrosegPolicyListPolicyPortRange:AviatrixMicrosegPolicyListPolicyPortRange"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcAppDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "watch": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "dstAppDomains",
                "name",
                "protocol",
                "srcAppDomains"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "dstAppDomains",
                        "name",
                        "protocol",
                        "srcAppDomains",
                        "uuid"
                    ]
                }
            }
        },
        "aviatrix:index/AviatrixMicrosegPolicyListPolicyPortRange:AviatrixMicrosegPolicyListPolicyPortRange": {
            "properties": {
                "hi": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lo": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "lo"
            ]
        },
        "aviatrix:index/AviatrixPrivateModeLbProxy:AviatrixPrivateModeLbProxy": {
            "properties": {
                "instanceId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "instanceId",
                "vpcId"
            ]
        },
        "aviatrix:index/AviatrixSite2CloudCaCertTagCaCertificate:AviatrixSite2CloudCaCertTagCaCertificate": {
            "properties": {
                "certContent": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commonName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expirationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuerName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uniqueSerial": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certContent"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "certContent",
                        "commonName",
                        "expirationTime",
                        "id",
                        "issuerName",
                        "uniqueSerial"
                    ]
                }
            }
        },
        "aviatrix:index/AviatrixTransitGatewayBgpLanInterface:AviatrixTransitGatewayBgpLanInterface": {
            "properties": {
                "subnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subnet",
                "vpcId"
            ]
        },
        "aviatrix:index/AviatrixTransitGatewayHaBgpLanInterface:AviatrixTransitGatewayHaBgpLanInterface": {
            "properties": {
                "subnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subnet",
                "vpcId"
            ]
        },
        "aviatrix:index/AviatrixVpcPrivateSubnet:AviatrixVpcPrivateSubnet": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cidr",
                        "name",
                        "subnetId"
                    ]
                }
            }
        },
        "aviatrix:index/AviatrixVpcPublicSubnet:AviatrixVpcPublicSubnet": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cidr",
                        "name",
                        "subnetId"
                    ]
                }
            }
        },
        "aviatrix:index/AviatrixVpcSubnet:AviatrixVpcSubnet": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "subnetId"
                    ]
                }
            }
        },
        "aviatrix:index/AviatrixVpnProfilePolicy:AviatrixVpnProfilePolicy": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "proto": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "port",
                "proto",
                "target"
            ]
        },
        "aviatrix:index/ProviderIgnoreTags:ProviderIgnoreTags": {
            "properties": {
                "keyPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aviatrix:index/getAviatrixDeviceInterfacesWanInterface:getAviatrixDeviceInterfacesWanInterface": {
            "properties": {
                "wanPrimaryInterface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "wanPrimaryInterfacePublicIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "wanPrimaryInterface",
                "wanPrimaryInterfacePublicIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aviatrix:index/getAviatrixFirenetFirewallInstanceAssociation:getAviatrixFirenetFirewallInstanceAssociation": {
            "properties": {
                "attached": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "egressInterface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "firenetGwName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "firewallName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lanInterface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "managementInterface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attached",
                "egressInterface",
                "firenetGwName",
                "firewallName",
                "instanceId",
                "lanInterface",
                "managementInterface",
                "vendorType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aviatrix:index/getAviatrixFirewallInstanceImagesFirewallImage:getAviatrixFirewallInstanceImagesFirewallImage": {
            "properties": {
                "firewallImage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "firewallImageVersions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "firewallSizes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "firewallImage",
                "firewallImageVersions",
                "firewallSizes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aviatrix:index/getAviatrixFirewallPolicy:getAviatrixFirewallPolicy": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "description",
                "dstIp",
                "logEnabled",
                "port",
                "protocol",
                "srcIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aviatrix:index/getAviatrixNetworkDomainsNetworkDomain:getAviatrixNetworkDomainsNetworkDomain": {
            "properties": {
                "account": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "egressInspection": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "egressInspectionName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inspectionPolicy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intraDomainInspection": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intraDomainInspectionName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tgwName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "account",
                "cloudType",
                "egressInspection",
                "egressInspectionName",
                "inspectionPolicy",
                "intraDomainInspection",
                "intraDomainInspectionName",
                "name",
                "region",
                "routeTableId",
                "tgwName",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aviatrix:index/getAviatrixTransitGatewayBgpLanInterface:getAviatrixTransitGatewayBgpLanInterface": {
            "properties": {
                "subnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subnet",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aviatrix:index/getAviatrixTransitGatewayHaBgpLanInterface:getAviatrixTransitGatewayHaBgpLanInterface": {
            "properties": {
                "subnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subnet",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aviatrix:index/getAviatrixTransitGatewaysGatewayList:getAviatrixTransitGatewaysGatewayList": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allocateNewEip": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "availabilityDomain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "azureEipNameResourceGroup": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bgpEcmp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bgpHoldTime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bgpLanInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/getAviatrixTransitGatewaysGatewayListBgpLanInterface:getAviatrixTransitGatewaysGatewayListBgpLanInterface"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bgpLanIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bgpPollingTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudInstanceId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudType": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectedTransit": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customizedSpokeVpcRoutes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableActiveStandby": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableActiveStandbyPreemptive": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableBgpOverLan": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableEncryptVolume": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableGatewayLoadBalancer": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableHybridConnection": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableJumboFrame": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableMonitorGatewaySubnets": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableMultiTierTransit": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enablePrivateOob": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableSegmentation": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableSpotInstance": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableTransitSummarizeCidrToTgw": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableVpcDnsServer": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludedAdvertisedSpokeRoutes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "faultDomain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filteredSpokeVpcRoutes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gwName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gwSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "haBgpLanInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/getAviatrixTransitGatewaysGatewayListHaBgpLanInterface:getAviatrixTransitGatewaysGatewayListHaBgpLanInterface"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "haBgpLanIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insaneMode": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insaneModeAz": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lanPrivateSubnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lanVpcId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "learnedCidrsApprovalMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localAsNumber": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorExcludeLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "oobAvailabilityZone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "oobManagementSubnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "singleAzHa": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "singleIpSnat": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "softwareVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spotPrice": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tunnelDetectionTime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcReg": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "allocateNewEip",
                "availabilityDomain",
                "azureEipNameResourceGroup",
                "bgpEcmp",
                "bgpHoldTime",
                "bgpLanInterfaces",
                "bgpLanIpLists",
                "bgpPollingTime",
                "cloudInstanceId",
                "cloudType",
                "connectedTransit",
                "customizedSpokeVpcRoutes",
                "enableActiveStandby",
                "enableActiveStandbyPreemptive",
                "enableBgpOverLan",
                "enableEncryptVolume",
                "enableGatewayLoadBalancer",
                "enableHybridConnection",
                "enableJumboFrame",
                "enableMonitorGatewaySubnets",
                "enableMultiTierTransit",
                "enablePrivateOob",
                "enableSegmentation",
                "enableSpotInstance",
                "enableTransitSummarizeCidrToTgw",
                "enableVpcDnsServer",
                "excludedAdvertisedSpokeRoutes",
                "faultDomain",
                "filteredSpokeVpcRoutes",
                "gwName",
                "gwSize",
                "haBgpLanInterfaces",
                "haBgpLanIpLists",
                "imageVersion",
                "insaneMode",
                "insaneModeAz",
                "lanPrivateSubnet",
                "lanVpcId",
                "learnedCidrsApprovalMode",
                "localAsNumber",
                "monitorExcludeLists",
                "oobAvailabilityZone",
                "oobManagementSubnet",
                "prependAsPaths",
                "privateIp",
                "publicIp",
                "securityGroupId",
                "singleAzHa",
                "singleIpSnat",
                "softwareVersion",
                "spotPrice",
                "subnet",
                "tunnelDetectionTime",
                "vpcId",
                "vpcReg",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aviatrix:index/getAviatrixTransitGatewaysGatewayListBgpLanInterface:getAviatrixTransitGatewaysGatewayListBgpLanInterface": {
            "properties": {
                "subnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subnet",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aviatrix:index/getAviatrixTransitGatewaysGatewayListHaBgpLanInterface:getAviatrixTransitGatewaysGatewayListHaBgpLanInterface": {
            "properties": {
                "subnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subnet",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aviatrix:index/getAviatrixVpcPrivateSubnet:getAviatrixVpcPrivateSubnet": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cidr",
                "name",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aviatrix:index/getAviatrixVpcPublicSubnet:getAviatrixVpcPublicSubnet": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cidr",
                "name",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aviatrix:index/getAviatrixVpcSubnet:getAviatrixVpcSubnet": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cidr",
                "name",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aviatrix:index/getAviatrixVpcTrackerVpcList:getAviatrixVpcTrackerVpcList": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudType": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/getAviatrixVpcTrackerVpcListSubnet:getAviatrixVpcTrackerVpcListSubnet"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "cidr",
                "cloudType",
                "instanceCount",
                "name",
                "region",
                "subnets",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aviatrix:index/getAviatrixVpcTrackerVpcListSubnet:getAviatrixVpcTrackerVpcListSubnet": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gwIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cidr",
                "gwIp",
                "name",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the aviatrix package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "controllerIp": {
                "type": "string"
            },
            "ignoreTags": {
                "$ref": "#/types/aviatrix:index/ProviderIgnoreTags:ProviderIgnoreTags",
                "description": "Configuration block with settings to ignore tags across all resources.\n"
            },
            "password": {
                "type": "string"
            },
            "pathToCaCertificate": {
                "type": "string"
            },
            "skipVersionValidation": {
                "type": "boolean"
            },
            "username": {
                "type": "string"
            },
            "verifySslCertificate": {
                "type": "boolean"
            }
        },
        "required": [
            "controllerIp",
            "password",
            "username"
        ],
        "inputProperties": {
            "controllerIp": {
                "type": "string"
            },
            "ignoreTags": {
                "$ref": "#/types/aviatrix:index/ProviderIgnoreTags:ProviderIgnoreTags",
                "description": "Configuration block with settings to ignore tags across all resources.\n"
            },
            "password": {
                "type": "string"
            },
            "pathToCaCertificate": {
                "type": "string"
            },
            "skipVersionValidation": {
                "type": "boolean"
            },
            "username": {
                "type": "string"
            },
            "verifySslCertificate": {
                "type": "boolean"
            }
        },
        "requiredInputs": [
            "controllerIp",
            "password",
            "username"
        ]
    },
    "resources": {
        "aviatrix:index/aviatrixAccount:AviatrixAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Account name. This can be used for logging in to CloudN console or UserConnect controller.\n"
                },
                "alicloudAccessKey": {
                    "type": "string",
                    "description": "Alibaba Cloud Access Key.\n"
                },
                "alicloudAccountId": {
                    "type": "string",
                    "description": "Alibaba Cloud Account ID to associate with Aviatrix account.\n"
                },
                "alicloudSecretKey": {
                    "type": "string",
                    "description": "Alibaba Cloud Secret Key.\n"
                },
                "armApplicationId": {
                    "type": "string",
                    "description": "Azure Application ID.\n"
                },
                "armApplicationKey": {
                    "type": "string",
                    "description": "Azure Application Key.\n"
                },
                "armDirectoryId": {
                    "type": "string",
                    "description": "Azure Directory ID.\n"
                },
                "armSubscriptionId": {
                    "type": "string",
                    "description": "Azure Subscription ID.\n"
                },
                "auditAccount": {
                    "type": "boolean",
                    "description": "Enable account audit.\n"
                },
                "awsAccessKey": {
                    "type": "string",
                    "description": "AWS Access Key.\n"
                },
                "awsAccountNumber": {
                    "type": "string",
                    "description": "AWS Account number to associate with Aviatrix account. Should be 12 digits.\n"
                },
                "awsCaCertPath": {
                    "type": "string",
                    "description": "AWS Top Secret Region or Secret Region Custom Certificate Authority file path on the controller.\n"
                },
                "awsGatewayRoleApp": {
                    "type": "string",
                    "description": "AWS App role ARN for gateways.\n"
                },
                "awsGatewayRoleEc2": {
                    "type": "string",
                    "description": "AWS EC2 role ARN for gateways.\n"
                },
                "awsIam": {
                    "type": "boolean",
                    "description": "AWS IAM-role based flag.\n"
                },
                "awsRoleApp": {
                    "type": "string",
                    "description": "AWS App role ARN.\n"
                },
                "awsRoleEc2": {
                    "type": "string",
                    "description": "AWS EC2 role ARN.\n"
                },
                "awsSecretKey": {
                    "type": "string",
                    "description": "AWS Secret Key.\n"
                },
                "awschinaAccessKey": {
                    "type": "string",
                    "description": "AWS China Access Key.\n"
                },
                "awschinaAccountNumber": {
                    "type": "string",
                    "description": "AWS China Account Number.\n"
                },
                "awschinaIam": {
                    "type": "boolean",
                    "description": "AWS China IAM-role based flag.\n"
                },
                "awschinaRoleApp": {
                    "type": "string",
                    "description": "AWS China App Role ARN.\n"
                },
                "awschinaRoleEc2": {
                    "type": "string",
                    "description": "AWS China EC2 Role ARN.\n"
                },
                "awschinaSecretKey": {
                    "type": "string",
                    "description": "AWS China Secret Key.\n"
                },
                "awsgovAccessKey": {
                    "type": "string",
                    "description": "AWS Gov Access Key.\n"
                },
                "awsgovAccountNumber": {
                    "type": "string",
                    "description": "AWS Gov Account number to associate with Aviatrix account.\n"
                },
                "awsgovIam": {
                    "type": "boolean",
                    "description": "AWSGov IAM-role based flag\n"
                },
                "awsgovRoleApp": {
                    "type": "string",
                    "description": "AWSGov App role ARN\n"
                },
                "awsgovRoleEc2": {
                    "type": "string",
                    "description": "AWSGov EC2 role ARN\n"
                },
                "awsgovSecretKey": {
                    "type": "string",
                    "description": "AWS Gov Secret Key.\n"
                },
                "awssAccountNumber": {
                    "type": "string",
                    "description": "AWS Secret Region Account Number.\n"
                },
                "awssCaChainCert": {
                    "type": "string",
                    "description": "AWS Secret Region Custom Certificate Authority file path.\n"
                },
                "awssCapAccountName": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Account Name.\n"
                },
                "awssCapAgency": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Agency.\n"
                },
                "awssCapCert": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Certificate file path.\n"
                },
                "awssCapCertKey": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Certificate Key file path.\n"
                },
                "awssCapCertKeyPath": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Certificate Key file path on the controller.\n"
                },
                "awssCapCertPath": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Certificate file path on the controller.\n"
                },
                "awssCapRoleName": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Role Name.\n"
                },
                "awssCapUrl": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Endpoint URL.\n"
                },
                "awstsAccountNumber": {
                    "type": "string",
                    "description": "AWS Top Secret Region Account Number.\n"
                },
                "awstsCaChainCert": {
                    "type": "string",
                    "description": "AWS Top Secret Region Custom Certificate Authority file path.\n"
                },
                "awstsCapAgency": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Agency.\n"
                },
                "awstsCapCert": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Certificate file path.\n"
                },
                "awstsCapCertKey": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Certificate Key file path.\n"
                },
                "awstsCapCertKeyPath": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Certificate Key file path on the controller.\n"
                },
                "awstsCapCertPath": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Certificate file path on the controller.\n"
                },
                "awstsCapMission": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Mission.\n"
                },
                "awstsCapRoleName": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Role Name.\n"
                },
                "awstsCapUrl": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Endpoint URL.\n"
                },
                "azurechinaApplicationId": {
                    "type": "string",
                    "description": "Azure China Application ID.\n"
                },
                "azurechinaApplicationKey": {
                    "type": "string",
                    "description": "Azure China Application Key.\n"
                },
                "azurechinaDirectoryId": {
                    "type": "string",
                    "description": "Azure China Directory ID.\n"
                },
                "azurechinaSubscriptionId": {
                    "type": "string",
                    "description": "Azure China Subscription ID.\n"
                },
                "azuregovApplicationId": {
                    "type": "string",
                    "description": "Azure Gov Application ID.\n"
                },
                "azuregovApplicationKey": {
                    "type": "string",
                    "description": "Azure Gov Application Key.\n"
                },
                "azuregovDirectoryId": {
                    "type": "string",
                    "description": "Azure Gov Directory ID.\n"
                },
                "azuregovSubscriptionId": {
                    "type": "string",
                    "description": "Azure Gov Subscription ID.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider.\n"
                },
                "gcloudProjectCredentialsFilepath": {
                    "type": "string",
                    "description": "GCloud Project credentials local file path.\n"
                },
                "gcloudProjectId": {
                    "type": "string",
                    "description": "GCloud Project ID.\n"
                },
                "ociApiPrivateKeyFilepath": {
                    "type": "string",
                    "description": "OCI API Private Key local file path.\n"
                },
                "ociCompartmentId": {
                    "type": "string",
                    "description": "OCI Compartment OCID.\n"
                },
                "ociTenancyId": {
                    "type": "string",
                    "description": "OCI Tenancy OCID.\n"
                },
                "ociUserId": {
                    "type": "string",
                    "description": "OCI User OCID.\n"
                },
                "rbacGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of RBAC permission group names.\n"
                }
            },
            "required": [
                "accountName",
                "awsCaCertPath",
                "awsRoleApp",
                "awsRoleEc2",
                "awschinaRoleApp",
                "awschinaRoleEc2",
                "awsgovRoleApp",
                "awsgovRoleEc2",
                "awssCapCertKeyPath",
                "awssCapCertPath",
                "awstsCapCertKeyPath",
                "awstsCapCertPath",
                "cloudType"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "Account name. This can be used for logging in to CloudN console or UserConnect controller.\n",
                    "willReplaceOnChanges": true
                },
                "alicloudAccessKey": {
                    "type": "string",
                    "description": "Alibaba Cloud Access Key.\n"
                },
                "alicloudAccountId": {
                    "type": "string",
                    "description": "Alibaba Cloud Account ID to associate with Aviatrix account.\n"
                },
                "alicloudSecretKey": {
                    "type": "string",
                    "description": "Alibaba Cloud Secret Key.\n"
                },
                "armApplicationId": {
                    "type": "string",
                    "description": "Azure Application ID.\n"
                },
                "armApplicationKey": {
                    "type": "string",
                    "description": "Azure Application Key.\n"
                },
                "armDirectoryId": {
                    "type": "string",
                    "description": "Azure Directory ID.\n"
                },
                "armSubscriptionId": {
                    "type": "string",
                    "description": "Azure Subscription ID.\n"
                },
                "auditAccount": {
                    "type": "boolean",
                    "description": "Enable account audit.\n"
                },
                "awsAccessKey": {
                    "type": "string",
                    "description": "AWS Access Key.\n"
                },
                "awsAccountNumber": {
                    "type": "string",
                    "description": "AWS Account number to associate with Aviatrix account. Should be 12 digits.\n"
                },
                "awsGatewayRoleApp": {
                    "type": "string",
                    "description": "AWS App role ARN for gateways.\n"
                },
                "awsGatewayRoleEc2": {
                    "type": "string",
                    "description": "AWS EC2 role ARN for gateways.\n"
                },
                "awsIam": {
                    "type": "boolean",
                    "description": "AWS IAM-role based flag.\n"
                },
                "awsRoleApp": {
                    "type": "string",
                    "description": "AWS App role ARN.\n"
                },
                "awsRoleEc2": {
                    "type": "string",
                    "description": "AWS EC2 role ARN.\n"
                },
                "awsSecretKey": {
                    "type": "string",
                    "description": "AWS Secret Key.\n"
                },
                "awschinaAccessKey": {
                    "type": "string",
                    "description": "AWS China Access Key.\n"
                },
                "awschinaAccountNumber": {
                    "type": "string",
                    "description": "AWS China Account Number.\n"
                },
                "awschinaIam": {
                    "type": "boolean",
                    "description": "AWS China IAM-role based flag.\n"
                },
                "awschinaRoleApp": {
                    "type": "string",
                    "description": "AWS China App Role ARN.\n"
                },
                "awschinaRoleEc2": {
                    "type": "string",
                    "description": "AWS China EC2 Role ARN.\n"
                },
                "awschinaSecretKey": {
                    "type": "string",
                    "description": "AWS China Secret Key.\n"
                },
                "awsgovAccessKey": {
                    "type": "string",
                    "description": "AWS Gov Access Key.\n"
                },
                "awsgovAccountNumber": {
                    "type": "string",
                    "description": "AWS Gov Account number to associate with Aviatrix account.\n"
                },
                "awsgovIam": {
                    "type": "boolean",
                    "description": "AWSGov IAM-role based flag\n"
                },
                "awsgovRoleApp": {
                    "type": "string",
                    "description": "AWSGov App role ARN\n"
                },
                "awsgovRoleEc2": {
                    "type": "string",
                    "description": "AWSGov EC2 role ARN\n"
                },
                "awsgovSecretKey": {
                    "type": "string",
                    "description": "AWS Gov Secret Key.\n"
                },
                "awssAccountNumber": {
                    "type": "string",
                    "description": "AWS Secret Region Account Number.\n"
                },
                "awssCaChainCert": {
                    "type": "string",
                    "description": "AWS Secret Region Custom Certificate Authority file path.\n"
                },
                "awssCapAccountName": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Account Name.\n"
                },
                "awssCapAgency": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Agency.\n"
                },
                "awssCapCert": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Certificate file path.\n"
                },
                "awssCapCertKey": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Certificate Key file path.\n"
                },
                "awssCapRoleName": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Role Name.\n"
                },
                "awssCapUrl": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Endpoint URL.\n"
                },
                "awstsAccountNumber": {
                    "type": "string",
                    "description": "AWS Top Secret Region Account Number.\n"
                },
                "awstsCaChainCert": {
                    "type": "string",
                    "description": "AWS Top Secret Region Custom Certificate Authority file path.\n"
                },
                "awstsCapAgency": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Agency.\n"
                },
                "awstsCapCert": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Certificate file path.\n"
                },
                "awstsCapCertKey": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Certificate Key file path.\n"
                },
                "awstsCapMission": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Mission.\n"
                },
                "awstsCapRoleName": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Role Name.\n"
                },
                "awstsCapUrl": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Endpoint URL.\n"
                },
                "azurechinaApplicationId": {
                    "type": "string",
                    "description": "Azure China Application ID.\n"
                },
                "azurechinaApplicationKey": {
                    "type": "string",
                    "description": "Azure China Application Key.\n"
                },
                "azurechinaDirectoryId": {
                    "type": "string",
                    "description": "Azure China Directory ID.\n"
                },
                "azurechinaSubscriptionId": {
                    "type": "string",
                    "description": "Azure China Subscription ID.\n"
                },
                "azuregovApplicationId": {
                    "type": "string",
                    "description": "Azure Gov Application ID.\n"
                },
                "azuregovApplicationKey": {
                    "type": "string",
                    "description": "Azure Gov Application Key.\n"
                },
                "azuregovDirectoryId": {
                    "type": "string",
                    "description": "Azure Gov Directory ID.\n"
                },
                "azuregovSubscriptionId": {
                    "type": "string",
                    "description": "Azure Gov Subscription ID.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider.\n"
                },
                "gcloudProjectCredentialsFilepath": {
                    "type": "string",
                    "description": "GCloud Project credentials local file path.\n"
                },
                "gcloudProjectId": {
                    "type": "string",
                    "description": "GCloud Project ID.\n"
                },
                "ociApiPrivateKeyFilepath": {
                    "type": "string",
                    "description": "OCI API Private Key local file path.\n"
                },
                "ociCompartmentId": {
                    "type": "string",
                    "description": "OCI Compartment OCID.\n"
                },
                "ociTenancyId": {
                    "type": "string",
                    "description": "OCI Tenancy OCID.\n"
                },
                "ociUserId": {
                    "type": "string",
                    "description": "OCI User OCID.\n"
                },
                "rbacGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of RBAC permission group names.\n"
                }
            },
            "requiredInputs": [
                "accountName",
                "cloudType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAccount resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "Account name. This can be used for logging in to CloudN console or UserConnect controller.\n",
                        "willReplaceOnChanges": true
                    },
                    "alicloudAccessKey": {
                        "type": "string",
                        "description": "Alibaba Cloud Access Key.\n"
                    },
                    "alicloudAccountId": {
                        "type": "string",
                        "description": "Alibaba Cloud Account ID to associate with Aviatrix account.\n"
                    },
                    "alicloudSecretKey": {
                        "type": "string",
                        "description": "Alibaba Cloud Secret Key.\n"
                    },
                    "armApplicationId": {
                        "type": "string",
                        "description": "Azure Application ID.\n"
                    },
                    "armApplicationKey": {
                        "type": "string",
                        "description": "Azure Application Key.\n"
                    },
                    "armDirectoryId": {
                        "type": "string",
                        "description": "Azure Directory ID.\n"
                    },
                    "armSubscriptionId": {
                        "type": "string",
                        "description": "Azure Subscription ID.\n"
                    },
                    "auditAccount": {
                        "type": "boolean",
                        "description": "Enable account audit.\n"
                    },
                    "awsAccessKey": {
                        "type": "string",
                        "description": "AWS Access Key.\n"
                    },
                    "awsAccountNumber": {
                        "type": "string",
                        "description": "AWS Account number to associate with Aviatrix account. Should be 12 digits.\n"
                    },
                    "awsCaCertPath": {
                        "type": "string",
                        "description": "AWS Top Secret Region or Secret Region Custom Certificate Authority file path on the controller.\n"
                    },
                    "awsGatewayRoleApp": {
                        "type": "string",
                        "description": "AWS App role ARN for gateways.\n"
                    },
                    "awsGatewayRoleEc2": {
                        "type": "string",
                        "description": "AWS EC2 role ARN for gateways.\n"
                    },
                    "awsIam": {
                        "type": "boolean",
                        "description": "AWS IAM-role based flag.\n"
                    },
                    "awsRoleApp": {
                        "type": "string",
                        "description": "AWS App role ARN.\n"
                    },
                    "awsRoleEc2": {
                        "type": "string",
                        "description": "AWS EC2 role ARN.\n"
                    },
                    "awsSecretKey": {
                        "type": "string",
                        "description": "AWS Secret Key.\n"
                    },
                    "awschinaAccessKey": {
                        "type": "string",
                        "description": "AWS China Access Key.\n"
                    },
                    "awschinaAccountNumber": {
                        "type": "string",
                        "description": "AWS China Account Number.\n"
                    },
                    "awschinaIam": {
                        "type": "boolean",
                        "description": "AWS China IAM-role based flag.\n"
                    },
                    "awschinaRoleApp": {
                        "type": "string",
                        "description": "AWS China App Role ARN.\n"
                    },
                    "awschinaRoleEc2": {
                        "type": "string",
                        "description": "AWS China EC2 Role ARN.\n"
                    },
                    "awschinaSecretKey": {
                        "type": "string",
                        "description": "AWS China Secret Key.\n"
                    },
                    "awsgovAccessKey": {
                        "type": "string",
                        "description": "AWS Gov Access Key.\n"
                    },
                    "awsgovAccountNumber": {
                        "type": "string",
                        "description": "AWS Gov Account number to associate with Aviatrix account.\n"
                    },
                    "awsgovIam": {
                        "type": "boolean",
                        "description": "AWSGov IAM-role based flag\n"
                    },
                    "awsgovRoleApp": {
                        "type": "string",
                        "description": "AWSGov App role ARN\n"
                    },
                    "awsgovRoleEc2": {
                        "type": "string",
                        "description": "AWSGov EC2 role ARN\n"
                    },
                    "awsgovSecretKey": {
                        "type": "string",
                        "description": "AWS Gov Secret Key.\n"
                    },
                    "awssAccountNumber": {
                        "type": "string",
                        "description": "AWS Secret Region Account Number.\n"
                    },
                    "awssCaChainCert": {
                        "type": "string",
                        "description": "AWS Secret Region Custom Certificate Authority file path.\n"
                    },
                    "awssCapAccountName": {
                        "type": "string",
                        "description": "AWS Secret Region CAP Account Name.\n"
                    },
                    "awssCapAgency": {
                        "type": "string",
                        "description": "AWS Secret Region CAP Agency.\n"
                    },
                    "awssCapCert": {
                        "type": "string",
                        "description": "AWS Secret Region CAP Certificate file path.\n"
                    },
                    "awssCapCertKey": {
                        "type": "string",
                        "description": "AWS Secret Region CAP Certificate Key file path.\n"
                    },
                    "awssCapCertKeyPath": {
                        "type": "string",
                        "description": "AWS Secret Region CAP Certificate Key file path on the controller.\n"
                    },
                    "awssCapCertPath": {
                        "type": "string",
                        "description": "AWS Secret Region CAP Certificate file path on the controller.\n"
                    },
                    "awssCapRoleName": {
                        "type": "string",
                        "description": "AWS Secret Region CAP Role Name.\n"
                    },
                    "awssCapUrl": {
                        "type": "string",
                        "description": "AWS Secret Region CAP Endpoint URL.\n"
                    },
                    "awstsAccountNumber": {
                        "type": "string",
                        "description": "AWS Top Secret Region Account Number.\n"
                    },
                    "awstsCaChainCert": {
                        "type": "string",
                        "description": "AWS Top Secret Region Custom Certificate Authority file path.\n"
                    },
                    "awstsCapAgency": {
                        "type": "string",
                        "description": "AWS Top Secret Region CAP Agency.\n"
                    },
                    "awstsCapCert": {
                        "type": "string",
                        "description": "AWS Top Secret Region CAP Certificate file path.\n"
                    },
                    "awstsCapCertKey": {
                        "type": "string",
                        "description": "AWS Top Secret Region CAP Certificate Key file path.\n"
                    },
                    "awstsCapCertKeyPath": {
                        "type": "string",
                        "description": "AWS Top Secret Region CAP Certificate Key file path on the controller.\n"
                    },
                    "awstsCapCertPath": {
                        "type": "string",
                        "description": "AWS Top Secret Region CAP Certificate file path on the controller.\n"
                    },
                    "awstsCapMission": {
                        "type": "string",
                        "description": "AWS Top Secret Region CAP Mission.\n"
                    },
                    "awstsCapRoleName": {
                        "type": "string",
                        "description": "AWS Top Secret Region CAP Role Name.\n"
                    },
                    "awstsCapUrl": {
                        "type": "string",
                        "description": "AWS Top Secret Region CAP Endpoint URL.\n"
                    },
                    "azurechinaApplicationId": {
                        "type": "string",
                        "description": "Azure China Application ID.\n"
                    },
                    "azurechinaApplicationKey": {
                        "type": "string",
                        "description": "Azure China Application Key.\n"
                    },
                    "azurechinaDirectoryId": {
                        "type": "string",
                        "description": "Azure China Directory ID.\n"
                    },
                    "azurechinaSubscriptionId": {
                        "type": "string",
                        "description": "Azure China Subscription ID.\n"
                    },
                    "azuregovApplicationId": {
                        "type": "string",
                        "description": "Azure Gov Application ID.\n"
                    },
                    "azuregovApplicationKey": {
                        "type": "string",
                        "description": "Azure Gov Application Key.\n"
                    },
                    "azuregovDirectoryId": {
                        "type": "string",
                        "description": "Azure Gov Directory ID.\n"
                    },
                    "azuregovSubscriptionId": {
                        "type": "string",
                        "description": "Azure Gov Subscription ID.\n"
                    },
                    "cloudType": {
                        "type": "integer",
                        "description": "Type of cloud service provider.\n"
                    },
                    "gcloudProjectCredentialsFilepath": {
                        "type": "string",
                        "description": "GCloud Project credentials local file path.\n"
                    },
                    "gcloudProjectId": {
                        "type": "string",
                        "description": "GCloud Project ID.\n"
                    },
                    "ociApiPrivateKeyFilepath": {
                        "type": "string",
                        "description": "OCI API Private Key local file path.\n"
                    },
                    "ociCompartmentId": {
                        "type": "string",
                        "description": "OCI Compartment OCID.\n"
                    },
                    "ociTenancyId": {
                        "type": "string",
                        "description": "OCI Tenancy OCID.\n"
                    },
                    "ociUserId": {
                        "type": "string",
                        "description": "OCI User OCID.\n"
                    },
                    "rbacGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of RBAC permission group names.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAccountUser:AviatrixAccountUser": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "Email of address of account user to be created.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Login password for the account user to be created.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Name of account user to be created. It can only include alphanumeric characters(lower case only), hyphens, dots or\nunderscores. 1 to 80 in length. No spaces are allowed.\n"
                }
            },
            "required": [
                "email",
                "password",
                "username"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "Email of address of account user to be created.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Login password for the account user to be created.\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "Name of account user to be created. It can only include alphanumeric characters(lower case only), hyphens, dots or\nunderscores. 1 to 80 in length. No spaces are allowed.\n"
                }
            },
            "requiredInputs": [
                "email",
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAccountUser resources.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "Email of address of account user to be created.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Login password for the account user to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "username": {
                        "type": "string",
                        "description": "Name of account user to be created. It can only include alphanumeric characters(lower case only), hyphens, dots or\nunderscores. 1 to 80 in length. No spaces are allowed.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAppDomain:AviatrixAppDomain": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the App Domain.\n"
                },
                "selector": {
                    "$ref": "#/types/aviatrix:index/AviatrixAppDomainSelector:AviatrixAppDomainSelector",
                    "description": "List of match expressions for the App Domain.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "UUID of the App Domain.\n"
                }
            },
            "required": [
                "name",
                "selector",
                "uuid"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the App Domain.\n"
                },
                "selector": {
                    "$ref": "#/types/aviatrix:index/AviatrixAppDomainSelector:AviatrixAppDomainSelector",
                    "description": "List of match expressions for the App Domain.\n"
                }
            },
            "requiredInputs": [
                "selector"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAppDomain resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the App Domain.\n"
                    },
                    "selector": {
                        "$ref": "#/types/aviatrix:index/AviatrixAppDomainSelector:AviatrixAppDomainSelector",
                        "description": "List of match expressions for the App Domain.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "UUID of the App Domain.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixArmPeer:AviatrixArmPeer": {
            "properties": {
                "accountName1": {
                    "type": "string",
                    "description": "This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.\n"
                },
                "accountName2": {
                    "type": "string",
                    "description": "This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.\n"
                },
                "vnetCidr1s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VNet CIDR of vnet_name_resource_group1.\n"
                },
                "vnetCidr2s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VNet CIDR of vnet_name_resource_group2.\n"
                },
                "vnetNameResourceGroup1": {
                    "type": "string",
                    "description": "VNet-Name of Azure cloud.\n"
                },
                "vnetNameResourceGroup2": {
                    "type": "string",
                    "description": "VNet-Name of Azure cloud.\n"
                },
                "vnetReg1": {
                    "type": "string",
                    "description": "Region of Azure cloud.\n"
                },
                "vnetReg2": {
                    "type": "string",
                    "description": "Region of Azure cloud.\n"
                }
            },
            "required": [
                "accountName1",
                "accountName2",
                "vnetCidr1s",
                "vnetCidr2s",
                "vnetNameResourceGroup1",
                "vnetNameResourceGroup2",
                "vnetReg1",
                "vnetReg2"
            ],
            "inputProperties": {
                "accountName1": {
                    "type": "string",
                    "description": "This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.\n",
                    "willReplaceOnChanges": true
                },
                "accountName2": {
                    "type": "string",
                    "description": "This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.\n",
                    "willReplaceOnChanges": true
                },
                "vnetNameResourceGroup1": {
                    "type": "string",
                    "description": "VNet-Name of Azure cloud.\n",
                    "willReplaceOnChanges": true
                },
                "vnetNameResourceGroup2": {
                    "type": "string",
                    "description": "VNet-Name of Azure cloud.\n",
                    "willReplaceOnChanges": true
                },
                "vnetReg1": {
                    "type": "string",
                    "description": "Region of Azure cloud.\n",
                    "willReplaceOnChanges": true
                },
                "vnetReg2": {
                    "type": "string",
                    "description": "Region of Azure cloud.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountName1",
                "accountName2",
                "vnetNameResourceGroup1",
                "vnetNameResourceGroup2",
                "vnetReg1",
                "vnetReg2"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixArmPeer resources.\n",
                "properties": {
                    "accountName1": {
                        "type": "string",
                        "description": "This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.\n",
                        "willReplaceOnChanges": true
                    },
                    "accountName2": {
                        "type": "string",
                        "description": "This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.\n",
                        "willReplaceOnChanges": true
                    },
                    "vnetCidr1s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of VNet CIDR of vnet_name_resource_group1.\n"
                    },
                    "vnetCidr2s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of VNet CIDR of vnet_name_resource_group2.\n"
                    },
                    "vnetNameResourceGroup1": {
                        "type": "string",
                        "description": "VNet-Name of Azure cloud.\n",
                        "willReplaceOnChanges": true
                    },
                    "vnetNameResourceGroup2": {
                        "type": "string",
                        "description": "VNet-Name of Azure cloud.\n",
                        "willReplaceOnChanges": true
                    },
                    "vnetReg1": {
                        "type": "string",
                        "description": "Region of Azure cloud.\n",
                        "willReplaceOnChanges": true
                    },
                    "vnetReg2": {
                        "type": "string",
                        "description": "Region of Azure cloud.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAwsGuardDuty:AviatrixAwsGuardDuty": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Account name\n"
                },
                "excludedIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Excluded IPs.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region.\n"
                }
            },
            "required": [
                "accountName",
                "region"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "Account name\n",
                    "willReplaceOnChanges": true
                },
                "excludedIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Excluded IPs.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountName",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAwsGuardDuty resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "Account name\n",
                        "willReplaceOnChanges": true
                    },
                    "excludedIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Excluded IPs.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAwsPeer:AviatrixAwsPeer": {
            "properties": {
                "accountName1": {
                    "type": "string",
                    "description": "This parameter represents the name of an AWS Cloud-Account in Aviatrix controller.\n"
                },
                "accountName2": {
                    "type": "string",
                    "description": "This parameter represents the name of an AWS Cloud-Account in Aviatrix controller.\n"
                },
                "rtbList1Outputs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of route table ID of vpc_id1.\n"
                },
                "rtbList1s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Route table ID.\n"
                },
                "rtbList2Outputs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of route table ID of vpc_id2.\n"
                },
                "rtbList2s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Route table ID.\n"
                },
                "vpcId1": {
                    "type": "string",
                    "description": "VPC-ID of AWS cloud.\n"
                },
                "vpcId2": {
                    "type": "string",
                    "description": "VPC-ID of AWS cloud.\n"
                },
                "vpcReg1": {
                    "type": "string",
                    "description": "Region of AWS cloud.\n"
                },
                "vpcReg2": {
                    "type": "string",
                    "description": "Region of AWS cloud.\n"
                }
            },
            "required": [
                "accountName1",
                "accountName2",
                "rtbList1Outputs",
                "rtbList2Outputs",
                "vpcId1",
                "vpcId2",
                "vpcReg1",
                "vpcReg2"
            ],
            "inputProperties": {
                "accountName1": {
                    "type": "string",
                    "description": "This parameter represents the name of an AWS Cloud-Account in Aviatrix controller.\n",
                    "willReplaceOnChanges": true
                },
                "accountName2": {
                    "type": "string",
                    "description": "This parameter represents the name of an AWS Cloud-Account in Aviatrix controller.\n",
                    "willReplaceOnChanges": true
                },
                "rtbList1s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Route table ID.\n",
                    "willReplaceOnChanges": true
                },
                "rtbList2s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Route table ID.\n",
                    "willReplaceOnChanges": true
                },
                "vpcId1": {
                    "type": "string",
                    "description": "VPC-ID of AWS cloud.\n",
                    "willReplaceOnChanges": true
                },
                "vpcId2": {
                    "type": "string",
                    "description": "VPC-ID of AWS cloud.\n",
                    "willReplaceOnChanges": true
                },
                "vpcReg1": {
                    "type": "string",
                    "description": "Region of AWS cloud.\n",
                    "willReplaceOnChanges": true
                },
                "vpcReg2": {
                    "type": "string",
                    "description": "Region of AWS cloud.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountName1",
                "accountName2",
                "vpcId1",
                "vpcId2",
                "vpcReg1",
                "vpcReg2"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAwsPeer resources.\n",
                "properties": {
                    "accountName1": {
                        "type": "string",
                        "description": "This parameter represents the name of an AWS Cloud-Account in Aviatrix controller.\n",
                        "willReplaceOnChanges": true
                    },
                    "accountName2": {
                        "type": "string",
                        "description": "This parameter represents the name of an AWS Cloud-Account in Aviatrix controller.\n",
                        "willReplaceOnChanges": true
                    },
                    "rtbList1Outputs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of route table ID of vpc_id1.\n"
                    },
                    "rtbList1s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Route table ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "rtbList2Outputs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of route table ID of vpc_id2.\n"
                    },
                    "rtbList2s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Route table ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId1": {
                        "type": "string",
                        "description": "VPC-ID of AWS cloud.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId2": {
                        "type": "string",
                        "description": "VPC-ID of AWS cloud.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcReg1": {
                        "type": "string",
                        "description": "Region of AWS cloud.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcReg2": {
                        "type": "string",
                        "description": "Region of AWS cloud.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAwsTgw:AviatrixAwsTgw": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                },
                "attachedAviatrixTransitGateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Names of Aviatrix Transit Gateway to attach to one of the three default domains.\n",
                    "deprecationMessage": "Please set `manage_transit_gateway_attachment` to false, and use the standalone aviatrix_aws_tgw_transit_gateway_attachment resource instead."
                },
                "awsSideAsNumber": {
                    "type": "string",
                    "description": "BGP Local ASN (Autonomous System Number), Integer between 1-4294967294.\n"
                },
                "cidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TGW CIDRs.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider, requires an integer value. Supported for AWS (1) and AWS GOV (256). Default value: 1.\n"
                },
                "enableMulticast": {
                    "type": "boolean",
                    "description": "Enable Multicast.\n"
                },
                "inspectionMode": {
                    "type": "string",
                    "description": "Inspection mode. Valid values: 'Domain-based' and 'Connection-based'.\n"
                },
                "manageSecurityDomain": {
                    "type": "boolean",
                    "description": "This parameter is a switch used to determine whether or not to manage security domains to the TGW using the\naviatrix_aws_tgw resource. If this is set to false, security domains must be managed using the\naviatrix_aws_tgw_security_domain resource. Valid values: true, false. Default value: true.\n"
                },
                "manageTransitGatewayAttachment": {
                    "type": "boolean",
                    "description": "This parameter is a switch used to determine whether or not to manage transit gateway attachments to the TGW using the\naviatrix_aws_tgw resource. If this is set to false, attachment of transit gateways must be done using the\naviatrix_aws_tgw_transit_gateway_attachment resource. Valid values: true, false. Default value: true.\n"
                },
                "manageVpcAttachment": {
                    "type": "boolean",
                    "description": "This parameter is a switch used to determine whether or not to manage VPC attachments to the TGW using the\naviatrix_aws_tgw resource. If this is set to false, attachment of VPCs must be done using the\naviatrix_aws_tgw_vpc_attachment resource. Valid values: true, false. Default value: true.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of cloud provider.\n"
                },
                "securityDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixAwsTgwSecurityDomain:AviatrixAwsTgwSecurityDomain"
                    },
                    "description": "Security Domains to create together with AWS TGW's creation.\n",
                    "deprecationMessage": "Please set `manage_security_domain` to false, and use the standalone aviatrix_aws_tgw_network_domain resource instead."
                },
                "tgwId": {
                    "type": "string",
                    "description": "TGW ID.\n"
                },
                "tgwName": {
                    "type": "string",
                    "description": "Name of the AWS TGW which is going to be created.\n"
                }
            },
            "required": [
                "accountName",
                "awsSideAsNumber",
                "region",
                "tgwId",
                "tgwName"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                },
                "attachedAviatrixTransitGateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Names of Aviatrix Transit Gateway to attach to one of the three default domains.\n",
                    "deprecationMessage": "Please set `manage_transit_gateway_attachment` to false, and use the standalone aviatrix_aws_tgw_transit_gateway_attachment resource instead."
                },
                "awsSideAsNumber": {
                    "type": "string",
                    "description": "BGP Local ASN (Autonomous System Number), Integer between 1-4294967294.\n",
                    "willReplaceOnChanges": true
                },
                "cidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TGW CIDRs.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider, requires an integer value. Supported for AWS (1) and AWS GOV (256). Default value: 1.\n"
                },
                "enableMulticast": {
                    "type": "boolean",
                    "description": "Enable Multicast.\n"
                },
                "inspectionMode": {
                    "type": "string",
                    "description": "Inspection mode. Valid values: 'Domain-based' and 'Connection-based'.\n"
                },
                "manageSecurityDomain": {
                    "type": "boolean",
                    "description": "This parameter is a switch used to determine whether or not to manage security domains to the TGW using the\naviatrix_aws_tgw resource. If this is set to false, security domains must be managed using the\naviatrix_aws_tgw_security_domain resource. Valid values: true, false. Default value: true.\n"
                },
                "manageTransitGatewayAttachment": {
                    "type": "boolean",
                    "description": "This parameter is a switch used to determine whether or not to manage transit gateway attachments to the TGW using the\naviatrix_aws_tgw resource. If this is set to false, attachment of transit gateways must be done using the\naviatrix_aws_tgw_transit_gateway_attachment resource. Valid values: true, false. Default value: true.\n"
                },
                "manageVpcAttachment": {
                    "type": "boolean",
                    "description": "This parameter is a switch used to determine whether or not to manage VPC attachments to the TGW using the\naviatrix_aws_tgw resource. If this is set to false, attachment of VPCs must be done using the\naviatrix_aws_tgw_vpc_attachment resource. Valid values: true, false. Default value: true.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of cloud provider.\n"
                },
                "securityDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixAwsTgwSecurityDomain:AviatrixAwsTgwSecurityDomain"
                    },
                    "description": "Security Domains to create together with AWS TGW's creation.\n",
                    "deprecationMessage": "Please set `manage_security_domain` to false, and use the standalone aviatrix_aws_tgw_network_domain resource instead."
                },
                "tgwName": {
                    "type": "string",
                    "description": "Name of the AWS TGW which is going to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountName",
                "awsSideAsNumber",
                "region",
                "tgwName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAwsTgw resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                    },
                    "attachedAviatrixTransitGateways": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Names of Aviatrix Transit Gateway to attach to one of the three default domains.\n",
                        "deprecationMessage": "Please set `manage_transit_gateway_attachment` to false, and use the standalone aviatrix_aws_tgw_transit_gateway_attachment resource instead."
                    },
                    "awsSideAsNumber": {
                        "type": "string",
                        "description": "BGP Local ASN (Autonomous System Number), Integer between 1-4294967294.\n",
                        "willReplaceOnChanges": true
                    },
                    "cidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "TGW CIDRs.\n"
                    },
                    "cloudType": {
                        "type": "integer",
                        "description": "Type of cloud service provider, requires an integer value. Supported for AWS (1) and AWS GOV (256). Default value: 1.\n"
                    },
                    "enableMulticast": {
                        "type": "boolean",
                        "description": "Enable Multicast.\n"
                    },
                    "inspectionMode": {
                        "type": "string",
                        "description": "Inspection mode. Valid values: 'Domain-based' and 'Connection-based'.\n"
                    },
                    "manageSecurityDomain": {
                        "type": "boolean",
                        "description": "This parameter is a switch used to determine whether or not to manage security domains to the TGW using the\naviatrix_aws_tgw resource. If this is set to false, security domains must be managed using the\naviatrix_aws_tgw_security_domain resource. Valid values: true, false. Default value: true.\n"
                    },
                    "manageTransitGatewayAttachment": {
                        "type": "boolean",
                        "description": "This parameter is a switch used to determine whether or not to manage transit gateway attachments to the TGW using the\naviatrix_aws_tgw resource. If this is set to false, attachment of transit gateways must be done using the\naviatrix_aws_tgw_transit_gateway_attachment resource. Valid values: true, false. Default value: true.\n"
                    },
                    "manageVpcAttachment": {
                        "type": "boolean",
                        "description": "This parameter is a switch used to determine whether or not to manage VPC attachments to the TGW using the\naviatrix_aws_tgw resource. If this is set to false, attachment of VPCs must be done using the\naviatrix_aws_tgw_vpc_attachment resource. Valid values: true, false. Default value: true.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of cloud provider.\n"
                    },
                    "securityDomains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixAwsTgwSecurityDomain:AviatrixAwsTgwSecurityDomain"
                        },
                        "description": "Security Domains to create together with AWS TGW's creation.\n",
                        "deprecationMessage": "Please set `manage_security_domain` to false, and use the standalone aviatrix_aws_tgw_network_domain resource instead."
                    },
                    "tgwId": {
                        "type": "string",
                        "description": "TGW ID.\n"
                    },
                    "tgwName": {
                        "type": "string",
                        "description": "Name of the AWS TGW which is going to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAwsTgwConnect:AviatrixAwsTgwConnect": {
            "properties": {
                "connectAttachmentId": {
                    "type": "string",
                    "description": "Connect Attachment ID.\n"
                },
                "connectionName": {
                    "type": "string",
                    "description": "Connection Name.\n"
                },
                "networkDomainName": {
                    "type": "string",
                    "description": "Network Domain Name.\n"
                },
                "securityDomainName": {
                    "type": "string",
                    "description": "Security Domain Name.\n",
                    "deprecationMessage": "Please use network_domain_name instead."
                },
                "tgwName": {
                    "type": "string",
                    "description": "AWS TGW Name.\n"
                },
                "transportAttachmentId": {
                    "type": "string",
                    "description": "Transport Attachment ID.\n"
                },
                "transportVpcId": {
                    "type": "string",
                    "description": "Transport Attachment VPC ID.\n"
                }
            },
            "required": [
                "connectAttachmentId",
                "connectionName",
                "tgwName",
                "transportAttachmentId",
                "transportVpcId"
            ],
            "inputProperties": {
                "connectionName": {
                    "type": "string",
                    "description": "Connection Name.\n",
                    "willReplaceOnChanges": true
                },
                "networkDomainName": {
                    "type": "string",
                    "description": "Network Domain Name.\n",
                    "willReplaceOnChanges": true
                },
                "securityDomainName": {
                    "type": "string",
                    "description": "Security Domain Name.\n",
                    "deprecationMessage": "Please use network_domain_name instead.",
                    "willReplaceOnChanges": true
                },
                "tgwName": {
                    "type": "string",
                    "description": "AWS TGW Name.\n",
                    "willReplaceOnChanges": true
                },
                "transportVpcId": {
                    "type": "string",
                    "description": "Transport Attachment VPC ID.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "connectionName",
                "tgwName",
                "transportVpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAwsTgwConnect resources.\n",
                "properties": {
                    "connectAttachmentId": {
                        "type": "string",
                        "description": "Connect Attachment ID.\n"
                    },
                    "connectionName": {
                        "type": "string",
                        "description": "Connection Name.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkDomainName": {
                        "type": "string",
                        "description": "Network Domain Name.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityDomainName": {
                        "type": "string",
                        "description": "Security Domain Name.\n",
                        "deprecationMessage": "Please use network_domain_name instead.",
                        "willReplaceOnChanges": true
                    },
                    "tgwName": {
                        "type": "string",
                        "description": "AWS TGW Name.\n",
                        "willReplaceOnChanges": true
                    },
                    "transportAttachmentId": {
                        "type": "string",
                        "description": "Transport Attachment ID.\n"
                    },
                    "transportVpcId": {
                        "type": "string",
                        "description": "Transport Attachment VPC ID.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAwsTgwConnectPeer:AviatrixAwsTgwConnectPeer": {
            "properties": {
                "bgpInsideCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of BGP Inside CIDR Blocks.\n"
                },
                "connectAttachmentId": {
                    "type": "string",
                    "description": "Connect Attachment ID.\n"
                },
                "connectPeerId": {
                    "type": "string",
                    "description": "Connect Peer ID.\n"
                },
                "connectPeerName": {
                    "type": "string",
                    "description": "Connect Peer Name.\n"
                },
                "connectionName": {
                    "type": "string",
                    "description": "AWS TGW Connect connection name.\n"
                },
                "peerAsNumber": {
                    "type": "string",
                    "description": "Peer AS Number.\n"
                },
                "peerGreAddress": {
                    "type": "string",
                    "description": "Peer GRE IP Address.\n"
                },
                "tgwGreAddress": {
                    "type": "string",
                    "description": "AWS TGW GRE IP Address.\n"
                },
                "tgwName": {
                    "type": "string",
                    "description": "AWS TGW Name.\n"
                }
            },
            "required": [
                "bgpInsideCidrs",
                "connectAttachmentId",
                "connectPeerId",
                "connectPeerName",
                "connectionName",
                "peerAsNumber",
                "peerGreAddress",
                "tgwName"
            ],
            "inputProperties": {
                "bgpInsideCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of BGP Inside CIDR Blocks.\n",
                    "willReplaceOnChanges": true
                },
                "connectAttachmentId": {
                    "type": "string",
                    "description": "Connect Attachment ID.\n",
                    "willReplaceOnChanges": true
                },
                "connectPeerName": {
                    "type": "string",
                    "description": "Connect Peer Name.\n",
                    "willReplaceOnChanges": true
                },
                "connectionName": {
                    "type": "string",
                    "description": "AWS TGW Connect connection name.\n",
                    "willReplaceOnChanges": true
                },
                "peerAsNumber": {
                    "type": "string",
                    "description": "Peer AS Number.\n",
                    "willReplaceOnChanges": true
                },
                "peerGreAddress": {
                    "type": "string",
                    "description": "Peer GRE IP Address.\n",
                    "willReplaceOnChanges": true
                },
                "tgwGreAddress": {
                    "type": "string",
                    "description": "AWS TGW GRE IP Address.\n",
                    "willReplaceOnChanges": true
                },
                "tgwName": {
                    "type": "string",
                    "description": "AWS TGW Name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "bgpInsideCidrs",
                "connectAttachmentId",
                "connectPeerName",
                "connectionName",
                "peerAsNumber",
                "peerGreAddress",
                "tgwName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAwsTgwConnectPeer resources.\n",
                "properties": {
                    "bgpInsideCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of BGP Inside CIDR Blocks.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectAttachmentId": {
                        "type": "string",
                        "description": "Connect Attachment ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectPeerId": {
                        "type": "string",
                        "description": "Connect Peer ID.\n"
                    },
                    "connectPeerName": {
                        "type": "string",
                        "description": "Connect Peer Name.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionName": {
                        "type": "string",
                        "description": "AWS TGW Connect connection name.\n",
                        "willReplaceOnChanges": true
                    },
                    "peerAsNumber": {
                        "type": "string",
                        "description": "Peer AS Number.\n",
                        "willReplaceOnChanges": true
                    },
                    "peerGreAddress": {
                        "type": "string",
                        "description": "Peer GRE IP Address.\n",
                        "willReplaceOnChanges": true
                    },
                    "tgwGreAddress": {
                        "type": "string",
                        "description": "AWS TGW GRE IP Address.\n",
                        "willReplaceOnChanges": true
                    },
                    "tgwName": {
                        "type": "string",
                        "description": "AWS TGW Name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAwsTgwDirectconnect:AviatrixAwsTgwDirectconnect": {
            "properties": {
                "allowedPrefix": {
                    "type": "string",
                    "description": "Public IP address. Example: '40.0.0.0'.\n"
                },
                "directconnectAccountName": {
                    "type": "string",
                    "description": "This parameter represents the name of an Account in Aviatrix controller.\n"
                },
                "dxGatewayId": {
                    "type": "string",
                    "description": "This parameter represents the name of a Direct Connect Gateway ID.\n"
                },
                "enableLearnedCidrsApproval": {
                    "type": "boolean",
                    "description": "Switch to enable/disable encrypted transit approval for direct connection. Valid values: true, false.\n"
                },
                "networkDomainName": {
                    "type": "string",
                    "description": "The name of an Aviatrix network domain, to which the direct connect gateway will be attached.\n"
                },
                "securityDomainName": {
                    "type": "string",
                    "description": "The name of an Aviatrix security domain, to which the direct connect gateway will be attached.\n",
                    "deprecationMessage": "Please use network_domain_name instead."
                },
                "tgwName": {
                    "type": "string",
                    "description": "This parameter represents the name of an AWS TGW.\n"
                }
            },
            "required": [
                "allowedPrefix",
                "directconnectAccountName",
                "dxGatewayId",
                "tgwName"
            ],
            "inputProperties": {
                "allowedPrefix": {
                    "type": "string",
                    "description": "Public IP address. Example: '40.0.0.0'.\n"
                },
                "directconnectAccountName": {
                    "type": "string",
                    "description": "This parameter represents the name of an Account in Aviatrix controller.\n",
                    "willReplaceOnChanges": true
                },
                "dxGatewayId": {
                    "type": "string",
                    "description": "This parameter represents the name of a Direct Connect Gateway ID.\n",
                    "willReplaceOnChanges": true
                },
                "enableLearnedCidrsApproval": {
                    "type": "boolean",
                    "description": "Switch to enable/disable encrypted transit approval for direct connection. Valid values: true, false.\n"
                },
                "networkDomainName": {
                    "type": "string",
                    "description": "The name of an Aviatrix network domain, to which the direct connect gateway will be attached.\n",
                    "willReplaceOnChanges": true
                },
                "securityDomainName": {
                    "type": "string",
                    "description": "The name of an Aviatrix security domain, to which the direct connect gateway will be attached.\n",
                    "deprecationMessage": "Please use network_domain_name instead.",
                    "willReplaceOnChanges": true
                },
                "tgwName": {
                    "type": "string",
                    "description": "This parameter represents the name of an AWS TGW.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "allowedPrefix",
                "directconnectAccountName",
                "dxGatewayId",
                "tgwName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAwsTgwDirectconnect resources.\n",
                "properties": {
                    "allowedPrefix": {
                        "type": "string",
                        "description": "Public IP address. Example: '40.0.0.0'.\n"
                    },
                    "directconnectAccountName": {
                        "type": "string",
                        "description": "This parameter represents the name of an Account in Aviatrix controller.\n",
                        "willReplaceOnChanges": true
                    },
                    "dxGatewayId": {
                        "type": "string",
                        "description": "This parameter represents the name of a Direct Connect Gateway ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableLearnedCidrsApproval": {
                        "type": "boolean",
                        "description": "Switch to enable/disable encrypted transit approval for direct connection. Valid values: true, false.\n"
                    },
                    "networkDomainName": {
                        "type": "string",
                        "description": "The name of an Aviatrix network domain, to which the direct connect gateway will be attached.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityDomainName": {
                        "type": "string",
                        "description": "The name of an Aviatrix security domain, to which the direct connect gateway will be attached.\n",
                        "deprecationMessage": "Please use network_domain_name instead.",
                        "willReplaceOnChanges": true
                    },
                    "tgwName": {
                        "type": "string",
                        "description": "This parameter represents the name of an AWS TGW.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAwsTgwIntraDomainInspection:AviatrixAwsTgwIntraDomainInspection": {
            "properties": {
                "firewallDomainName": {
                    "type": "string",
                    "description": "Firewall domain name.\n"
                },
                "routeDomainName": {
                    "type": "string",
                    "description": "Route domain name.\n"
                },
                "tgwName": {
                    "type": "string",
                    "description": "AWS TGW name.\n"
                }
            },
            "required": [
                "firewallDomainName",
                "routeDomainName",
                "tgwName"
            ],
            "inputProperties": {
                "firewallDomainName": {
                    "type": "string",
                    "description": "Firewall domain name.\n",
                    "willReplaceOnChanges": true
                },
                "routeDomainName": {
                    "type": "string",
                    "description": "Route domain name.\n",
                    "willReplaceOnChanges": true
                },
                "tgwName": {
                    "type": "string",
                    "description": "AWS TGW name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "firewallDomainName",
                "routeDomainName",
                "tgwName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAwsTgwIntraDomainInspection resources.\n",
                "properties": {
                    "firewallDomainName": {
                        "type": "string",
                        "description": "Firewall domain name.\n",
                        "willReplaceOnChanges": true
                    },
                    "routeDomainName": {
                        "type": "string",
                        "description": "Route domain name.\n",
                        "willReplaceOnChanges": true
                    },
                    "tgwName": {
                        "type": "string",
                        "description": "AWS TGW name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAwsTgwNetworkDomain:AviatrixAwsTgwNetworkDomain": {
            "properties": {
                "aviatrixFirewall": {
                    "type": "boolean",
                    "description": "Set to true if the network domain is an aviatrix firewall domain.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Network domain name.\n"
                },
                "nativeEgress": {
                    "type": "boolean",
                    "description": "Set to true if the network domain is a native egress domain.\n"
                },
                "nativeFirewall": {
                    "type": "boolean",
                    "description": "Set to true if the network domain is a native firewall domain.\n"
                },
                "tgwName": {
                    "type": "string",
                    "description": "AWS TGW name.\n"
                }
            },
            "required": [
                "name",
                "tgwName"
            ],
            "inputProperties": {
                "aviatrixFirewall": {
                    "type": "boolean",
                    "description": "Set to true if the network domain is an aviatrix firewall domain.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Network domain name.\n",
                    "willReplaceOnChanges": true
                },
                "nativeEgress": {
                    "type": "boolean",
                    "description": "Set to true if the network domain is a native egress domain.\n",
                    "willReplaceOnChanges": true
                },
                "nativeFirewall": {
                    "type": "boolean",
                    "description": "Set to true if the network domain is a native firewall domain.\n",
                    "willReplaceOnChanges": true
                },
                "tgwName": {
                    "type": "string",
                    "description": "AWS TGW name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tgwName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAwsTgwNetworkDomain resources.\n",
                "properties": {
                    "aviatrixFirewall": {
                        "type": "boolean",
                        "description": "Set to true if the network domain is an aviatrix firewall domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Network domain name.\n",
                        "willReplaceOnChanges": true
                    },
                    "nativeEgress": {
                        "type": "boolean",
                        "description": "Set to true if the network domain is a native egress domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "nativeFirewall": {
                        "type": "boolean",
                        "description": "Set to true if the network domain is a native firewall domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "tgwName": {
                        "type": "string",
                        "description": "AWS TGW name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAwsTgwPeering:AviatrixAwsTgwPeering": {
            "properties": {
                "tgwName1": {
                    "type": "string",
                    "description": "Name of the first AWS tgw to make a peer pair.\n"
                },
                "tgwName2": {
                    "type": "string",
                    "description": "Name of the second AWS tgw to make a peer pair.\n"
                }
            },
            "required": [
                "tgwName1",
                "tgwName2"
            ],
            "inputProperties": {
                "tgwName1": {
                    "type": "string",
                    "description": "Name of the first AWS tgw to make a peer pair.\n",
                    "willReplaceOnChanges": true
                },
                "tgwName2": {
                    "type": "string",
                    "description": "Name of the second AWS tgw to make a peer pair.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tgwName1",
                "tgwName2"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAwsTgwPeering resources.\n",
                "properties": {
                    "tgwName1": {
                        "type": "string",
                        "description": "Name of the first AWS tgw to make a peer pair.\n",
                        "willReplaceOnChanges": true
                    },
                    "tgwName2": {
                        "type": "string",
                        "description": "Name of the second AWS tgw to make a peer pair.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAwsTgwPeeringDomainConn:AviatrixAwsTgwPeeringDomainConn": {
            "properties": {
                "domainName1": {
                    "type": "string",
                    "description": "The name of the source domain to make a connection.\n"
                },
                "domainName2": {
                    "type": "string",
                    "description": "The name of the destination domain to make a connection.\n"
                },
                "tgwName1": {
                    "type": "string",
                    "description": "The AWS tgw name of the source domain to make a connection.\n"
                },
                "tgwName2": {
                    "type": "string",
                    "description": "The AWS tgw name of the destination domain to make a connection.\n"
                }
            },
            "required": [
                "domainName1",
                "domainName2",
                "tgwName1",
                "tgwName2"
            ],
            "inputProperties": {
                "domainName1": {
                    "type": "string",
                    "description": "The name of the source domain to make a connection.\n",
                    "willReplaceOnChanges": true
                },
                "domainName2": {
                    "type": "string",
                    "description": "The name of the destination domain to make a connection.\n",
                    "willReplaceOnChanges": true
                },
                "tgwName1": {
                    "type": "string",
                    "description": "The AWS tgw name of the source domain to make a connection.\n",
                    "willReplaceOnChanges": true
                },
                "tgwName2": {
                    "type": "string",
                    "description": "The AWS tgw name of the destination domain to make a connection.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "domainName1",
                "domainName2",
                "tgwName1",
                "tgwName2"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAwsTgwPeeringDomainConn resources.\n",
                "properties": {
                    "domainName1": {
                        "type": "string",
                        "description": "The name of the source domain to make a connection.\n",
                        "willReplaceOnChanges": true
                    },
                    "domainName2": {
                        "type": "string",
                        "description": "The name of the destination domain to make a connection.\n",
                        "willReplaceOnChanges": true
                    },
                    "tgwName1": {
                        "type": "string",
                        "description": "The AWS tgw name of the source domain to make a connection.\n",
                        "willReplaceOnChanges": true
                    },
                    "tgwName2": {
                        "type": "string",
                        "description": "The AWS tgw name of the destination domain to make a connection.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAwsTgwSecurityDomain:AviatrixAwsTgwSecurityDomain": {
            "properties": {
                "aviatrixFirewall": {
                    "type": "boolean",
                    "description": "Set to true if the security domain is an aviatrix firewall domain.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Security domain name.\n"
                },
                "nativeEgress": {
                    "type": "boolean",
                    "description": "Set to true if the security domain is a native egress domain.\n"
                },
                "nativeFirewall": {
                    "type": "boolean",
                    "description": "Set to true if the security domain is a native firewall domain.\n"
                },
                "tgwName": {
                    "type": "string",
                    "description": "AWS TGW name.\n"
                }
            },
            "required": [
                "name",
                "tgwName"
            ],
            "inputProperties": {
                "aviatrixFirewall": {
                    "type": "boolean",
                    "description": "Set to true if the security domain is an aviatrix firewall domain.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Security domain name.\n",
                    "willReplaceOnChanges": true
                },
                "nativeEgress": {
                    "type": "boolean",
                    "description": "Set to true if the security domain is a native egress domain.\n",
                    "willReplaceOnChanges": true
                },
                "nativeFirewall": {
                    "type": "boolean",
                    "description": "Set to true if the security domain is a native firewall domain.\n",
                    "willReplaceOnChanges": true
                },
                "tgwName": {
                    "type": "string",
                    "description": "AWS TGW name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tgwName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAwsTgwSecurityDomain resources.\n",
                "properties": {
                    "aviatrixFirewall": {
                        "type": "boolean",
                        "description": "Set to true if the security domain is an aviatrix firewall domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Security domain name.\n",
                        "willReplaceOnChanges": true
                    },
                    "nativeEgress": {
                        "type": "boolean",
                        "description": "Set to true if the security domain is a native egress domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "nativeFirewall": {
                        "type": "boolean",
                        "description": "Set to true if the security domain is a native firewall domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "tgwName": {
                        "type": "string",
                        "description": "AWS TGW name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAwsTgwSecurityDomainConn:AviatrixAwsTgwSecurityDomainConn": {
            "properties": {
                "domainName1": {
                    "type": "string",
                    "description": "Security domain name 1.\n"
                },
                "domainName2": {
                    "type": "string",
                    "description": "Security domain name 2.\n"
                },
                "tgwName": {
                    "type": "string",
                    "description": "AWS TGW name.\n"
                }
            },
            "required": [
                "domainName1",
                "domainName2",
                "tgwName"
            ],
            "inputProperties": {
                "domainName1": {
                    "type": "string",
                    "description": "Security domain name 1.\n",
                    "willReplaceOnChanges": true
                },
                "domainName2": {
                    "type": "string",
                    "description": "Security domain name 2.\n",
                    "willReplaceOnChanges": true
                },
                "tgwName": {
                    "type": "string",
                    "description": "AWS TGW name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "domainName1",
                "domainName2",
                "tgwName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAwsTgwSecurityDomainConn resources.\n",
                "properties": {
                    "domainName1": {
                        "type": "string",
                        "description": "Security domain name 1.\n",
                        "willReplaceOnChanges": true
                    },
                    "domainName2": {
                        "type": "string",
                        "description": "Security domain name 2.\n",
                        "willReplaceOnChanges": true
                    },
                    "tgwName": {
                        "type": "string",
                        "description": "AWS TGW name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAwsTgwTransitGatewayAttachment:AviatrixAwsTgwTransitGatewayAttachment": {
            "properties": {
                "region": {
                    "type": "string",
                    "description": "Region of cloud provider.\n"
                },
                "tgwName": {
                    "type": "string",
                    "description": "Name of the AWS TGW.\n"
                },
                "transitGatewayName": {
                    "type": "string",
                    "description": "Name of the transit gateway to be attached to tgw.\n"
                },
                "vpcAccountName": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "This parameter represents the ID of the VPC.\n"
                }
            },
            "required": [
                "region",
                "tgwName",
                "transitGatewayName",
                "vpcAccountName",
                "vpcId"
            ],
            "inputProperties": {
                "region": {
                    "type": "string",
                    "description": "Region of cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "tgwName": {
                    "type": "string",
                    "description": "Name of the AWS TGW.\n",
                    "willReplaceOnChanges": true
                },
                "transitGatewayName": {
                    "type": "string",
                    "description": "Name of the transit gateway to be attached to tgw.\n",
                    "willReplaceOnChanges": true
                },
                "vpcAccountName": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n",
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "This parameter represents the ID of the VPC.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "region",
                "tgwName",
                "transitGatewayName",
                "vpcAccountName",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAwsTgwTransitGatewayAttachment resources.\n",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "Region of cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "tgwName": {
                        "type": "string",
                        "description": "Name of the AWS TGW.\n",
                        "willReplaceOnChanges": true
                    },
                    "transitGatewayName": {
                        "type": "string",
                        "description": "Name of the transit gateway to be attached to tgw.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcAccountName": {
                        "type": "string",
                        "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "This parameter represents the ID of the VPC.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAwsTgwVpcAttachment:AviatrixAwsTgwVpcAttachment": {
            "properties": {
                "customizedRouteAdvertisement": {
                    "type": "string",
                    "description": "Advanced option. Customized route(s) to be advertised to other VPCs that are connected to the same TGW.\n"
                },
                "customizedRoutes": {
                    "type": "string",
                    "description": "Advanced option. Customized Spoke VPC Routes. It allows the admin to enter non-RFC1918 routes in the VPC route table\ntargeting the TGW.\n"
                },
                "disableLocalRoutePropagation": {
                    "type": "boolean",
                    "description": "Advanced option. If set to true, it disables automatic route propagation of this VPC to other VPCs within the same\nnetwork domain.\n"
                },
                "edgeAttachment": {
                    "type": "string",
                    "description": "Edge attachment ID. To allow access to the private IP of the MGMT interface of the Firewalls, set this attribute to\nenable Management Access From Onprem. This feature advertises the Firewalls private MGMT subnet to your Edge domain.\n"
                },
                "networkDomainName": {
                    "type": "string",
                    "description": "The name of the network domain.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of cloud provider.\n"
                },
                "routeTables": {
                    "type": "string",
                    "description": "Advanced option. Route tables separated by ',' to participate in TGW Orchestrator, i.e., learned routes will be\npropagated to these route tables.\n"
                },
                "securityDomainName": {
                    "type": "string",
                    "description": "The name of the security domain.\n",
                    "deprecationMessage": "Please use network_domain_name instead."
                },
                "subnets": {
                    "type": "string",
                    "description": "Advanced option. VPC subnets separated by ',' to attach to the VPC. If left blank, Aviatrix Controller automatically\nselects a subnet representing each AZ for the VPC attachment.\n"
                },
                "tgwName": {
                    "type": "string",
                    "description": "Name of the AWS TGW.\n"
                },
                "vpcAccountName": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "This parameter represents the ID of the VPC.\n"
                }
            },
            "required": [
                "region",
                "routeTables",
                "subnets",
                "tgwName",
                "vpcAccountName",
                "vpcId"
            ],
            "inputProperties": {
                "customizedRouteAdvertisement": {
                    "type": "string",
                    "description": "Advanced option. Customized route(s) to be advertised to other VPCs that are connected to the same TGW.\n"
                },
                "customizedRoutes": {
                    "type": "string",
                    "description": "Advanced option. Customized Spoke VPC Routes. It allows the admin to enter non-RFC1918 routes in the VPC route table\ntargeting the TGW.\n"
                },
                "disableLocalRoutePropagation": {
                    "type": "boolean",
                    "description": "Advanced option. If set to true, it disables automatic route propagation of this VPC to other VPCs within the same\nnetwork domain.\n",
                    "willReplaceOnChanges": true
                },
                "edgeAttachment": {
                    "type": "string",
                    "description": "Edge attachment ID. To allow access to the private IP of the MGMT interface of the Firewalls, set this attribute to\nenable Management Access From Onprem. This feature advertises the Firewalls private MGMT subnet to your Edge domain.\n"
                },
                "networkDomainName": {
                    "type": "string",
                    "description": "The name of the network domain.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "Region of cloud provider.\n"
                },
                "routeTables": {
                    "type": "string",
                    "description": "Advanced option. Route tables separated by ',' to participate in TGW Orchestrator, i.e., learned routes will be\npropagated to these route tables.\n",
                    "willReplaceOnChanges": true
                },
                "securityDomainName": {
                    "type": "string",
                    "description": "The name of the security domain.\n",
                    "deprecationMessage": "Please use network_domain_name instead.",
                    "willReplaceOnChanges": true
                },
                "subnets": {
                    "type": "string",
                    "description": "Advanced option. VPC subnets separated by ',' to attach to the VPC. If left blank, Aviatrix Controller automatically\nselects a subnet representing each AZ for the VPC attachment.\n",
                    "willReplaceOnChanges": true
                },
                "tgwName": {
                    "type": "string",
                    "description": "Name of the AWS TGW.\n",
                    "willReplaceOnChanges": true
                },
                "vpcAccountName": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "This parameter represents the ID of the VPC.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "region",
                "tgwName",
                "vpcAccountName",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAwsTgwVpcAttachment resources.\n",
                "properties": {
                    "customizedRouteAdvertisement": {
                        "type": "string",
                        "description": "Advanced option. Customized route(s) to be advertised to other VPCs that are connected to the same TGW.\n"
                    },
                    "customizedRoutes": {
                        "type": "string",
                        "description": "Advanced option. Customized Spoke VPC Routes. It allows the admin to enter non-RFC1918 routes in the VPC route table\ntargeting the TGW.\n"
                    },
                    "disableLocalRoutePropagation": {
                        "type": "boolean",
                        "description": "Advanced option. If set to true, it disables automatic route propagation of this VPC to other VPCs within the same\nnetwork domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "edgeAttachment": {
                        "type": "string",
                        "description": "Edge attachment ID. To allow access to the private IP of the MGMT interface of the Firewalls, set this attribute to\nenable Management Access From Onprem. This feature advertises the Firewalls private MGMT subnet to your Edge domain.\n"
                    },
                    "networkDomainName": {
                        "type": "string",
                        "description": "The name of the network domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of cloud provider.\n"
                    },
                    "routeTables": {
                        "type": "string",
                        "description": "Advanced option. Route tables separated by ',' to participate in TGW Orchestrator, i.e., learned routes will be\npropagated to these route tables.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityDomainName": {
                        "type": "string",
                        "description": "The name of the security domain.\n",
                        "deprecationMessage": "Please use network_domain_name instead.",
                        "willReplaceOnChanges": true
                    },
                    "subnets": {
                        "type": "string",
                        "description": "Advanced option. VPC subnets separated by ',' to attach to the VPC. If left blank, Aviatrix Controller automatically\nselects a subnet representing each AZ for the VPC attachment.\n",
                        "willReplaceOnChanges": true
                    },
                    "tgwName": {
                        "type": "string",
                        "description": "Name of the AWS TGW.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcAccountName": {
                        "type": "string",
                        "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "This parameter represents the ID of the VPC.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAwsTgwVpnConn:AviatrixAwsTgwVpnConn": {
            "properties": {
                "connectionName": {
                    "type": "string",
                    "description": "Unique name of the connection.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Connection type. Valid values: 'dynamic', 'static'. 'dynamic' stands for a BGP VPN connection; 'static' stands for a\nstatic VPN connection. Default value: 'dynamic'.\n"
                },
                "enableGlobalAcceleration": {
                    "type": "boolean",
                    "description": "Enable Global Acceleration.\n"
                },
                "enableLearnedCidrsApproval": {
                    "type": "boolean",
                    "description": "Switch to enable/disable encrypted transit approval for vpn connection. Valid values: true, false.\n"
                },
                "insideIpCidrTun1": {
                    "type": "string",
                    "description": "Inside IP CIDR for Tunnel 1. A /30 CIDR in 169.254.0.0/16.\n"
                },
                "insideIpCidrTun2": {
                    "type": "string",
                    "description": "Inside IP CIDR for Tunnel 2. A /30 CIDR in 169.254.0.0/16.\n"
                },
                "preSharedKeyTun1": {
                    "type": "string",
                    "description": "Pre-Shared Key for Tunnel 1. A 8-64 character string with alphanumeric, underscore(_) and dot(.). It cannot start with 0\n"
                },
                "preSharedKeyTun2": {
                    "type": "string",
                    "description": "Pre-Shared Key for Tunnel 2. A 8-64 character string with alphanumeric, underscore(_) and dot(.). It cannot start with 0\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "Public IP address. Example: '40.0.0.0'.\n"
                },
                "remoteAsNumber": {
                    "type": "string",
                    "description": "AWS side as a number. Integer between 1-4294967294. Example: '12'. Required for a dynamic VPN connection.\n"
                },
                "remoteCidr": {
                    "type": "string",
                    "description": "Remote CIDRs joined as a string with ','. Required for a static VPN connection.\n"
                },
                "routeDomainName": {
                    "type": "string",
                    "description": "The name of a route domain, to which the vpn will be attached.\n"
                },
                "tgwName": {
                    "type": "string",
                    "description": "This parameter represents the name of an AWS TGW.\n"
                },
                "vpnId": {
                    "type": "string",
                    "description": "ID of the vpn connection.\n"
                },
                "vpnTunnelDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixAwsTgwVpnConnVpnTunnelData:AviatrixAwsTgwVpnConnVpnTunnelData"
                    },
                    "description": "VPN tunnel data.\n"
                }
            },
            "required": [
                "connectionName",
                "publicIp",
                "routeDomainName",
                "tgwName",
                "vpnId",
                "vpnTunnelDatas"
            ],
            "inputProperties": {
                "connectionName": {
                    "type": "string",
                    "description": "Unique name of the connection.\n",
                    "willReplaceOnChanges": true
                },
                "connectionType": {
                    "type": "string",
                    "description": "Connection type. Valid values: 'dynamic', 'static'. 'dynamic' stands for a BGP VPN connection; 'static' stands for a\nstatic VPN connection. Default value: 'dynamic'.\n",
                    "willReplaceOnChanges": true
                },
                "enableGlobalAcceleration": {
                    "type": "boolean",
                    "description": "Enable Global Acceleration.\n",
                    "willReplaceOnChanges": true
                },
                "enableLearnedCidrsApproval": {
                    "type": "boolean",
                    "description": "Switch to enable/disable encrypted transit approval for vpn connection. Valid values: true, false.\n"
                },
                "insideIpCidrTun1": {
                    "type": "string",
                    "description": "Inside IP CIDR for Tunnel 1. A /30 CIDR in 169.254.0.0/16.\n",
                    "willReplaceOnChanges": true
                },
                "insideIpCidrTun2": {
                    "type": "string",
                    "description": "Inside IP CIDR for Tunnel 2. A /30 CIDR in 169.254.0.0/16.\n",
                    "willReplaceOnChanges": true
                },
                "preSharedKeyTun1": {
                    "type": "string",
                    "description": "Pre-Shared Key for Tunnel 1. A 8-64 character string with alphanumeric, underscore(_) and dot(.). It cannot start with 0\n",
                    "willReplaceOnChanges": true
                },
                "preSharedKeyTun2": {
                    "type": "string",
                    "description": "Pre-Shared Key for Tunnel 2. A 8-64 character string with alphanumeric, underscore(_) and dot(.). It cannot start with 0\n",
                    "willReplaceOnChanges": true
                },
                "publicIp": {
                    "type": "string",
                    "description": "Public IP address. Example: '40.0.0.0'.\n",
                    "willReplaceOnChanges": true
                },
                "remoteAsNumber": {
                    "type": "string",
                    "description": "AWS side as a number. Integer between 1-4294967294. Example: '12'. Required for a dynamic VPN connection.\n",
                    "willReplaceOnChanges": true
                },
                "remoteCidr": {
                    "type": "string",
                    "description": "Remote CIDRs joined as a string with ','. Required for a static VPN connection.\n",
                    "willReplaceOnChanges": true
                },
                "routeDomainName": {
                    "type": "string",
                    "description": "The name of a route domain, to which the vpn will be attached.\n",
                    "willReplaceOnChanges": true
                },
                "tgwName": {
                    "type": "string",
                    "description": "This parameter represents the name of an AWS TGW.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "connectionName",
                "publicIp",
                "routeDomainName",
                "tgwName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAwsTgwVpnConn resources.\n",
                "properties": {
                    "connectionName": {
                        "type": "string",
                        "description": "Unique name of the connection.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Connection type. Valid values: 'dynamic', 'static'. 'dynamic' stands for a BGP VPN connection; 'static' stands for a\nstatic VPN connection. Default value: 'dynamic'.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableGlobalAcceleration": {
                        "type": "boolean",
                        "description": "Enable Global Acceleration.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableLearnedCidrsApproval": {
                        "type": "boolean",
                        "description": "Switch to enable/disable encrypted transit approval for vpn connection. Valid values: true, false.\n"
                    },
                    "insideIpCidrTun1": {
                        "type": "string",
                        "description": "Inside IP CIDR for Tunnel 1. A /30 CIDR in 169.254.0.0/16.\n",
                        "willReplaceOnChanges": true
                    },
                    "insideIpCidrTun2": {
                        "type": "string",
                        "description": "Inside IP CIDR for Tunnel 2. A /30 CIDR in 169.254.0.0/16.\n",
                        "willReplaceOnChanges": true
                    },
                    "preSharedKeyTun1": {
                        "type": "string",
                        "description": "Pre-Shared Key for Tunnel 1. A 8-64 character string with alphanumeric, underscore(_) and dot(.). It cannot start with 0\n",
                        "willReplaceOnChanges": true
                    },
                    "preSharedKeyTun2": {
                        "type": "string",
                        "description": "Pre-Shared Key for Tunnel 2. A 8-64 character string with alphanumeric, underscore(_) and dot(.). It cannot start with 0\n",
                        "willReplaceOnChanges": true
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "Public IP address. Example: '40.0.0.0'.\n",
                        "willReplaceOnChanges": true
                    },
                    "remoteAsNumber": {
                        "type": "string",
                        "description": "AWS side as a number. Integer between 1-4294967294. Example: '12'. Required for a dynamic VPN connection.\n",
                        "willReplaceOnChanges": true
                    },
                    "remoteCidr": {
                        "type": "string",
                        "description": "Remote CIDRs joined as a string with ','. Required for a static VPN connection.\n",
                        "willReplaceOnChanges": true
                    },
                    "routeDomainName": {
                        "type": "string",
                        "description": "The name of a route domain, to which the vpn will be attached.\n",
                        "willReplaceOnChanges": true
                    },
                    "tgwName": {
                        "type": "string",
                        "description": "This parameter represents the name of an AWS TGW.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpnId": {
                        "type": "string",
                        "description": "ID of the vpn connection.\n"
                    },
                    "vpnTunnelDatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixAwsTgwVpnConnVpnTunnelData:AviatrixAwsTgwVpnConnVpnTunnelData"
                        },
                        "description": "VPN tunnel data.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAzurePeer:AviatrixAzurePeer": {
            "properties": {
                "accountName1": {
                    "type": "string",
                    "description": "This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.\n"
                },
                "accountName2": {
                    "type": "string",
                    "description": "This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.\n"
                },
                "vnetCidr1s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VNet CIDR of vnet_name_resource_group1.\n"
                },
                "vnetCidr2s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VNet CIDR of vnet_name_resource_group2.\n"
                },
                "vnetNameResourceGroup1": {
                    "type": "string",
                    "description": "VNet-Name of Azure cloud.\n"
                },
                "vnetNameResourceGroup2": {
                    "type": "string",
                    "description": "VNet-Name of Azure cloud.\n"
                },
                "vnetReg1": {
                    "type": "string",
                    "description": "Region of Azure cloud.\n"
                },
                "vnetReg2": {
                    "type": "string",
                    "description": "Region of Azure cloud.\n"
                }
            },
            "required": [
                "accountName1",
                "accountName2",
                "vnetCidr1s",
                "vnetCidr2s",
                "vnetNameResourceGroup1",
                "vnetNameResourceGroup2",
                "vnetReg1",
                "vnetReg2"
            ],
            "inputProperties": {
                "accountName1": {
                    "type": "string",
                    "description": "This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.\n",
                    "willReplaceOnChanges": true
                },
                "accountName2": {
                    "type": "string",
                    "description": "This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.\n",
                    "willReplaceOnChanges": true
                },
                "vnetNameResourceGroup1": {
                    "type": "string",
                    "description": "VNet-Name of Azure cloud.\n",
                    "willReplaceOnChanges": true
                },
                "vnetNameResourceGroup2": {
                    "type": "string",
                    "description": "VNet-Name of Azure cloud.\n",
                    "willReplaceOnChanges": true
                },
                "vnetReg1": {
                    "type": "string",
                    "description": "Region of Azure cloud.\n",
                    "willReplaceOnChanges": true
                },
                "vnetReg2": {
                    "type": "string",
                    "description": "Region of Azure cloud.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountName1",
                "accountName2",
                "vnetNameResourceGroup1",
                "vnetNameResourceGroup2",
                "vnetReg1",
                "vnetReg2"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAzurePeer resources.\n",
                "properties": {
                    "accountName1": {
                        "type": "string",
                        "description": "This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.\n",
                        "willReplaceOnChanges": true
                    },
                    "accountName2": {
                        "type": "string",
                        "description": "This parameter represents the name of an Azure Cloud-Account in Aviatrix controller.\n",
                        "willReplaceOnChanges": true
                    },
                    "vnetCidr1s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of VNet CIDR of vnet_name_resource_group1.\n"
                    },
                    "vnetCidr2s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of VNet CIDR of vnet_name_resource_group2.\n"
                    },
                    "vnetNameResourceGroup1": {
                        "type": "string",
                        "description": "VNet-Name of Azure cloud.\n",
                        "willReplaceOnChanges": true
                    },
                    "vnetNameResourceGroup2": {
                        "type": "string",
                        "description": "VNet-Name of Azure cloud.\n",
                        "willReplaceOnChanges": true
                    },
                    "vnetReg1": {
                        "type": "string",
                        "description": "Region of Azure cloud.\n",
                        "willReplaceOnChanges": true
                    },
                    "vnetReg2": {
                        "type": "string",
                        "description": "Region of Azure cloud.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAzureSpokeNativePeering:AviatrixAzureSpokeNativePeering": {
            "properties": {
                "spokeAccountName": {
                    "type": "string",
                    "description": "An Aviatrix account that corresponds to a subscription in Azure.\n"
                },
                "spokeRegion": {
                    "type": "string",
                    "description": "Spoke VNet region.\n"
                },
                "spokeVpcId": {
                    "type": "string",
                    "description": "Combination of the Spoke VNet name and resource group.\n"
                },
                "transitGatewayName": {
                    "type": "string",
                    "description": "Name of an azure transit gateway with transit firenet enabled.\n"
                }
            },
            "required": [
                "spokeAccountName",
                "spokeRegion",
                "spokeVpcId",
                "transitGatewayName"
            ],
            "inputProperties": {
                "spokeAccountName": {
                    "type": "string",
                    "description": "An Aviatrix account that corresponds to a subscription in Azure.\n",
                    "willReplaceOnChanges": true
                },
                "spokeRegion": {
                    "type": "string",
                    "description": "Spoke VNet region.\n",
                    "willReplaceOnChanges": true
                },
                "spokeVpcId": {
                    "type": "string",
                    "description": "Combination of the Spoke VNet name and resource group.\n",
                    "willReplaceOnChanges": true
                },
                "transitGatewayName": {
                    "type": "string",
                    "description": "Name of an azure transit gateway with transit firenet enabled.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "spokeAccountName",
                "spokeRegion",
                "spokeVpcId",
                "transitGatewayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAzureSpokeNativePeering resources.\n",
                "properties": {
                    "spokeAccountName": {
                        "type": "string",
                        "description": "An Aviatrix account that corresponds to a subscription in Azure.\n",
                        "willReplaceOnChanges": true
                    },
                    "spokeRegion": {
                        "type": "string",
                        "description": "Spoke VNet region.\n",
                        "willReplaceOnChanges": true
                    },
                    "spokeVpcId": {
                        "type": "string",
                        "description": "Combination of the Spoke VNet name and resource group.\n",
                        "willReplaceOnChanges": true
                    },
                    "transitGatewayName": {
                        "type": "string",
                        "description": "Name of an azure transit gateway with transit firenet enabled.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixAzureVngConn:AviatrixAzureVngConn": {
            "properties": {
                "attached": {
                    "type": "boolean",
                    "description": "VNG attached or not\n"
                },
                "connectionName": {
                    "type": "string",
                    "description": "Connection name\n"
                },
                "primaryGatewayName": {
                    "type": "string",
                    "description": "Primary gateway name\n"
                },
                "vngName": {
                    "type": "string",
                    "description": "VNG name\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC ID\n"
                }
            },
            "required": [
                "attached",
                "connectionName",
                "primaryGatewayName",
                "vngName",
                "vpcId"
            ],
            "inputProperties": {
                "connectionName": {
                    "type": "string",
                    "description": "Connection name\n",
                    "willReplaceOnChanges": true
                },
                "primaryGatewayName": {
                    "type": "string",
                    "description": "Primary gateway name\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "connectionName",
                "primaryGatewayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixAzureVngConn resources.\n",
                "properties": {
                    "attached": {
                        "type": "boolean",
                        "description": "VNG attached or not\n"
                    },
                    "connectionName": {
                        "type": "string",
                        "description": "Connection name\n",
                        "willReplaceOnChanges": true
                    },
                    "primaryGatewayName": {
                        "type": "string",
                        "description": "Primary gateway name\n",
                        "willReplaceOnChanges": true
                    },
                    "vngName": {
                        "type": "string",
                        "description": "VNG name\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "VPC ID\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixCloudnRegistration:AviatrixCloudnRegistration": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "CloudN IP Address or FQDN.\n"
                },
                "localAsNumber": {
                    "type": "string",
                    "description": "Changes the Aviatrix CloudN ASN number before you setup Aviatrix Transit Gateway connection configurations.\n"
                },
                "name": {
                    "type": "string",
                    "description": "CloudN name to register on controller.\n"
                },
                "password": {
                    "type": "string",
                    "description": "CloudN password.\n"
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AS path prepend.\n"
                },
                "username": {
                    "type": "string",
                    "description": "CloudN username.\n"
                }
            },
            "required": [
                "address",
                "localAsNumber",
                "name",
                "password",
                "username"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "CloudN IP Address or FQDN.\n",
                    "willReplaceOnChanges": true
                },
                "localAsNumber": {
                    "type": "string",
                    "description": "Changes the Aviatrix CloudN ASN number before you setup Aviatrix Transit Gateway connection configurations.\n"
                },
                "name": {
                    "type": "string",
                    "description": "CloudN name to register on controller.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "CloudN password.\n",
                    "willReplaceOnChanges": true
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AS path prepend.\n"
                },
                "username": {
                    "type": "string",
                    "description": "CloudN username.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "address",
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixCloudnRegistration resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "CloudN IP Address or FQDN.\n",
                        "willReplaceOnChanges": true
                    },
                    "localAsNumber": {
                        "type": "string",
                        "description": "Changes the Aviatrix CloudN ASN number before you setup Aviatrix Transit Gateway connection configurations.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "CloudN name to register on controller.\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "CloudN password.\n",
                        "willReplaceOnChanges": true
                    },
                    "prependAsPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "AS path prepend.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "CloudN username.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixCloudnTransitGatewayAttachment:AviatrixCloudnTransitGatewayAttachment": {
            "properties": {
                "cloudnBgpAsn": {
                    "type": "string",
                    "description": "CloudN BGP AS Number.\n"
                },
                "cloudnLanInterfaceNeighborBgpAsn": {
                    "type": "string",
                    "description": "CloudN LAN Interface Neighbor's BGP AS Number.\n"
                },
                "cloudnLanInterfaceNeighborIp": {
                    "type": "string",
                    "description": "CloudN LAN Interface Neighbor's IP.\n"
                },
                "connectionName": {
                    "type": "string",
                    "description": "Connection name.\n"
                },
                "deviceName": {
                    "type": "string",
                    "description": "Device name.\n"
                },
                "enableJumboFrame": {
                    "type": "boolean",
                    "description": "Enable jumbo frame.\n"
                },
                "enableOverPrivateNetwork": {
                    "type": "boolean",
                    "description": "Enable over private network.\n"
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AS path prepend.\n"
                },
                "transitGatewayBgpAsn": {
                    "type": "string",
                    "description": "Transit Gateway BGP AS Number.\n"
                },
                "transitGatewayName": {
                    "type": "string",
                    "description": "Transit Gateway name.\n"
                }
            },
            "required": [
                "cloudnBgpAsn",
                "cloudnLanInterfaceNeighborBgpAsn",
                "cloudnLanInterfaceNeighborIp",
                "connectionName",
                "deviceName",
                "transitGatewayBgpAsn",
                "transitGatewayName"
            ],
            "inputProperties": {
                "cloudnBgpAsn": {
                    "type": "string",
                    "description": "CloudN BGP AS Number.\n",
                    "willReplaceOnChanges": true
                },
                "cloudnLanInterfaceNeighborBgpAsn": {
                    "type": "string",
                    "description": "CloudN LAN Interface Neighbor's BGP AS Number.\n",
                    "willReplaceOnChanges": true
                },
                "cloudnLanInterfaceNeighborIp": {
                    "type": "string",
                    "description": "CloudN LAN Interface Neighbor's IP.\n",
                    "willReplaceOnChanges": true
                },
                "connectionName": {
                    "type": "string",
                    "description": "Connection name.\n",
                    "willReplaceOnChanges": true
                },
                "deviceName": {
                    "type": "string",
                    "description": "Device name.\n",
                    "willReplaceOnChanges": true
                },
                "enableJumboFrame": {
                    "type": "boolean",
                    "description": "Enable jumbo frame.\n"
                },
                "enableOverPrivateNetwork": {
                    "type": "boolean",
                    "description": "Enable over private network.\n",
                    "willReplaceOnChanges": true
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AS path prepend.\n"
                },
                "transitGatewayBgpAsn": {
                    "type": "string",
                    "description": "Transit Gateway BGP AS Number.\n",
                    "willReplaceOnChanges": true
                },
                "transitGatewayName": {
                    "type": "string",
                    "description": "Transit Gateway name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cloudnBgpAsn",
                "cloudnLanInterfaceNeighborBgpAsn",
                "cloudnLanInterfaceNeighborIp",
                "connectionName",
                "deviceName",
                "transitGatewayBgpAsn",
                "transitGatewayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixCloudnTransitGatewayAttachment resources.\n",
                "properties": {
                    "cloudnBgpAsn": {
                        "type": "string",
                        "description": "CloudN BGP AS Number.\n",
                        "willReplaceOnChanges": true
                    },
                    "cloudnLanInterfaceNeighborBgpAsn": {
                        "type": "string",
                        "description": "CloudN LAN Interface Neighbor's BGP AS Number.\n",
                        "willReplaceOnChanges": true
                    },
                    "cloudnLanInterfaceNeighborIp": {
                        "type": "string",
                        "description": "CloudN LAN Interface Neighbor's IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionName": {
                        "type": "string",
                        "description": "Connection name.\n",
                        "willReplaceOnChanges": true
                    },
                    "deviceName": {
                        "type": "string",
                        "description": "Device name.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableJumboFrame": {
                        "type": "boolean",
                        "description": "Enable jumbo frame.\n"
                    },
                    "enableOverPrivateNetwork": {
                        "type": "boolean",
                        "description": "Enable over private network.\n",
                        "willReplaceOnChanges": true
                    },
                    "prependAsPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "AS path prepend.\n"
                    },
                    "transitGatewayBgpAsn": {
                        "type": "string",
                        "description": "Transit Gateway BGP AS Number.\n",
                        "willReplaceOnChanges": true
                    },
                    "transitGatewayName": {
                        "type": "string",
                        "description": "Transit Gateway name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixCloudwatchAgent:AviatrixCloudwatchAgent": {
            "properties": {
                "cloudwatchRoleArn": {
                    "type": "string",
                    "description": "CloudWatch role ARN.\n"
                },
                "excludedGateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded gateways.\n"
                },
                "logGroupName": {
                    "type": "string",
                    "description": "Log group name.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Name of AWS region.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Enabled or not.\n"
                }
            },
            "required": [
                "cloudwatchRoleArn",
                "region",
                "status"
            ],
            "inputProperties": {
                "cloudwatchRoleArn": {
                    "type": "string",
                    "description": "CloudWatch role ARN.\n",
                    "willReplaceOnChanges": true
                },
                "excludedGateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded gateways.\n",
                    "willReplaceOnChanges": true
                },
                "logGroupName": {
                    "type": "string",
                    "description": "Log group name.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "Name of AWS region.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cloudwatchRoleArn",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixCloudwatchAgent resources.\n",
                "properties": {
                    "cloudwatchRoleArn": {
                        "type": "string",
                        "description": "CloudWatch role ARN.\n",
                        "willReplaceOnChanges": true
                    },
                    "excludedGateways": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of excluded gateways.\n",
                        "willReplaceOnChanges": true
                    },
                    "logGroupName": {
                        "type": "string",
                        "description": "Log group name.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "Name of AWS region.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Enabled or not.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixControllerBgpMaxAsLimitConfig:AviatrixControllerBgpMaxAsLimitConfig": {
            "properties": {
                "maxAsLimit": {
                    "type": "integer",
                    "description": "The maximum AS path limit allowed by transit gateways when handling BGP/Peering route propagation.\n"
                }
            },
            "required": [
                "maxAsLimit"
            ],
            "inputProperties": {
                "maxAsLimit": {
                    "type": "integer",
                    "description": "The maximum AS path limit allowed by transit gateways when handling BGP/Peering route propagation.\n"
                }
            },
            "requiredInputs": [
                "maxAsLimit"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixControllerBgpMaxAsLimitConfig resources.\n",
                "properties": {
                    "maxAsLimit": {
                        "type": "integer",
                        "description": "The maximum AS path limit allowed by transit gateways when handling BGP/Peering route propagation.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixControllerCertDomainConfig:AviatrixControllerCertDomainConfig": {
            "properties": {
                "certDomain": {
                    "type": "string",
                    "description": "Domain name that is used in FQDN for generating cert.\n"
                }
            },
            "inputProperties": {
                "certDomain": {
                    "type": "string",
                    "description": "Domain name that is used in FQDN for generating cert.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixControllerCertDomainConfig resources.\n",
                "properties": {
                    "certDomain": {
                        "type": "string",
                        "description": "Domain name that is used in FQDN for generating cert.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixControllerConfig:AviatrixControllerConfig": {
            "properties": {
                "awsGuardDutyScanningInterval": {
                    "type": "integer",
                    "description": "Scanning Interval for AWS Guard Duty.\n"
                },
                "backupAccountName": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                },
                "backupBucketName": {
                    "type": "string",
                    "description": "Bucket name. Required for AWS, AWSGov, GCP and OCI.\n"
                },
                "backupCloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider, requires an integer value. Use 1 for AWS.\n"
                },
                "backupConfiguration": {
                    "type": "boolean",
                    "description": "Switch to enable/disable controller cloudn backup config.\n"
                },
                "backupContainerName": {
                    "type": "string",
                    "description": "Container name. Required for Azure.\n"
                },
                "backupRegion": {
                    "type": "string",
                    "description": "Name of region. Required for Azure and OCI.\n"
                },
                "backupStorageName": {
                    "type": "string",
                    "description": "Storage name. Required for Azure.\n"
                },
                "caCertificateFile": {
                    "type": "string",
                    "description": "CA certificate file.\n"
                },
                "caCertificateFilePath": {
                    "type": "string",
                    "description": "File path to the CA certificate.\n"
                },
                "currentVersion": {
                    "type": "string",
                    "description": "Current version of the controller.\n"
                },
                "enableVpcDnsServer": {
                    "type": "boolean",
                    "description": "Enable VPC/VNET DNS Server.\n"
                },
                "fqdnExceptionRule": {
                    "type": "boolean",
                    "description": "A system-wide mode. Default: true.\n"
                },
                "httpAccess": {
                    "type": "boolean",
                    "description": "Switch for http access. Default: false.\n"
                },
                "manageGatewayUpgrades": {
                    "type": "boolean",
                    "description": "If true, aviatrix_controller_config will upgrade all gateways when target_version is set. If false, only the controller\nwill be upgraded when target_version is set. In that case gateway upgrades should be handled in each gateway resource\nindividually using the software_version and image_version attributes.\n"
                },
                "multipleBackups": {
                    "type": "boolean",
                    "description": "Switch to enable the controller to backup up to a maximum of 3 rotating backups.\n"
                },
                "previousVersion": {
                    "type": "string",
                    "description": "Previous version of the controller.\n"
                },
                "serverPrivateKeyFile": {
                    "type": "string",
                    "description": "Server private key file.\n"
                },
                "serverPrivateKeyFilePath": {
                    "type": "string",
                    "description": "File path to the server private key.\n"
                },
                "serverPublicCertificateFile": {
                    "type": "string",
                    "description": "Server public certificate file.\n"
                },
                "serverPublicCertificateFilePath": {
                    "type": "string",
                    "description": "File path to the server public certificate.\n"
                },
                "targetVersion": {
                    "type": "string",
                    "description": "The release version number to which the controller will be upgraded to.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Current version of the controller without the build number.\n"
                }
            },
            "required": [
                "currentVersion",
                "previousVersion",
                "version"
            ],
            "inputProperties": {
                "awsGuardDutyScanningInterval": {
                    "type": "integer",
                    "description": "Scanning Interval for AWS Guard Duty.\n"
                },
                "backupAccountName": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                },
                "backupBucketName": {
                    "type": "string",
                    "description": "Bucket name. Required for AWS, AWSGov, GCP and OCI.\n"
                },
                "backupCloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider, requires an integer value. Use 1 for AWS.\n"
                },
                "backupConfiguration": {
                    "type": "boolean",
                    "description": "Switch to enable/disable controller cloudn backup config.\n"
                },
                "backupContainerName": {
                    "type": "string",
                    "description": "Container name. Required for Azure.\n"
                },
                "backupRegion": {
                    "type": "string",
                    "description": "Name of region. Required for Azure and OCI.\n"
                },
                "backupStorageName": {
                    "type": "string",
                    "description": "Storage name. Required for Azure.\n"
                },
                "caCertificateFile": {
                    "type": "string",
                    "description": "CA certificate file.\n"
                },
                "caCertificateFilePath": {
                    "type": "string",
                    "description": "File path to the CA certificate.\n"
                },
                "enableVpcDnsServer": {
                    "type": "boolean",
                    "description": "Enable VPC/VNET DNS Server.\n"
                },
                "fqdnExceptionRule": {
                    "type": "boolean",
                    "description": "A system-wide mode. Default: true.\n"
                },
                "httpAccess": {
                    "type": "boolean",
                    "description": "Switch for http access. Default: false.\n"
                },
                "manageGatewayUpgrades": {
                    "type": "boolean",
                    "description": "If true, aviatrix_controller_config will upgrade all gateways when target_version is set. If false, only the controller\nwill be upgraded when target_version is set. In that case gateway upgrades should be handled in each gateway resource\nindividually using the software_version and image_version attributes.\n"
                },
                "multipleBackups": {
                    "type": "boolean",
                    "description": "Switch to enable the controller to backup up to a maximum of 3 rotating backups.\n"
                },
                "serverPrivateKeyFile": {
                    "type": "string",
                    "description": "Server private key file.\n"
                },
                "serverPrivateKeyFilePath": {
                    "type": "string",
                    "description": "File path to the server private key.\n"
                },
                "serverPublicCertificateFile": {
                    "type": "string",
                    "description": "Server public certificate file.\n"
                },
                "serverPublicCertificateFilePath": {
                    "type": "string",
                    "description": "File path to the server public certificate.\n"
                },
                "targetVersion": {
                    "type": "string",
                    "description": "The release version number to which the controller will be upgraded to.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixControllerConfig resources.\n",
                "properties": {
                    "awsGuardDutyScanningInterval": {
                        "type": "integer",
                        "description": "Scanning Interval for AWS Guard Duty.\n"
                    },
                    "backupAccountName": {
                        "type": "string",
                        "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                    },
                    "backupBucketName": {
                        "type": "string",
                        "description": "Bucket name. Required for AWS, AWSGov, GCP and OCI.\n"
                    },
                    "backupCloudType": {
                        "type": "integer",
                        "description": "Type of cloud service provider, requires an integer value. Use 1 for AWS.\n"
                    },
                    "backupConfiguration": {
                        "type": "boolean",
                        "description": "Switch to enable/disable controller cloudn backup config.\n"
                    },
                    "backupContainerName": {
                        "type": "string",
                        "description": "Container name. Required for Azure.\n"
                    },
                    "backupRegion": {
                        "type": "string",
                        "description": "Name of region. Required for Azure and OCI.\n"
                    },
                    "backupStorageName": {
                        "type": "string",
                        "description": "Storage name. Required for Azure.\n"
                    },
                    "caCertificateFile": {
                        "type": "string",
                        "description": "CA certificate file.\n"
                    },
                    "caCertificateFilePath": {
                        "type": "string",
                        "description": "File path to the CA certificate.\n"
                    },
                    "currentVersion": {
                        "type": "string",
                        "description": "Current version of the controller.\n"
                    },
                    "enableVpcDnsServer": {
                        "type": "boolean",
                        "description": "Enable VPC/VNET DNS Server.\n"
                    },
                    "fqdnExceptionRule": {
                        "type": "boolean",
                        "description": "A system-wide mode. Default: true.\n"
                    },
                    "httpAccess": {
                        "type": "boolean",
                        "description": "Switch for http access. Default: false.\n"
                    },
                    "manageGatewayUpgrades": {
                        "type": "boolean",
                        "description": "If true, aviatrix_controller_config will upgrade all gateways when target_version is set. If false, only the controller\nwill be upgraded when target_version is set. In that case gateway upgrades should be handled in each gateway resource\nindividually using the software_version and image_version attributes.\n"
                    },
                    "multipleBackups": {
                        "type": "boolean",
                        "description": "Switch to enable the controller to backup up to a maximum of 3 rotating backups.\n"
                    },
                    "previousVersion": {
                        "type": "string",
                        "description": "Previous version of the controller.\n"
                    },
                    "serverPrivateKeyFile": {
                        "type": "string",
                        "description": "Server private key file.\n"
                    },
                    "serverPrivateKeyFilePath": {
                        "type": "string",
                        "description": "File path to the server private key.\n"
                    },
                    "serverPublicCertificateFile": {
                        "type": "string",
                        "description": "Server public certificate file.\n"
                    },
                    "serverPublicCertificateFilePath": {
                        "type": "string",
                        "description": "File path to the server public certificate.\n"
                    },
                    "targetVersion": {
                        "type": "string",
                        "description": "The release version number to which the controller will be upgraded to.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Current version of the controller without the build number.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixControllerEmailConfig:AviatrixControllerEmailConfig": {
            "properties": {
                "adminAlertEmail": {
                    "type": "string",
                    "description": "Email to receive important account and certification information.\n"
                },
                "adminAlertEmailVerified": {
                    "type": "boolean",
                    "description": "Whether admin alert notification email is verified.\n"
                },
                "criticalAlertEmail": {
                    "type": "string",
                    "description": "Email to receive field notices and critical notices.\n"
                },
                "criticalAlertEmailVerified": {
                    "type": "boolean",
                    "description": "Whether critical alert notification email is verified.\n"
                },
                "securityEventEmail": {
                    "type": "string",
                    "description": "Email to receive security and CVE (Common Vulnerabilities and Exposures) notification emails.\n"
                },
                "securityEventEmailVerified": {
                    "type": "boolean",
                    "description": "Whether security event notification email is verified.\n"
                },
                "statusChangeEmail": {
                    "type": "string",
                    "description": "Email to receive system/tunnel status notification emails.\n"
                },
                "statusChangeEmailVerified": {
                    "type": "boolean",
                    "description": "Whether status change notification email is verified.\n"
                },
                "statusChangeNotificationInterval": {
                    "type": "integer",
                    "description": "Status change notification interval in seconds.\n"
                }
            },
            "required": [
                "adminAlertEmail",
                "adminAlertEmailVerified",
                "criticalAlertEmail",
                "criticalAlertEmailVerified",
                "securityEventEmail",
                "securityEventEmailVerified",
                "statusChangeEmail",
                "statusChangeEmailVerified"
            ],
            "inputProperties": {
                "adminAlertEmail": {
                    "type": "string",
                    "description": "Email to receive important account and certification information.\n"
                },
                "criticalAlertEmail": {
                    "type": "string",
                    "description": "Email to receive field notices and critical notices.\n"
                },
                "securityEventEmail": {
                    "type": "string",
                    "description": "Email to receive security and CVE (Common Vulnerabilities and Exposures) notification emails.\n"
                },
                "statusChangeEmail": {
                    "type": "string",
                    "description": "Email to receive system/tunnel status notification emails.\n"
                },
                "statusChangeNotificationInterval": {
                    "type": "integer",
                    "description": "Status change notification interval in seconds.\n"
                }
            },
            "requiredInputs": [
                "adminAlertEmail",
                "criticalAlertEmail",
                "securityEventEmail",
                "statusChangeEmail"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixControllerEmailConfig resources.\n",
                "properties": {
                    "adminAlertEmail": {
                        "type": "string",
                        "description": "Email to receive important account and certification information.\n"
                    },
                    "adminAlertEmailVerified": {
                        "type": "boolean",
                        "description": "Whether admin alert notification email is verified.\n"
                    },
                    "criticalAlertEmail": {
                        "type": "string",
                        "description": "Email to receive field notices and critical notices.\n"
                    },
                    "criticalAlertEmailVerified": {
                        "type": "boolean",
                        "description": "Whether critical alert notification email is verified.\n"
                    },
                    "securityEventEmail": {
                        "type": "string",
                        "description": "Email to receive security and CVE (Common Vulnerabilities and Exposures) notification emails.\n"
                    },
                    "securityEventEmailVerified": {
                        "type": "boolean",
                        "description": "Whether security event notification email is verified.\n"
                    },
                    "statusChangeEmail": {
                        "type": "string",
                        "description": "Email to receive system/tunnel status notification emails.\n"
                    },
                    "statusChangeEmailVerified": {
                        "type": "boolean",
                        "description": "Whether status change notification email is verified.\n"
                    },
                    "statusChangeNotificationInterval": {
                        "type": "integer",
                        "description": "Status change notification interval in seconds.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixControllerEmailExceptionNotificationConfig:AviatrixControllerEmailExceptionNotificationConfig": {
            "properties": {
                "enableEmailExceptionNotification": {
                    "type": "boolean",
                    "description": "Enable email exception notification.\n"
                }
            },
            "inputProperties": {
                "enableEmailExceptionNotification": {
                    "type": "boolean",
                    "description": "Enable email exception notification.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixControllerEmailExceptionNotificationConfig resources.\n",
                "properties": {
                    "enableEmailExceptionNotification": {
                        "type": "boolean",
                        "description": "Enable email exception notification.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixControllerGatewayKeepaliveConfig:AviatrixControllerGatewayKeepaliveConfig": {
            "properties": {
                "keepaliveSpeed": {
                    "type": "string",
                    "description": "Gateway keepalive speed.\n"
                }
            },
            "required": [
                "keepaliveSpeed"
            ],
            "inputProperties": {
                "keepaliveSpeed": {
                    "type": "string",
                    "description": "Gateway keepalive speed.\n"
                }
            },
            "requiredInputs": [
                "keepaliveSpeed"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixControllerGatewayKeepaliveConfig resources.\n",
                "properties": {
                    "keepaliveSpeed": {
                        "type": "string",
                        "description": "Gateway keepalive speed.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixControllerPrivateModeConfig:AviatrixControllerPrivateModeConfig": {
            "properties": {
                "copilotInstanceId": {
                    "type": "string",
                    "description": "Copilot instance ID to associate with the Controller for Private Mode.\n"
                },
                "enablePrivateMode": {
                    "type": "boolean",
                    "description": "Whether to enable Private Mode on the Controller.\n"
                },
                "proxies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of proxies.\n"
                }
            },
            "required": [
                "enablePrivateMode"
            ],
            "inputProperties": {
                "copilotInstanceId": {
                    "type": "string",
                    "description": "Copilot instance ID to associate with the Controller for Private Mode.\n"
                },
                "enablePrivateMode": {
                    "type": "boolean",
                    "description": "Whether to enable Private Mode on the Controller.\n"
                },
                "proxies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of proxies.\n"
                }
            },
            "requiredInputs": [
                "enablePrivateMode"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixControllerPrivateModeConfig resources.\n",
                "properties": {
                    "copilotInstanceId": {
                        "type": "string",
                        "description": "Copilot instance ID to associate with the Controller for Private Mode.\n"
                    },
                    "enablePrivateMode": {
                        "type": "boolean",
                        "description": "Whether to enable Private Mode on the Controller.\n"
                    },
                    "proxies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of proxies.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixControllerPrivateOob:AviatrixControllerPrivateOob": {
            "properties": {
                "enablePrivateOob": {
                    "type": "boolean",
                    "description": "Switch to enable/disable Aviatrix controller private OOB.\n"
                }
            },
            "inputProperties": {
                "enablePrivateOob": {
                    "type": "boolean",
                    "description": "Switch to enable/disable Aviatrix controller private OOB.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixControllerPrivateOob resources.\n",
                "properties": {
                    "enablePrivateOob": {
                        "type": "boolean",
                        "description": "Switch to enable/disable Aviatrix controller private OOB.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixControllerSecurityGroupManagementConfig:AviatrixControllerSecurityGroupManagementConfig": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Cloud account name of user.\n"
                },
                "enableSecurityGroupManagement": {
                    "type": "boolean",
                    "description": "Used to manage the Controller instance’s inbound rules from gateways.\n"
                }
            },
            "required": [
                "enableSecurityGroupManagement"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "Cloud account name of user.\n"
                },
                "enableSecurityGroupManagement": {
                    "type": "boolean",
                    "description": "Used to manage the Controller instance’s inbound rules from gateways.\n"
                }
            },
            "requiredInputs": [
                "enableSecurityGroupManagement"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixControllerSecurityGroupManagementConfig resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "Cloud account name of user.\n"
                    },
                    "enableSecurityGroupManagement": {
                        "type": "boolean",
                        "description": "Used to manage the Controller instance’s inbound rules from gateways.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixCopilotAssociation:AviatrixCopilotAssociation": {
            "properties": {
                "copilotAddress": {
                    "type": "string",
                    "description": "CoPilot IP Address or Hostname.\n"
                }
            },
            "required": [
                "copilotAddress"
            ],
            "inputProperties": {
                "copilotAddress": {
                    "type": "string",
                    "description": "CoPilot IP Address or Hostname.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "copilotAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixCopilotAssociation resources.\n",
                "properties": {
                    "copilotAddress": {
                        "type": "string",
                        "description": "CoPilot IP Address or Hostname.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixCopilotSecurityGroupManagementConfig:AviatrixCopilotSecurityGroupManagementConfig": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Access account name.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Cloud type.\n"
                },
                "enableCopilotSecurityGroupManagement": {
                    "type": "boolean",
                    "description": "Switch to enable copilot security group management.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Copilot instance ID.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Copilot region. Valid for AWS and Azure.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC ID.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "Copilot zone. Valid for GCP.\n"
                }
            },
            "required": [
                "enableCopilotSecurityGroupManagement"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "Access account name.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Cloud type.\n"
                },
                "enableCopilotSecurityGroupManagement": {
                    "type": "boolean",
                    "description": "Switch to enable copilot security group management.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Copilot instance ID.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Copilot region. Valid for AWS and Azure.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC ID.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "Copilot zone. Valid for GCP.\n"
                }
            },
            "requiredInputs": [
                "enableCopilotSecurityGroupManagement"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixCopilotSecurityGroupManagementConfig resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "Access account name.\n"
                    },
                    "cloudType": {
                        "type": "integer",
                        "description": "Cloud type.\n"
                    },
                    "enableCopilotSecurityGroupManagement": {
                        "type": "boolean",
                        "description": "Switch to enable copilot security group management.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Copilot instance ID.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Copilot region. Valid for AWS and Azure.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "VPC ID.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "Copilot zone. Valid for GCP.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixDatadogAgent:AviatrixDatadogAgent": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "excludedGateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded gateways.\n"
                },
                "metricsOnly": {
                    "type": "boolean",
                    "description": "Only export metrics without exporting logs.\n"
                },
                "site": {
                    "type": "string",
                    "description": "Site preference.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Enabled or not.\n"
                }
            },
            "required": [
                "apiKey",
                "status"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "willReplaceOnChanges": true
                },
                "excludedGateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded gateways.\n",
                    "willReplaceOnChanges": true
                },
                "metricsOnly": {
                    "type": "boolean",
                    "description": "Only export metrics without exporting logs.\n",
                    "willReplaceOnChanges": true
                },
                "site": {
                    "type": "string",
                    "description": "Site preference.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "apiKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixDatadogAgent resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "willReplaceOnChanges": true
                    },
                    "excludedGateways": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of excluded gateways.\n",
                        "willReplaceOnChanges": true
                    },
                    "metricsOnly": {
                        "type": "boolean",
                        "description": "Only export metrics without exporting logs.\n",
                        "willReplaceOnChanges": true
                    },
                    "site": {
                        "type": "string",
                        "description": "Site preference.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Enabled or not.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixDeviceInterfaceConfig:AviatrixDeviceInterfaceConfig": {
            "properties": {
                "deviceName": {
                    "type": "string",
                    "description": "Name of device.\n"
                },
                "wanPrimaryInterface": {
                    "type": "string",
                    "description": "WAN primary interface of the device.\n"
                },
                "wanPrimaryInterfacePublicIp": {
                    "type": "string",
                    "description": "WAN primary interface public IP address.\n"
                }
            },
            "required": [
                "deviceName",
                "wanPrimaryInterface",
                "wanPrimaryInterfacePublicIp"
            ],
            "inputProperties": {
                "deviceName": {
                    "type": "string",
                    "description": "Name of device.\n",
                    "willReplaceOnChanges": true
                },
                "wanPrimaryInterface": {
                    "type": "string",
                    "description": "WAN primary interface of the device.\n"
                },
                "wanPrimaryInterfacePublicIp": {
                    "type": "string",
                    "description": "WAN primary interface public IP address.\n"
                }
            },
            "requiredInputs": [
                "deviceName",
                "wanPrimaryInterface",
                "wanPrimaryInterfacePublicIp"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixDeviceInterfaceConfig resources.\n",
                "properties": {
                    "deviceName": {
                        "type": "string",
                        "description": "Name of device.\n",
                        "willReplaceOnChanges": true
                    },
                    "wanPrimaryInterface": {
                        "type": "string",
                        "description": "WAN primary interface of the device.\n"
                    },
                    "wanPrimaryInterfacePublicIp": {
                        "type": "string",
                        "description": "WAN primary interface public IP address.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixEdgeCaag:AviatrixEdgeCaag": {
            "properties": {
                "dnsServerIp": {
                    "type": "string",
                    "description": "DNS server IP.\n"
                },
                "enableOverPrivateNetwork": {
                    "type": "boolean",
                    "description": "Enable management over private network.\n"
                },
                "lanInterfaceIpPrefix": {
                    "type": "string",
                    "description": "LAN interface IP / prefix.\n"
                },
                "localAsNumber": {
                    "type": "string",
                    "description": "Local AS number.\n"
                },
                "managementDefaultGatewayIp": {
                    "type": "string",
                    "description": "Management default gateway IP.\n"
                },
                "managementEgressIpPrefix": {
                    "type": "string",
                    "description": "Management egress gateway IP / prefix.\n"
                },
                "managementInterfaceConfig": {
                    "type": "string",
                    "description": "Management interface configuration. Valid values: 'DHCP' and 'Static'.\n"
                },
                "managementInterfaceIpPrefix": {
                    "type": "string",
                    "description": "Management interface IP / prefix.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Edge as a CaaG name.\n"
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AS path prepend.\n"
                },
                "secondaryDnsServerIp": {
                    "type": "string",
                    "description": "Secondary DNS server IP.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of Edge as a CaaG.\n"
                },
                "wanDefaultGatewayIp": {
                    "type": "string",
                    "description": "WAN default gateway IP.\n"
                },
                "wanInterfaceIpPrefix": {
                    "type": "string",
                    "description": "WAN interface IP / prefix.\n"
                },
                "ztpFileDownloadPath": {
                    "type": "string",
                    "description": "The location where the Edge as a CaaG ZTP file will be stored.\n"
                },
                "ztpFileType": {
                    "type": "string",
                    "description": "ZTP file type.\n"
                }
            },
            "required": [
                "lanInterfaceIpPrefix",
                "localAsNumber",
                "managementInterfaceConfig",
                "name",
                "state",
                "wanDefaultGatewayIp",
                "wanInterfaceIpPrefix",
                "ztpFileDownloadPath",
                "ztpFileType"
            ],
            "inputProperties": {
                "dnsServerIp": {
                    "type": "string",
                    "description": "DNS server IP.\n",
                    "willReplaceOnChanges": true
                },
                "enableOverPrivateNetwork": {
                    "type": "boolean",
                    "description": "Enable management over private network.\n",
                    "willReplaceOnChanges": true
                },
                "lanInterfaceIpPrefix": {
                    "type": "string",
                    "description": "LAN interface IP / prefix.\n",
                    "willReplaceOnChanges": true
                },
                "localAsNumber": {
                    "type": "string",
                    "description": "Local AS number.\n"
                },
                "managementDefaultGatewayIp": {
                    "type": "string",
                    "description": "Management default gateway IP.\n",
                    "willReplaceOnChanges": true
                },
                "managementEgressIpPrefix": {
                    "type": "string",
                    "description": "Management egress gateway IP / prefix.\n"
                },
                "managementInterfaceConfig": {
                    "type": "string",
                    "description": "Management interface configuration. Valid values: 'DHCP' and 'Static'.\n",
                    "willReplaceOnChanges": true
                },
                "managementInterfaceIpPrefix": {
                    "type": "string",
                    "description": "Management interface IP / prefix.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Edge as a CaaG name.\n",
                    "willReplaceOnChanges": true
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AS path prepend.\n"
                },
                "secondaryDnsServerIp": {
                    "type": "string",
                    "description": "Secondary DNS server IP.\n",
                    "willReplaceOnChanges": true
                },
                "wanDefaultGatewayIp": {
                    "type": "string",
                    "description": "WAN default gateway IP.\n",
                    "willReplaceOnChanges": true
                },
                "wanInterfaceIpPrefix": {
                    "type": "string",
                    "description": "WAN interface IP / prefix.\n",
                    "willReplaceOnChanges": true
                },
                "ztpFileDownloadPath": {
                    "type": "string",
                    "description": "The location where the Edge as a CaaG ZTP file will be stored.\n",
                    "willReplaceOnChanges": true
                },
                "ztpFileType": {
                    "type": "string",
                    "description": "ZTP file type.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "lanInterfaceIpPrefix",
                "managementInterfaceConfig",
                "wanDefaultGatewayIp",
                "wanInterfaceIpPrefix",
                "ztpFileDownloadPath",
                "ztpFileType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixEdgeCaag resources.\n",
                "properties": {
                    "dnsServerIp": {
                        "type": "string",
                        "description": "DNS server IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableOverPrivateNetwork": {
                        "type": "boolean",
                        "description": "Enable management over private network.\n",
                        "willReplaceOnChanges": true
                    },
                    "lanInterfaceIpPrefix": {
                        "type": "string",
                        "description": "LAN interface IP / prefix.\n",
                        "willReplaceOnChanges": true
                    },
                    "localAsNumber": {
                        "type": "string",
                        "description": "Local AS number.\n"
                    },
                    "managementDefaultGatewayIp": {
                        "type": "string",
                        "description": "Management default gateway IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "managementEgressIpPrefix": {
                        "type": "string",
                        "description": "Management egress gateway IP / prefix.\n"
                    },
                    "managementInterfaceConfig": {
                        "type": "string",
                        "description": "Management interface configuration. Valid values: 'DHCP' and 'Static'.\n",
                        "willReplaceOnChanges": true
                    },
                    "managementInterfaceIpPrefix": {
                        "type": "string",
                        "description": "Management interface IP / prefix.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Edge as a CaaG name.\n",
                        "willReplaceOnChanges": true
                    },
                    "prependAsPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "AS path prepend.\n"
                    },
                    "secondaryDnsServerIp": {
                        "type": "string",
                        "description": "Secondary DNS server IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "state": {
                        "type": "string",
                        "description": "State of Edge as a CaaG.\n"
                    },
                    "wanDefaultGatewayIp": {
                        "type": "string",
                        "description": "WAN default gateway IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "wanInterfaceIpPrefix": {
                        "type": "string",
                        "description": "WAN interface IP / prefix.\n",
                        "willReplaceOnChanges": true
                    },
                    "ztpFileDownloadPath": {
                        "type": "string",
                        "description": "The location where the Edge as a CaaG ZTP file will be stored.\n",
                        "willReplaceOnChanges": true
                    },
                    "ztpFileType": {
                        "type": "string",
                        "description": "ZTP file type.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixEdgeSpoke:AviatrixEdgeSpoke": {
            "properties": {
                "approvedLearnedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Approved learned CIDRs for BGP Spoke Gateway.\n"
                },
                "bgpHoldTime": {
                    "type": "integer",
                    "description": "BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.\n"
                },
                "bgpPollingTime": {
                    "type": "integer",
                    "description": "BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.\n"
                },
                "dnsServerIp": {
                    "type": "string",
                    "description": "DNS server IP.\n"
                },
                "enableEdgeActiveStandby": {
                    "type": "boolean",
                    "description": "Enables Edge Active-Standby Mode.\n"
                },
                "enableEdgeActiveStandbyPreemptive": {
                    "type": "boolean",
                    "description": "Enables Preemptive Mode for Edge Active-Standby, available only with Active-Standby enabled.\n"
                },
                "enableEdgeTransitiveRouting": {
                    "type": "boolean",
                    "description": "Enable Edge transitive routing.\n"
                },
                "enableJumboFrame": {
                    "type": "boolean",
                    "description": "Enable jumbo frame.\n"
                },
                "enableLearnedCidrsApproval": {
                    "type": "boolean",
                    "description": "Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.\n"
                },
                "enableManagementOverPrivateNetwork": {
                    "type": "boolean",
                    "description": "Enable management over private network.\n"
                },
                "enablePreserveAsPath": {
                    "type": "boolean",
                    "description": "Enable preserve as path when advertising manual summary CIDRs on BGP spoke gateway.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Edge as a Spoke name.\n"
                },
                "lanInterfaceIpPrefix": {
                    "type": "string",
                    "description": "LAN interface IP/prefix.\n"
                },
                "latitude": {
                    "type": "string",
                    "description": "The latitude of the Edge as a Spoke.\n"
                },
                "localAsNumber": {
                    "type": "string",
                    "description": "Local AS number.\n"
                },
                "longitude": {
                    "type": "string",
                    "description": "The longitude of the Edge as a Spoke.\n"
                },
                "managementDefaultGatewayIp": {
                    "type": "string",
                    "description": "Management default gateway IP.\n"
                },
                "managementEgressIpPrefix": {
                    "type": "string",
                    "description": "Management egress gateway IP/prefix.\n"
                },
                "managementInterfaceConfig": {
                    "type": "string",
                    "description": "Management interface configuration. Valid values: 'DHCP' and 'Static'.\n"
                },
                "managementInterfaceIpPrefix": {
                    "type": "string",
                    "description": "Management interface IP/prefix.\n"
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of AS numbers to prepend gateway BGP AS_Path field.\n"
                },
                "rxQueueSize": {
                    "type": "string",
                    "description": "Ethernet interface RX queue size.\n"
                },
                "secondaryDnsServerIp": {
                    "type": "string",
                    "description": "Secondary DNS server IP.\n"
                },
                "siteId": {
                    "type": "string",
                    "description": "Site ID.\n"
                },
                "spokeBgpManualAdvertiseCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Intended CIDR list to be advertised to external BGP router.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of Edge as a Spoke.\n"
                },
                "wanDefaultGatewayIp": {
                    "type": "string",
                    "description": "WAN default gateway IP.\n"
                },
                "wanInterfaceIpPrefix": {
                    "type": "string",
                    "description": "WAN interface IP/prefix.\n"
                },
                "wanPublicIp": {
                    "type": "string",
                    "description": "WAN interface public IP.\n"
                },
                "ztpFileDownloadPath": {
                    "type": "string",
                    "description": "The location where the Edge as a CaaG ZTP file will be stored.\n"
                },
                "ztpFileType": {
                    "type": "string",
                    "description": "ZTP file type.\n"
                }
            },
            "required": [
                "gwName",
                "lanInterfaceIpPrefix",
                "latitude",
                "localAsNumber",
                "longitude",
                "managementInterfaceConfig",
                "siteId",
                "state",
                "wanDefaultGatewayIp",
                "wanInterfaceIpPrefix",
                "wanPublicIp",
                "ztpFileDownloadPath",
                "ztpFileType"
            ],
            "inputProperties": {
                "approvedLearnedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Approved learned CIDRs for BGP Spoke Gateway.\n"
                },
                "bgpHoldTime": {
                    "type": "integer",
                    "description": "BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.\n"
                },
                "bgpPollingTime": {
                    "type": "integer",
                    "description": "BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.\n"
                },
                "dnsServerIp": {
                    "type": "string",
                    "description": "DNS server IP.\n",
                    "willReplaceOnChanges": true
                },
                "enableEdgeActiveStandby": {
                    "type": "boolean",
                    "description": "Enables Edge Active-Standby Mode.\n",
                    "willReplaceOnChanges": true
                },
                "enableEdgeActiveStandbyPreemptive": {
                    "type": "boolean",
                    "description": "Enables Preemptive Mode for Edge Active-Standby, available only with Active-Standby enabled.\n",
                    "willReplaceOnChanges": true
                },
                "enableEdgeTransitiveRouting": {
                    "type": "boolean",
                    "description": "Enable Edge transitive routing.\n"
                },
                "enableJumboFrame": {
                    "type": "boolean",
                    "description": "Enable jumbo frame.\n"
                },
                "enableLearnedCidrsApproval": {
                    "type": "boolean",
                    "description": "Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.\n"
                },
                "enableManagementOverPrivateNetwork": {
                    "type": "boolean",
                    "description": "Enable management over private network.\n",
                    "willReplaceOnChanges": true
                },
                "enablePreserveAsPath": {
                    "type": "boolean",
                    "description": "Enable preserve as path when advertising manual summary CIDRs on BGP spoke gateway.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Edge as a Spoke name.\n",
                    "willReplaceOnChanges": true
                },
                "lanInterfaceIpPrefix": {
                    "type": "string",
                    "description": "LAN interface IP/prefix.\n"
                },
                "latitude": {
                    "type": "string",
                    "description": "The latitude of the Edge as a Spoke.\n"
                },
                "localAsNumber": {
                    "type": "string",
                    "description": "Local AS number.\n"
                },
                "longitude": {
                    "type": "string",
                    "description": "The longitude of the Edge as a Spoke.\n"
                },
                "managementDefaultGatewayIp": {
                    "type": "string",
                    "description": "Management default gateway IP.\n",
                    "willReplaceOnChanges": true
                },
                "managementEgressIpPrefix": {
                    "type": "string",
                    "description": "Management egress gateway IP/prefix.\n"
                },
                "managementInterfaceConfig": {
                    "type": "string",
                    "description": "Management interface configuration. Valid values: 'DHCP' and 'Static'.\n",
                    "willReplaceOnChanges": true
                },
                "managementInterfaceIpPrefix": {
                    "type": "string",
                    "description": "Management interface IP/prefix.\n",
                    "willReplaceOnChanges": true
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of AS numbers to prepend gateway BGP AS_Path field.\n"
                },
                "rxQueueSize": {
                    "type": "string",
                    "description": "Ethernet interface RX queue size.\n"
                },
                "secondaryDnsServerIp": {
                    "type": "string",
                    "description": "Secondary DNS server IP.\n",
                    "willReplaceOnChanges": true
                },
                "siteId": {
                    "type": "string",
                    "description": "Site ID.\n",
                    "willReplaceOnChanges": true
                },
                "spokeBgpManualAdvertiseCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Intended CIDR list to be advertised to external BGP router.\n"
                },
                "wanDefaultGatewayIp": {
                    "type": "string",
                    "description": "WAN default gateway IP.\n"
                },
                "wanInterfaceIpPrefix": {
                    "type": "string",
                    "description": "WAN interface IP/prefix.\n"
                },
                "wanPublicIp": {
                    "type": "string",
                    "description": "WAN interface public IP.\n"
                },
                "ztpFileDownloadPath": {
                    "type": "string",
                    "description": "The location where the Edge as a CaaG ZTP file will be stored.\n",
                    "willReplaceOnChanges": true
                },
                "ztpFileType": {
                    "type": "string",
                    "description": "ZTP file type.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "gwName",
                "lanInterfaceIpPrefix",
                "managementInterfaceConfig",
                "siteId",
                "wanDefaultGatewayIp",
                "wanInterfaceIpPrefix",
                "ztpFileDownloadPath",
                "ztpFileType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixEdgeSpoke resources.\n",
                "properties": {
                    "approvedLearnedCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Approved learned CIDRs for BGP Spoke Gateway.\n"
                    },
                    "bgpHoldTime": {
                        "type": "integer",
                        "description": "BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.\n"
                    },
                    "bgpPollingTime": {
                        "type": "integer",
                        "description": "BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.\n"
                    },
                    "dnsServerIp": {
                        "type": "string",
                        "description": "DNS server IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableEdgeActiveStandby": {
                        "type": "boolean",
                        "description": "Enables Edge Active-Standby Mode.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableEdgeActiveStandbyPreemptive": {
                        "type": "boolean",
                        "description": "Enables Preemptive Mode for Edge Active-Standby, available only with Active-Standby enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableEdgeTransitiveRouting": {
                        "type": "boolean",
                        "description": "Enable Edge transitive routing.\n"
                    },
                    "enableJumboFrame": {
                        "type": "boolean",
                        "description": "Enable jumbo frame.\n"
                    },
                    "enableLearnedCidrsApproval": {
                        "type": "boolean",
                        "description": "Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.\n"
                    },
                    "enableManagementOverPrivateNetwork": {
                        "type": "boolean",
                        "description": "Enable management over private network.\n",
                        "willReplaceOnChanges": true
                    },
                    "enablePreserveAsPath": {
                        "type": "boolean",
                        "description": "Enable preserve as path when advertising manual summary CIDRs on BGP spoke gateway.\n"
                    },
                    "gwName": {
                        "type": "string",
                        "description": "Edge as a Spoke name.\n",
                        "willReplaceOnChanges": true
                    },
                    "lanInterfaceIpPrefix": {
                        "type": "string",
                        "description": "LAN interface IP/prefix.\n"
                    },
                    "latitude": {
                        "type": "string",
                        "description": "The latitude of the Edge as a Spoke.\n"
                    },
                    "localAsNumber": {
                        "type": "string",
                        "description": "Local AS number.\n"
                    },
                    "longitude": {
                        "type": "string",
                        "description": "The longitude of the Edge as a Spoke.\n"
                    },
                    "managementDefaultGatewayIp": {
                        "type": "string",
                        "description": "Management default gateway IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "managementEgressIpPrefix": {
                        "type": "string",
                        "description": "Management egress gateway IP/prefix.\n"
                    },
                    "managementInterfaceConfig": {
                        "type": "string",
                        "description": "Management interface configuration. Valid values: 'DHCP' and 'Static'.\n",
                        "willReplaceOnChanges": true
                    },
                    "managementInterfaceIpPrefix": {
                        "type": "string",
                        "description": "Management interface IP/prefix.\n",
                        "willReplaceOnChanges": true
                    },
                    "prependAsPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of AS numbers to prepend gateway BGP AS_Path field.\n"
                    },
                    "rxQueueSize": {
                        "type": "string",
                        "description": "Ethernet interface RX queue size.\n"
                    },
                    "secondaryDnsServerIp": {
                        "type": "string",
                        "description": "Secondary DNS server IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "siteId": {
                        "type": "string",
                        "description": "Site ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "spokeBgpManualAdvertiseCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Intended CIDR list to be advertised to external BGP router.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of Edge as a Spoke.\n"
                    },
                    "wanDefaultGatewayIp": {
                        "type": "string",
                        "description": "WAN default gateway IP.\n"
                    },
                    "wanInterfaceIpPrefix": {
                        "type": "string",
                        "description": "WAN interface IP/prefix.\n"
                    },
                    "wanPublicIp": {
                        "type": "string",
                        "description": "WAN interface public IP.\n"
                    },
                    "ztpFileDownloadPath": {
                        "type": "string",
                        "description": "The location where the Edge as a CaaG ZTP file will be stored.\n",
                        "willReplaceOnChanges": true
                    },
                    "ztpFileType": {
                        "type": "string",
                        "description": "ZTP file type.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixEdgeSpokeExternalDeviceConn:AviatrixEdgeSpokeExternalDeviceConn": {
            "properties": {
                "bgpLocalAsNum": {
                    "type": "string",
                    "description": "BGP local AS number.\n"
                },
                "bgpRemoteAsNum": {
                    "type": "string",
                    "description": "BGP remote AS number.\n"
                },
                "connectionName": {
                    "type": "string",
                    "description": "The name of the spoke external device connection which is going to be created.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Connection type. Valid values: 'bgp'. Default value: 'bgp'.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Name of the BGP Spoke Gateway.\n"
                },
                "localLanIp": {
                    "type": "string",
                    "description": "Local LAN IP.\n"
                },
                "remoteLanIp": {
                    "type": "string",
                    "description": "Remote LAN IP.\n"
                },
                "siteId": {
                    "type": "string",
                    "description": "ID of the VPC where the BGP Spoke Gateway is located.\n"
                },
                "tunnelProtocol": {
                    "type": "string",
                    "description": "Tunnel Protocol. Valid value: 'LAN'. Default value: 'LAN'. Case insensitive.\n"
                }
            },
            "required": [
                "bgpLocalAsNum",
                "bgpRemoteAsNum",
                "connectionName",
                "gwName",
                "localLanIp",
                "remoteLanIp",
                "siteId"
            ],
            "inputProperties": {
                "bgpLocalAsNum": {
                    "type": "string",
                    "description": "BGP local AS number.\n",
                    "willReplaceOnChanges": true
                },
                "bgpRemoteAsNum": {
                    "type": "string",
                    "description": "BGP remote AS number.\n",
                    "willReplaceOnChanges": true
                },
                "connectionName": {
                    "type": "string",
                    "description": "The name of the spoke external device connection which is going to be created.\n",
                    "willReplaceOnChanges": true
                },
                "connectionType": {
                    "type": "string",
                    "description": "Connection type. Valid values: 'bgp'. Default value: 'bgp'.\n",
                    "willReplaceOnChanges": true
                },
                "gwName": {
                    "type": "string",
                    "description": "Name of the BGP Spoke Gateway.\n",
                    "willReplaceOnChanges": true
                },
                "localLanIp": {
                    "type": "string",
                    "description": "Local LAN IP.\n",
                    "willReplaceOnChanges": true
                },
                "remoteLanIp": {
                    "type": "string",
                    "description": "Remote LAN IP.\n",
                    "willReplaceOnChanges": true
                },
                "siteId": {
                    "type": "string",
                    "description": "ID of the VPC where the BGP Spoke Gateway is located.\n",
                    "willReplaceOnChanges": true
                },
                "tunnelProtocol": {
                    "type": "string",
                    "description": "Tunnel Protocol. Valid value: 'LAN'. Default value: 'LAN'. Case insensitive.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "bgpLocalAsNum",
                "bgpRemoteAsNum",
                "connectionName",
                "gwName",
                "localLanIp",
                "remoteLanIp",
                "siteId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixEdgeSpokeExternalDeviceConn resources.\n",
                "properties": {
                    "bgpLocalAsNum": {
                        "type": "string",
                        "description": "BGP local AS number.\n",
                        "willReplaceOnChanges": true
                    },
                    "bgpRemoteAsNum": {
                        "type": "string",
                        "description": "BGP remote AS number.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionName": {
                        "type": "string",
                        "description": "The name of the spoke external device connection which is going to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Connection type. Valid values: 'bgp'. Default value: 'bgp'.\n",
                        "willReplaceOnChanges": true
                    },
                    "gwName": {
                        "type": "string",
                        "description": "Name of the BGP Spoke Gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "localLanIp": {
                        "type": "string",
                        "description": "Local LAN IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "remoteLanIp": {
                        "type": "string",
                        "description": "Remote LAN IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "siteId": {
                        "type": "string",
                        "description": "ID of the VPC where the BGP Spoke Gateway is located.\n",
                        "willReplaceOnChanges": true
                    },
                    "tunnelProtocol": {
                        "type": "string",
                        "description": "Tunnel Protocol. Valid value: 'LAN'. Default value: 'LAN'. Case insensitive.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixEdgeSpokeTransitAttachment:AviatrixEdgeSpokeTransitAttachment": {
            "properties": {
                "enableInsaneMode": {
                    "type": "boolean",
                    "description": "Enable jumbo frame.\n"
                },
                "enableJumboFrame": {
                    "type": "boolean",
                    "description": "Enable jumbo frame.\n"
                },
                "enableOverPrivateNetwork": {
                    "type": "boolean",
                    "description": "Enable over private network.\n"
                },
                "insaneModeTunnelNumber": {
                    "type": "integer",
                    "description": "Insane mode tunnel number.\n"
                },
                "spokeGwName": {
                    "type": "string",
                    "description": "Name of the Edge as a Spoke to attach to the transit network.\n"
                },
                "spokePrependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on Edge as a Spoke.\n"
                },
                "transitGwName": {
                    "type": "string",
                    "description": "Name of the transit gateway to attach the Edge as a Spoke to.\n"
                },
                "transitPrependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.\n"
                }
            },
            "required": [
                "spokeGwName",
                "transitGwName"
            ],
            "inputProperties": {
                "enableInsaneMode": {
                    "type": "boolean",
                    "description": "Enable jumbo frame.\n",
                    "willReplaceOnChanges": true
                },
                "enableJumboFrame": {
                    "type": "boolean",
                    "description": "Enable jumbo frame.\n",
                    "willReplaceOnChanges": true
                },
                "enableOverPrivateNetwork": {
                    "type": "boolean",
                    "description": "Enable over private network.\n",
                    "willReplaceOnChanges": true
                },
                "insaneModeTunnelNumber": {
                    "type": "integer",
                    "description": "Insane mode tunnel number.\n",
                    "willReplaceOnChanges": true
                },
                "spokeGwName": {
                    "type": "string",
                    "description": "Name of the Edge as a Spoke to attach to the transit network.\n",
                    "willReplaceOnChanges": true
                },
                "spokePrependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on Edge as a Spoke.\n"
                },
                "transitGwName": {
                    "type": "string",
                    "description": "Name of the transit gateway to attach the Edge as a Spoke to.\n",
                    "willReplaceOnChanges": true
                },
                "transitPrependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.\n"
                }
            },
            "requiredInputs": [
                "spokeGwName",
                "transitGwName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixEdgeSpokeTransitAttachment resources.\n",
                "properties": {
                    "enableInsaneMode": {
                        "type": "boolean",
                        "description": "Enable jumbo frame.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableJumboFrame": {
                        "type": "boolean",
                        "description": "Enable jumbo frame.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableOverPrivateNetwork": {
                        "type": "boolean",
                        "description": "Enable over private network.\n",
                        "willReplaceOnChanges": true
                    },
                    "insaneModeTunnelNumber": {
                        "type": "integer",
                        "description": "Insane mode tunnel number.\n",
                        "willReplaceOnChanges": true
                    },
                    "spokeGwName": {
                        "type": "string",
                        "description": "Name of the Edge as a Spoke to attach to the transit network.\n",
                        "willReplaceOnChanges": true
                    },
                    "spokePrependAsPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on Edge as a Spoke.\n"
                    },
                    "transitGwName": {
                        "type": "string",
                        "description": "Name of the transit gateway to attach the Edge as a Spoke to.\n",
                        "willReplaceOnChanges": true
                    },
                    "transitPrependAsPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixFilebeatForwarder:AviatrixFilebeatForwarder": {
            "properties": {
                "configFile": {
                    "type": "string",
                    "description": "Configuration file.\n"
                },
                "excludedGateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded gateways.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port number.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server IP.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Enabled or not.\n"
                },
                "trustedCaFile": {
                    "type": "string",
                    "description": "Trusted CA file.\n"
                }
            },
            "required": [
                "port",
                "server",
                "status"
            ],
            "inputProperties": {
                "configFile": {
                    "type": "string",
                    "description": "Configuration file.\n",
                    "willReplaceOnChanges": true
                },
                "excludedGateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded gateways.\n",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port number.\n",
                    "willReplaceOnChanges": true
                },
                "server": {
                    "type": "string",
                    "description": "Server IP.\n",
                    "willReplaceOnChanges": true
                },
                "trustedCaFile": {
                    "type": "string",
                    "description": "Trusted CA file.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "port",
                "server"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixFilebeatForwarder resources.\n",
                "properties": {
                    "configFile": {
                        "type": "string",
                        "description": "Configuration file.\n",
                        "willReplaceOnChanges": true
                    },
                    "excludedGateways": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of excluded gateways.\n",
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port number.\n",
                        "willReplaceOnChanges": true
                    },
                    "server": {
                        "type": "string",
                        "description": "Server IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Enabled or not.\n"
                    },
                    "trustedCaFile": {
                        "type": "string",
                        "description": "Trusted CA file.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixFirenet:AviatrixFirenet": {
            "properties": {
                "eastWestInspectionExcludedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Network List Excluded From East-West Inspection. CIDRs to be excluded from inspection. Type: Set(String). Available as\nof provider version R2.19.2+.\n"
                },
                "egressEnabled": {
                    "type": "boolean",
                    "description": "Enable/Disable egress through firewall.\n"
                },
                "egressStaticCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of egress static cidrs.\n"
                },
                "firewallInstanceAssociations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixFirenetFirewallInstanceAssociation:AviatrixFirenetFirewallInstanceAssociation"
                    },
                    "description": "List of firewall instances to be associated with fireNet.\n",
                    "deprecationMessage": "Please set `manage_firewall_instance_association` to false, and use the standalone aviatrix_firewall_instance_association resource instead."
                },
                "hashingAlgorithm": {
                    "type": "string",
                    "description": "Hashing algorithm to load balance traffic across the firewall.\n"
                },
                "inspectionEnabled": {
                    "type": "boolean",
                    "description": "Enable/Disable traffic inspection.\n"
                },
                "keepAliveViaLanInterfaceEnabled": {
                    "type": "boolean",
                    "description": "Enable Keep Alive via Firewall LAN Interface.\n"
                },
                "manageFirewallInstanceAssociation": {
                    "type": "boolean",
                    "description": "Enable this to manage firewall_instance_associations in-line. If this is false, associations must be managed via\nstandalone aviatrix_firewall_instance_association resources. Type: boolean, Default: true, Valid values: true/false.\n"
                },
                "tgwSegmentationForEgressEnabled": {
                    "type": "boolean",
                    "description": "Enable TGW segmentation for egress.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC ID.\n"
                }
            },
            "required": [
                "vpcId"
            ],
            "inputProperties": {
                "eastWestInspectionExcludedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Network List Excluded From East-West Inspection. CIDRs to be excluded from inspection. Type: Set(String). Available as\nof provider version R2.19.2+.\n"
                },
                "egressEnabled": {
                    "type": "boolean",
                    "description": "Enable/Disable egress through firewall.\n"
                },
                "egressStaticCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of egress static cidrs.\n"
                },
                "firewallInstanceAssociations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixFirenetFirewallInstanceAssociation:AviatrixFirenetFirewallInstanceAssociation"
                    },
                    "description": "List of firewall instances to be associated with fireNet.\n",
                    "deprecationMessage": "Please set `manage_firewall_instance_association` to false, and use the standalone aviatrix_firewall_instance_association resource instead."
                },
                "hashingAlgorithm": {
                    "type": "string",
                    "description": "Hashing algorithm to load balance traffic across the firewall.\n"
                },
                "inspectionEnabled": {
                    "type": "boolean",
                    "description": "Enable/Disable traffic inspection.\n"
                },
                "keepAliveViaLanInterfaceEnabled": {
                    "type": "boolean",
                    "description": "Enable Keep Alive via Firewall LAN Interface.\n"
                },
                "manageFirewallInstanceAssociation": {
                    "type": "boolean",
                    "description": "Enable this to manage firewall_instance_associations in-line. If this is false, associations must be managed via\nstandalone aviatrix_firewall_instance_association resources. Type: boolean, Default: true, Valid values: true/false.\n"
                },
                "tgwSegmentationForEgressEnabled": {
                    "type": "boolean",
                    "description": "Enable TGW segmentation for egress.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC ID.\n"
                }
            },
            "requiredInputs": [
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixFirenet resources.\n",
                "properties": {
                    "eastWestInspectionExcludedCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Network List Excluded From East-West Inspection. CIDRs to be excluded from inspection. Type: Set(String). Available as\nof provider version R2.19.2+.\n"
                    },
                    "egressEnabled": {
                        "type": "boolean",
                        "description": "Enable/Disable egress through firewall.\n"
                    },
                    "egressStaticCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of egress static cidrs.\n"
                    },
                    "firewallInstanceAssociations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixFirenetFirewallInstanceAssociation:AviatrixFirenetFirewallInstanceAssociation"
                        },
                        "description": "List of firewall instances to be associated with fireNet.\n",
                        "deprecationMessage": "Please set `manage_firewall_instance_association` to false, and use the standalone aviatrix_firewall_instance_association resource instead."
                    },
                    "hashingAlgorithm": {
                        "type": "string",
                        "description": "Hashing algorithm to load balance traffic across the firewall.\n"
                    },
                    "inspectionEnabled": {
                        "type": "boolean",
                        "description": "Enable/Disable traffic inspection.\n"
                    },
                    "keepAliveViaLanInterfaceEnabled": {
                        "type": "boolean",
                        "description": "Enable Keep Alive via Firewall LAN Interface.\n"
                    },
                    "manageFirewallInstanceAssociation": {
                        "type": "boolean",
                        "description": "Enable this to manage firewall_instance_associations in-line. If this is false, associations must be managed via\nstandalone aviatrix_firewall_instance_association resources. Type: boolean, Default: true, Valid values: true/false.\n"
                    },
                    "tgwSegmentationForEgressEnabled": {
                        "type": "boolean",
                        "description": "Enable TGW segmentation for egress.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "VPC ID.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixFirewall:AviatrixFirewall": {
            "properties": {
                "baseLogEnabled": {
                    "type": "boolean",
                    "description": "Indicates whether enable logging or not. Valid values: true, false. Default value: false.\n"
                },
                "basePolicy": {
                    "type": "string",
                    "description": "New base policy.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "The name of gateway.\n"
                },
                "manageFirewallPolicies": {
                    "type": "boolean",
                    "description": "Enable to manage firewall policies via in-line rules. If false, policies must be managed using\n`aviatrix_firewall_policy` resources.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixFirewallPolicy:AviatrixFirewallPolicy"
                    },
                    "description": "New access policy for the gateway.\n"
                }
            },
            "required": [
                "gwName"
            ],
            "inputProperties": {
                "baseLogEnabled": {
                    "type": "boolean",
                    "description": "Indicates whether enable logging or not. Valid values: true, false. Default value: false.\n"
                },
                "basePolicy": {
                    "type": "string",
                    "description": "New base policy.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "The name of gateway.\n"
                },
                "manageFirewallPolicies": {
                    "type": "boolean",
                    "description": "Enable to manage firewall policies via in-line rules. If false, policies must be managed using\n`aviatrix_firewall_policy` resources.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixFirewallPolicy:AviatrixFirewallPolicy"
                    },
                    "description": "New access policy for the gateway.\n"
                }
            },
            "requiredInputs": [
                "gwName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixFirewall resources.\n",
                "properties": {
                    "baseLogEnabled": {
                        "type": "boolean",
                        "description": "Indicates whether enable logging or not. Valid values: true, false. Default value: false.\n"
                    },
                    "basePolicy": {
                        "type": "string",
                        "description": "New base policy.\n"
                    },
                    "gwName": {
                        "type": "string",
                        "description": "The name of gateway.\n"
                    },
                    "manageFirewallPolicies": {
                        "type": "boolean",
                        "description": "Enable to manage firewall policies via in-line rules. If false, policies must be managed using\n`aviatrix_firewall_policy` resources.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixFirewallPolicy:AviatrixFirewallPolicy"
                        },
                        "description": "New access policy for the gateway.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixFirewallInstance:AviatrixFirewallInstance": {
            "properties": {
                "availabilityDomain": {
                    "type": "string",
                    "description": "Availability domain for OCI.\n"
                },
                "bootstrapBucketName": {
                    "type": "string",
                    "description": "Advanced option. Bootstrap bucket name. Only available for AWS and GCP.\n"
                },
                "bootstrapStorageName": {
                    "type": "string",
                    "description": "Advanced option. Bootstrap storage name. Applicable to Azure and Palo Alto Networks VM-Series/Fortinet Series deployment\nonly.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Cloud Type\n"
                },
                "containerFolder": {
                    "type": "string",
                    "description": "Advanced option. Bootstrap storage name. Applicable to Azure and Fortinet Series deployment only.\n"
                },
                "egressInterface": {
                    "type": "string",
                    "description": "ID of Egress Interface created.\n"
                },
                "egressSubnet": {
                    "type": "string",
                    "description": "Egress Interface Subnet.\n"
                },
                "egressVpcId": {
                    "type": "string",
                    "description": "Egress VPC ID. Required for GCP.\n"
                },
                "faultDomain": {
                    "type": "string",
                    "description": "Fault domain for OCI.\n"
                },
                "fileShareFolder": {
                    "type": "string",
                    "description": "Advanced option. File share folder. Applicable to Azure and Palo Alto Networks VM-Series deployment only.\n"
                },
                "firenetGwName": {
                    "type": "string",
                    "description": "Name of the primary FireNet gateway.\n"
                },
                "firewallImage": {
                    "type": "string",
                    "description": "One of the AWS AMIs from Palo Alto Networks.\n"
                },
                "firewallImageId": {
                    "type": "string",
                    "description": "Firewall image ID.\n"
                },
                "firewallImageVersion": {
                    "type": "string",
                    "description": "Version of firewall image.\n"
                },
                "firewallName": {
                    "type": "string",
                    "description": "Name of the firewall instance to be created.\n"
                },
                "firewallSize": {
                    "type": "string",
                    "description": "Instance size of the firewall.\n"
                },
                "gcpVpcId": {
                    "type": "string",
                    "description": "GCP VPC ID\n"
                },
                "iamRole": {
                    "type": "string",
                    "description": "Advanced option. IAM role. Only available for AWS.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the firewall instance created.\n"
                },
                "keyName": {
                    "type": "string",
                    "description": "Applicable to AWS deployment only. AWS Key Pair name. If not provided, a Key Pair will be generated.\n"
                },
                "lanInterface": {
                    "type": "string",
                    "description": "ID of Lan Interface created.\n"
                },
                "managementInterface": {
                    "type": "string",
                    "description": "ID of Management Interface created.\n"
                },
                "managementSubnet": {
                    "type": "string",
                    "description": "Management Interface Subnet. Required for Palo Alto Networks VM-Series, and required to be empty for Check Point or\nFortinet series.\n"
                },
                "managementVpcId": {
                    "type": "string",
                    "description": "Management VPC ID. Required for GCP Palo Alto Networks VM-Series. Required to be empty for GCP Check Point or Fortinet\nseries.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Authentication method. Applicable to Azure deployment only.\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "Management Public IP.\n"
                },
                "sasUrlConfig": {
                    "type": "string",
                    "description": "Advanced option. Bootstrap storage name. Applicable to Azure and Fortinet Series deployment only.\n"
                },
                "sasUrlLicense": {
                    "type": "string",
                    "description": "Advanced option. Bootstrap storage name. Applicable to Azure and Fortinet Series deployment only.\n"
                },
                "shareDirectory": {
                    "type": "string",
                    "description": "Advanced option. Share directory. Applicable to Azure and Palo Alto Networks VM-Series deployment only.\n"
                },
                "sicKey": {
                    "type": "string",
                    "description": "Advanced option. Bic key. Applicable to Azure and Check Point Series deployment only.\n"
                },
                "sshPublicKey": {
                    "type": "string",
                    "description": "Authentication method. Applicable to Azure deployment only.\n"
                },
                "storageAccessKey": {
                    "type": "string",
                    "description": "Advanced option. Storage access key. Applicable to Azure and Palo Alto Networks VM-Series deployment only.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of tags to assign to the firewall instance.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "Advanced option. Bootstrap storage name. Applicable to Check Point Series and Fortinet Series deployment only.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Applicable to Azure deployment only. 'admin' as a username is not accepted.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "ID of the Security VPC.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "Availability Zone. Only available for AWS, GCP and Azure.\n"
                }
            },
            "required": [
                "availabilityDomain",
                "cloudType",
                "egressInterface",
                "egressSubnet",
                "faultDomain",
                "firewallImage",
                "firewallImageId",
                "firewallImageVersion",
                "firewallName",
                "firewallSize",
                "gcpVpcId",
                "instanceId",
                "lanInterface",
                "managementInterface",
                "publicIp",
                "vpcId",
                "zone"
            ],
            "inputProperties": {
                "availabilityDomain": {
                    "type": "string",
                    "description": "Availability domain for OCI.\n",
                    "willReplaceOnChanges": true
                },
                "bootstrapBucketName": {
                    "type": "string",
                    "description": "Advanced option. Bootstrap bucket name. Only available for AWS and GCP.\n",
                    "willReplaceOnChanges": true
                },
                "bootstrapStorageName": {
                    "type": "string",
                    "description": "Advanced option. Bootstrap storage name. Applicable to Azure and Palo Alto Networks VM-Series/Fortinet Series deployment\nonly.\n",
                    "willReplaceOnChanges": true
                },
                "containerFolder": {
                    "type": "string",
                    "description": "Advanced option. Bootstrap storage name. Applicable to Azure and Fortinet Series deployment only.\n",
                    "willReplaceOnChanges": true
                },
                "egressSubnet": {
                    "type": "string",
                    "description": "Egress Interface Subnet.\n",
                    "willReplaceOnChanges": true
                },
                "egressVpcId": {
                    "type": "string",
                    "description": "Egress VPC ID. Required for GCP.\n",
                    "willReplaceOnChanges": true
                },
                "faultDomain": {
                    "type": "string",
                    "description": "Fault domain for OCI.\n",
                    "willReplaceOnChanges": true
                },
                "fileShareFolder": {
                    "type": "string",
                    "description": "Advanced option. File share folder. Applicable to Azure and Palo Alto Networks VM-Series deployment only.\n",
                    "willReplaceOnChanges": true
                },
                "firenetGwName": {
                    "type": "string",
                    "description": "Name of the primary FireNet gateway.\n",
                    "willReplaceOnChanges": true
                },
                "firewallImage": {
                    "type": "string",
                    "description": "One of the AWS AMIs from Palo Alto Networks.\n",
                    "willReplaceOnChanges": true
                },
                "firewallImageId": {
                    "type": "string",
                    "description": "Firewall image ID.\n"
                },
                "firewallImageVersion": {
                    "type": "string",
                    "description": "Version of firewall image.\n",
                    "willReplaceOnChanges": true
                },
                "firewallName": {
                    "type": "string",
                    "description": "Name of the firewall instance to be created.\n",
                    "willReplaceOnChanges": true
                },
                "firewallSize": {
                    "type": "string",
                    "description": "Instance size of the firewall.\n",
                    "willReplaceOnChanges": true
                },
                "iamRole": {
                    "type": "string",
                    "description": "Advanced option. IAM role. Only available for AWS.\n",
                    "willReplaceOnChanges": true
                },
                "keyName": {
                    "type": "string",
                    "description": "Applicable to AWS deployment only. AWS Key Pair name. If not provided, a Key Pair will be generated.\n",
                    "willReplaceOnChanges": true
                },
                "managementSubnet": {
                    "type": "string",
                    "description": "Management Interface Subnet. Required for Palo Alto Networks VM-Series, and required to be empty for Check Point or\nFortinet series.\n",
                    "willReplaceOnChanges": true
                },
                "managementVpcId": {
                    "type": "string",
                    "description": "Management VPC ID. Required for GCP Palo Alto Networks VM-Series. Required to be empty for GCP Check Point or Fortinet\nseries.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "Authentication method. Applicable to Azure deployment only.\n",
                    "willReplaceOnChanges": true
                },
                "sasUrlConfig": {
                    "type": "string",
                    "description": "Advanced option. Bootstrap storage name. Applicable to Azure and Fortinet Series deployment only.\n",
                    "willReplaceOnChanges": true
                },
                "sasUrlLicense": {
                    "type": "string",
                    "description": "Advanced option. Bootstrap storage name. Applicable to Azure and Fortinet Series deployment only.\n",
                    "willReplaceOnChanges": true
                },
                "shareDirectory": {
                    "type": "string",
                    "description": "Advanced option. Share directory. Applicable to Azure and Palo Alto Networks VM-Series deployment only.\n",
                    "willReplaceOnChanges": true
                },
                "sicKey": {
                    "type": "string",
                    "description": "Advanced option. Bic key. Applicable to Azure and Check Point Series deployment only.\n",
                    "willReplaceOnChanges": true
                },
                "sshPublicKey": {
                    "type": "string",
                    "description": "Authentication method. Applicable to Azure deployment only.\n",
                    "willReplaceOnChanges": true
                },
                "storageAccessKey": {
                    "type": "string",
                    "description": "Advanced option. Storage access key. Applicable to Azure and Palo Alto Networks VM-Series deployment only.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of tags to assign to the firewall instance.\n",
                    "willReplaceOnChanges": true
                },
                "userData": {
                    "type": "string",
                    "description": "Advanced option. Bootstrap storage name. Applicable to Check Point Series and Fortinet Series deployment only.\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "Applicable to Azure deployment only. 'admin' as a username is not accepted.\n",
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "ID of the Security VPC.\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "Availability Zone. Only available for AWS, GCP and Azure.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "egressSubnet",
                "firewallImage",
                "firewallName",
                "firewallSize",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixFirewallInstance resources.\n",
                "properties": {
                    "availabilityDomain": {
                        "type": "string",
                        "description": "Availability domain for OCI.\n",
                        "willReplaceOnChanges": true
                    },
                    "bootstrapBucketName": {
                        "type": "string",
                        "description": "Advanced option. Bootstrap bucket name. Only available for AWS and GCP.\n",
                        "willReplaceOnChanges": true
                    },
                    "bootstrapStorageName": {
                        "type": "string",
                        "description": "Advanced option. Bootstrap storage name. Applicable to Azure and Palo Alto Networks VM-Series/Fortinet Series deployment\nonly.\n",
                        "willReplaceOnChanges": true
                    },
                    "cloudType": {
                        "type": "integer",
                        "description": "Cloud Type\n"
                    },
                    "containerFolder": {
                        "type": "string",
                        "description": "Advanced option. Bootstrap storage name. Applicable to Azure and Fortinet Series deployment only.\n",
                        "willReplaceOnChanges": true
                    },
                    "egressInterface": {
                        "type": "string",
                        "description": "ID of Egress Interface created.\n"
                    },
                    "egressSubnet": {
                        "type": "string",
                        "description": "Egress Interface Subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "egressVpcId": {
                        "type": "string",
                        "description": "Egress VPC ID. Required for GCP.\n",
                        "willReplaceOnChanges": true
                    },
                    "faultDomain": {
                        "type": "string",
                        "description": "Fault domain for OCI.\n",
                        "willReplaceOnChanges": true
                    },
                    "fileShareFolder": {
                        "type": "string",
                        "description": "Advanced option. File share folder. Applicable to Azure and Palo Alto Networks VM-Series deployment only.\n",
                        "willReplaceOnChanges": true
                    },
                    "firenetGwName": {
                        "type": "string",
                        "description": "Name of the primary FireNet gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "firewallImage": {
                        "type": "string",
                        "description": "One of the AWS AMIs from Palo Alto Networks.\n",
                        "willReplaceOnChanges": true
                    },
                    "firewallImageId": {
                        "type": "string",
                        "description": "Firewall image ID.\n"
                    },
                    "firewallImageVersion": {
                        "type": "string",
                        "description": "Version of firewall image.\n",
                        "willReplaceOnChanges": true
                    },
                    "firewallName": {
                        "type": "string",
                        "description": "Name of the firewall instance to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "firewallSize": {
                        "type": "string",
                        "description": "Instance size of the firewall.\n",
                        "willReplaceOnChanges": true
                    },
                    "gcpVpcId": {
                        "type": "string",
                        "description": "GCP VPC ID\n"
                    },
                    "iamRole": {
                        "type": "string",
                        "description": "Advanced option. IAM role. Only available for AWS.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the firewall instance created.\n"
                    },
                    "keyName": {
                        "type": "string",
                        "description": "Applicable to AWS deployment only. AWS Key Pair name. If not provided, a Key Pair will be generated.\n",
                        "willReplaceOnChanges": true
                    },
                    "lanInterface": {
                        "type": "string",
                        "description": "ID of Lan Interface created.\n"
                    },
                    "managementInterface": {
                        "type": "string",
                        "description": "ID of Management Interface created.\n"
                    },
                    "managementSubnet": {
                        "type": "string",
                        "description": "Management Interface Subnet. Required for Palo Alto Networks VM-Series, and required to be empty for Check Point or\nFortinet series.\n",
                        "willReplaceOnChanges": true
                    },
                    "managementVpcId": {
                        "type": "string",
                        "description": "Management VPC ID. Required for GCP Palo Alto Networks VM-Series. Required to be empty for GCP Check Point or Fortinet\nseries.\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "Authentication method. Applicable to Azure deployment only.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "Management Public IP.\n"
                    },
                    "sasUrlConfig": {
                        "type": "string",
                        "description": "Advanced option. Bootstrap storage name. Applicable to Azure and Fortinet Series deployment only.\n",
                        "willReplaceOnChanges": true
                    },
                    "sasUrlLicense": {
                        "type": "string",
                        "description": "Advanced option. Bootstrap storage name. Applicable to Azure and Fortinet Series deployment only.\n",
                        "willReplaceOnChanges": true
                    },
                    "shareDirectory": {
                        "type": "string",
                        "description": "Advanced option. Share directory. Applicable to Azure and Palo Alto Networks VM-Series deployment only.\n",
                        "willReplaceOnChanges": true
                    },
                    "sicKey": {
                        "type": "string",
                        "description": "Advanced option. Bic key. Applicable to Azure and Check Point Series deployment only.\n",
                        "willReplaceOnChanges": true
                    },
                    "sshPublicKey": {
                        "type": "string",
                        "description": "Authentication method. Applicable to Azure deployment only.\n",
                        "willReplaceOnChanges": true
                    },
                    "storageAccessKey": {
                        "type": "string",
                        "description": "Advanced option. Storage access key. Applicable to Azure and Palo Alto Networks VM-Series deployment only.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of tags to assign to the firewall instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "userData": {
                        "type": "string",
                        "description": "Advanced option. Bootstrap storage name. Applicable to Check Point Series and Fortinet Series deployment only.\n",
                        "willReplaceOnChanges": true
                    },
                    "username": {
                        "type": "string",
                        "description": "Applicable to Azure deployment only. 'admin' as a username is not accepted.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "ID of the Security VPC.\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "Availability Zone. Only available for AWS, GCP and Azure.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixFirewallInstanceAssociation:AviatrixFirewallInstanceAssociation": {
            "properties": {
                "attached": {
                    "type": "boolean",
                    "description": "Switch to attach/detach firewall instance to/from fireNet.\n"
                },
                "egressInterface": {
                    "type": "string",
                    "description": "Egress interface ID, required if it is a firewall instance.\n"
                },
                "firenetGwName": {
                    "type": "string",
                    "description": "Name of the gateway to launch the firewall instance.\n"
                },
                "firewallName": {
                    "type": "string",
                    "description": "Firewall instance name, or FQDN Gateway's gw_name, required if it is a AWS or Azure firewall instance. Not allowed for\nGCP\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of Firewall instance, or FQDN Gateway's gw_name.\n"
                },
                "lanInterface": {
                    "type": "string",
                    "description": "Lan interface ID, required if it is a firewall instance.\n"
                },
                "managementInterface": {
                    "type": "string",
                    "description": "Management interface ID, required if it is a firewall instance.\n"
                },
                "vendorType": {
                    "type": "string",
                    "description": "Indication it is a firewall instance or FQDN gateway to be associated to fireNet. Valid values: 'Generic',\n'fqdn_gateway'. Value 'fqdn_gateway' is required for FQDN gateway.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC ID.\n"
                }
            },
            "required": [
                "instanceId",
                "vpcId"
            ],
            "inputProperties": {
                "attached": {
                    "type": "boolean",
                    "description": "Switch to attach/detach firewall instance to/from fireNet.\n",
                    "willReplaceOnChanges": true
                },
                "egressInterface": {
                    "type": "string",
                    "description": "Egress interface ID, required if it is a firewall instance.\n",
                    "willReplaceOnChanges": true
                },
                "firenetGwName": {
                    "type": "string",
                    "description": "Name of the gateway to launch the firewall instance.\n",
                    "willReplaceOnChanges": true
                },
                "firewallName": {
                    "type": "string",
                    "description": "Firewall instance name, or FQDN Gateway's gw_name, required if it is a AWS or Azure firewall instance. Not allowed for\nGCP\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of Firewall instance, or FQDN Gateway's gw_name.\n",
                    "willReplaceOnChanges": true
                },
                "lanInterface": {
                    "type": "string",
                    "description": "Lan interface ID, required if it is a firewall instance.\n",
                    "willReplaceOnChanges": true
                },
                "managementInterface": {
                    "type": "string",
                    "description": "Management interface ID, required if it is a firewall instance.\n",
                    "willReplaceOnChanges": true
                },
                "vendorType": {
                    "type": "string",
                    "description": "Indication it is a firewall instance or FQDN gateway to be associated to fireNet. Valid values: 'Generic',\n'fqdn_gateway'. Value 'fqdn_gateway' is required for FQDN gateway.\n",
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC ID.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixFirewallInstanceAssociation resources.\n",
                "properties": {
                    "attached": {
                        "type": "boolean",
                        "description": "Switch to attach/detach firewall instance to/from fireNet.\n",
                        "willReplaceOnChanges": true
                    },
                    "egressInterface": {
                        "type": "string",
                        "description": "Egress interface ID, required if it is a firewall instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "firenetGwName": {
                        "type": "string",
                        "description": "Name of the gateway to launch the firewall instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "firewallName": {
                        "type": "string",
                        "description": "Firewall instance name, or FQDN Gateway's gw_name, required if it is a AWS or Azure firewall instance. Not allowed for\nGCP\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of Firewall instance, or FQDN Gateway's gw_name.\n",
                        "willReplaceOnChanges": true
                    },
                    "lanInterface": {
                        "type": "string",
                        "description": "Lan interface ID, required if it is a firewall instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "managementInterface": {
                        "type": "string",
                        "description": "Management interface ID, required if it is a firewall instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "vendorType": {
                        "type": "string",
                        "description": "Indication it is a firewall instance or FQDN gateway to be associated to fireNet. Valid values: 'Generic',\n'fqdn_gateway'. Value 'fqdn_gateway' is required for FQDN gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "VPC ID.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixFirewallManagementAccess:AviatrixFirewallManagementAccess": {
            "properties": {
                "managementAccessResourceName": {
                    "type": "string",
                    "description": "Name of the resource to be enabled firewall management access.\n"
                },
                "transitFirenetGatewayName": {
                    "type": "string",
                    "description": "Name of the transit firenet gateway.\n"
                }
            },
            "required": [
                "managementAccessResourceName",
                "transitFirenetGatewayName"
            ],
            "inputProperties": {
                "managementAccessResourceName": {
                    "type": "string",
                    "description": "Name of the resource to be enabled firewall management access.\n",
                    "willReplaceOnChanges": true
                },
                "transitFirenetGatewayName": {
                    "type": "string",
                    "description": "Name of the transit firenet gateway.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "managementAccessResourceName",
                "transitFirenetGatewayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixFirewallManagementAccess resources.\n",
                "properties": {
                    "managementAccessResourceName": {
                        "type": "string",
                        "description": "Name of the resource to be enabled firewall management access.\n",
                        "willReplaceOnChanges": true
                    },
                    "transitFirenetGatewayName": {
                        "type": "string",
                        "description": "Name of the transit firenet gateway.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixFirewallPolicy:AviatrixFirewallPolicy": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Valid values: 'allow', 'deny' or 'force-drop'(in stateful firewall rule to allow immediate packet dropping on\nestablished sessions).\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this firewall policy.\n"
                },
                "dstIp": {
                    "type": "string",
                    "description": "CIDRs separated by comma or tag names such 'HR' or 'marketing' etc.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "The name of gateway.\n"
                },
                "logEnabled": {
                    "type": "boolean",
                    "description": "Valid values: true or false.\n"
                },
                "port": {
                    "type": "string",
                    "description": "A single port or a range of port numbers.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position in the policy list, where the firewall policy will be inserted to.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "'all', 'tcp', 'udp', 'icmp', 'sctp', 'rdp', 'dccp'.\n"
                },
                "srcIp": {
                    "type": "string",
                    "description": "CIDRs separated by comma or tag names such 'HR' or 'marketing' etc.\n"
                }
            },
            "required": [
                "action",
                "dstIp",
                "gwName",
                "port",
                "position",
                "srcIp"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Valid values: 'allow', 'deny' or 'force-drop'(in stateful firewall rule to allow immediate packet dropping on\nestablished sessions).\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of this firewall policy.\n",
                    "willReplaceOnChanges": true
                },
                "dstIp": {
                    "type": "string",
                    "description": "CIDRs separated by comma or tag names such 'HR' or 'marketing' etc.\n",
                    "willReplaceOnChanges": true
                },
                "gwName": {
                    "type": "string",
                    "description": "The name of gateway.\n",
                    "willReplaceOnChanges": true
                },
                "logEnabled": {
                    "type": "boolean",
                    "description": "Valid values: true or false.\n",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "string",
                    "description": "A single port or a range of port numbers.\n",
                    "willReplaceOnChanges": true
                },
                "position": {
                    "type": "integer",
                    "description": "Position in the policy list, where the firewall policy will be inserted to.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "'all', 'tcp', 'udp', 'icmp', 'sctp', 'rdp', 'dccp'.\n",
                    "willReplaceOnChanges": true
                },
                "srcIp": {
                    "type": "string",
                    "description": "CIDRs separated by comma or tag names such 'HR' or 'marketing' etc.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "action",
                "dstIp",
                "gwName",
                "port",
                "srcIp"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixFirewallPolicy resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Valid values: 'allow', 'deny' or 'force-drop'(in stateful firewall rule to allow immediate packet dropping on\nestablished sessions).\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this firewall policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "dstIp": {
                        "type": "string",
                        "description": "CIDRs separated by comma or tag names such 'HR' or 'marketing' etc.\n",
                        "willReplaceOnChanges": true
                    },
                    "gwName": {
                        "type": "string",
                        "description": "The name of gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "logEnabled": {
                        "type": "boolean",
                        "description": "Valid values: true or false.\n",
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "string",
                        "description": "A single port or a range of port numbers.\n",
                        "willReplaceOnChanges": true
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position in the policy list, where the firewall policy will be inserted to.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "'all', 'tcp', 'udp', 'icmp', 'sctp', 'rdp', 'dccp'.\n",
                        "willReplaceOnChanges": true
                    },
                    "srcIp": {
                        "type": "string",
                        "description": "CIDRs separated by comma or tag names such 'HR' or 'marketing' etc.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixFirewallTag:AviatrixFirewallTag": {
            "properties": {
                "cidrLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixFirewallTagCidrList:AviatrixFirewallTagCidrList"
                    },
                    "description": "A JSON file with information of 'cidr_tag_name' and 'cidr'.\n"
                },
                "firewallTag": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                }
            },
            "required": [
                "firewallTag"
            ],
            "inputProperties": {
                "cidrLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixFirewallTagCidrList:AviatrixFirewallTagCidrList"
                    },
                    "description": "A JSON file with information of 'cidr_tag_name' and 'cidr'.\n"
                },
                "firewallTag": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                }
            },
            "requiredInputs": [
                "firewallTag"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixFirewallTag resources.\n",
                "properties": {
                    "cidrLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixFirewallTagCidrList:AviatrixFirewallTagCidrList"
                        },
                        "description": "A JSON file with information of 'cidr_tag_name' and 'cidr'.\n"
                    },
                    "firewallTag": {
                        "type": "string",
                        "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixFqdn:AviatrixFqdn": {
            "properties": {
                "domainNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixFqdnDomainName:AviatrixFqdnDomainName"
                    },
                    "description": "A list of one or more domain names/tag rules.\n"
                },
                "fqdnEnabled": {
                    "type": "boolean",
                    "description": "FQDN Filter Tag Status. Valid values: true or false.\n"
                },
                "fqdnMode": {
                    "type": "string",
                    "description": "Specify the tag color to be a white-list tag or black-list tag. 'white' or 'black'\n"
                },
                "fqdnTag": {
                    "type": "string",
                    "description": "FQDN Filter Tag Name.\n"
                },
                "gwFilterTagLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixFqdnGwFilterTagList:AviatrixFqdnGwFilterTagList"
                    },
                    "description": "A list of gateways to attach to the specific tag.\n"
                },
                "manageDomainNames": {
                    "type": "boolean",
                    "description": "Enable to manage domain name rules in-line. If false, domain name rules must be managed using `aviatrix_fqdn_tag_rule`\nresources.\n"
                }
            },
            "required": [
                "fqdnTag"
            ],
            "inputProperties": {
                "domainNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixFqdnDomainName:AviatrixFqdnDomainName"
                    },
                    "description": "A list of one or more domain names/tag rules.\n"
                },
                "fqdnEnabled": {
                    "type": "boolean",
                    "description": "FQDN Filter Tag Status. Valid values: true or false.\n"
                },
                "fqdnMode": {
                    "type": "string",
                    "description": "Specify the tag color to be a white-list tag or black-list tag. 'white' or 'black'\n"
                },
                "fqdnTag": {
                    "type": "string",
                    "description": "FQDN Filter Tag Name.\n"
                },
                "gwFilterTagLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixFqdnGwFilterTagList:AviatrixFqdnGwFilterTagList"
                    },
                    "description": "A list of gateways to attach to the specific tag.\n"
                },
                "manageDomainNames": {
                    "type": "boolean",
                    "description": "Enable to manage domain name rules in-line. If false, domain name rules must be managed using `aviatrix_fqdn_tag_rule`\nresources.\n"
                }
            },
            "requiredInputs": [
                "fqdnTag"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixFqdn resources.\n",
                "properties": {
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixFqdnDomainName:AviatrixFqdnDomainName"
                        },
                        "description": "A list of one or more domain names/tag rules.\n"
                    },
                    "fqdnEnabled": {
                        "type": "boolean",
                        "description": "FQDN Filter Tag Status. Valid values: true or false.\n"
                    },
                    "fqdnMode": {
                        "type": "string",
                        "description": "Specify the tag color to be a white-list tag or black-list tag. 'white' or 'black'\n"
                    },
                    "fqdnTag": {
                        "type": "string",
                        "description": "FQDN Filter Tag Name.\n"
                    },
                    "gwFilterTagLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixFqdnGwFilterTagList:AviatrixFqdnGwFilterTagList"
                        },
                        "description": "A list of gateways to attach to the specific tag.\n"
                    },
                    "manageDomainNames": {
                        "type": "boolean",
                        "description": "Enable to manage domain name rules in-line. If false, domain name rules must be managed using `aviatrix_fqdn_tag_rule`\nresources.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixFqdnPassThrough:AviatrixFqdnPassThrough": {
            "properties": {
                "gwName": {
                    "type": "string",
                    "description": "Gateway to apply FQDN pass-through rules to.\n"
                },
                "passThroughCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "CIDRs to allow originating requests to ignore FQDN filtering rules.\n"
                }
            },
            "required": [
                "gwName",
                "passThroughCidrs"
            ],
            "inputProperties": {
                "gwName": {
                    "type": "string",
                    "description": "Gateway to apply FQDN pass-through rules to.\n",
                    "willReplaceOnChanges": true
                },
                "passThroughCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "CIDRs to allow originating requests to ignore FQDN filtering rules.\n"
                }
            },
            "requiredInputs": [
                "gwName",
                "passThroughCidrs"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixFqdnPassThrough resources.\n",
                "properties": {
                    "gwName": {
                        "type": "string",
                        "description": "Gateway to apply FQDN pass-through rules to.\n",
                        "willReplaceOnChanges": true
                    },
                    "passThroughCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "CIDRs to allow originating requests to ignore FQDN filtering rules.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixFqdnTagRule:AviatrixFqdnTagRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "What action should happen to matching requests. Possible values are: 'Base Policy', 'Allow' or 'Deny'. Defaults to 'Base\nPolicy' if no value is provided.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "FQDN.\n"
                },
                "fqdnTagName": {
                    "type": "string",
                    "description": "FQDN Filter Tag Name to attach this domain.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Port.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol.\n"
                }
            },
            "required": [
                "fqdn",
                "fqdnTagName",
                "port",
                "protocol"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "What action should happen to matching requests. Possible values are: 'Base Policy', 'Allow' or 'Deny'. Defaults to 'Base\nPolicy' if no value is provided.\n",
                    "willReplaceOnChanges": true
                },
                "fqdn": {
                    "type": "string",
                    "description": "FQDN.\n",
                    "willReplaceOnChanges": true
                },
                "fqdnTagName": {
                    "type": "string",
                    "description": "FQDN Filter Tag Name to attach this domain.\n",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "string",
                    "description": "Port.\n",
                    "willReplaceOnChanges": true
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "fqdn",
                "fqdnTagName",
                "port",
                "protocol"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixFqdnTagRule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "What action should happen to matching requests. Possible values are: 'Base Policy', 'Allow' or 'Deny'. Defaults to 'Base\nPolicy' if no value is provided.\n",
                        "willReplaceOnChanges": true
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "FQDN.\n",
                        "willReplaceOnChanges": true
                    },
                    "fqdnTagName": {
                        "type": "string",
                        "description": "FQDN Filter Tag Name to attach this domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "string",
                        "description": "Port.\n",
                        "willReplaceOnChanges": true
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixGateway:AviatrixGateway": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Account name. This account will be used to launch Aviatrix gateway.\n"
                },
                "additionalCidrs": {
                    "type": "string",
                    "description": "A list of destination CIDR ranges that will also go through the VPN tunnel when Split Tunnel Mode is enabled.\n"
                },
                "additionalCidrsDesignatedGateway": {
                    "type": "string",
                    "description": "A list of CIDR ranges separated by comma to configure when 'designated_gateway' feature is enabled.\n"
                },
                "allocateNewEip": {
                    "type": "boolean",
                    "description": "When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and\nuse it for this gateway.\n"
                },
                "availabilityDomain": {
                    "type": "string",
                    "description": "Availability domain for OCI.\n"
                },
                "azureEipNameResourceGroup": {
                    "type": "string",
                    "description": "The name of the public IP address and its resource group in Azure to assign to this Gateway.\n"
                },
                "cloudInstanceId": {
                    "type": "string",
                    "description": "Instance ID of the gateway.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider.\n"
                },
                "customerManagedKeys": {
                    "type": "string",
                    "description": "Customer managed key ID.\n"
                },
                "duoApiHostname": {
                    "type": "string",
                    "description": "API hostname for DUO auth mode.\n"
                },
                "duoIntegrationKey": {
                    "type": "string",
                    "description": "Integration key for DUO auth mode.\n"
                },
                "duoPushMode": {
                    "type": "string",
                    "description": "Push mode for DUO auth.\n"
                },
                "duoSecretKey": {
                    "type": "string",
                    "description": "Secret key for DUO auth mode.\n"
                },
                "eip": {
                    "type": "string",
                    "description": "Required when allocate_new_eip is false. It uses specified EIP for this gateway.\n"
                },
                "elbDnsName": {
                    "type": "string",
                    "description": "ELB DNS Name.\n"
                },
                "elbName": {
                    "type": "string",
                    "description": "A name for the ELB that is created.\n"
                },
                "enableDesignatedGateway": {
                    "type": "boolean",
                    "description": "Enable 'designated_gateway' feature for Gateway. Valid values: true, false.\n"
                },
                "enableElb": {
                    "type": "boolean",
                    "description": "Specify whether to enable ELB or not.\n"
                },
                "enableEncryptVolume": {
                    "type": "boolean",
                    "description": "Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.\n"
                },
                "enableJumboFrame": {
                    "type": "boolean",
                    "description": "Enable jumbo frame support for Gateway. Valid values: true or false. Default value: true.\n"
                },
                "enableLdap": {
                    "type": "boolean",
                    "description": "Specify whether to enable LDAP or not. Supported values: 'yes' and 'no'.\n"
                },
                "enableMonitorGatewaySubnets": {
                    "type": "boolean",
                    "description": "Enable monitor gateway subnets. Valid values: true, false. Default value: false.\n"
                },
                "enablePublicSubnetFiltering": {
                    "type": "boolean",
                    "description": "Create a [Public Subnet Filtering gateway](https://docs.aviatrix.com/HowTos/public_subnet_filtering_faq.html).\n"
                },
                "enableSpotInstance": {
                    "type": "boolean",
                    "description": "Enable spot instance. NOT supported for production deployment.\n"
                },
                "enableVpcDnsServer": {
                    "type": "boolean",
                    "description": "Enable vpc_dns_server for Gateway. Valid values: true, false.\n"
                },
                "enableVpnNat": {
                    "type": "boolean",
                    "description": "This field indicates whether to enable VPN NAT or not. Only supported for VPN gateway. Valid values: true, false.\nDefault value: true.\n"
                },
                "faultDomain": {
                    "type": "string",
                    "description": "Fault domain for OCI.\n"
                },
                "fqdnLanCidr": {
                    "type": "string",
                    "description": "FQDN gateway lan interface cidr.\n"
                },
                "fqdnLanInterface": {
                    "type": "string",
                    "description": "FQDN gateway lan interface id.\n"
                },
                "fqdnLanVpcId": {
                    "type": "string",
                    "description": "LAN VPC ID. Only used for GCP FQDN Gateway.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Aviatrix gateway unique name.\n"
                },
                "gwSize": {
                    "type": "string",
                    "description": "Size of Gateway Instance.\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "Typed value when modifying idle_timeout. If it's -1, this feature is disabled.\n"
                },
                "imageVersion": {
                    "type": "string",
                    "description": "image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway\nto the specified version.\n"
                },
                "insaneMode": {
                    "type": "boolean",
                    "description": "Enable Insane Mode for Gateway. Valid values: true, false.\n"
                },
                "insaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Gateway. Required if insane_mode is set.\n"
                },
                "ldapBaseDn": {
                    "type": "string",
                    "description": "LDAP base DN. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "ldapBindDn": {
                    "type": "string",
                    "description": "LDAP bind DN. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "ldapPassword": {
                    "type": "string",
                    "description": "LDAP password. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "ldapServer": {
                    "type": "string",
                    "description": "LDAP server address. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "ldapUsernameAttribute": {
                    "type": "string",
                    "description": "LDAP user attribute. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "maxVpnConn": {
                    "type": "string",
                    "description": "Maximum connection of VPN access.\n"
                },
                "monitorExcludeLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.\n"
                },
                "nameServers": {
                    "type": "string",
                    "description": "A list of DNS servers used to resolve domain names by a connected VPN user when Split Tunnel Mode is enabled.\n"
                },
                "oktaToken": {
                    "type": "string",
                    "description": "Token for Okta auth mode.\n"
                },
                "oktaUrl": {
                    "type": "string",
                    "description": "URL for Okta auth mode.\n"
                },
                "oktaUsernameSuffix": {
                    "type": "string",
                    "description": "Username suffix for Okta auth mode.\n"
                },
                "otpMode": {
                    "type": "string",
                    "description": "Two step authentication mode.\n"
                },
                "peeringHaAvailabilityDomain": {
                    "type": "string",
                    "description": "Peering HA availability domain for OCI.\n"
                },
                "peeringHaAzureEipNameResourceGroup": {
                    "type": "string",
                    "description": "The name of the public IP address and its resource group in Azure to assign to the Peering HA Gateway.\n"
                },
                "peeringHaCloudInstanceId": {
                    "type": "string",
                    "description": "Instance ID of the peering HA gateway.\n"
                },
                "peeringHaEip": {
                    "type": "string",
                    "description": "Public IP address that you want assigned to the HA peering instance.\n"
                },
                "peeringHaFaultDomain": {
                    "type": "string",
                    "description": "Peering HA fault domain for OCI.\n"
                },
                "peeringHaGwName": {
                    "type": "string",
                    "description": "Aviatrix gateway unique name of HA gateway.\n"
                },
                "peeringHaGwSize": {
                    "type": "string",
                    "description": "Peering HA Gateway Size.\n"
                },
                "peeringHaImageVersion": {
                    "type": "string",
                    "description": "peering_ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to\nupdate the gateway to the specified version.\n"
                },
                "peeringHaInsaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Peering HA Gateway. Required if insane_mode is set.\n"
                },
                "peeringHaPrivateIp": {
                    "type": "string",
                    "description": "Private IP address of HA gateway.\n"
                },
                "peeringHaSecurityGroupId": {
                    "type": "string",
                    "description": "Peering HA security group used for the gateway.\n"
                },
                "peeringHaSoftwareVersion": {
                    "type": "string",
                    "description": "peering_ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt\nto update the gateway to the specified version. If left blank, the gateway software version will continue to be managed\nthrough the aviatrix_controller_config resource.\n"
                },
                "peeringHaSubnet": {
                    "type": "string",
                    "description": "Public Subnet Information while creating Peering HA Gateway, only subnet is accepted. Required to create peering ha\ngateway if cloud_type = 1 or 8 (AWS or Azure). Optional if cloud_type = 4 (GCP)\n"
                },
                "peeringHaZone": {
                    "type": "string",
                    "description": "Zone information for creating Peering HA Gateway. Required to create peering ha gateway if cloud_type = 4 (GCP).\nOptional for cloud_type = 8 (Azure).\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "Private IP address of the Gateway created.\n"
                },
                "publicDnsServer": {
                    "type": "string",
                    "description": "NS server used by the gateway.\n"
                },
                "publicSubnetFilteringGuardDutyEnforced": {
                    "type": "boolean",
                    "description": "Whether to enforce Guard Duty IP blocking. Required when `enable_public_subnet_filtering` attribute is true. Valid\nvalues: true or false. Default value: true.\n"
                },
                "publicSubnetFilteringHaRouteTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Route tables whose associated public subnets are protected for the HA PSF gateway. Required when\nenable_public_subnet_filtering and peering_ha_subnet are set.\n"
                },
                "publicSubnetFilteringRouteTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Route tables whose associated public subnets are protected. Required when `enable_public_subnet_filtering` attribute is\ntrue.\n"
                },
                "renegotiationInterval": {
                    "type": "integer",
                    "description": "Typed value when modifying renegotiation_interval. If it's -1, this feature is disabled.\n"
                },
                "rxQueueSize": {
                    "type": "string",
                    "description": "Gateway ethernet interface RX queue size. Supported for AWS related clouds only.\n"
                },
                "samlEnabled": {
                    "type": "boolean",
                    "description": "This field indicates whether to enable SAML or not.\n"
                },
                "searchDomains": {
                    "type": "string",
                    "description": "A list of domain names that will use the NameServer when a specific name is not in the destination when Split Tunnel\nMode is enabled.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "Security group used for the gateway.\n"
                },
                "singleAzHa": {
                    "type": "boolean",
                    "description": "Set to true if this feature is desired.\n"
                },
                "singleIpSnat": {
                    "type": "boolean",
                    "description": "Enable Source NAT for this container.\n"
                },
                "softwareVersion": {
                    "type": "string",
                    "description": "software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the\ngateway to the specified version. If left blank, the gateway software version will continue to be managed through the\naviatrix_controller_config resource.\n"
                },
                "splitTunnel": {
                    "type": "boolean",
                    "description": "Specify split tunnel mode.\n"
                },
                "spotPrice": {
                    "type": "string",
                    "description": "Price for spot instance. NOT supported for production deployment.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "A VPC Network address range selected from one of the available network ranges.\n"
                },
                "tagLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Instance tag of cloud provider.\n",
                    "deprecationMessage": "Use tags instead."
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of tags to assign to the gateway.\n"
                },
                "tunnelDetectionTime": {
                    "type": "integer",
                    "description": "The IPSec tunnel down detection time for the Gateway.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "ID of legacy VPC/Vnet to be connected.\n"
                },
                "vpcReg": {
                    "type": "string",
                    "description": "Region where this gateway will be launched.\n"
                },
                "vpnAccess": {
                    "type": "boolean",
                    "description": "Enable user access through VPN to this container.\n"
                },
                "vpnCidr": {
                    "type": "string",
                    "description": "VPN CIDR block for the container.\n"
                },
                "vpnProtocol": {
                    "type": "string",
                    "description": "Elb protocol for VPN gateway with elb enabled. Only supports AWS provider. Valid values: 'TCP', 'UDP'. If not specified,\n'TCP'' will be used.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "Availability Zone. Only available for Azure and Public Subnet Filtering gateway\n"
                }
            },
            "required": [
                "accountName",
                "availabilityDomain",
                "azureEipNameResourceGroup",
                "cloudInstanceId",
                "cloudType",
                "eip",
                "elbDnsName",
                "elbName",
                "faultDomain",
                "fqdnLanInterface",
                "gwName",
                "gwSize",
                "imageVersion",
                "peeringHaAvailabilityDomain",
                "peeringHaAzureEipNameResourceGroup",
                "peeringHaCloudInstanceId",
                "peeringHaEip",
                "peeringHaFaultDomain",
                "peeringHaGwName",
                "peeringHaImageVersion",
                "peeringHaPrivateIp",
                "peeringHaSecurityGroupId",
                "peeringHaSoftwareVersion",
                "privateIp",
                "publicDnsServer",
                "securityGroupId",
                "softwareVersion",
                "subnet",
                "tunnelDetectionTime",
                "vpcId",
                "vpcReg",
                "vpnProtocol"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "Account name. This account will be used to launch Aviatrix gateway.\n"
                },
                "additionalCidrs": {
                    "type": "string",
                    "description": "A list of destination CIDR ranges that will also go through the VPN tunnel when Split Tunnel Mode is enabled.\n"
                },
                "additionalCidrsDesignatedGateway": {
                    "type": "string",
                    "description": "A list of CIDR ranges separated by comma to configure when 'designated_gateway' feature is enabled.\n"
                },
                "allocateNewEip": {
                    "type": "boolean",
                    "description": "When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and\nuse it for this gateway.\n"
                },
                "availabilityDomain": {
                    "type": "string",
                    "description": "Availability domain for OCI.\n",
                    "willReplaceOnChanges": true
                },
                "azureEipNameResourceGroup": {
                    "type": "string",
                    "description": "The name of the public IP address and its resource group in Azure to assign to this Gateway.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider.\n"
                },
                "customerManagedKeys": {
                    "type": "string",
                    "description": "Customer managed key ID.\n"
                },
                "duoApiHostname": {
                    "type": "string",
                    "description": "API hostname for DUO auth mode.\n"
                },
                "duoIntegrationKey": {
                    "type": "string",
                    "description": "Integration key for DUO auth mode.\n"
                },
                "duoPushMode": {
                    "type": "string",
                    "description": "Push mode for DUO auth.\n"
                },
                "duoSecretKey": {
                    "type": "string",
                    "description": "Secret key for DUO auth mode.\n"
                },
                "eip": {
                    "type": "string",
                    "description": "Required when allocate_new_eip is false. It uses specified EIP for this gateway.\n"
                },
                "elbName": {
                    "type": "string",
                    "description": "A name for the ELB that is created.\n"
                },
                "enableDesignatedGateway": {
                    "type": "boolean",
                    "description": "Enable 'designated_gateway' feature for Gateway. Valid values: true, false.\n"
                },
                "enableElb": {
                    "type": "boolean",
                    "description": "Specify whether to enable ELB or not.\n"
                },
                "enableEncryptVolume": {
                    "type": "boolean",
                    "description": "Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.\n"
                },
                "enableJumboFrame": {
                    "type": "boolean",
                    "description": "Enable jumbo frame support for Gateway. Valid values: true or false. Default value: true.\n"
                },
                "enableLdap": {
                    "type": "boolean",
                    "description": "Specify whether to enable LDAP or not. Supported values: 'yes' and 'no'.\n"
                },
                "enableMonitorGatewaySubnets": {
                    "type": "boolean",
                    "description": "Enable monitor gateway subnets. Valid values: true, false. Default value: false.\n"
                },
                "enablePublicSubnetFiltering": {
                    "type": "boolean",
                    "description": "Create a [Public Subnet Filtering gateway](https://docs.aviatrix.com/HowTos/public_subnet_filtering_faq.html).\n"
                },
                "enableSpotInstance": {
                    "type": "boolean",
                    "description": "Enable spot instance. NOT supported for production deployment.\n"
                },
                "enableVpcDnsServer": {
                    "type": "boolean",
                    "description": "Enable vpc_dns_server for Gateway. Valid values: true, false.\n"
                },
                "enableVpnNat": {
                    "type": "boolean",
                    "description": "This field indicates whether to enable VPN NAT or not. Only supported for VPN gateway. Valid values: true, false.\nDefault value: true.\n"
                },
                "faultDomain": {
                    "type": "string",
                    "description": "Fault domain for OCI.\n",
                    "willReplaceOnChanges": true
                },
                "fqdnLanCidr": {
                    "type": "string",
                    "description": "FQDN gateway lan interface cidr.\n",
                    "willReplaceOnChanges": true
                },
                "fqdnLanVpcId": {
                    "type": "string",
                    "description": "LAN VPC ID. Only used for GCP FQDN Gateway.\n",
                    "willReplaceOnChanges": true
                },
                "gwName": {
                    "type": "string",
                    "description": "Aviatrix gateway unique name.\n",
                    "willReplaceOnChanges": true
                },
                "gwSize": {
                    "type": "string",
                    "description": "Size of Gateway Instance.\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "Typed value when modifying idle_timeout. If it's -1, this feature is disabled.\n"
                },
                "imageVersion": {
                    "type": "string",
                    "description": "image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway\nto the specified version.\n"
                },
                "insaneMode": {
                    "type": "boolean",
                    "description": "Enable Insane Mode for Gateway. Valid values: true, false.\n"
                },
                "insaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Gateway. Required if insane_mode is set.\n"
                },
                "ldapBaseDn": {
                    "type": "string",
                    "description": "LDAP base DN. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "ldapBindDn": {
                    "type": "string",
                    "description": "LDAP bind DN. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "ldapPassword": {
                    "type": "string",
                    "description": "LDAP password. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "ldapServer": {
                    "type": "string",
                    "description": "LDAP server address. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "ldapUsernameAttribute": {
                    "type": "string",
                    "description": "LDAP user attribute. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "maxVpnConn": {
                    "type": "string",
                    "description": "Maximum connection of VPN access.\n"
                },
                "monitorExcludeLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.\n"
                },
                "nameServers": {
                    "type": "string",
                    "description": "A list of DNS servers used to resolve domain names by a connected VPN user when Split Tunnel Mode is enabled.\n"
                },
                "oktaToken": {
                    "type": "string",
                    "description": "Token for Okta auth mode.\n"
                },
                "oktaUrl": {
                    "type": "string",
                    "description": "URL for Okta auth mode.\n"
                },
                "oktaUsernameSuffix": {
                    "type": "string",
                    "description": "Username suffix for Okta auth mode.\n"
                },
                "otpMode": {
                    "type": "string",
                    "description": "Two step authentication mode.\n"
                },
                "peeringHaAvailabilityDomain": {
                    "type": "string",
                    "description": "Peering HA availability domain for OCI.\n"
                },
                "peeringHaAzureEipNameResourceGroup": {
                    "type": "string",
                    "description": "The name of the public IP address and its resource group in Azure to assign to the Peering HA Gateway.\n"
                },
                "peeringHaEip": {
                    "type": "string",
                    "description": "Public IP address that you want assigned to the HA peering instance.\n"
                },
                "peeringHaFaultDomain": {
                    "type": "string",
                    "description": "Peering HA fault domain for OCI.\n"
                },
                "peeringHaGwSize": {
                    "type": "string",
                    "description": "Peering HA Gateway Size.\n"
                },
                "peeringHaImageVersion": {
                    "type": "string",
                    "description": "peering_ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to\nupdate the gateway to the specified version.\n"
                },
                "peeringHaInsaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Peering HA Gateway. Required if insane_mode is set.\n"
                },
                "peeringHaSoftwareVersion": {
                    "type": "string",
                    "description": "peering_ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt\nto update the gateway to the specified version. If left blank, the gateway software version will continue to be managed\nthrough the aviatrix_controller_config resource.\n"
                },
                "peeringHaSubnet": {
                    "type": "string",
                    "description": "Public Subnet Information while creating Peering HA Gateway, only subnet is accepted. Required to create peering ha\ngateway if cloud_type = 1 or 8 (AWS or Azure). Optional if cloud_type = 4 (GCP)\n"
                },
                "peeringHaZone": {
                    "type": "string",
                    "description": "Zone information for creating Peering HA Gateway. Required to create peering ha gateway if cloud_type = 4 (GCP).\nOptional for cloud_type = 8 (Azure).\n"
                },
                "publicSubnetFilteringGuardDutyEnforced": {
                    "type": "boolean",
                    "description": "Whether to enforce Guard Duty IP blocking. Required when `enable_public_subnet_filtering` attribute is true. Valid\nvalues: true or false. Default value: true.\n"
                },
                "publicSubnetFilteringHaRouteTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Route tables whose associated public subnets are protected for the HA PSF gateway. Required when\nenable_public_subnet_filtering and peering_ha_subnet are set.\n"
                },
                "publicSubnetFilteringRouteTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Route tables whose associated public subnets are protected. Required when `enable_public_subnet_filtering` attribute is\ntrue.\n"
                },
                "renegotiationInterval": {
                    "type": "integer",
                    "description": "Typed value when modifying renegotiation_interval. If it's -1, this feature is disabled.\n"
                },
                "rxQueueSize": {
                    "type": "string",
                    "description": "Gateway ethernet interface RX queue size. Supported for AWS related clouds only.\n"
                },
                "samlEnabled": {
                    "type": "boolean",
                    "description": "This field indicates whether to enable SAML or not.\n"
                },
                "searchDomains": {
                    "type": "string",
                    "description": "A list of domain names that will use the NameServer when a specific name is not in the destination when Split Tunnel\nMode is enabled.\n"
                },
                "singleAzHa": {
                    "type": "boolean",
                    "description": "Set to true if this feature is desired.\n"
                },
                "singleIpSnat": {
                    "type": "boolean",
                    "description": "Enable Source NAT for this container.\n"
                },
                "softwareVersion": {
                    "type": "string",
                    "description": "software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the\ngateway to the specified version. If left blank, the gateway software version will continue to be managed through the\naviatrix_controller_config resource.\n"
                },
                "splitTunnel": {
                    "type": "boolean",
                    "description": "Specify split tunnel mode.\n"
                },
                "spotPrice": {
                    "type": "string",
                    "description": "Price for spot instance. NOT supported for production deployment.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "A VPC Network address range selected from one of the available network ranges.\n",
                    "willReplaceOnChanges": true
                },
                "tagLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Instance tag of cloud provider.\n",
                    "deprecationMessage": "Use tags instead."
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of tags to assign to the gateway.\n"
                },
                "tunnelDetectionTime": {
                    "type": "integer",
                    "description": "The IPSec tunnel down detection time for the Gateway.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "ID of legacy VPC/Vnet to be connected.\n",
                    "willReplaceOnChanges": true
                },
                "vpcReg": {
                    "type": "string",
                    "description": "Region where this gateway will be launched.\n",
                    "willReplaceOnChanges": true
                },
                "vpnAccess": {
                    "type": "boolean",
                    "description": "Enable user access through VPN to this container.\n"
                },
                "vpnCidr": {
                    "type": "string",
                    "description": "VPN CIDR block for the container.\n"
                },
                "vpnProtocol": {
                    "type": "string",
                    "description": "Elb protocol for VPN gateway with elb enabled. Only supports AWS provider. Valid values: 'TCP', 'UDP'. If not specified,\n'TCP'' will be used.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "Availability Zone. Only available for Azure and Public Subnet Filtering gateway\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountName",
                "cloudType",
                "gwName",
                "gwSize",
                "subnet",
                "vpcId",
                "vpcReg"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixGateway resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "Account name. This account will be used to launch Aviatrix gateway.\n"
                    },
                    "additionalCidrs": {
                        "type": "string",
                        "description": "A list of destination CIDR ranges that will also go through the VPN tunnel when Split Tunnel Mode is enabled.\n"
                    },
                    "additionalCidrsDesignatedGateway": {
                        "type": "string",
                        "description": "A list of CIDR ranges separated by comma to configure when 'designated_gateway' feature is enabled.\n"
                    },
                    "allocateNewEip": {
                        "type": "boolean",
                        "description": "When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and\nuse it for this gateway.\n"
                    },
                    "availabilityDomain": {
                        "type": "string",
                        "description": "Availability domain for OCI.\n",
                        "willReplaceOnChanges": true
                    },
                    "azureEipNameResourceGroup": {
                        "type": "string",
                        "description": "The name of the public IP address and its resource group in Azure to assign to this Gateway.\n"
                    },
                    "cloudInstanceId": {
                        "type": "string",
                        "description": "Instance ID of the gateway.\n"
                    },
                    "cloudType": {
                        "type": "integer",
                        "description": "Type of cloud service provider.\n"
                    },
                    "customerManagedKeys": {
                        "type": "string",
                        "description": "Customer managed key ID.\n"
                    },
                    "duoApiHostname": {
                        "type": "string",
                        "description": "API hostname for DUO auth mode.\n"
                    },
                    "duoIntegrationKey": {
                        "type": "string",
                        "description": "Integration key for DUO auth mode.\n"
                    },
                    "duoPushMode": {
                        "type": "string",
                        "description": "Push mode for DUO auth.\n"
                    },
                    "duoSecretKey": {
                        "type": "string",
                        "description": "Secret key for DUO auth mode.\n"
                    },
                    "eip": {
                        "type": "string",
                        "description": "Required when allocate_new_eip is false. It uses specified EIP for this gateway.\n"
                    },
                    "elbDnsName": {
                        "type": "string",
                        "description": "ELB DNS Name.\n"
                    },
                    "elbName": {
                        "type": "string",
                        "description": "A name for the ELB that is created.\n"
                    },
                    "enableDesignatedGateway": {
                        "type": "boolean",
                        "description": "Enable 'designated_gateway' feature for Gateway. Valid values: true, false.\n"
                    },
                    "enableElb": {
                        "type": "boolean",
                        "description": "Specify whether to enable ELB or not.\n"
                    },
                    "enableEncryptVolume": {
                        "type": "boolean",
                        "description": "Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.\n"
                    },
                    "enableJumboFrame": {
                        "type": "boolean",
                        "description": "Enable jumbo frame support for Gateway. Valid values: true or false. Default value: true.\n"
                    },
                    "enableLdap": {
                        "type": "boolean",
                        "description": "Specify whether to enable LDAP or not. Supported values: 'yes' and 'no'.\n"
                    },
                    "enableMonitorGatewaySubnets": {
                        "type": "boolean",
                        "description": "Enable monitor gateway subnets. Valid values: true, false. Default value: false.\n"
                    },
                    "enablePublicSubnetFiltering": {
                        "type": "boolean",
                        "description": "Create a [Public Subnet Filtering gateway](https://docs.aviatrix.com/HowTos/public_subnet_filtering_faq.html).\n"
                    },
                    "enableSpotInstance": {
                        "type": "boolean",
                        "description": "Enable spot instance. NOT supported for production deployment.\n"
                    },
                    "enableVpcDnsServer": {
                        "type": "boolean",
                        "description": "Enable vpc_dns_server for Gateway. Valid values: true, false.\n"
                    },
                    "enableVpnNat": {
                        "type": "boolean",
                        "description": "This field indicates whether to enable VPN NAT or not. Only supported for VPN gateway. Valid values: true, false.\nDefault value: true.\n"
                    },
                    "faultDomain": {
                        "type": "string",
                        "description": "Fault domain for OCI.\n",
                        "willReplaceOnChanges": true
                    },
                    "fqdnLanCidr": {
                        "type": "string",
                        "description": "FQDN gateway lan interface cidr.\n",
                        "willReplaceOnChanges": true
                    },
                    "fqdnLanInterface": {
                        "type": "string",
                        "description": "FQDN gateway lan interface id.\n"
                    },
                    "fqdnLanVpcId": {
                        "type": "string",
                        "description": "LAN VPC ID. Only used for GCP FQDN Gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "gwName": {
                        "type": "string",
                        "description": "Aviatrix gateway unique name.\n",
                        "willReplaceOnChanges": true
                    },
                    "gwSize": {
                        "type": "string",
                        "description": "Size of Gateway Instance.\n"
                    },
                    "idleTimeout": {
                        "type": "integer",
                        "description": "Typed value when modifying idle_timeout. If it's -1, this feature is disabled.\n"
                    },
                    "imageVersion": {
                        "type": "string",
                        "description": "image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway\nto the specified version.\n"
                    },
                    "insaneMode": {
                        "type": "boolean",
                        "description": "Enable Insane Mode for Gateway. Valid values: true, false.\n"
                    },
                    "insaneModeAz": {
                        "type": "string",
                        "description": "AZ of subnet being created for Insane Mode Gateway. Required if insane_mode is set.\n"
                    },
                    "ldapBaseDn": {
                        "type": "string",
                        "description": "LDAP base DN. Required: Yes if enable_ldap is 'yes'.\n"
                    },
                    "ldapBindDn": {
                        "type": "string",
                        "description": "LDAP bind DN. Required: Yes if enable_ldap is 'yes'.\n"
                    },
                    "ldapPassword": {
                        "type": "string",
                        "description": "LDAP password. Required: Yes if enable_ldap is 'yes'.\n"
                    },
                    "ldapServer": {
                        "type": "string",
                        "description": "LDAP server address. Required: Yes if enable_ldap is 'yes'.\n"
                    },
                    "ldapUsernameAttribute": {
                        "type": "string",
                        "description": "LDAP user attribute. Required: Yes if enable_ldap is 'yes'.\n"
                    },
                    "maxVpnConn": {
                        "type": "string",
                        "description": "Maximum connection of VPN access.\n"
                    },
                    "monitorExcludeLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.\n"
                    },
                    "nameServers": {
                        "type": "string",
                        "description": "A list of DNS servers used to resolve domain names by a connected VPN user when Split Tunnel Mode is enabled.\n"
                    },
                    "oktaToken": {
                        "type": "string",
                        "description": "Token for Okta auth mode.\n"
                    },
                    "oktaUrl": {
                        "type": "string",
                        "description": "URL for Okta auth mode.\n"
                    },
                    "oktaUsernameSuffix": {
                        "type": "string",
                        "description": "Username suffix for Okta auth mode.\n"
                    },
                    "otpMode": {
                        "type": "string",
                        "description": "Two step authentication mode.\n"
                    },
                    "peeringHaAvailabilityDomain": {
                        "type": "string",
                        "description": "Peering HA availability domain for OCI.\n"
                    },
                    "peeringHaAzureEipNameResourceGroup": {
                        "type": "string",
                        "description": "The name of the public IP address and its resource group in Azure to assign to the Peering HA Gateway.\n"
                    },
                    "peeringHaCloudInstanceId": {
                        "type": "string",
                        "description": "Instance ID of the peering HA gateway.\n"
                    },
                    "peeringHaEip": {
                        "type": "string",
                        "description": "Public IP address that you want assigned to the HA peering instance.\n"
                    },
                    "peeringHaFaultDomain": {
                        "type": "string",
                        "description": "Peering HA fault domain for OCI.\n"
                    },
                    "peeringHaGwName": {
                        "type": "string",
                        "description": "Aviatrix gateway unique name of HA gateway.\n"
                    },
                    "peeringHaGwSize": {
                        "type": "string",
                        "description": "Peering HA Gateway Size.\n"
                    },
                    "peeringHaImageVersion": {
                        "type": "string",
                        "description": "peering_ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to\nupdate the gateway to the specified version.\n"
                    },
                    "peeringHaInsaneModeAz": {
                        "type": "string",
                        "description": "AZ of subnet being created for Insane Mode Peering HA Gateway. Required if insane_mode is set.\n"
                    },
                    "peeringHaPrivateIp": {
                        "type": "string",
                        "description": "Private IP address of HA gateway.\n"
                    },
                    "peeringHaSecurityGroupId": {
                        "type": "string",
                        "description": "Peering HA security group used for the gateway.\n"
                    },
                    "peeringHaSoftwareVersion": {
                        "type": "string",
                        "description": "peering_ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt\nto update the gateway to the specified version. If left blank, the gateway software version will continue to be managed\nthrough the aviatrix_controller_config resource.\n"
                    },
                    "peeringHaSubnet": {
                        "type": "string",
                        "description": "Public Subnet Information while creating Peering HA Gateway, only subnet is accepted. Required to create peering ha\ngateway if cloud_type = 1 or 8 (AWS or Azure). Optional if cloud_type = 4 (GCP)\n"
                    },
                    "peeringHaZone": {
                        "type": "string",
                        "description": "Zone information for creating Peering HA Gateway. Required to create peering ha gateway if cloud_type = 4 (GCP).\nOptional for cloud_type = 8 (Azure).\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "Private IP address of the Gateway created.\n"
                    },
                    "publicDnsServer": {
                        "type": "string",
                        "description": "NS server used by the gateway.\n"
                    },
                    "publicSubnetFilteringGuardDutyEnforced": {
                        "type": "boolean",
                        "description": "Whether to enforce Guard Duty IP blocking. Required when `enable_public_subnet_filtering` attribute is true. Valid\nvalues: true or false. Default value: true.\n"
                    },
                    "publicSubnetFilteringHaRouteTables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Route tables whose associated public subnets are protected for the HA PSF gateway. Required when\nenable_public_subnet_filtering and peering_ha_subnet are set.\n"
                    },
                    "publicSubnetFilteringRouteTables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Route tables whose associated public subnets are protected. Required when `enable_public_subnet_filtering` attribute is\ntrue.\n"
                    },
                    "renegotiationInterval": {
                        "type": "integer",
                        "description": "Typed value when modifying renegotiation_interval. If it's -1, this feature is disabled.\n"
                    },
                    "rxQueueSize": {
                        "type": "string",
                        "description": "Gateway ethernet interface RX queue size. Supported for AWS related clouds only.\n"
                    },
                    "samlEnabled": {
                        "type": "boolean",
                        "description": "This field indicates whether to enable SAML or not.\n"
                    },
                    "searchDomains": {
                        "type": "string",
                        "description": "A list of domain names that will use the NameServer when a specific name is not in the destination when Split Tunnel\nMode is enabled.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "Security group used for the gateway.\n"
                    },
                    "singleAzHa": {
                        "type": "boolean",
                        "description": "Set to true if this feature is desired.\n"
                    },
                    "singleIpSnat": {
                        "type": "boolean",
                        "description": "Enable Source NAT for this container.\n"
                    },
                    "softwareVersion": {
                        "type": "string",
                        "description": "software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the\ngateway to the specified version. If left blank, the gateway software version will continue to be managed through the\naviatrix_controller_config resource.\n"
                    },
                    "splitTunnel": {
                        "type": "boolean",
                        "description": "Specify split tunnel mode.\n"
                    },
                    "spotPrice": {
                        "type": "string",
                        "description": "Price for spot instance. NOT supported for production deployment.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "A VPC Network address range selected from one of the available network ranges.\n",
                        "willReplaceOnChanges": true
                    },
                    "tagLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Instance tag of cloud provider.\n",
                        "deprecationMessage": "Use tags instead."
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of tags to assign to the gateway.\n"
                    },
                    "tunnelDetectionTime": {
                        "type": "integer",
                        "description": "The IPSec tunnel down detection time for the Gateway.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "ID of legacy VPC/Vnet to be connected.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcReg": {
                        "type": "string",
                        "description": "Region where this gateway will be launched.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpnAccess": {
                        "type": "boolean",
                        "description": "Enable user access through VPN to this container.\n"
                    },
                    "vpnCidr": {
                        "type": "string",
                        "description": "VPN CIDR block for the container.\n"
                    },
                    "vpnProtocol": {
                        "type": "string",
                        "description": "Elb protocol for VPN gateway with elb enabled. Only supports AWS provider. Valid values: 'TCP', 'UDP'. If not specified,\n'TCP'' will be used.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "Availability Zone. Only available for Azure and Public Subnet Filtering gateway\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixGatewayCertificateConfig:AviatrixGatewayCertificateConfig": {
            "properties": {
                "caCertificate": {
                    "type": "string",
                    "description": "CA Certificate.\n"
                },
                "caPrivateKey": {
                    "type": "string",
                    "description": "CA Private Key.\n"
                }
            },
            "required": [
                "caCertificate",
                "caPrivateKey"
            ],
            "inputProperties": {
                "caCertificate": {
                    "type": "string",
                    "description": "CA Certificate.\n",
                    "willReplaceOnChanges": true
                },
                "caPrivateKey": {
                    "type": "string",
                    "description": "CA Private Key.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "caCertificate",
                "caPrivateKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixGatewayCertificateConfig resources.\n",
                "properties": {
                    "caCertificate": {
                        "type": "string",
                        "description": "CA Certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "caPrivateKey": {
                        "type": "string",
                        "description": "CA Private Key.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixGatewayDnat:AviatrixGatewayDnat": {
            "properties": {
                "connectionPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixGatewayDnatConnectionPolicy:AviatrixGatewayDnatConnectionPolicy"
                    },
                    "description": "Computed attribute to store the previous connection policy.\n"
                },
                "dnatPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixGatewayDnatDnatPolicy:AviatrixGatewayDnatDnatPolicy"
                    },
                    "description": "Policy rule to be applied to gateway.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Name of the gateway.\n"
                },
                "interfacePolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixGatewayDnatInterfacePolicy:AviatrixGatewayDnatInterfacePolicy"
                    },
                    "description": "Computed attribute to store the previous interface policy.\n"
                },
                "syncToHa": {
                    "type": "boolean",
                    "description": "Whether to sync the policies to the HA gateway.\n"
                }
            },
            "required": [
                "connectionPolicies",
                "dnatPolicies",
                "gwName",
                "interfacePolicies"
            ],
            "inputProperties": {
                "dnatPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixGatewayDnatDnatPolicy:AviatrixGatewayDnatDnatPolicy"
                    },
                    "description": "Policy rule to be applied to gateway.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Name of the gateway.\n",
                    "willReplaceOnChanges": true
                },
                "syncToHa": {
                    "type": "boolean",
                    "description": "Whether to sync the policies to the HA gateway.\n"
                }
            },
            "requiredInputs": [
                "dnatPolicies",
                "gwName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixGatewayDnat resources.\n",
                "properties": {
                    "connectionPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixGatewayDnatConnectionPolicy:AviatrixGatewayDnatConnectionPolicy"
                        },
                        "description": "Computed attribute to store the previous connection policy.\n"
                    },
                    "dnatPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixGatewayDnatDnatPolicy:AviatrixGatewayDnatDnatPolicy"
                        },
                        "description": "Policy rule to be applied to gateway.\n"
                    },
                    "gwName": {
                        "type": "string",
                        "description": "Name of the gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "interfacePolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixGatewayDnatInterfacePolicy:AviatrixGatewayDnatInterfacePolicy"
                        },
                        "description": "Computed attribute to store the previous interface policy.\n"
                    },
                    "syncToHa": {
                        "type": "boolean",
                        "description": "Whether to sync the policies to the HA gateway.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixGatewaySnat:AviatrixGatewaySnat": {
            "properties": {
                "connectionPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixGatewaySnatConnectionPolicy:AviatrixGatewaySnatConnectionPolicy"
                    },
                    "description": "Computed attribute to store the previous connection policy.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Name of the gateway.\n"
                },
                "interfacePolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixGatewaySnatInterfacePolicy:AviatrixGatewaySnatInterfacePolicy"
                    },
                    "description": "Computed attribute to store the previous interface policy.\n"
                },
                "snatMode": {
                    "type": "string",
                    "description": "Nat mode. Currently only supports 'customized_snat'.\n"
                },
                "snatPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixGatewaySnatSnatPolicy:AviatrixGatewaySnatSnatPolicy"
                    },
                    "description": "Policy rules applied for 'snat_mode'' of 'customized_snat'.'\n"
                },
                "syncToHa": {
                    "type": "boolean",
                    "description": "Whether to sync the policies to the HA gateway.\n"
                }
            },
            "required": [
                "connectionPolicies",
                "gwName",
                "interfacePolicies"
            ],
            "inputProperties": {
                "gwName": {
                    "type": "string",
                    "description": "Name of the gateway.\n",
                    "willReplaceOnChanges": true
                },
                "snatMode": {
                    "type": "string",
                    "description": "Nat mode. Currently only supports 'customized_snat'.\n"
                },
                "snatPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixGatewaySnatSnatPolicy:AviatrixGatewaySnatSnatPolicy"
                    },
                    "description": "Policy rules applied for 'snat_mode'' of 'customized_snat'.'\n"
                },
                "syncToHa": {
                    "type": "boolean",
                    "description": "Whether to sync the policies to the HA gateway.\n"
                }
            },
            "requiredInputs": [
                "gwName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixGatewaySnat resources.\n",
                "properties": {
                    "connectionPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixGatewaySnatConnectionPolicy:AviatrixGatewaySnatConnectionPolicy"
                        },
                        "description": "Computed attribute to store the previous connection policy.\n"
                    },
                    "gwName": {
                        "type": "string",
                        "description": "Name of the gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "interfacePolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixGatewaySnatInterfacePolicy:AviatrixGatewaySnatInterfacePolicy"
                        },
                        "description": "Computed attribute to store the previous interface policy.\n"
                    },
                    "snatMode": {
                        "type": "string",
                        "description": "Nat mode. Currently only supports 'customized_snat'.\n"
                    },
                    "snatPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixGatewaySnatSnatPolicy:AviatrixGatewaySnatSnatPolicy"
                        },
                        "description": "Policy rules applied for 'snat_mode'' of 'customized_snat'.'\n"
                    },
                    "syncToHa": {
                        "type": "boolean",
                        "description": "Whether to sync the policies to the HA gateway.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixGeoVpn:AviatrixGeoVpn": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider, requires an integer value. Currently only AWS(1) is supported.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "The hosted domain name. It must be hosted by AWS Route53 or Azure DNS in the selected account.\n"
                },
                "elbDnsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ELB names to attach to this Geo VPN name.\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "The hostname that users will connect to. A DNS record will be created for this name in the specified domain name.\n"
                }
            },
            "required": [
                "accountName",
                "cloudType",
                "domainName",
                "elbDnsNames",
                "serviceName"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n",
                    "willReplaceOnChanges": true
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider, requires an integer value. Currently only AWS(1) is supported.\n",
                    "willReplaceOnChanges": true
                },
                "domainName": {
                    "type": "string",
                    "description": "The hosted domain name. It must be hosted by AWS Route53 or Azure DNS in the selected account.\n",
                    "willReplaceOnChanges": true
                },
                "elbDnsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ELB names to attach to this Geo VPN name.\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "The hostname that users will connect to. A DNS record will be created for this name in the specified domain name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountName",
                "cloudType",
                "domainName",
                "elbDnsNames",
                "serviceName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixGeoVpn resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n",
                        "willReplaceOnChanges": true
                    },
                    "cloudType": {
                        "type": "integer",
                        "description": "Type of cloud service provider, requires an integer value. Currently only AWS(1) is supported.\n",
                        "willReplaceOnChanges": true
                    },
                    "domainName": {
                        "type": "string",
                        "description": "The hosted domain name. It must be hosted by AWS Route53 or Azure DNS in the selected account.\n",
                        "willReplaceOnChanges": true
                    },
                    "elbDnsNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of ELB names to attach to this Geo VPN name.\n"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "The hostname that users will connect to. A DNS record will be created for this name in the specified domain name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixMicrosegPolicyList:AviatrixMicrosegPolicyList": {
            "properties": {
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixMicrosegPolicyListPolicy:AviatrixMicrosegPolicyListPolicy"
                    },
                    "description": "List of micro-segmentation policies.\n"
                }
            },
            "required": [
                "policies"
            ],
            "inputProperties": {
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixMicrosegPolicyListPolicy:AviatrixMicrosegPolicyListPolicy"
                    },
                    "description": "List of micro-segmentation policies.\n"
                }
            },
            "requiredInputs": [
                "policies"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixMicrosegPolicyList resources.\n",
                "properties": {
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixMicrosegPolicyListPolicy:AviatrixMicrosegPolicyListPolicy"
                        },
                        "description": "List of micro-segmentation policies.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixNetflowAgent:AviatrixNetflowAgent": {
            "properties": {
                "excludedGateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded gateways.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Netflow server port.\n"
                },
                "serverIp": {
                    "type": "string",
                    "description": "Netflow server IP address.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Enabled or not.\n"
                },
                "version": {
                    "type": "integer",
                    "description": "Netflow version.\n"
                }
            },
            "required": [
                "port",
                "serverIp",
                "status"
            ],
            "inputProperties": {
                "excludedGateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded gateways.\n",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "Netflow server port.\n",
                    "willReplaceOnChanges": true
                },
                "serverIp": {
                    "type": "string",
                    "description": "Netflow server IP address.\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "integer",
                    "description": "Netflow version.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "port",
                "serverIp"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixNetflowAgent resources.\n",
                "properties": {
                    "excludedGateways": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of excluded gateways.\n",
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Netflow server port.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverIp": {
                        "type": "string",
                        "description": "Netflow server IP address.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Enabled or not.\n"
                    },
                    "version": {
                        "type": "integer",
                        "description": "Netflow version.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixPeriodicPing:AviatrixPeriodicPing": {
            "properties": {
                "gwName": {
                    "type": "string",
                    "description": "Name of gateway.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "Interval between pings in seconds.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "IP Address to ping.\n"
                }
            },
            "required": [
                "gwName",
                "interval",
                "ipAddress"
            ],
            "inputProperties": {
                "gwName": {
                    "type": "string",
                    "description": "Name of gateway.\n",
                    "willReplaceOnChanges": true
                },
                "interval": {
                    "type": "integer",
                    "description": "Interval between pings in seconds.\n",
                    "willReplaceOnChanges": true
                },
                "ipAddress": {
                    "type": "string",
                    "description": "IP Address to ping.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "gwName",
                "interval",
                "ipAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixPeriodicPing resources.\n",
                "properties": {
                    "gwName": {
                        "type": "string",
                        "description": "Name of gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "interval": {
                        "type": "integer",
                        "description": "Interval between pings in seconds.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP Address to ping.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixPrivateModeLb:AviatrixPrivateModeLb": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Name of the access account.\n"
                },
                "lbType": {
                    "type": "string",
                    "description": "Type of load balancer to create. Must be one of controller or multicloud.\n"
                },
                "multicloudAccessVpcId": {
                    "type": "string",
                    "description": "VPC ID of multicloud access VPC to connect to. Required when lb_type is multicloud.\n"
                },
                "proxies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixPrivateModeLbProxy:AviatrixPrivateModeLbProxy"
                    },
                    "description": "List of multicloud proxies.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Name of the VPC region.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "ID of the VPC for the load balancer.\n"
                }
            },
            "required": [
                "accountName",
                "lbType",
                "region",
                "vpcId"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "Name of the access account.\n",
                    "willReplaceOnChanges": true
                },
                "lbType": {
                    "type": "string",
                    "description": "Type of load balancer to create. Must be one of controller or multicloud.\n",
                    "willReplaceOnChanges": true
                },
                "multicloudAccessVpcId": {
                    "type": "string",
                    "description": "VPC ID of multicloud access VPC to connect to. Required when lb_type is multicloud.\n",
                    "willReplaceOnChanges": true
                },
                "proxies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixPrivateModeLbProxy:AviatrixPrivateModeLbProxy"
                    },
                    "description": "List of multicloud proxies.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Name of the VPC region.\n",
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "ID of the VPC for the load balancer.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountName",
                "lbType",
                "region",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixPrivateModeLb resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "Name of the access account.\n",
                        "willReplaceOnChanges": true
                    },
                    "lbType": {
                        "type": "string",
                        "description": "Type of load balancer to create. Must be one of controller or multicloud.\n",
                        "willReplaceOnChanges": true
                    },
                    "multicloudAccessVpcId": {
                        "type": "string",
                        "description": "VPC ID of multicloud access VPC to connect to. Required when lb_type is multicloud.\n",
                        "willReplaceOnChanges": true
                    },
                    "proxies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixPrivateModeLbProxy:AviatrixPrivateModeLbProxy"
                        },
                        "description": "List of multicloud proxies.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Name of the VPC region.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "ID of the VPC for the load balancer.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixPrivateModeMulticloudEndpoint:AviatrixPrivateModeMulticloudEndpoint": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Name of the access account.\n"
                },
                "controllerLbVpcId": {
                    "type": "string",
                    "description": "ID of the VPC with the Controller load balancer.\n"
                },
                "dnsEntry": {
                    "type": "string",
                    "description": "DNS entry of this endpoint.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Name of the VPC region.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC ID.\n"
                }
            },
            "required": [
                "accountName",
                "controllerLbVpcId",
                "dnsEntry",
                "region",
                "vpcId"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "Name of the access account.\n",
                    "willReplaceOnChanges": true
                },
                "controllerLbVpcId": {
                    "type": "string",
                    "description": "ID of the VPC with the Controller load balancer.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "Name of the VPC region.\n",
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC ID.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountName",
                "controllerLbVpcId",
                "region",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixPrivateModeMulticloudEndpoint resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "Name of the access account.\n",
                        "willReplaceOnChanges": true
                    },
                    "controllerLbVpcId": {
                        "type": "string",
                        "description": "ID of the VPC with the Controller load balancer.\n",
                        "willReplaceOnChanges": true
                    },
                    "dnsEntry": {
                        "type": "string",
                        "description": "DNS entry of this endpoint.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Name of the VPC region.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "VPC ID.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixProxyConfig:AviatrixProxyConfig": {
            "properties": {
                "httpProxy": {
                    "type": "string",
                    "description": "http proxy URL.\n"
                },
                "httpsProxy": {
                    "type": "string",
                    "description": "https proxy URL.\n"
                },
                "proxyCaCertificate": {
                    "type": "string",
                    "description": "Server CA Certificate file.\n"
                }
            },
            "required": [
                "httpProxy",
                "httpsProxy"
            ],
            "inputProperties": {
                "httpProxy": {
                    "type": "string",
                    "description": "http proxy URL.\n",
                    "willReplaceOnChanges": true
                },
                "httpsProxy": {
                    "type": "string",
                    "description": "https proxy URL.\n",
                    "willReplaceOnChanges": true
                },
                "proxyCaCertificate": {
                    "type": "string",
                    "description": "Server CA Certificate file.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "httpProxy",
                "httpsProxy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixProxyConfig resources.\n",
                "properties": {
                    "httpProxy": {
                        "type": "string",
                        "description": "http proxy URL.\n",
                        "willReplaceOnChanges": true
                    },
                    "httpsProxy": {
                        "type": "string",
                        "description": "https proxy URL.\n",
                        "willReplaceOnChanges": true
                    },
                    "proxyCaCertificate": {
                        "type": "string",
                        "description": "Server CA Certificate file.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixRbacGroup:AviatrixRbacGroup": {
            "properties": {
                "groupName": {
                    "type": "string",
                    "description": "RBAC permission group name.\n"
                },
                "localLogin": {
                    "type": "boolean",
                    "description": "Whether to allow members of an RBAC group to bypass LDAP/MFA for Duo login\n"
                }
            },
            "required": [
                "groupName"
            ],
            "inputProperties": {
                "groupName": {
                    "type": "string",
                    "description": "RBAC permission group name.\n",
                    "willReplaceOnChanges": true
                },
                "localLogin": {
                    "type": "boolean",
                    "description": "Whether to allow members of an RBAC group to bypass LDAP/MFA for Duo login\n"
                }
            },
            "requiredInputs": [
                "groupName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixRbacGroup resources.\n",
                "properties": {
                    "groupName": {
                        "type": "string",
                        "description": "RBAC permission group name.\n",
                        "willReplaceOnChanges": true
                    },
                    "localLogin": {
                        "type": "boolean",
                        "description": "Whether to allow members of an RBAC group to bypass LDAP/MFA for Duo login\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixRbacGroupAccessAccountAttachment:AviatrixRbacGroupAccessAccountAttachment": {
            "properties": {
                "accessAccountName": {
                    "type": "string",
                    "description": "Access account name.\n"
                },
                "groupName": {
                    "type": "string",
                    "description": "RBAC permission group name.\n"
                }
            },
            "required": [
                "accessAccountName",
                "groupName"
            ],
            "inputProperties": {
                "accessAccountName": {
                    "type": "string",
                    "description": "Access account name.\n",
                    "willReplaceOnChanges": true
                },
                "groupName": {
                    "type": "string",
                    "description": "RBAC permission group name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accessAccountName",
                "groupName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixRbacGroupAccessAccountAttachment resources.\n",
                "properties": {
                    "accessAccountName": {
                        "type": "string",
                        "description": "Access account name.\n",
                        "willReplaceOnChanges": true
                    },
                    "groupName": {
                        "type": "string",
                        "description": "RBAC permission group name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixRbacGroupPermissionAttachment:AviatrixRbacGroupPermissionAttachment": {
            "properties": {
                "groupName": {
                    "type": "string",
                    "description": "RBAC permission group name.\n"
                },
                "permissionName": {
                    "type": "string",
                    "description": "Permission name.\n"
                }
            },
            "required": [
                "groupName",
                "permissionName"
            ],
            "inputProperties": {
                "groupName": {
                    "type": "string",
                    "description": "RBAC permission group name.\n",
                    "willReplaceOnChanges": true
                },
                "permissionName": {
                    "type": "string",
                    "description": "Permission name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "groupName",
                "permissionName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixRbacGroupPermissionAttachment resources.\n",
                "properties": {
                    "groupName": {
                        "type": "string",
                        "description": "RBAC permission group name.\n",
                        "willReplaceOnChanges": true
                    },
                    "permissionName": {
                        "type": "string",
                        "description": "Permission name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixRbacGroupUserAttachment:AviatrixRbacGroupUserAttachment": {
            "properties": {
                "groupName": {
                    "type": "string",
                    "description": "RBAC permission group name.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Account user name.\n"
                }
            },
            "required": [
                "groupName",
                "userName"
            ],
            "inputProperties": {
                "groupName": {
                    "type": "string",
                    "description": "RBAC permission group name.\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "Account user name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "groupName",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixRbacGroupUserAttachment resources.\n",
                "properties": {
                    "groupName": {
                        "type": "string",
                        "description": "RBAC permission group name.\n",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string",
                        "description": "Account user name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixRemoteSyslog:AviatrixRemoteSyslog": {
            "properties": {
                "caCertificateFile": {
                    "type": "string",
                    "description": "CA certificate file.\n"
                },
                "excludedGateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded gateways.\n"
                },
                "index": {
                    "type": "integer",
                    "description": "A total of 10 profiles from index 0 to 9 are supported for remote syslog, while index 9 is reserved for CoPilot.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Profile name.\n"
                },
                "notls": {
                    "type": "boolean",
                    "description": "True if not protected by TLS.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Listening port of the remote syslog server.\n"
                },
                "privateKeyFile": {
                    "type": "string",
                    "description": "Private key of the controller that pairs with the public certificate.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "TCP or UDP (TCP by default).\n"
                },
                "publicCertificateFile": {
                    "type": "string",
                    "description": "Public certificate of the controller signed by the same CA.\n"
                },
                "server": {
                    "type": "string",
                    "description": "FQDN or IP address of the remote syslog server.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Enabled or not.\n"
                },
                "template": {
                    "type": "string",
                    "description": "Useful when forwarding to 3rd party servers like Datadog or Sumo\n"
                }
            },
            "required": [
                "name",
                "notls",
                "port",
                "server",
                "status"
            ],
            "inputProperties": {
                "caCertificateFile": {
                    "type": "string",
                    "description": "CA certificate file.\n",
                    "willReplaceOnChanges": true
                },
                "excludedGateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded gateways.\n",
                    "willReplaceOnChanges": true
                },
                "index": {
                    "type": "integer",
                    "description": "A total of 10 profiles from index 0 to 9 are supported for remote syslog, while index 9 is reserved for CoPilot.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Profile name.\n",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "Listening port of the remote syslog server.\n",
                    "willReplaceOnChanges": true
                },
                "privateKeyFile": {
                    "type": "string",
                    "description": "Private key of the controller that pairs with the public certificate.\n",
                    "willReplaceOnChanges": true
                },
                "protocol": {
                    "type": "string",
                    "description": "TCP or UDP (TCP by default).\n",
                    "willReplaceOnChanges": true
                },
                "publicCertificateFile": {
                    "type": "string",
                    "description": "Public certificate of the controller signed by the same CA.\n",
                    "willReplaceOnChanges": true
                },
                "server": {
                    "type": "string",
                    "description": "FQDN or IP address of the remote syslog server.\n",
                    "willReplaceOnChanges": true
                },
                "template": {
                    "type": "string",
                    "description": "Useful when forwarding to 3rd party servers like Datadog or Sumo\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "port",
                "server"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixRemoteSyslog resources.\n",
                "properties": {
                    "caCertificateFile": {
                        "type": "string",
                        "description": "CA certificate file.\n",
                        "willReplaceOnChanges": true
                    },
                    "excludedGateways": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of excluded gateways.\n",
                        "willReplaceOnChanges": true
                    },
                    "index": {
                        "type": "integer",
                        "description": "A total of 10 profiles from index 0 to 9 are supported for remote syslog, while index 9 is reserved for CoPilot.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Profile name.\n",
                        "willReplaceOnChanges": true
                    },
                    "notls": {
                        "type": "boolean",
                        "description": "True if not protected by TLS.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Listening port of the remote syslog server.\n",
                        "willReplaceOnChanges": true
                    },
                    "privateKeyFile": {
                        "type": "string",
                        "description": "Private key of the controller that pairs with the public certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "protocol": {
                        "type": "string",
                        "description": "TCP or UDP (TCP by default).\n",
                        "willReplaceOnChanges": true
                    },
                    "publicCertificateFile": {
                        "type": "string",
                        "description": "Public certificate of the controller signed by the same CA.\n",
                        "willReplaceOnChanges": true
                    },
                    "server": {
                        "type": "string",
                        "description": "FQDN or IP address of the remote syslog server.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Enabled or not.\n"
                    },
                    "template": {
                        "type": "string",
                        "description": "Useful when forwarding to 3rd party servers like Datadog or Sumo\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixSamlEndpoint:AviatrixSamlEndpoint": {
            "properties": {
                "accessSetBy": {
                    "type": "string",
                    "description": "Access type.\n"
                },
                "controllerLogin": {
                    "type": "boolean",
                    "description": "Switch to differentiate if it is for controller login.\n"
                },
                "customEntityId": {
                    "type": "string",
                    "description": "Custom Entity ID. Required to be non-empty for 'Custom' Entity ID type, empty for 'Hostname'.\n"
                },
                "customSamlRequestTemplate": {
                    "type": "string",
                    "description": "Custom SAML Request Template.\n"
                },
                "endpointName": {
                    "type": "string",
                    "description": "SAML Endpoint Name.\n"
                },
                "idpMetadata": {
                    "type": "string",
                    "description": "IDP Metadata.\n"
                },
                "idpMetadataType": {
                    "type": "string",
                    "description": "Type of IDP Metadata.\n"
                },
                "idpMetadataUrl": {
                    "type": "string",
                    "description": "IDP Metadata.\n"
                },
                "rbacGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of RBAC groups.\n"
                },
                "signAuthnRequests": {
                    "type": "boolean",
                    "description": "Whether to sign SAML AuthnRequests\n"
                }
            },
            "required": [
                "endpointName",
                "idpMetadataType"
            ],
            "inputProperties": {
                "accessSetBy": {
                    "type": "string",
                    "description": "Access type.\n"
                },
                "controllerLogin": {
                    "type": "boolean",
                    "description": "Switch to differentiate if it is for controller login.\n",
                    "willReplaceOnChanges": true
                },
                "customEntityId": {
                    "type": "string",
                    "description": "Custom Entity ID. Required to be non-empty for 'Custom' Entity ID type, empty for 'Hostname'.\n"
                },
                "customSamlRequestTemplate": {
                    "type": "string",
                    "description": "Custom SAML Request Template.\n"
                },
                "endpointName": {
                    "type": "string",
                    "description": "SAML Endpoint Name.\n",
                    "willReplaceOnChanges": true
                },
                "idpMetadata": {
                    "type": "string",
                    "description": "IDP Metadata.\n"
                },
                "idpMetadataType": {
                    "type": "string",
                    "description": "Type of IDP Metadata.\n"
                },
                "idpMetadataUrl": {
                    "type": "string",
                    "description": "IDP Metadata.\n"
                },
                "rbacGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of RBAC groups.\n"
                },
                "signAuthnRequests": {
                    "type": "boolean",
                    "description": "Whether to sign SAML AuthnRequests\n"
                }
            },
            "requiredInputs": [
                "endpointName",
                "idpMetadataType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixSamlEndpoint resources.\n",
                "properties": {
                    "accessSetBy": {
                        "type": "string",
                        "description": "Access type.\n"
                    },
                    "controllerLogin": {
                        "type": "boolean",
                        "description": "Switch to differentiate if it is for controller login.\n",
                        "willReplaceOnChanges": true
                    },
                    "customEntityId": {
                        "type": "string",
                        "description": "Custom Entity ID. Required to be non-empty for 'Custom' Entity ID type, empty for 'Hostname'.\n"
                    },
                    "customSamlRequestTemplate": {
                        "type": "string",
                        "description": "Custom SAML Request Template.\n"
                    },
                    "endpointName": {
                        "type": "string",
                        "description": "SAML Endpoint Name.\n",
                        "willReplaceOnChanges": true
                    },
                    "idpMetadata": {
                        "type": "string",
                        "description": "IDP Metadata.\n"
                    },
                    "idpMetadataType": {
                        "type": "string",
                        "description": "Type of IDP Metadata.\n"
                    },
                    "idpMetadataUrl": {
                        "type": "string",
                        "description": "IDP Metadata.\n"
                    },
                    "rbacGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of RBAC groups.\n"
                    },
                    "signAuthnRequests": {
                        "type": "boolean",
                        "description": "Whether to sign SAML AuthnRequests\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixSegmentationNetworkDomain:AviatrixSegmentationNetworkDomain": {
            "properties": {
                "domainName": {
                    "type": "string",
                    "description": "Network domain name.\n"
                }
            },
            "required": [
                "domainName"
            ],
            "inputProperties": {
                "domainName": {
                    "type": "string",
                    "description": "Network domain name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "domainName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixSegmentationNetworkDomain resources.\n",
                "properties": {
                    "domainName": {
                        "type": "string",
                        "description": "Network domain name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixSegmentationNetworkDomainAssociation:AviatrixSegmentationNetworkDomainAssociation": {
            "properties": {
                "attachmentName": {
                    "type": "string",
                    "description": "Attachment name, either Spoke or Edge.\n"
                },
                "networkDomainName": {
                    "type": "string",
                    "description": "Network Domain name.\n"
                },
                "transitGatewayName": {
                    "type": "string",
                    "description": "Transit Gateway name.\n"
                }
            },
            "required": [
                "attachmentName",
                "networkDomainName",
                "transitGatewayName"
            ],
            "inputProperties": {
                "attachmentName": {
                    "type": "string",
                    "description": "Attachment name, either Spoke or Edge.\n",
                    "willReplaceOnChanges": true
                },
                "networkDomainName": {
                    "type": "string",
                    "description": "Network Domain name.\n",
                    "willReplaceOnChanges": true
                },
                "transitGatewayName": {
                    "type": "string",
                    "description": "Transit Gateway name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "attachmentName",
                "networkDomainName",
                "transitGatewayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixSegmentationNetworkDomainAssociation resources.\n",
                "properties": {
                    "attachmentName": {
                        "type": "string",
                        "description": "Attachment name, either Spoke or Edge.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkDomainName": {
                        "type": "string",
                        "description": "Network Domain name.\n",
                        "willReplaceOnChanges": true
                    },
                    "transitGatewayName": {
                        "type": "string",
                        "description": "Transit Gateway name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixSegmentationNetworkDomainConnectionPolicy:AviatrixSegmentationNetworkDomainConnectionPolicy": {
            "properties": {
                "domainName1": {
                    "type": "string",
                    "description": "Name of network domain that will be connected to domain 2.\n"
                },
                "domainName2": {
                    "type": "string",
                    "description": "Name of network domain that will be connected to domain 1.\n"
                }
            },
            "required": [
                "domainName1",
                "domainName2"
            ],
            "inputProperties": {
                "domainName1": {
                    "type": "string",
                    "description": "Name of network domain that will be connected to domain 2.\n",
                    "willReplaceOnChanges": true
                },
                "domainName2": {
                    "type": "string",
                    "description": "Name of network domain that will be connected to domain 1.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "domainName1",
                "domainName2"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixSegmentationNetworkDomainConnectionPolicy resources.\n",
                "properties": {
                    "domainName1": {
                        "type": "string",
                        "description": "Name of network domain that will be connected to domain 2.\n",
                        "willReplaceOnChanges": true
                    },
                    "domainName2": {
                        "type": "string",
                        "description": "Name of network domain that will be connected to domain 1.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixSegmentationSecurityDomain:AviatrixSegmentationSecurityDomain": {
            "properties": {
                "domainName": {
                    "type": "string",
                    "description": "Security domain name.\n"
                }
            },
            "required": [
                "domainName"
            ],
            "inputProperties": {
                "domainName": {
                    "type": "string",
                    "description": "Security domain name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "domainName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixSegmentationSecurityDomain resources.\n",
                "properties": {
                    "domainName": {
                        "type": "string",
                        "description": "Security domain name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixSegmentationSecurityDomainAssociation:AviatrixSegmentationSecurityDomainAssociation": {
            "properties": {
                "attachmentName": {
                    "type": "string",
                    "description": "Attachment name, either Spoke or Edge.\n"
                },
                "securityDomainName": {
                    "type": "string",
                    "description": "Security Domain name.\n"
                },
                "transitGatewayName": {
                    "type": "string",
                    "description": "Transit Gateway name.\n"
                }
            },
            "required": [
                "attachmentName",
                "securityDomainName",
                "transitGatewayName"
            ],
            "inputProperties": {
                "attachmentName": {
                    "type": "string",
                    "description": "Attachment name, either Spoke or Edge.\n",
                    "willReplaceOnChanges": true
                },
                "securityDomainName": {
                    "type": "string",
                    "description": "Security Domain name.\n",
                    "willReplaceOnChanges": true
                },
                "transitGatewayName": {
                    "type": "string",
                    "description": "Transit Gateway name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "attachmentName",
                "securityDomainName",
                "transitGatewayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixSegmentationSecurityDomainAssociation resources.\n",
                "properties": {
                    "attachmentName": {
                        "type": "string",
                        "description": "Attachment name, either Spoke or Edge.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityDomainName": {
                        "type": "string",
                        "description": "Security Domain name.\n",
                        "willReplaceOnChanges": true
                    },
                    "transitGatewayName": {
                        "type": "string",
                        "description": "Transit Gateway name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixSegmentationSecurityDomainConnectionPolicy:AviatrixSegmentationSecurityDomainConnectionPolicy": {
            "properties": {
                "domainName1": {
                    "type": "string",
                    "description": "Name of security domain that will be connected to domain 2.\n"
                },
                "domainName2": {
                    "type": "string",
                    "description": "Name of security domain that will be connected to domain 1.\n"
                }
            },
            "required": [
                "domainName1",
                "domainName2"
            ],
            "inputProperties": {
                "domainName1": {
                    "type": "string",
                    "description": "Name of security domain that will be connected to domain 2.\n",
                    "willReplaceOnChanges": true
                },
                "domainName2": {
                    "type": "string",
                    "description": "Name of security domain that will be connected to domain 1.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "domainName1",
                "domainName2"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixSegmentationSecurityDomainConnectionPolicy resources.\n",
                "properties": {
                    "domainName1": {
                        "type": "string",
                        "description": "Name of security domain that will be connected to domain 2.\n",
                        "willReplaceOnChanges": true
                    },
                    "domainName2": {
                        "type": "string",
                        "description": "Name of security domain that will be connected to domain 1.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixSite2Cloud:AviatrixSite2Cloud": {
            "properties": {
                "authType": {
                    "type": "string",
                    "description": "Authentication Type. Valid values: 'PSK' and 'Cert'. Default value: 'PSK'.\n"
                },
                "backupGatewayName": {
                    "type": "string",
                    "description": "Backup gateway name.\n"
                },
                "backupLocalTunnelIp": {
                    "type": "string",
                    "description": "Backup local tunnel IP address.\n"
                },
                "backupPreSharedKey": {
                    "type": "string",
                    "description": "Backup Pre-Shared Key.\n"
                },
                "backupRemoteGatewayIp": {
                    "type": "string",
                    "description": "Backup remote remote gateway IP.\n"
                },
                "backupRemoteGatewayLatitude": {
                    "type": "number",
                    "description": "Latitude of backup remote gateway.\n"
                },
                "backupRemoteGatewayLongitude": {
                    "type": "number",
                    "description": "Longitude of backup remote gateway.\n"
                },
                "backupRemoteIdentifier": {
                    "type": "string",
                    "description": "Backup remote identifier. Required for Cert based authentication type with HA enabled.\n"
                },
                "backupRemoteTunnelIp": {
                    "type": "string",
                    "description": "Backup remote tunnel IP address.\n"
                },
                "caCertTagName": {
                    "type": "string",
                    "description": "Name of Remote CA Certificate Tag for creating Site2Cloud tunnels. Required for Cert based authentication type.\n"
                },
                "connectionName": {
                    "type": "string",
                    "description": "Site2Cloud Connection Name.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Connection Type. Valid values: 'mapped' and 'unmapped'.\n"
                },
                "customAlgorithms": {
                    "type": "boolean",
                    "description": "Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.\n"
                },
                "customMapped": {
                    "type": "boolean",
                    "description": "Enable custom mapped.\n"
                },
                "enableActiveActive": {
                    "type": "boolean",
                    "description": "Switch to Enable/Disable active_active_ha for an existing site2cloud connection.\n"
                },
                "enableDeadPeerDetection": {
                    "type": "boolean",
                    "description": "Switch to Enable/Disable Deed Peer Detection for an existing site2cloud connection.\n"
                },
                "enableEventTriggeredHa": {
                    "type": "boolean",
                    "description": "Enable Event Triggered HA.\n"
                },
                "enableIkev2": {
                    "type": "boolean",
                    "description": "Switch to enable IKEv2 for policy based site2cloud.\n"
                },
                "enableSingleIpHa": {
                    "type": "boolean",
                    "description": "Enable single IP HA on a site2cloud connection.\n"
                },
                "forwardTrafficToTransit": {
                    "type": "boolean",
                    "description": "Enable spoke gateway with mapped site2cloud configurations to forward traffic from site2cloud connection to Aviatrix\nTransit Gateway.\n"
                },
                "haEnabled": {
                    "type": "boolean",
                    "description": "Specify whether enabling HA or not.\n"
                },
                "localDestinationRealCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Local Initiated Traffic Destination Real CIDRs.\n"
                },
                "localDestinationVirtualCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Local Initiated Traffic Destination Virtual CIDRs.\n"
                },
                "localSourceRealCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Local Initiated Traffic Source Real CIDRs.\n"
                },
                "localSourceVirtualCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Local Initiated Traffic Source Virtual CIDRs.\n"
                },
                "localSubnetCidr": {
                    "type": "string",
                    "description": "Local Subnet CIDR.\n"
                },
                "localSubnetVirtual": {
                    "type": "string",
                    "description": "Local Subnet CIDR (Virtual).\n"
                },
                "localTunnelIp": {
                    "type": "string",
                    "description": "Local tunnel IP address.\n"
                },
                "phase1Authentication": {
                    "type": "string",
                    "description": "Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.\n"
                },
                "phase1DhGroups": {
                    "type": "string",
                    "description": "Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.\n"
                },
                "phase1Encryption": {
                    "type": "string",
                    "description": "Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',\n'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.\n"
                },
                "phase1RemoteIdentifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Phase 1 remote identifier of the IPsec tunnel.\n"
                },
                "phase2Authentication": {
                    "type": "string",
                    "description": "Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.\n"
                },
                "phase2DhGroups": {
                    "type": "string",
                    "description": "Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.\n"
                },
                "phase2Encryption": {
                    "type": "string",
                    "description": "Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',\n'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.\n"
                },
                "preSharedKey": {
                    "type": "string",
                    "description": "Pre-Shared Key.\n"
                },
                "primaryCloudGatewayName": {
                    "type": "string",
                    "description": "Primary Cloud Gateway Name.\n"
                },
                "privateRouteEncryption": {
                    "type": "boolean",
                    "description": "Private route encryption switch.\n"
                },
                "remoteDestinationRealCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Remote Initiated Traffic Destination Real CIDRs.\n"
                },
                "remoteDestinationVirtualCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Remote Initiated Traffic Destination Virtual CIDRs.\n"
                },
                "remoteGatewayIp": {
                    "type": "string",
                    "description": "Remote Gateway IP.\n"
                },
                "remoteGatewayLatitude": {
                    "type": "number",
                    "description": "Latitude of remote gateway.\n"
                },
                "remoteGatewayLongitude": {
                    "type": "number",
                    "description": "Longitude of remote gateway.\n"
                },
                "remoteGatewayType": {
                    "type": "string",
                    "description": "Remote gateway type. Valid values: 'generic', 'avx', 'aws', 'azure', 'sonicwall' and 'oracle'.\n"
                },
                "remoteIdentifier": {
                    "type": "string",
                    "description": "Remote identifier. Required for Cert based authentication type.\n"
                },
                "remoteSourceRealCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Remote Initiated Traffic Source Real CIDRs.\n"
                },
                "remoteSourceVirtualCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Remote Initiated Traffic Source Virtual CIDRs.\n"
                },
                "remoteSubnetCidr": {
                    "type": "string",
                    "description": "Remote Subnet CIDR.\n"
                },
                "remoteSubnetVirtual": {
                    "type": "string",
                    "description": "Remote Subnet CIDR (Virtual).\n"
                },
                "remoteTunnelIp": {
                    "type": "string",
                    "description": "Remote tunnel IP address.\n"
                },
                "routeTableLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Route tables to modify.\n"
                },
                "sslServerPool": {
                    "type": "string",
                    "description": "Specify ssl_server_pool for tunnel_type 'tcp'. Default value is '192.168.44.0/24'\n"
                },
                "tunnelType": {
                    "type": "string",
                    "description": "Site2Cloud Tunnel Type. Valid values: 'policy' and 'route'.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC Id of the cloud gateway.\n"
                }
            },
            "required": [
                "backupRemoteGatewayIp",
                "connectionName",
                "connectionType",
                "localSubnetCidr",
                "primaryCloudGatewayName",
                "remoteGatewayIp",
                "remoteGatewayType",
                "tunnelType",
                "vpcId"
            ],
            "inputProperties": {
                "authType": {
                    "type": "string",
                    "description": "Authentication Type. Valid values: 'PSK' and 'Cert'. Default value: 'PSK'.\n",
                    "willReplaceOnChanges": true
                },
                "backupGatewayName": {
                    "type": "string",
                    "description": "Backup gateway name.\n",
                    "willReplaceOnChanges": true
                },
                "backupLocalTunnelIp": {
                    "type": "string",
                    "description": "Backup local tunnel IP address.\n",
                    "willReplaceOnChanges": true
                },
                "backupPreSharedKey": {
                    "type": "string",
                    "description": "Backup Pre-Shared Key.\n",
                    "willReplaceOnChanges": true
                },
                "backupRemoteGatewayIp": {
                    "type": "string",
                    "description": "Backup remote remote gateway IP.\n",
                    "willReplaceOnChanges": true
                },
                "backupRemoteGatewayLatitude": {
                    "type": "number",
                    "description": "Latitude of backup remote gateway.\n"
                },
                "backupRemoteGatewayLongitude": {
                    "type": "number",
                    "description": "Longitude of backup remote gateway.\n"
                },
                "backupRemoteIdentifier": {
                    "type": "string",
                    "description": "Backup remote identifier. Required for Cert based authentication type with HA enabled.\n"
                },
                "backupRemoteTunnelIp": {
                    "type": "string",
                    "description": "Backup remote tunnel IP address.\n",
                    "willReplaceOnChanges": true
                },
                "caCertTagName": {
                    "type": "string",
                    "description": "Name of Remote CA Certificate Tag for creating Site2Cloud tunnels. Required for Cert based authentication type.\n",
                    "willReplaceOnChanges": true
                },
                "connectionName": {
                    "type": "string",
                    "description": "Site2Cloud Connection Name.\n",
                    "willReplaceOnChanges": true
                },
                "connectionType": {
                    "type": "string",
                    "description": "Connection Type. Valid values: 'mapped' and 'unmapped'.\n",
                    "willReplaceOnChanges": true
                },
                "customAlgorithms": {
                    "type": "boolean",
                    "description": "Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.\n",
                    "willReplaceOnChanges": true
                },
                "customMapped": {
                    "type": "boolean",
                    "description": "Enable custom mapped.\n",
                    "willReplaceOnChanges": true
                },
                "enableActiveActive": {
                    "type": "boolean",
                    "description": "Switch to Enable/Disable active_active_ha for an existing site2cloud connection.\n"
                },
                "enableDeadPeerDetection": {
                    "type": "boolean",
                    "description": "Switch to Enable/Disable Deed Peer Detection for an existing site2cloud connection.\n"
                },
                "enableEventTriggeredHa": {
                    "type": "boolean",
                    "description": "Enable Event Triggered HA.\n"
                },
                "enableIkev2": {
                    "type": "boolean",
                    "description": "Switch to enable IKEv2 for policy based site2cloud.\n",
                    "willReplaceOnChanges": true
                },
                "enableSingleIpHa": {
                    "type": "boolean",
                    "description": "Enable single IP HA on a site2cloud connection.\n",
                    "willReplaceOnChanges": true
                },
                "forwardTrafficToTransit": {
                    "type": "boolean",
                    "description": "Enable spoke gateway with mapped site2cloud configurations to forward traffic from site2cloud connection to Aviatrix\nTransit Gateway.\n"
                },
                "haEnabled": {
                    "type": "boolean",
                    "description": "Specify whether enabling HA or not.\n",
                    "willReplaceOnChanges": true
                },
                "localDestinationRealCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Local Initiated Traffic Destination Real CIDRs.\n"
                },
                "localDestinationVirtualCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Local Initiated Traffic Destination Virtual CIDRs.\n"
                },
                "localSourceRealCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Local Initiated Traffic Source Real CIDRs.\n"
                },
                "localSourceVirtualCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Local Initiated Traffic Source Virtual CIDRs.\n"
                },
                "localSubnetCidr": {
                    "type": "string",
                    "description": "Local Subnet CIDR.\n"
                },
                "localSubnetVirtual": {
                    "type": "string",
                    "description": "Local Subnet CIDR (Virtual).\n"
                },
                "localTunnelIp": {
                    "type": "string",
                    "description": "Local tunnel IP address.\n",
                    "willReplaceOnChanges": true
                },
                "phase1Authentication": {
                    "type": "string",
                    "description": "Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.\n",
                    "willReplaceOnChanges": true
                },
                "phase1DhGroups": {
                    "type": "string",
                    "description": "Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.\n",
                    "willReplaceOnChanges": true
                },
                "phase1Encryption": {
                    "type": "string",
                    "description": "Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',\n'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.\n",
                    "willReplaceOnChanges": true
                },
                "phase1RemoteIdentifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Phase 1 remote identifier of the IPsec tunnel.\n"
                },
                "phase2Authentication": {
                    "type": "string",
                    "description": "Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.\n",
                    "willReplaceOnChanges": true
                },
                "phase2DhGroups": {
                    "type": "string",
                    "description": "Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.\n",
                    "willReplaceOnChanges": true
                },
                "phase2Encryption": {
                    "type": "string",
                    "description": "Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',\n'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.\n",
                    "willReplaceOnChanges": true
                },
                "preSharedKey": {
                    "type": "string",
                    "description": "Pre-Shared Key.\n",
                    "willReplaceOnChanges": true
                },
                "primaryCloudGatewayName": {
                    "type": "string",
                    "description": "Primary Cloud Gateway Name.\n",
                    "willReplaceOnChanges": true
                },
                "privateRouteEncryption": {
                    "type": "boolean",
                    "description": "Private route encryption switch.\n",
                    "willReplaceOnChanges": true
                },
                "remoteDestinationRealCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Remote Initiated Traffic Destination Real CIDRs.\n"
                },
                "remoteDestinationVirtualCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Remote Initiated Traffic Destination Virtual CIDRs.\n"
                },
                "remoteGatewayIp": {
                    "type": "string",
                    "description": "Remote Gateway IP.\n",
                    "willReplaceOnChanges": true
                },
                "remoteGatewayLatitude": {
                    "type": "number",
                    "description": "Latitude of remote gateway.\n"
                },
                "remoteGatewayLongitude": {
                    "type": "number",
                    "description": "Longitude of remote gateway.\n"
                },
                "remoteGatewayType": {
                    "type": "string",
                    "description": "Remote gateway type. Valid values: 'generic', 'avx', 'aws', 'azure', 'sonicwall' and 'oracle'.\n",
                    "willReplaceOnChanges": true
                },
                "remoteIdentifier": {
                    "type": "string",
                    "description": "Remote identifier. Required for Cert based authentication type.\n"
                },
                "remoteSourceRealCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Remote Initiated Traffic Source Real CIDRs.\n"
                },
                "remoteSourceVirtualCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Remote Initiated Traffic Source Virtual CIDRs.\n"
                },
                "remoteSubnetCidr": {
                    "type": "string",
                    "description": "Remote Subnet CIDR.\n"
                },
                "remoteSubnetVirtual": {
                    "type": "string",
                    "description": "Remote Subnet CIDR (Virtual).\n"
                },
                "remoteTunnelIp": {
                    "type": "string",
                    "description": "Remote tunnel IP address.\n",
                    "willReplaceOnChanges": true
                },
                "routeTableLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Route tables to modify.\n",
                    "willReplaceOnChanges": true
                },
                "sslServerPool": {
                    "type": "string",
                    "description": "Specify ssl_server_pool for tunnel_type 'tcp'. Default value is '192.168.44.0/24'\n",
                    "willReplaceOnChanges": true
                },
                "tunnelType": {
                    "type": "string",
                    "description": "Site2Cloud Tunnel Type. Valid values: 'policy' and 'route'.\n",
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC Id of the cloud gateway.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "connectionName",
                "connectionType",
                "primaryCloudGatewayName",
                "remoteGatewayIp",
                "remoteGatewayType",
                "tunnelType",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixSite2Cloud resources.\n",
                "properties": {
                    "authType": {
                        "type": "string",
                        "description": "Authentication Type. Valid values: 'PSK' and 'Cert'. Default value: 'PSK'.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupGatewayName": {
                        "type": "string",
                        "description": "Backup gateway name.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupLocalTunnelIp": {
                        "type": "string",
                        "description": "Backup local tunnel IP address.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupPreSharedKey": {
                        "type": "string",
                        "description": "Backup Pre-Shared Key.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupRemoteGatewayIp": {
                        "type": "string",
                        "description": "Backup remote remote gateway IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupRemoteGatewayLatitude": {
                        "type": "number",
                        "description": "Latitude of backup remote gateway.\n"
                    },
                    "backupRemoteGatewayLongitude": {
                        "type": "number",
                        "description": "Longitude of backup remote gateway.\n"
                    },
                    "backupRemoteIdentifier": {
                        "type": "string",
                        "description": "Backup remote identifier. Required for Cert based authentication type with HA enabled.\n"
                    },
                    "backupRemoteTunnelIp": {
                        "type": "string",
                        "description": "Backup remote tunnel IP address.\n",
                        "willReplaceOnChanges": true
                    },
                    "caCertTagName": {
                        "type": "string",
                        "description": "Name of Remote CA Certificate Tag for creating Site2Cloud tunnels. Required for Cert based authentication type.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionName": {
                        "type": "string",
                        "description": "Site2Cloud Connection Name.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Connection Type. Valid values: 'mapped' and 'unmapped'.\n",
                        "willReplaceOnChanges": true
                    },
                    "customAlgorithms": {
                        "type": "boolean",
                        "description": "Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.\n",
                        "willReplaceOnChanges": true
                    },
                    "customMapped": {
                        "type": "boolean",
                        "description": "Enable custom mapped.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableActiveActive": {
                        "type": "boolean",
                        "description": "Switch to Enable/Disable active_active_ha for an existing site2cloud connection.\n"
                    },
                    "enableDeadPeerDetection": {
                        "type": "boolean",
                        "description": "Switch to Enable/Disable Deed Peer Detection for an existing site2cloud connection.\n"
                    },
                    "enableEventTriggeredHa": {
                        "type": "boolean",
                        "description": "Enable Event Triggered HA.\n"
                    },
                    "enableIkev2": {
                        "type": "boolean",
                        "description": "Switch to enable IKEv2 for policy based site2cloud.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableSingleIpHa": {
                        "type": "boolean",
                        "description": "Enable single IP HA on a site2cloud connection.\n",
                        "willReplaceOnChanges": true
                    },
                    "forwardTrafficToTransit": {
                        "type": "boolean",
                        "description": "Enable spoke gateway with mapped site2cloud configurations to forward traffic from site2cloud connection to Aviatrix\nTransit Gateway.\n"
                    },
                    "haEnabled": {
                        "type": "boolean",
                        "description": "Specify whether enabling HA or not.\n",
                        "willReplaceOnChanges": true
                    },
                    "localDestinationRealCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Local Initiated Traffic Destination Real CIDRs.\n"
                    },
                    "localDestinationVirtualCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Local Initiated Traffic Destination Virtual CIDRs.\n"
                    },
                    "localSourceRealCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Local Initiated Traffic Source Real CIDRs.\n"
                    },
                    "localSourceVirtualCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Local Initiated Traffic Source Virtual CIDRs.\n"
                    },
                    "localSubnetCidr": {
                        "type": "string",
                        "description": "Local Subnet CIDR.\n"
                    },
                    "localSubnetVirtual": {
                        "type": "string",
                        "description": "Local Subnet CIDR (Virtual).\n"
                    },
                    "localTunnelIp": {
                        "type": "string",
                        "description": "Local tunnel IP address.\n",
                        "willReplaceOnChanges": true
                    },
                    "phase1Authentication": {
                        "type": "string",
                        "description": "Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.\n",
                        "willReplaceOnChanges": true
                    },
                    "phase1DhGroups": {
                        "type": "string",
                        "description": "Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.\n",
                        "willReplaceOnChanges": true
                    },
                    "phase1Encryption": {
                        "type": "string",
                        "description": "Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',\n'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.\n",
                        "willReplaceOnChanges": true
                    },
                    "phase1RemoteIdentifiers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Phase 1 remote identifier of the IPsec tunnel.\n"
                    },
                    "phase2Authentication": {
                        "type": "string",
                        "description": "Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.\n",
                        "willReplaceOnChanges": true
                    },
                    "phase2DhGroups": {
                        "type": "string",
                        "description": "Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.\n",
                        "willReplaceOnChanges": true
                    },
                    "phase2Encryption": {
                        "type": "string",
                        "description": "Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',\n'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.\n",
                        "willReplaceOnChanges": true
                    },
                    "preSharedKey": {
                        "type": "string",
                        "description": "Pre-Shared Key.\n",
                        "willReplaceOnChanges": true
                    },
                    "primaryCloudGatewayName": {
                        "type": "string",
                        "description": "Primary Cloud Gateway Name.\n",
                        "willReplaceOnChanges": true
                    },
                    "privateRouteEncryption": {
                        "type": "boolean",
                        "description": "Private route encryption switch.\n",
                        "willReplaceOnChanges": true
                    },
                    "remoteDestinationRealCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Remote Initiated Traffic Destination Real CIDRs.\n"
                    },
                    "remoteDestinationVirtualCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Remote Initiated Traffic Destination Virtual CIDRs.\n"
                    },
                    "remoteGatewayIp": {
                        "type": "string",
                        "description": "Remote Gateway IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "remoteGatewayLatitude": {
                        "type": "number",
                        "description": "Latitude of remote gateway.\n"
                    },
                    "remoteGatewayLongitude": {
                        "type": "number",
                        "description": "Longitude of remote gateway.\n"
                    },
                    "remoteGatewayType": {
                        "type": "string",
                        "description": "Remote gateway type. Valid values: 'generic', 'avx', 'aws', 'azure', 'sonicwall' and 'oracle'.\n",
                        "willReplaceOnChanges": true
                    },
                    "remoteIdentifier": {
                        "type": "string",
                        "description": "Remote identifier. Required for Cert based authentication type.\n"
                    },
                    "remoteSourceRealCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Remote Initiated Traffic Source Real CIDRs.\n"
                    },
                    "remoteSourceVirtualCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Remote Initiated Traffic Source Virtual CIDRs.\n"
                    },
                    "remoteSubnetCidr": {
                        "type": "string",
                        "description": "Remote Subnet CIDR.\n"
                    },
                    "remoteSubnetVirtual": {
                        "type": "string",
                        "description": "Remote Subnet CIDR (Virtual).\n"
                    },
                    "remoteTunnelIp": {
                        "type": "string",
                        "description": "Remote tunnel IP address.\n",
                        "willReplaceOnChanges": true
                    },
                    "routeTableLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Route tables to modify.\n",
                        "willReplaceOnChanges": true
                    },
                    "sslServerPool": {
                        "type": "string",
                        "description": "Specify ssl_server_pool for tunnel_type 'tcp'. Default value is '192.168.44.0/24'\n",
                        "willReplaceOnChanges": true
                    },
                    "tunnelType": {
                        "type": "string",
                        "description": "Site2Cloud Tunnel Type. Valid values: 'policy' and 'route'.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "VPC Id of the cloud gateway.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixSite2CloudCaCertTag:AviatrixSite2CloudCaCertTag": {
            "properties": {
                "caCertificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixSite2CloudCaCertTagCaCertificate:AviatrixSite2CloudCaCertTagCaCertificate"
                    },
                    "description": "A set of CA certificates.\n"
                },
                "tagName": {
                    "type": "string",
                    "description": "Unique name of the ca cert tag.\n"
                }
            },
            "required": [
                "caCertificates",
                "tagName"
            ],
            "inputProperties": {
                "caCertificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixSite2CloudCaCertTagCaCertificate:AviatrixSite2CloudCaCertTagCaCertificate"
                    },
                    "description": "A set of CA certificates.\n"
                },
                "tagName": {
                    "type": "string",
                    "description": "Unique name of the ca cert tag.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "caCertificates",
                "tagName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixSite2CloudCaCertTag resources.\n",
                "properties": {
                    "caCertificates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixSite2CloudCaCertTagCaCertificate:AviatrixSite2CloudCaCertTagCaCertificate"
                        },
                        "description": "A set of CA certificates.\n"
                    },
                    "tagName": {
                        "type": "string",
                        "description": "Unique name of the ca cert tag.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixSplunkLogging:AviatrixSplunkLogging": {
            "properties": {
                "customInputConfig": {
                    "type": "string",
                    "description": "Custom configuration.\n"
                },
                "customOutputConfigFile": {
                    "type": "string",
                    "description": "Configuration file. Use the filebase64 function to read from a file.\n"
                },
                "excludedGateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded gateways.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port number.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server IP.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Enabled or not.\n"
                }
            },
            "required": [
                "status"
            ],
            "inputProperties": {
                "customInputConfig": {
                    "type": "string",
                    "description": "Custom configuration.\n",
                    "willReplaceOnChanges": true
                },
                "customOutputConfigFile": {
                    "type": "string",
                    "description": "Configuration file. Use the filebase64 function to read from a file.\n",
                    "willReplaceOnChanges": true
                },
                "excludedGateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded gateways.\n",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port number.\n",
                    "willReplaceOnChanges": true
                },
                "server": {
                    "type": "string",
                    "description": "Server IP.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixSplunkLogging resources.\n",
                "properties": {
                    "customInputConfig": {
                        "type": "string",
                        "description": "Custom configuration.\n",
                        "willReplaceOnChanges": true
                    },
                    "customOutputConfigFile": {
                        "type": "string",
                        "description": "Configuration file. Use the filebase64 function to read from a file.\n",
                        "willReplaceOnChanges": true
                    },
                    "excludedGateways": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of excluded gateways.\n",
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port number.\n",
                        "willReplaceOnChanges": true
                    },
                    "server": {
                        "type": "string",
                        "description": "Server IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Enabled or not.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixSpokeGateway:AviatrixSpokeGateway": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                },
                "allocateNewEip": {
                    "type": "boolean",
                    "description": "If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for\nthis gateway.\n"
                },
                "approvedLearnedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Approved learned CIDRs for BGP Spoke Gateway. Available as of provider version R2.21+.\n"
                },
                "availabilityDomain": {
                    "type": "string",
                    "description": "Availability domain for OCI.\n"
                },
                "azureEipNameResourceGroup": {
                    "type": "string",
                    "description": "The name of the public IP address and its resource group in Azure to assign to this Spoke Gateway.\n"
                },
                "bgpEcmp": {
                    "type": "boolean",
                    "description": "Enable Equal Cost Multi Path (ECMP) routing for the next hop for BGP Spoke Gateway.\n"
                },
                "bgpHoldTime": {
                    "type": "integer",
                    "description": "BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.\n"
                },
                "bgpPollingTime": {
                    "type": "integer",
                    "description": "BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.\n"
                },
                "cloudInstanceId": {
                    "type": "string",
                    "description": "Cloud instance ID.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider.\n"
                },
                "customerManagedKeys": {
                    "type": "string",
                    "description": "Customer managed key ID.\n"
                },
                "customizedSpokeVpcRoutes": {
                    "type": "string",
                    "description": "A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned\nroutes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to this spoke gateway only.\n"
                },
                "disableRoutePropagation": {
                    "type": "boolean",
                    "description": "Disables route propagation on BGP Spoke to attached Transit Gateway. Default: false.\n"
                },
                "eip": {
                    "type": "string",
                    "description": "Required when allocate_new_eip is false. It uses specified EIP for this gateway.\n"
                },
                "enableActiveStandby": {
                    "type": "boolean",
                    "description": "Enables Active-Standby Mode, available only with HA enabled for BGP Spoke Gateway.\n"
                },
                "enableActiveStandbyPreemptive": {
                    "type": "boolean",
                    "description": "Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.\n"
                },
                "enableAutoAdvertiseS2cCidrs": {
                    "type": "boolean",
                    "description": "Automatically advertise remote CIDR to Aviatrix Transit Gateway when route based Site2Cloud Tunnel is created.\n"
                },
                "enableBgp": {
                    "type": "boolean",
                    "description": "Enable BGP. Default: false.\n"
                },
                "enableEncryptVolume": {
                    "type": "boolean",
                    "description": "Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.\n"
                },
                "enableJumboFrame": {
                    "type": "boolean",
                    "description": "Enable jumbo frame support for spoke gateway. Valid values: true or false. Default value: true.\n"
                },
                "enableLearnedCidrsApproval": {
                    "type": "boolean",
                    "description": "Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.\n"
                },
                "enableMonitorGatewaySubnets": {
                    "type": "boolean",
                    "description": "Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for\ncloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.\n"
                },
                "enablePreserveAsPath": {
                    "type": "boolean",
                    "description": "Enable preserve as_path when advertising manual summary cidrs on BGP spoke gateway.\n"
                },
                "enablePrivateOob": {
                    "type": "boolean",
                    "description": "Enable private OOB.\n"
                },
                "enablePrivateVpcDefaultRoute": {
                    "type": "boolean",
                    "description": "Config Private VPC Default Route.\n"
                },
                "enableSkipPublicRouteTableUpdate": {
                    "type": "boolean",
                    "description": "Skip Public Route Table Update.\n"
                },
                "enableSpotInstance": {
                    "type": "boolean",
                    "description": "Enable spot instance. NOT supported for production deployment.\n"
                },
                "enableVpcDnsServer": {
                    "type": "boolean",
                    "description": "Enable vpc_dns_server for Gateway. Valid values: true, false.\n"
                },
                "faultDomain": {
                    "type": "string",
                    "description": "Fault domain for OCI.\n"
                },
                "filteredSpokeVpcRoutes": {
                    "type": "string",
                    "description": "A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or\nit’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to\nthis spoke gateway only.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Name of the gateway which is going to be created.\n"
                },
                "gwSize": {
                    "type": "string",
                    "description": "Size of the gateway instance.\n"
                },
                "haAvailabilityDomain": {
                    "type": "string",
                    "description": "HA availability domain for OCI.\n"
                },
                "haAzureEipNameResourceGroup": {
                    "type": "string",
                    "description": "The name of the public IP address and its resource group in Azure to assign to the HA Spoke Gateway.\n"
                },
                "haCloudInstanceId": {
                    "type": "string",
                    "description": "Cloud instance ID of HA spoke gateway.\n"
                },
                "haEip": {
                    "type": "string",
                    "description": "Public IP address that you want assigned to the HA Spoke Gateway.\n"
                },
                "haFaultDomain": {
                    "type": "string",
                    "description": "HA fault domain for OCI.\n"
                },
                "haGwName": {
                    "type": "string",
                    "description": "Aviatrix spoke gateway unique name of HA spoke gateway.\n"
                },
                "haGwSize": {
                    "type": "string",
                    "description": "HA Gateway Size.\n"
                },
                "haImageVersion": {
                    "type": "string",
                    "description": "ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the\ngateway to the specified version.\n"
                },
                "haInsaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Spoke HA Gateway. Required for AWS if insane_mode is true and ha_subnet is\nset.\n"
                },
                "haOobAvailabilityZone": {
                    "type": "string",
                    "description": "OOB HA availability zone.\n"
                },
                "haOobManagementSubnet": {
                    "type": "string",
                    "description": "OOB HA management subnet.\n"
                },
                "haPrivateIp": {
                    "type": "string",
                    "description": "Private IP address of the spoke gateway created.\n"
                },
                "haPrivateModeSubnetZone": {
                    "type": "string",
                    "description": "Private Mode HA subnet availability zone.\n"
                },
                "haPublicIp": {
                    "type": "string",
                    "description": "Public IP address of the HA Spoke Gateway.\n"
                },
                "haSecurityGroupId": {
                    "type": "string",
                    "description": "HA security group used for the spoke gateway.\n"
                },
                "haSoftwareVersion": {
                    "type": "string",
                    "description": "ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update\nthe gateway to the specified version. If left blank, the gateway software version will continue to be managed through\nthe aviatrix_controller_config resource.\n"
                },
                "haSubnet": {
                    "type": "string",
                    "description": "HA Subnet. Required if enabling HA for AWS/AWSGov/AWSChina/Azure/AzureChina/OCI/Alibaba Cloud. Optional if enabling HA\nfor GCP.\n"
                },
                "haZone": {
                    "type": "string",
                    "description": "HA Zone. Required if enabling HA for GCP. Optional for Azure.\n"
                },
                "imageVersion": {
                    "type": "string",
                    "description": "image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway\nto the specified version.\n"
                },
                "includedAdvertisedSpokeRoutes": {
                    "type": "string",
                    "description": "A list of comma separated CIDRs to be advertised to on-prem as 'Included CIDR List'. When configured, it will replace\nall advertised routes from this VPC.\n"
                },
                "insaneMode": {
                    "type": "boolean",
                    "description": "Enable Insane Mode for Spoke Gateway. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane\nmode is enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.\n"
                },
                "insaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Spoke Gateway. Required if insane_mode is enabled for AWS cloud.\n"
                },
                "learnedCidrsApprovalMode": {
                    "type": "string",
                    "description": "Set the learned CIDRs approval mode for BGP Spoke Gateway. Only valid when 'enable_learned_cidrs_approval' is set to\ntrue. Currently, only 'gateway' is supported: learned CIDR approval applies to ALL connections. Default value:\n'gateway'.\n"
                },
                "localAsNumber": {
                    "type": "string",
                    "description": "Changes the Aviatrix BGP Spoke Gateway ASN number before you setup Aviatrix BGP Spoke Gateway connection configurations.\n"
                },
                "manageTransitGatewayAttachment": {
                    "type": "boolean",
                    "description": "This parameter is a switch used to determine whether or not to manage attaching this spoke gateway to transit gateways\nusing the aviatrix_spoke_gateway resource. If this is set to false, attaching this spoke gateway to transit gateways\nmust be done using the aviatrix_spoke_transit_attachment resource. Valid values: true, false. Default value: true.\n"
                },
                "monitorExcludeLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.\n"
                },
                "oobAvailabilityZone": {
                    "type": "string",
                    "description": "OOB subnet availability zone.\n"
                },
                "oobManagementSubnet": {
                    "type": "string",
                    "description": "OOB management subnet.\n"
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices. Only valid for BGP Spoke\nGateway\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "Private IP address of the spoke gateway created.\n"
                },
                "privateModeLbVpcId": {
                    "type": "string",
                    "description": "Private Mode controller load balancer vpc_id. Required when private mode is enabled for the Controller.\n"
                },
                "privateModeSubnetZone": {
                    "type": "string",
                    "description": "Subnet availability zone. Required when Private Mode is enabled on the Controller and cloud_type is AWS.\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "Public IP address of the Spoke Gateway created.\n"
                },
                "rxQueueSize": {
                    "type": "string",
                    "description": "Gateway ethernet interface RX queue size. Supported for AWS related clouds only.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "Security group used for the spoke gateway.\n"
                },
                "singleAzHa": {
                    "type": "boolean",
                    "description": "Set to 'enabled' if this feature is desired.\n"
                },
                "singleIpSnat": {
                    "type": "boolean",
                    "description": "Specify whether to enable Source NAT feature in 'single_ip' mode on the gateway or not.\n"
                },
                "softwareVersion": {
                    "type": "string",
                    "description": "software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the\ngateway to the specified version. If left blank, the gateway software version will continue to be managed through the\naviatrix_controller_config resource.\n"
                },
                "spokeBgpManualAdvertiseCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Intended CIDR list to be advertised to external BGP router.\n"
                },
                "spotPrice": {
                    "type": "string",
                    "description": "Price for spot instance. NOT supported for production deployment.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "Public Subnet Info.\n"
                },
                "tagLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Instance tag of cloud provider.\n",
                    "deprecationMessage": "Use tags instead."
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of tags to assign to the spoke gateway.\n"
                },
                "transitGw": {
                    "type": "string",
                    "description": "Specify the transit Gateways to attach to this spoke. Format is a comma-separated list of transit gateway names. For\nexample, 'transit-gw1,transit-gw2'.\n",
                    "deprecationMessage": "Please set `manage_transit_gateway_attachment` to false, and use the standalone aviatrix_spoke_transit_attachment resource instead."
                },
                "tunnelDetectionTime": {
                    "type": "integer",
                    "description": "The IPSec tunnel down detection time for the Spoke Gateway.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC-ID/VNet-Name of cloud provider.\n"
                },
                "vpcReg": {
                    "type": "string",
                    "description": "Region of cloud provider.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.\n"
                }
            },
            "required": [
                "accountName",
                "availabilityDomain",
                "azureEipNameResourceGroup",
                "cloudInstanceId",
                "cloudType",
                "eip",
                "faultDomain",
                "gwName",
                "gwSize",
                "haAvailabilityDomain",
                "haAzureEipNameResourceGroup",
                "haCloudInstanceId",
                "haEip",
                "haFaultDomain",
                "haGwName",
                "haImageVersion",
                "haPrivateIp",
                "haPublicIp",
                "haSecurityGroupId",
                "haSoftwareVersion",
                "imageVersion",
                "localAsNumber",
                "privateIp",
                "publicIp",
                "securityGroupId",
                "softwareVersion",
                "subnet",
                "tunnelDetectionTime",
                "vpcId",
                "vpcReg"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                },
                "allocateNewEip": {
                    "type": "boolean",
                    "description": "If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for\nthis gateway.\n"
                },
                "approvedLearnedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Approved learned CIDRs for BGP Spoke Gateway. Available as of provider version R2.21+.\n"
                },
                "availabilityDomain": {
                    "type": "string",
                    "description": "Availability domain for OCI.\n",
                    "willReplaceOnChanges": true
                },
                "azureEipNameResourceGroup": {
                    "type": "string",
                    "description": "The name of the public IP address and its resource group in Azure to assign to this Spoke Gateway.\n"
                },
                "bgpEcmp": {
                    "type": "boolean",
                    "description": "Enable Equal Cost Multi Path (ECMP) routing for the next hop for BGP Spoke Gateway.\n"
                },
                "bgpHoldTime": {
                    "type": "integer",
                    "description": "BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.\n"
                },
                "bgpPollingTime": {
                    "type": "integer",
                    "description": "BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider.\n"
                },
                "customerManagedKeys": {
                    "type": "string",
                    "description": "Customer managed key ID.\n"
                },
                "customizedSpokeVpcRoutes": {
                    "type": "string",
                    "description": "A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned\nroutes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to this spoke gateway only.\n"
                },
                "disableRoutePropagation": {
                    "type": "boolean",
                    "description": "Disables route propagation on BGP Spoke to attached Transit Gateway. Default: false.\n"
                },
                "eip": {
                    "type": "string",
                    "description": "Required when allocate_new_eip is false. It uses specified EIP for this gateway.\n"
                },
                "enableActiveStandby": {
                    "type": "boolean",
                    "description": "Enables Active-Standby Mode, available only with HA enabled for BGP Spoke Gateway.\n"
                },
                "enableActiveStandbyPreemptive": {
                    "type": "boolean",
                    "description": "Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.\n"
                },
                "enableAutoAdvertiseS2cCidrs": {
                    "type": "boolean",
                    "description": "Automatically advertise remote CIDR to Aviatrix Transit Gateway when route based Site2Cloud Tunnel is created.\n"
                },
                "enableBgp": {
                    "type": "boolean",
                    "description": "Enable BGP. Default: false.\n",
                    "willReplaceOnChanges": true
                },
                "enableEncryptVolume": {
                    "type": "boolean",
                    "description": "Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.\n"
                },
                "enableJumboFrame": {
                    "type": "boolean",
                    "description": "Enable jumbo frame support for spoke gateway. Valid values: true or false. Default value: true.\n"
                },
                "enableLearnedCidrsApproval": {
                    "type": "boolean",
                    "description": "Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.\n"
                },
                "enableMonitorGatewaySubnets": {
                    "type": "boolean",
                    "description": "Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for\ncloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.\n"
                },
                "enablePreserveAsPath": {
                    "type": "boolean",
                    "description": "Enable preserve as_path when advertising manual summary cidrs on BGP spoke gateway.\n"
                },
                "enablePrivateOob": {
                    "type": "boolean",
                    "description": "Enable private OOB.\n"
                },
                "enablePrivateVpcDefaultRoute": {
                    "type": "boolean",
                    "description": "Config Private VPC Default Route.\n"
                },
                "enableSkipPublicRouteTableUpdate": {
                    "type": "boolean",
                    "description": "Skip Public Route Table Update.\n"
                },
                "enableSpotInstance": {
                    "type": "boolean",
                    "description": "Enable spot instance. NOT supported for production deployment.\n"
                },
                "enableVpcDnsServer": {
                    "type": "boolean",
                    "description": "Enable vpc_dns_server for Gateway. Valid values: true, false.\n"
                },
                "faultDomain": {
                    "type": "string",
                    "description": "Fault domain for OCI.\n",
                    "willReplaceOnChanges": true
                },
                "filteredSpokeVpcRoutes": {
                    "type": "string",
                    "description": "A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or\nit’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to\nthis spoke gateway only.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Name of the gateway which is going to be created.\n",
                    "willReplaceOnChanges": true
                },
                "gwSize": {
                    "type": "string",
                    "description": "Size of the gateway instance.\n"
                },
                "haAvailabilityDomain": {
                    "type": "string",
                    "description": "HA availability domain for OCI.\n"
                },
                "haAzureEipNameResourceGroup": {
                    "type": "string",
                    "description": "The name of the public IP address and its resource group in Azure to assign to the HA Spoke Gateway.\n"
                },
                "haEip": {
                    "type": "string",
                    "description": "Public IP address that you want assigned to the HA Spoke Gateway.\n"
                },
                "haFaultDomain": {
                    "type": "string",
                    "description": "HA fault domain for OCI.\n"
                },
                "haGwSize": {
                    "type": "string",
                    "description": "HA Gateway Size.\n"
                },
                "haImageVersion": {
                    "type": "string",
                    "description": "ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the\ngateway to the specified version.\n"
                },
                "haInsaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Spoke HA Gateway. Required for AWS if insane_mode is true and ha_subnet is\nset.\n"
                },
                "haOobAvailabilityZone": {
                    "type": "string",
                    "description": "OOB HA availability zone.\n"
                },
                "haOobManagementSubnet": {
                    "type": "string",
                    "description": "OOB HA management subnet.\n"
                },
                "haPrivateModeSubnetZone": {
                    "type": "string",
                    "description": "Private Mode HA subnet availability zone.\n"
                },
                "haSoftwareVersion": {
                    "type": "string",
                    "description": "ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update\nthe gateway to the specified version. If left blank, the gateway software version will continue to be managed through\nthe aviatrix_controller_config resource.\n"
                },
                "haSubnet": {
                    "type": "string",
                    "description": "HA Subnet. Required if enabling HA for AWS/AWSGov/AWSChina/Azure/AzureChina/OCI/Alibaba Cloud. Optional if enabling HA\nfor GCP.\n"
                },
                "haZone": {
                    "type": "string",
                    "description": "HA Zone. Required if enabling HA for GCP. Optional for Azure.\n"
                },
                "imageVersion": {
                    "type": "string",
                    "description": "image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway\nto the specified version.\n"
                },
                "includedAdvertisedSpokeRoutes": {
                    "type": "string",
                    "description": "A list of comma separated CIDRs to be advertised to on-prem as 'Included CIDR List'. When configured, it will replace\nall advertised routes from this VPC.\n"
                },
                "insaneMode": {
                    "type": "boolean",
                    "description": "Enable Insane Mode for Spoke Gateway. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane\nmode is enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.\n"
                },
                "insaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Spoke Gateway. Required if insane_mode is enabled for AWS cloud.\n"
                },
                "learnedCidrsApprovalMode": {
                    "type": "string",
                    "description": "Set the learned CIDRs approval mode for BGP Spoke Gateway. Only valid when 'enable_learned_cidrs_approval' is set to\ntrue. Currently, only 'gateway' is supported: learned CIDR approval applies to ALL connections. Default value:\n'gateway'.\n"
                },
                "localAsNumber": {
                    "type": "string",
                    "description": "Changes the Aviatrix BGP Spoke Gateway ASN number before you setup Aviatrix BGP Spoke Gateway connection configurations.\n"
                },
                "manageTransitGatewayAttachment": {
                    "type": "boolean",
                    "description": "This parameter is a switch used to determine whether or not to manage attaching this spoke gateway to transit gateways\nusing the aviatrix_spoke_gateway resource. If this is set to false, attaching this spoke gateway to transit gateways\nmust be done using the aviatrix_spoke_transit_attachment resource. Valid values: true, false. Default value: true.\n"
                },
                "monitorExcludeLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.\n"
                },
                "oobAvailabilityZone": {
                    "type": "string",
                    "description": "OOB subnet availability zone.\n",
                    "willReplaceOnChanges": true
                },
                "oobManagementSubnet": {
                    "type": "string",
                    "description": "OOB management subnet.\n",
                    "willReplaceOnChanges": true
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices. Only valid for BGP Spoke\nGateway\n"
                },
                "privateModeLbVpcId": {
                    "type": "string",
                    "description": "Private Mode controller load balancer vpc_id. Required when private mode is enabled for the Controller.\n",
                    "willReplaceOnChanges": true
                },
                "privateModeSubnetZone": {
                    "type": "string",
                    "description": "Subnet availability zone. Required when Private Mode is enabled on the Controller and cloud_type is AWS.\n",
                    "willReplaceOnChanges": true
                },
                "rxQueueSize": {
                    "type": "string",
                    "description": "Gateway ethernet interface RX queue size. Supported for AWS related clouds only.\n"
                },
                "singleAzHa": {
                    "type": "boolean",
                    "description": "Set to 'enabled' if this feature is desired.\n"
                },
                "singleIpSnat": {
                    "type": "boolean",
                    "description": "Specify whether to enable Source NAT feature in 'single_ip' mode on the gateway or not.\n"
                },
                "softwareVersion": {
                    "type": "string",
                    "description": "software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the\ngateway to the specified version. If left blank, the gateway software version will continue to be managed through the\naviatrix_controller_config resource.\n"
                },
                "spokeBgpManualAdvertiseCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Intended CIDR list to be advertised to external BGP router.\n"
                },
                "spotPrice": {
                    "type": "string",
                    "description": "Price for spot instance. NOT supported for production deployment.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "Public Subnet Info.\n",
                    "willReplaceOnChanges": true
                },
                "tagLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Instance tag of cloud provider.\n",
                    "deprecationMessage": "Use tags instead."
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of tags to assign to the spoke gateway.\n"
                },
                "transitGw": {
                    "type": "string",
                    "description": "Specify the transit Gateways to attach to this spoke. Format is a comma-separated list of transit gateway names. For\nexample, 'transit-gw1,transit-gw2'.\n",
                    "deprecationMessage": "Please set `manage_transit_gateway_attachment` to false, and use the standalone aviatrix_spoke_transit_attachment resource instead."
                },
                "tunnelDetectionTime": {
                    "type": "integer",
                    "description": "The IPSec tunnel down detection time for the Spoke Gateway.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC-ID/VNet-Name of cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "vpcReg": {
                    "type": "string",
                    "description": "Region of cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountName",
                "cloudType",
                "gwName",
                "gwSize",
                "subnet",
                "vpcId",
                "vpcReg"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixSpokeGateway resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                    },
                    "allocateNewEip": {
                        "type": "boolean",
                        "description": "If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for\nthis gateway.\n"
                    },
                    "approvedLearnedCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Approved learned CIDRs for BGP Spoke Gateway. Available as of provider version R2.21+.\n"
                    },
                    "availabilityDomain": {
                        "type": "string",
                        "description": "Availability domain for OCI.\n",
                        "willReplaceOnChanges": true
                    },
                    "azureEipNameResourceGroup": {
                        "type": "string",
                        "description": "The name of the public IP address and its resource group in Azure to assign to this Spoke Gateway.\n"
                    },
                    "bgpEcmp": {
                        "type": "boolean",
                        "description": "Enable Equal Cost Multi Path (ECMP) routing for the next hop for BGP Spoke Gateway.\n"
                    },
                    "bgpHoldTime": {
                        "type": "integer",
                        "description": "BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.\n"
                    },
                    "bgpPollingTime": {
                        "type": "integer",
                        "description": "BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.\n"
                    },
                    "cloudInstanceId": {
                        "type": "string",
                        "description": "Cloud instance ID.\n"
                    },
                    "cloudType": {
                        "type": "integer",
                        "description": "Type of cloud service provider.\n"
                    },
                    "customerManagedKeys": {
                        "type": "string",
                        "description": "Customer managed key ID.\n"
                    },
                    "customizedSpokeVpcRoutes": {
                        "type": "string",
                        "description": "A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned\nroutes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to this spoke gateway only.\n"
                    },
                    "disableRoutePropagation": {
                        "type": "boolean",
                        "description": "Disables route propagation on BGP Spoke to attached Transit Gateway. Default: false.\n"
                    },
                    "eip": {
                        "type": "string",
                        "description": "Required when allocate_new_eip is false. It uses specified EIP for this gateway.\n"
                    },
                    "enableActiveStandby": {
                        "type": "boolean",
                        "description": "Enables Active-Standby Mode, available only with HA enabled for BGP Spoke Gateway.\n"
                    },
                    "enableActiveStandbyPreemptive": {
                        "type": "boolean",
                        "description": "Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.\n"
                    },
                    "enableAutoAdvertiseS2cCidrs": {
                        "type": "boolean",
                        "description": "Automatically advertise remote CIDR to Aviatrix Transit Gateway when route based Site2Cloud Tunnel is created.\n"
                    },
                    "enableBgp": {
                        "type": "boolean",
                        "description": "Enable BGP. Default: false.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableEncryptVolume": {
                        "type": "boolean",
                        "description": "Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.\n"
                    },
                    "enableJumboFrame": {
                        "type": "boolean",
                        "description": "Enable jumbo frame support for spoke gateway. Valid values: true or false. Default value: true.\n"
                    },
                    "enableLearnedCidrsApproval": {
                        "type": "boolean",
                        "description": "Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.\n"
                    },
                    "enableMonitorGatewaySubnets": {
                        "type": "boolean",
                        "description": "Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for\ncloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.\n"
                    },
                    "enablePreserveAsPath": {
                        "type": "boolean",
                        "description": "Enable preserve as_path when advertising manual summary cidrs on BGP spoke gateway.\n"
                    },
                    "enablePrivateOob": {
                        "type": "boolean",
                        "description": "Enable private OOB.\n"
                    },
                    "enablePrivateVpcDefaultRoute": {
                        "type": "boolean",
                        "description": "Config Private VPC Default Route.\n"
                    },
                    "enableSkipPublicRouteTableUpdate": {
                        "type": "boolean",
                        "description": "Skip Public Route Table Update.\n"
                    },
                    "enableSpotInstance": {
                        "type": "boolean",
                        "description": "Enable spot instance. NOT supported for production deployment.\n"
                    },
                    "enableVpcDnsServer": {
                        "type": "boolean",
                        "description": "Enable vpc_dns_server for Gateway. Valid values: true, false.\n"
                    },
                    "faultDomain": {
                        "type": "string",
                        "description": "Fault domain for OCI.\n",
                        "willReplaceOnChanges": true
                    },
                    "filteredSpokeVpcRoutes": {
                        "type": "string",
                        "description": "A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or\nit’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to\nthis spoke gateway only.\n"
                    },
                    "gwName": {
                        "type": "string",
                        "description": "Name of the gateway which is going to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "gwSize": {
                        "type": "string",
                        "description": "Size of the gateway instance.\n"
                    },
                    "haAvailabilityDomain": {
                        "type": "string",
                        "description": "HA availability domain for OCI.\n"
                    },
                    "haAzureEipNameResourceGroup": {
                        "type": "string",
                        "description": "The name of the public IP address and its resource group in Azure to assign to the HA Spoke Gateway.\n"
                    },
                    "haCloudInstanceId": {
                        "type": "string",
                        "description": "Cloud instance ID of HA spoke gateway.\n"
                    },
                    "haEip": {
                        "type": "string",
                        "description": "Public IP address that you want assigned to the HA Spoke Gateway.\n"
                    },
                    "haFaultDomain": {
                        "type": "string",
                        "description": "HA fault domain for OCI.\n"
                    },
                    "haGwName": {
                        "type": "string",
                        "description": "Aviatrix spoke gateway unique name of HA spoke gateway.\n"
                    },
                    "haGwSize": {
                        "type": "string",
                        "description": "HA Gateway Size.\n"
                    },
                    "haImageVersion": {
                        "type": "string",
                        "description": "ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the\ngateway to the specified version.\n"
                    },
                    "haInsaneModeAz": {
                        "type": "string",
                        "description": "AZ of subnet being created for Insane Mode Spoke HA Gateway. Required for AWS if insane_mode is true and ha_subnet is\nset.\n"
                    },
                    "haOobAvailabilityZone": {
                        "type": "string",
                        "description": "OOB HA availability zone.\n"
                    },
                    "haOobManagementSubnet": {
                        "type": "string",
                        "description": "OOB HA management subnet.\n"
                    },
                    "haPrivateIp": {
                        "type": "string",
                        "description": "Private IP address of the spoke gateway created.\n"
                    },
                    "haPrivateModeSubnetZone": {
                        "type": "string",
                        "description": "Private Mode HA subnet availability zone.\n"
                    },
                    "haPublicIp": {
                        "type": "string",
                        "description": "Public IP address of the HA Spoke Gateway.\n"
                    },
                    "haSecurityGroupId": {
                        "type": "string",
                        "description": "HA security group used for the spoke gateway.\n"
                    },
                    "haSoftwareVersion": {
                        "type": "string",
                        "description": "ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update\nthe gateway to the specified version. If left blank, the gateway software version will continue to be managed through\nthe aviatrix_controller_config resource.\n"
                    },
                    "haSubnet": {
                        "type": "string",
                        "description": "HA Subnet. Required if enabling HA for AWS/AWSGov/AWSChina/Azure/AzureChina/OCI/Alibaba Cloud. Optional if enabling HA\nfor GCP.\n"
                    },
                    "haZone": {
                        "type": "string",
                        "description": "HA Zone. Required if enabling HA for GCP. Optional for Azure.\n"
                    },
                    "imageVersion": {
                        "type": "string",
                        "description": "image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway\nto the specified version.\n"
                    },
                    "includedAdvertisedSpokeRoutes": {
                        "type": "string",
                        "description": "A list of comma separated CIDRs to be advertised to on-prem as 'Included CIDR List'. When configured, it will replace\nall advertised routes from this VPC.\n"
                    },
                    "insaneMode": {
                        "type": "boolean",
                        "description": "Enable Insane Mode for Spoke Gateway. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane\nmode is enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.\n"
                    },
                    "insaneModeAz": {
                        "type": "string",
                        "description": "AZ of subnet being created for Insane Mode Spoke Gateway. Required if insane_mode is enabled for AWS cloud.\n"
                    },
                    "learnedCidrsApprovalMode": {
                        "type": "string",
                        "description": "Set the learned CIDRs approval mode for BGP Spoke Gateway. Only valid when 'enable_learned_cidrs_approval' is set to\ntrue. Currently, only 'gateway' is supported: learned CIDR approval applies to ALL connections. Default value:\n'gateway'.\n"
                    },
                    "localAsNumber": {
                        "type": "string",
                        "description": "Changes the Aviatrix BGP Spoke Gateway ASN number before you setup Aviatrix BGP Spoke Gateway connection configurations.\n"
                    },
                    "manageTransitGatewayAttachment": {
                        "type": "boolean",
                        "description": "This parameter is a switch used to determine whether or not to manage attaching this spoke gateway to transit gateways\nusing the aviatrix_spoke_gateway resource. If this is set to false, attaching this spoke gateway to transit gateways\nmust be done using the aviatrix_spoke_transit_attachment resource. Valid values: true, false. Default value: true.\n"
                    },
                    "monitorExcludeLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.\n"
                    },
                    "oobAvailabilityZone": {
                        "type": "string",
                        "description": "OOB subnet availability zone.\n",
                        "willReplaceOnChanges": true
                    },
                    "oobManagementSubnet": {
                        "type": "string",
                        "description": "OOB management subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "prependAsPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices. Only valid for BGP Spoke\nGateway\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "Private IP address of the spoke gateway created.\n"
                    },
                    "privateModeLbVpcId": {
                        "type": "string",
                        "description": "Private Mode controller load balancer vpc_id. Required when private mode is enabled for the Controller.\n",
                        "willReplaceOnChanges": true
                    },
                    "privateModeSubnetZone": {
                        "type": "string",
                        "description": "Subnet availability zone. Required when Private Mode is enabled on the Controller and cloud_type is AWS.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "Public IP address of the Spoke Gateway created.\n"
                    },
                    "rxQueueSize": {
                        "type": "string",
                        "description": "Gateway ethernet interface RX queue size. Supported for AWS related clouds only.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "Security group used for the spoke gateway.\n"
                    },
                    "singleAzHa": {
                        "type": "boolean",
                        "description": "Set to 'enabled' if this feature is desired.\n"
                    },
                    "singleIpSnat": {
                        "type": "boolean",
                        "description": "Specify whether to enable Source NAT feature in 'single_ip' mode on the gateway or not.\n"
                    },
                    "softwareVersion": {
                        "type": "string",
                        "description": "software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the\ngateway to the specified version. If left blank, the gateway software version will continue to be managed through the\naviatrix_controller_config resource.\n"
                    },
                    "spokeBgpManualAdvertiseCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Intended CIDR list to be advertised to external BGP router.\n"
                    },
                    "spotPrice": {
                        "type": "string",
                        "description": "Price for spot instance. NOT supported for production deployment.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "Public Subnet Info.\n",
                        "willReplaceOnChanges": true
                    },
                    "tagLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Instance tag of cloud provider.\n",
                        "deprecationMessage": "Use tags instead."
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of tags to assign to the spoke gateway.\n"
                    },
                    "transitGw": {
                        "type": "string",
                        "description": "Specify the transit Gateways to attach to this spoke. Format is a comma-separated list of transit gateway names. For\nexample, 'transit-gw1,transit-gw2'.\n",
                        "deprecationMessage": "Please set `manage_transit_gateway_attachment` to false, and use the standalone aviatrix_spoke_transit_attachment resource instead."
                    },
                    "tunnelDetectionTime": {
                        "type": "integer",
                        "description": "The IPSec tunnel down detection time for the Spoke Gateway.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "VPC-ID/VNet-Name of cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcReg": {
                        "type": "string",
                        "description": "Region of cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixSpokeGatewaySubnetGroup:AviatrixSpokeGatewaySubnetGroup": {
            "properties": {
                "gwName": {
                    "type": "string",
                    "description": "Spoke gateway name.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Subnet group name.\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of subnets in the subnet group.\n"
                }
            },
            "required": [
                "gwName",
                "name"
            ],
            "inputProperties": {
                "gwName": {
                    "type": "string",
                    "description": "Spoke gateway name.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Subnet group name.\n",
                    "willReplaceOnChanges": true
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of subnets in the subnet group.\n"
                }
            },
            "requiredInputs": [
                "gwName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixSpokeGatewaySubnetGroup resources.\n",
                "properties": {
                    "gwName": {
                        "type": "string",
                        "description": "Spoke gateway name.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Subnet group name.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of subnets in the subnet group.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixSpokeTransitAttachment:AviatrixSpokeTransitAttachment": {
            "properties": {
                "enableMaxPerformance": {
                    "type": "boolean",
                    "description": "Indicates whether the maximum amount of HPE tunnels will be created. Only valid when transit and spoke gateways are each\nlaunched in Insane Mode and in the same cloud type. Available as of provider version R2.22.2+.\n"
                },
                "routeTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Learned routes will be propagated to these route tables.\n"
                },
                "spokeBgpEnabled": {
                    "type": "boolean",
                    "description": "Indicates whether the spoke gateway is BGP enabled or not.\n"
                },
                "spokeGwName": {
                    "type": "string",
                    "description": "Name of the spoke gateway to attach to transit network.\n"
                },
                "spokePrependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on spoke gateway.\n"
                },
                "transitGwName": {
                    "type": "string",
                    "description": "Name of the transit gateway to attach the spoke gateway to.\n"
                },
                "transitPrependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.\n"
                }
            },
            "required": [
                "spokeBgpEnabled",
                "spokeGwName",
                "transitGwName"
            ],
            "inputProperties": {
                "enableMaxPerformance": {
                    "type": "boolean",
                    "description": "Indicates whether the maximum amount of HPE tunnels will be created. Only valid when transit and spoke gateways are each\nlaunched in Insane Mode and in the same cloud type. Available as of provider version R2.22.2+.\n",
                    "willReplaceOnChanges": true
                },
                "routeTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Learned routes will be propagated to these route tables.\n",
                    "willReplaceOnChanges": true
                },
                "spokeGwName": {
                    "type": "string",
                    "description": "Name of the spoke gateway to attach to transit network.\n",
                    "willReplaceOnChanges": true
                },
                "spokePrependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on spoke gateway.\n"
                },
                "transitGwName": {
                    "type": "string",
                    "description": "Name of the transit gateway to attach the spoke gateway to.\n",
                    "willReplaceOnChanges": true
                },
                "transitPrependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.\n"
                }
            },
            "requiredInputs": [
                "spokeGwName",
                "transitGwName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixSpokeTransitAttachment resources.\n",
                "properties": {
                    "enableMaxPerformance": {
                        "type": "boolean",
                        "description": "Indicates whether the maximum amount of HPE tunnels will be created. Only valid when transit and spoke gateways are each\nlaunched in Insane Mode and in the same cloud type. Available as of provider version R2.22.2+.\n",
                        "willReplaceOnChanges": true
                    },
                    "routeTables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Learned routes will be propagated to these route tables.\n",
                        "willReplaceOnChanges": true
                    },
                    "spokeBgpEnabled": {
                        "type": "boolean",
                        "description": "Indicates whether the spoke gateway is BGP enabled or not.\n"
                    },
                    "spokeGwName": {
                        "type": "string",
                        "description": "Name of the spoke gateway to attach to transit network.\n",
                        "willReplaceOnChanges": true
                    },
                    "spokePrependAsPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on spoke gateway.\n"
                    },
                    "transitGwName": {
                        "type": "string",
                        "description": "Name of the transit gateway to attach the spoke gateway to.\n",
                        "willReplaceOnChanges": true
                    },
                    "transitPrependAsPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixSpokeVpc:AviatrixSpokeVpc": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                },
                "cloudInstanceId": {
                    "type": "string",
                    "description": "Cloud instance ID.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider.\n"
                },
                "enableNat": {
                    "type": "string",
                    "description": "Specify whether enabling NAT feature on the gateway or not.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Name of the gateway which is going to be created.\n"
                },
                "haGwSize": {
                    "type": "string",
                    "description": "HA Gateway Size.\n"
                },
                "haSubnet": {
                    "type": "string",
                    "description": "HA Subnet. Required if enabling HA for AWS/Azure.\n"
                },
                "haZone": {
                    "type": "string",
                    "description": "HA Zone. Required if enabling HA for GCP.\n"
                },
                "singleAzHa": {
                    "type": "string",
                    "description": "Set to 'enabled' if this feature is desired.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "Public Subnet Info.\n"
                },
                "tagLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Instance tag of cloud provider.\n"
                },
                "transitGw": {
                    "type": "string",
                    "description": "Specify the transit Gateway.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC-ID/VNet-Name of cloud provider.\n"
                },
                "vpcReg": {
                    "type": "string",
                    "description": "Region of cloud provider.\n"
                },
                "vpcSize": {
                    "type": "string",
                    "description": "Size of the gateway instance.\n"
                }
            },
            "required": [
                "accountName",
                "cloudInstanceId",
                "cloudType",
                "gwName",
                "subnet",
                "vpcId",
                "vpcReg",
                "vpcSize"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider.\n"
                },
                "enableNat": {
                    "type": "string",
                    "description": "Specify whether enabling NAT feature on the gateway or not.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Name of the gateway which is going to be created.\n"
                },
                "haGwSize": {
                    "type": "string",
                    "description": "HA Gateway Size.\n"
                },
                "haSubnet": {
                    "type": "string",
                    "description": "HA Subnet. Required if enabling HA for AWS/Azure.\n"
                },
                "haZone": {
                    "type": "string",
                    "description": "HA Zone. Required if enabling HA for GCP.\n"
                },
                "singleAzHa": {
                    "type": "string",
                    "description": "Set to 'enabled' if this feature is desired.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "Public Subnet Info.\n"
                },
                "tagLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Instance tag of cloud provider.\n"
                },
                "transitGw": {
                    "type": "string",
                    "description": "Specify the transit Gateway.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC-ID/VNet-Name of cloud provider.\n"
                },
                "vpcReg": {
                    "type": "string",
                    "description": "Region of cloud provider.\n"
                },
                "vpcSize": {
                    "type": "string",
                    "description": "Size of the gateway instance.\n"
                }
            },
            "requiredInputs": [
                "accountName",
                "cloudType",
                "gwName",
                "subnet",
                "vpcId",
                "vpcReg",
                "vpcSize"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixSpokeVpc resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                    },
                    "cloudInstanceId": {
                        "type": "string",
                        "description": "Cloud instance ID.\n"
                    },
                    "cloudType": {
                        "type": "integer",
                        "description": "Type of cloud service provider.\n"
                    },
                    "enableNat": {
                        "type": "string",
                        "description": "Specify whether enabling NAT feature on the gateway or not.\n"
                    },
                    "gwName": {
                        "type": "string",
                        "description": "Name of the gateway which is going to be created.\n"
                    },
                    "haGwSize": {
                        "type": "string",
                        "description": "HA Gateway Size.\n"
                    },
                    "haSubnet": {
                        "type": "string",
                        "description": "HA Subnet. Required if enabling HA for AWS/Azure.\n"
                    },
                    "haZone": {
                        "type": "string",
                        "description": "HA Zone. Required if enabling HA for GCP.\n"
                    },
                    "singleAzHa": {
                        "type": "string",
                        "description": "Set to 'enabled' if this feature is desired.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "Public Subnet Info.\n"
                    },
                    "tagLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Instance tag of cloud provider.\n"
                    },
                    "transitGw": {
                        "type": "string",
                        "description": "Specify the transit Gateway.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "VPC-ID/VNet-Name of cloud provider.\n"
                    },
                    "vpcReg": {
                        "type": "string",
                        "description": "Region of cloud provider.\n"
                    },
                    "vpcSize": {
                        "type": "string",
                        "description": "Size of the gateway instance.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixSumologicForwarder:AviatrixSumologicForwarder": {
            "properties": {
                "accessId": {
                    "type": "string",
                    "description": "Access ID.\n"
                },
                "accessKey": {
                    "type": "string",
                    "description": "Access key.\n"
                },
                "customConfiguration": {
                    "type": "string",
                    "description": "Custom configuration.\n"
                },
                "excludedGateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded gateways.\n"
                },
                "sourceCategory": {
                    "type": "string",
                    "description": "Source category.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Enabled or not.\n"
                }
            },
            "required": [
                "accessId",
                "accessKey",
                "status"
            ],
            "inputProperties": {
                "accessId": {
                    "type": "string",
                    "description": "Access ID.\n",
                    "willReplaceOnChanges": true
                },
                "accessKey": {
                    "type": "string",
                    "description": "Access key.\n",
                    "willReplaceOnChanges": true
                },
                "customConfiguration": {
                    "type": "string",
                    "description": "Custom configuration.\n",
                    "willReplaceOnChanges": true
                },
                "excludedGateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded gateways.\n",
                    "willReplaceOnChanges": true
                },
                "sourceCategory": {
                    "type": "string",
                    "description": "Source category.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accessId",
                "accessKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixSumologicForwarder resources.\n",
                "properties": {
                    "accessId": {
                        "type": "string",
                        "description": "Access ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "accessKey": {
                        "type": "string",
                        "description": "Access key.\n",
                        "willReplaceOnChanges": true
                    },
                    "customConfiguration": {
                        "type": "string",
                        "description": "Custom configuration.\n",
                        "willReplaceOnChanges": true
                    },
                    "excludedGateways": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of excluded gateways.\n",
                        "willReplaceOnChanges": true
                    },
                    "sourceCategory": {
                        "type": "string",
                        "description": "Source category.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Enabled or not.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixTransPeer:AviatrixTransPeer": {
            "properties": {
                "nexthop": {
                    "type": "string",
                    "description": "Name of nexthop gateway.\n"
                },
                "reachableCidr": {
                    "type": "string",
                    "description": "Destination CIDR.\n"
                },
                "source": {
                    "type": "string",
                    "description": "Name of Source gateway.\n"
                }
            },
            "required": [
                "nexthop",
                "reachableCidr",
                "source"
            ],
            "inputProperties": {
                "nexthop": {
                    "type": "string",
                    "description": "Name of nexthop gateway.\n",
                    "willReplaceOnChanges": true
                },
                "reachableCidr": {
                    "type": "string",
                    "description": "Destination CIDR.\n",
                    "willReplaceOnChanges": true
                },
                "source": {
                    "type": "string",
                    "description": "Name of Source gateway.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "nexthop",
                "reachableCidr",
                "source"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixTransPeer resources.\n",
                "properties": {
                    "nexthop": {
                        "type": "string",
                        "description": "Name of nexthop gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "reachableCidr": {
                        "type": "string",
                        "description": "Destination CIDR.\n",
                        "willReplaceOnChanges": true
                    },
                    "source": {
                        "type": "string",
                        "description": "Name of Source gateway.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixTransitCloudnConn:AviatrixTransitCloudnConn": {
            "properties": {
                "approvedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).\n"
                },
                "backupCloudnAsNum": {
                    "type": "string",
                    "description": "Backup Aviatrix CloudN BGP ASN.\n"
                },
                "backupCloudnIp": {
                    "type": "string",
                    "description": "Backup Aviatrix CloudN IP Address.\n"
                },
                "backupCloudnNeighborAsNum": {
                    "type": "string",
                    "description": "Backup Aviatrix CloudN LAN Interface Neighbor's BGP ASN.\n"
                },
                "backupCloudnNeighborIp": {
                    "type": "string",
                    "description": "Backup Aviatrix CloudN LAN Interface Neighbor's IP Address.\n"
                },
                "backupDirectConnect": {
                    "type": "boolean",
                    "description": "Enable direct connect to Backup Aviatrix CloudN over private network.\n"
                },
                "backupInsaneMode": {
                    "type": "boolean",
                    "description": "Enable Insane Mode for connection to Backup Aviatrix CloudN.\n"
                },
                "bgpLocalAsNum": {
                    "type": "string",
                    "description": "BGP local ASN (Autonomous System Number). Integer between 1-4294967294.\n"
                },
                "cloudnAsNum": {
                    "type": "string",
                    "description": "Aviatrix CloudN BGP ASN (Autonomous System Number). Integer between 1-4294967294.\n"
                },
                "cloudnNeighborAsNum": {
                    "type": "string",
                    "description": "CloudN LAN Interface Neighbor's BGP ASN.\n"
                },
                "cloudnNeighborIp": {
                    "type": "string",
                    "description": "Aviatrix CloudN LAN Interface Neighbor's IP Address.\n"
                },
                "cloudnRemoteIp": {
                    "type": "string",
                    "description": "Aviatrix CloudN IP Address.\n"
                },
                "connectionName": {
                    "type": "string",
                    "description": "The name of the transit Aviatrix CloudN connection.\n"
                },
                "directConnect": {
                    "type": "boolean",
                    "description": "Enable Direct Connect for private network infrastructure.\n"
                },
                "enableHa": {
                    "type": "boolean",
                    "description": "Enable connection to HA CloudN.\n"
                },
                "enableLearnedCidrsApproval": {
                    "type": "boolean",
                    "description": "Enable learned CIDRs approval.\n"
                },
                "enableLoadBalancing": {
                    "type": "boolean",
                    "description": "Enable load balancing between Aviatrix CloudN and Backup CloudN.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "The name of the Transit Gateway.\n"
                },
                "insaneMode": {
                    "type": "boolean",
                    "description": "Enable Insane Mode for this connection.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of the VPC where the Transit Gateway is located.\n"
                }
            },
            "required": [
                "approvedCidrs",
                "bgpLocalAsNum",
                "cloudnAsNum",
                "cloudnNeighborAsNum",
                "cloudnNeighborIp",
                "cloudnRemoteIp",
                "connectionName",
                "gwName",
                "vpcId"
            ],
            "inputProperties": {
                "approvedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).\n"
                },
                "backupCloudnAsNum": {
                    "type": "string",
                    "description": "Backup Aviatrix CloudN BGP ASN.\n",
                    "willReplaceOnChanges": true
                },
                "backupCloudnIp": {
                    "type": "string",
                    "description": "Backup Aviatrix CloudN IP Address.\n",
                    "willReplaceOnChanges": true
                },
                "backupCloudnNeighborAsNum": {
                    "type": "string",
                    "description": "Backup Aviatrix CloudN LAN Interface Neighbor's BGP ASN.\n",
                    "willReplaceOnChanges": true
                },
                "backupCloudnNeighborIp": {
                    "type": "string",
                    "description": "Backup Aviatrix CloudN LAN Interface Neighbor's IP Address.\n",
                    "willReplaceOnChanges": true
                },
                "backupDirectConnect": {
                    "type": "boolean",
                    "description": "Enable direct connect to Backup Aviatrix CloudN over private network.\n",
                    "willReplaceOnChanges": true
                },
                "backupInsaneMode": {
                    "type": "boolean",
                    "description": "Enable Insane Mode for connection to Backup Aviatrix CloudN.\n",
                    "willReplaceOnChanges": true
                },
                "bgpLocalAsNum": {
                    "type": "string",
                    "description": "BGP local ASN (Autonomous System Number). Integer between 1-4294967294.\n",
                    "willReplaceOnChanges": true
                },
                "cloudnAsNum": {
                    "type": "string",
                    "description": "Aviatrix CloudN BGP ASN (Autonomous System Number). Integer between 1-4294967294.\n",
                    "willReplaceOnChanges": true
                },
                "cloudnNeighborAsNum": {
                    "type": "string",
                    "description": "CloudN LAN Interface Neighbor's BGP ASN.\n",
                    "willReplaceOnChanges": true
                },
                "cloudnNeighborIp": {
                    "type": "string",
                    "description": "Aviatrix CloudN LAN Interface Neighbor's IP Address.\n",
                    "willReplaceOnChanges": true
                },
                "cloudnRemoteIp": {
                    "type": "string",
                    "description": "Aviatrix CloudN IP Address.\n",
                    "willReplaceOnChanges": true
                },
                "connectionName": {
                    "type": "string",
                    "description": "The name of the transit Aviatrix CloudN connection.\n",
                    "willReplaceOnChanges": true
                },
                "directConnect": {
                    "type": "boolean",
                    "description": "Enable Direct Connect for private network infrastructure.\n",
                    "willReplaceOnChanges": true
                },
                "enableHa": {
                    "type": "boolean",
                    "description": "Enable connection to HA CloudN.\n",
                    "willReplaceOnChanges": true
                },
                "enableLearnedCidrsApproval": {
                    "type": "boolean",
                    "description": "Enable learned CIDRs approval.\n"
                },
                "enableLoadBalancing": {
                    "type": "boolean",
                    "description": "Enable load balancing between Aviatrix CloudN and Backup CloudN.\n",
                    "willReplaceOnChanges": true
                },
                "gwName": {
                    "type": "string",
                    "description": "The name of the Transit Gateway.\n",
                    "willReplaceOnChanges": true
                },
                "insaneMode": {
                    "type": "boolean",
                    "description": "Enable Insane Mode for this connection.\n",
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of the VPC where the Transit Gateway is located.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "bgpLocalAsNum",
                "cloudnAsNum",
                "cloudnNeighborAsNum",
                "cloudnNeighborIp",
                "cloudnRemoteIp",
                "connectionName",
                "gwName",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixTransitCloudnConn resources.\n",
                "properties": {
                    "approvedCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).\n"
                    },
                    "backupCloudnAsNum": {
                        "type": "string",
                        "description": "Backup Aviatrix CloudN BGP ASN.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupCloudnIp": {
                        "type": "string",
                        "description": "Backup Aviatrix CloudN IP Address.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupCloudnNeighborAsNum": {
                        "type": "string",
                        "description": "Backup Aviatrix CloudN LAN Interface Neighbor's BGP ASN.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupCloudnNeighborIp": {
                        "type": "string",
                        "description": "Backup Aviatrix CloudN LAN Interface Neighbor's IP Address.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupDirectConnect": {
                        "type": "boolean",
                        "description": "Enable direct connect to Backup Aviatrix CloudN over private network.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupInsaneMode": {
                        "type": "boolean",
                        "description": "Enable Insane Mode for connection to Backup Aviatrix CloudN.\n",
                        "willReplaceOnChanges": true
                    },
                    "bgpLocalAsNum": {
                        "type": "string",
                        "description": "BGP local ASN (Autonomous System Number). Integer between 1-4294967294.\n",
                        "willReplaceOnChanges": true
                    },
                    "cloudnAsNum": {
                        "type": "string",
                        "description": "Aviatrix CloudN BGP ASN (Autonomous System Number). Integer between 1-4294967294.\n",
                        "willReplaceOnChanges": true
                    },
                    "cloudnNeighborAsNum": {
                        "type": "string",
                        "description": "CloudN LAN Interface Neighbor's BGP ASN.\n",
                        "willReplaceOnChanges": true
                    },
                    "cloudnNeighborIp": {
                        "type": "string",
                        "description": "Aviatrix CloudN LAN Interface Neighbor's IP Address.\n",
                        "willReplaceOnChanges": true
                    },
                    "cloudnRemoteIp": {
                        "type": "string",
                        "description": "Aviatrix CloudN IP Address.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionName": {
                        "type": "string",
                        "description": "The name of the transit Aviatrix CloudN connection.\n",
                        "willReplaceOnChanges": true
                    },
                    "directConnect": {
                        "type": "boolean",
                        "description": "Enable Direct Connect for private network infrastructure.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableHa": {
                        "type": "boolean",
                        "description": "Enable connection to HA CloudN.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableLearnedCidrsApproval": {
                        "type": "boolean",
                        "description": "Enable learned CIDRs approval.\n"
                    },
                    "enableLoadBalancing": {
                        "type": "boolean",
                        "description": "Enable load balancing between Aviatrix CloudN and Backup CloudN.\n",
                        "willReplaceOnChanges": true
                    },
                    "gwName": {
                        "type": "string",
                        "description": "The name of the Transit Gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "insaneMode": {
                        "type": "boolean",
                        "description": "Enable Insane Mode for this connection.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of the VPC where the Transit Gateway is located.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixTransitExternalDeviceConn:AviatrixTransitExternalDeviceConn": {
            "properties": {
                "approvedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).\n"
                },
                "backupBgpMd5Key": {
                    "type": "string",
                    "description": "Backup BGP MD5 authentication key.\n"
                },
                "backupBgpRemoteAsNum": {
                    "type": "string",
                    "description": "Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.\n"
                },
                "backupDirectConnect": {
                    "type": "boolean",
                    "description": "Backup direct connect for backup external device.\n"
                },
                "backupLocalLanIp": {
                    "type": "string",
                    "description": "Backup Local LAN IP. Required for GCP BGP over LAN Connection with HA enabled.\n"
                },
                "backupLocalTunnelCidr": {
                    "type": "string",
                    "description": "Source CIDR for the tunnel from the backup Aviatrix transit gateway.\n"
                },
                "backupPreSharedKey": {
                    "type": "string",
                    "description": "Backup pre shared key.\n"
                },
                "backupRemoteGatewayIp": {
                    "type": "string",
                    "description": "Backup remote gateway IP.\n"
                },
                "backupRemoteLanIp": {
                    "type": "string",
                    "description": "Backup Remote LAN IP.\n"
                },
                "backupRemoteTunnelCidr": {
                    "type": "string",
                    "description": "Destination CIDR for the tunnel to the backup external device.\n"
                },
                "bgpLocalAsNum": {
                    "type": "string",
                    "description": "BGP local ASN (Autonomous System Number). Integer between 1-4294967294.\n"
                },
                "bgpMd5Key": {
                    "type": "string",
                    "description": "BGP MD5 authentication key.\n"
                },
                "bgpRemoteAsNum": {
                    "type": "string",
                    "description": "BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.\n"
                },
                "connectionName": {
                    "type": "string",
                    "description": "The name of the transit external device connection which is going to be created.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Connection type. Valid values: 'bgp', 'static'. Default value: 'bgp'.\n"
                },
                "customAlgorithms": {
                    "type": "boolean",
                    "description": "Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.\n"
                },
                "directConnect": {
                    "type": "boolean",
                    "description": "Set true for private network infrastructure.\n"
                },
                "enableBgpLanActivemesh": {
                    "type": "boolean",
                    "description": "Switch to enable BGP LAN ActiveMesh. Only valid for GCP with Remote Gateway HA enabled. Default: false. Available as of\nprovider version R2.21+.\n"
                },
                "enableEdgeSegmentation": {
                    "type": "boolean",
                    "description": "Switch to allow this connection to communicate with a Network Domain via Connection Policy.\n"
                },
                "enableEventTriggeredHa": {
                    "type": "boolean",
                    "description": "Enable Event Triggered HA.\n"
                },
                "enableIkev2": {
                    "type": "boolean",
                    "description": "Set as true if use IKEv2.\n"
                },
                "enableJumboFrame": {
                    "type": "boolean",
                    "description": "Enable Jumbo Frame for the transit external device connection. Valid values: true, false.\n"
                },
                "enableLearnedCidrsApproval": {
                    "type": "boolean",
                    "description": "Enable learned CIDR approval for the connection. Only valid with 'connection_type' = 'bgp'. Requires the\ntransit_gateway's 'learned_cidrs_approval_mode' attribute be set to 'connection'. Valid values: true, false. Default\nvalue: false. Available as of provider version R2.18+.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Name of the Transit Gateway.\n"
                },
                "haEnabled": {
                    "type": "boolean",
                    "description": "Set as true if there are two external devices.\n"
                },
                "localLanIp": {
                    "type": "string",
                    "description": "Local LAN IP. Required for GCP BGP over LAN Connection.\n"
                },
                "localTunnelCidr": {
                    "type": "string",
                    "description": "Source CIDR for the tunnel from the Aviatrix transit gateway.\n"
                },
                "manualBgpAdvertisedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Configure manual BGP advertised CIDRs for this connection. Only valid with 'connection_type' = 'bgp'. Available as of\nprovider version R2.18+.\n"
                },
                "phase1Authentication": {
                    "type": "string",
                    "description": "Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.\n"
                },
                "phase1DhGroups": {
                    "type": "string",
                    "description": "Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.\n"
                },
                "phase1Encryption": {
                    "type": "string",
                    "description": "Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',\n'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.\n"
                },
                "phase1RemoteIdentifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Phase 1 remote identifier of the IPsec tunnel.\n"
                },
                "phase2Authentication": {
                    "type": "string",
                    "description": "Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.\n"
                },
                "phase2DhGroups": {
                    "type": "string",
                    "description": "Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.\n"
                },
                "phase2Encryption": {
                    "type": "string",
                    "description": "Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',\n'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.\n"
                },
                "preSharedKey": {
                    "type": "string",
                    "description": "If left blank, the pre-shared key will be auto generated.\n"
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.\n"
                },
                "remoteGatewayIp": {
                    "type": "string",
                    "description": "Remote Gateway IP.\n"
                },
                "remoteLanIp": {
                    "type": "string",
                    "description": "Remote LAN IP.\n"
                },
                "remoteSubnet": {
                    "type": "string",
                    "description": "Remote CIDRs joined as a string with ','. Required for a 'static' type connection.\n"
                },
                "remoteTunnelCidr": {
                    "type": "string",
                    "description": "Destination CIDR for the tunnel to the external device.\n"
                },
                "remoteVpcName": {
                    "type": "string",
                    "description": "Name of the remote VPC for a LAN BGP connection. Only valid when 'connection_type' = 'bgp' and tunnel_protocol' = 'LAN'\nwith an Azure transit gateway. Must be in the form \"\u003cVNET-name\u003e:\u003cresource-group-name\u003e\". Available as of provider version\nR2.18+.\n"
                },
                "switchToHaStandbyGateway": {
                    "type": "boolean",
                    "description": "Only valid for Transit Gateway's with Active-Standby Mode enabled. Valid values: true, false. Default: false.\n"
                },
                "tunnelProtocol": {
                    "type": "string",
                    "description": "Tunnel Protocol. Valid values: 'IPsec', 'GRE' or 'LAN'. Default value: 'IPsec'. Case insensitive.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "ID of the VPC where the Transit Gateway is located. For GCP BGP over LAN connection, it is in the format of\n'vpc_name~-~account_name'.\n"
                }
            },
            "required": [
                "approvedCidrs",
                "backupLocalLanIp",
                "backupLocalTunnelCidr",
                "backupRemoteTunnelCidr",
                "connectionName",
                "gwName",
                "localLanIp",
                "localTunnelCidr",
                "remoteTunnelCidr",
                "vpcId"
            ],
            "inputProperties": {
                "approvedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).\n"
                },
                "backupBgpMd5Key": {
                    "type": "string",
                    "description": "Backup BGP MD5 authentication key.\n"
                },
                "backupBgpRemoteAsNum": {
                    "type": "string",
                    "description": "Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.\n",
                    "willReplaceOnChanges": true
                },
                "backupDirectConnect": {
                    "type": "boolean",
                    "description": "Backup direct connect for backup external device.\n",
                    "willReplaceOnChanges": true
                },
                "backupLocalLanIp": {
                    "type": "string",
                    "description": "Backup Local LAN IP. Required for GCP BGP over LAN Connection with HA enabled.\n",
                    "willReplaceOnChanges": true
                },
                "backupLocalTunnelCidr": {
                    "type": "string",
                    "description": "Source CIDR for the tunnel from the backup Aviatrix transit gateway.\n",
                    "willReplaceOnChanges": true
                },
                "backupPreSharedKey": {
                    "type": "string",
                    "description": "Backup pre shared key.\n",
                    "willReplaceOnChanges": true
                },
                "backupRemoteGatewayIp": {
                    "type": "string",
                    "description": "Backup remote gateway IP.\n",
                    "willReplaceOnChanges": true
                },
                "backupRemoteLanIp": {
                    "type": "string",
                    "description": "Backup Remote LAN IP.\n",
                    "willReplaceOnChanges": true
                },
                "backupRemoteTunnelCidr": {
                    "type": "string",
                    "description": "Destination CIDR for the tunnel to the backup external device.\n",
                    "willReplaceOnChanges": true
                },
                "bgpLocalAsNum": {
                    "type": "string",
                    "description": "BGP local ASN (Autonomous System Number). Integer between 1-4294967294.\n",
                    "willReplaceOnChanges": true
                },
                "bgpMd5Key": {
                    "type": "string",
                    "description": "BGP MD5 authentication key.\n"
                },
                "bgpRemoteAsNum": {
                    "type": "string",
                    "description": "BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.\n",
                    "willReplaceOnChanges": true
                },
                "connectionName": {
                    "type": "string",
                    "description": "The name of the transit external device connection which is going to be created.\n",
                    "willReplaceOnChanges": true
                },
                "connectionType": {
                    "type": "string",
                    "description": "Connection type. Valid values: 'bgp', 'static'. Default value: 'bgp'.\n",
                    "willReplaceOnChanges": true
                },
                "customAlgorithms": {
                    "type": "boolean",
                    "description": "Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.\n",
                    "willReplaceOnChanges": true
                },
                "directConnect": {
                    "type": "boolean",
                    "description": "Set true for private network infrastructure.\n",
                    "willReplaceOnChanges": true
                },
                "enableBgpLanActivemesh": {
                    "type": "boolean",
                    "description": "Switch to enable BGP LAN ActiveMesh. Only valid for GCP with Remote Gateway HA enabled. Default: false. Available as of\nprovider version R2.21+.\n",
                    "willReplaceOnChanges": true
                },
                "enableEdgeSegmentation": {
                    "type": "boolean",
                    "description": "Switch to allow this connection to communicate with a Network Domain via Connection Policy.\n",
                    "willReplaceOnChanges": true
                },
                "enableEventTriggeredHa": {
                    "type": "boolean",
                    "description": "Enable Event Triggered HA.\n"
                },
                "enableIkev2": {
                    "type": "boolean",
                    "description": "Set as true if use IKEv2.\n",
                    "willReplaceOnChanges": true
                },
                "enableJumboFrame": {
                    "type": "boolean",
                    "description": "Enable Jumbo Frame for the transit external device connection. Valid values: true, false.\n"
                },
                "enableLearnedCidrsApproval": {
                    "type": "boolean",
                    "description": "Enable learned CIDR approval for the connection. Only valid with 'connection_type' = 'bgp'. Requires the\ntransit_gateway's 'learned_cidrs_approval_mode' attribute be set to 'connection'. Valid values: true, false. Default\nvalue: false. Available as of provider version R2.18+.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Name of the Transit Gateway.\n",
                    "willReplaceOnChanges": true
                },
                "haEnabled": {
                    "type": "boolean",
                    "description": "Set as true if there are two external devices.\n",
                    "willReplaceOnChanges": true
                },
                "localLanIp": {
                    "type": "string",
                    "description": "Local LAN IP. Required for GCP BGP over LAN Connection.\n",
                    "willReplaceOnChanges": true
                },
                "localTunnelCidr": {
                    "type": "string",
                    "description": "Source CIDR for the tunnel from the Aviatrix transit gateway.\n",
                    "willReplaceOnChanges": true
                },
                "manualBgpAdvertisedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Configure manual BGP advertised CIDRs for this connection. Only valid with 'connection_type' = 'bgp'. Available as of\nprovider version R2.18+.\n"
                },
                "phase1Authentication": {
                    "type": "string",
                    "description": "Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.\n",
                    "willReplaceOnChanges": true
                },
                "phase1DhGroups": {
                    "type": "string",
                    "description": "Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.\n",
                    "willReplaceOnChanges": true
                },
                "phase1Encryption": {
                    "type": "string",
                    "description": "Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',\n'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.\n",
                    "willReplaceOnChanges": true
                },
                "phase1RemoteIdentifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Phase 1 remote identifier of the IPsec tunnel.\n"
                },
                "phase2Authentication": {
                    "type": "string",
                    "description": "Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.\n",
                    "willReplaceOnChanges": true
                },
                "phase2DhGroups": {
                    "type": "string",
                    "description": "Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.\n",
                    "willReplaceOnChanges": true
                },
                "phase2Encryption": {
                    "type": "string",
                    "description": "Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',\n'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.\n",
                    "willReplaceOnChanges": true
                },
                "preSharedKey": {
                    "type": "string",
                    "description": "If left blank, the pre-shared key will be auto generated.\n",
                    "willReplaceOnChanges": true
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.\n"
                },
                "remoteGatewayIp": {
                    "type": "string",
                    "description": "Remote Gateway IP.\n",
                    "willReplaceOnChanges": true
                },
                "remoteLanIp": {
                    "type": "string",
                    "description": "Remote LAN IP.\n",
                    "willReplaceOnChanges": true
                },
                "remoteSubnet": {
                    "type": "string",
                    "description": "Remote CIDRs joined as a string with ','. Required for a 'static' type connection.\n"
                },
                "remoteTunnelCidr": {
                    "type": "string",
                    "description": "Destination CIDR for the tunnel to the external device.\n",
                    "willReplaceOnChanges": true
                },
                "remoteVpcName": {
                    "type": "string",
                    "description": "Name of the remote VPC for a LAN BGP connection. Only valid when 'connection_type' = 'bgp' and tunnel_protocol' = 'LAN'\nwith an Azure transit gateway. Must be in the form \"\u003cVNET-name\u003e:\u003cresource-group-name\u003e\". Available as of provider version\nR2.18+.\n",
                    "willReplaceOnChanges": true
                },
                "switchToHaStandbyGateway": {
                    "type": "boolean",
                    "description": "Only valid for Transit Gateway's with Active-Standby Mode enabled. Valid values: true, false. Default: false.\n"
                },
                "tunnelProtocol": {
                    "type": "string",
                    "description": "Tunnel Protocol. Valid values: 'IPsec', 'GRE' or 'LAN'. Default value: 'IPsec'. Case insensitive.\n",
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "ID of the VPC where the Transit Gateway is located. For GCP BGP over LAN connection, it is in the format of\n'vpc_name~-~account_name'.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "connectionName",
                "gwName",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixTransitExternalDeviceConn resources.\n",
                "properties": {
                    "approvedCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).\n"
                    },
                    "backupBgpMd5Key": {
                        "type": "string",
                        "description": "Backup BGP MD5 authentication key.\n"
                    },
                    "backupBgpRemoteAsNum": {
                        "type": "string",
                        "description": "Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupDirectConnect": {
                        "type": "boolean",
                        "description": "Backup direct connect for backup external device.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupLocalLanIp": {
                        "type": "string",
                        "description": "Backup Local LAN IP. Required for GCP BGP over LAN Connection with HA enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupLocalTunnelCidr": {
                        "type": "string",
                        "description": "Source CIDR for the tunnel from the backup Aviatrix transit gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupPreSharedKey": {
                        "type": "string",
                        "description": "Backup pre shared key.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupRemoteGatewayIp": {
                        "type": "string",
                        "description": "Backup remote gateway IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupRemoteLanIp": {
                        "type": "string",
                        "description": "Backup Remote LAN IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupRemoteTunnelCidr": {
                        "type": "string",
                        "description": "Destination CIDR for the tunnel to the backup external device.\n",
                        "willReplaceOnChanges": true
                    },
                    "bgpLocalAsNum": {
                        "type": "string",
                        "description": "BGP local ASN (Autonomous System Number). Integer between 1-4294967294.\n",
                        "willReplaceOnChanges": true
                    },
                    "bgpMd5Key": {
                        "type": "string",
                        "description": "BGP MD5 authentication key.\n"
                    },
                    "bgpRemoteAsNum": {
                        "type": "string",
                        "description": "BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionName": {
                        "type": "string",
                        "description": "The name of the transit external device connection which is going to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Connection type. Valid values: 'bgp', 'static'. Default value: 'bgp'.\n",
                        "willReplaceOnChanges": true
                    },
                    "customAlgorithms": {
                        "type": "boolean",
                        "description": "Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.\n",
                        "willReplaceOnChanges": true
                    },
                    "directConnect": {
                        "type": "boolean",
                        "description": "Set true for private network infrastructure.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableBgpLanActivemesh": {
                        "type": "boolean",
                        "description": "Switch to enable BGP LAN ActiveMesh. Only valid for GCP with Remote Gateway HA enabled. Default: false. Available as of\nprovider version R2.21+.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableEdgeSegmentation": {
                        "type": "boolean",
                        "description": "Switch to allow this connection to communicate with a Network Domain via Connection Policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableEventTriggeredHa": {
                        "type": "boolean",
                        "description": "Enable Event Triggered HA.\n"
                    },
                    "enableIkev2": {
                        "type": "boolean",
                        "description": "Set as true if use IKEv2.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableJumboFrame": {
                        "type": "boolean",
                        "description": "Enable Jumbo Frame for the transit external device connection. Valid values: true, false.\n"
                    },
                    "enableLearnedCidrsApproval": {
                        "type": "boolean",
                        "description": "Enable learned CIDR approval for the connection. Only valid with 'connection_type' = 'bgp'. Requires the\ntransit_gateway's 'learned_cidrs_approval_mode' attribute be set to 'connection'. Valid values: true, false. Default\nvalue: false. Available as of provider version R2.18+.\n"
                    },
                    "gwName": {
                        "type": "string",
                        "description": "Name of the Transit Gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "haEnabled": {
                        "type": "boolean",
                        "description": "Set as true if there are two external devices.\n",
                        "willReplaceOnChanges": true
                    },
                    "localLanIp": {
                        "type": "string",
                        "description": "Local LAN IP. Required for GCP BGP over LAN Connection.\n",
                        "willReplaceOnChanges": true
                    },
                    "localTunnelCidr": {
                        "type": "string",
                        "description": "Source CIDR for the tunnel from the Aviatrix transit gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "manualBgpAdvertisedCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Configure manual BGP advertised CIDRs for this connection. Only valid with 'connection_type' = 'bgp'. Available as of\nprovider version R2.18+.\n"
                    },
                    "phase1Authentication": {
                        "type": "string",
                        "description": "Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.\n",
                        "willReplaceOnChanges": true
                    },
                    "phase1DhGroups": {
                        "type": "string",
                        "description": "Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.\n",
                        "willReplaceOnChanges": true
                    },
                    "phase1Encryption": {
                        "type": "string",
                        "description": "Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',\n'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.\n",
                        "willReplaceOnChanges": true
                    },
                    "phase1RemoteIdentifiers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Phase 1 remote identifier of the IPsec tunnel.\n"
                    },
                    "phase2Authentication": {
                        "type": "string",
                        "description": "Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.\n",
                        "willReplaceOnChanges": true
                    },
                    "phase2DhGroups": {
                        "type": "string",
                        "description": "Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.\n",
                        "willReplaceOnChanges": true
                    },
                    "phase2Encryption": {
                        "type": "string",
                        "description": "Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',\n'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.\n",
                        "willReplaceOnChanges": true
                    },
                    "preSharedKey": {
                        "type": "string",
                        "description": "If left blank, the pre-shared key will be auto generated.\n",
                        "willReplaceOnChanges": true
                    },
                    "prependAsPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.\n"
                    },
                    "remoteGatewayIp": {
                        "type": "string",
                        "description": "Remote Gateway IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "remoteLanIp": {
                        "type": "string",
                        "description": "Remote LAN IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "remoteSubnet": {
                        "type": "string",
                        "description": "Remote CIDRs joined as a string with ','. Required for a 'static' type connection.\n"
                    },
                    "remoteTunnelCidr": {
                        "type": "string",
                        "description": "Destination CIDR for the tunnel to the external device.\n",
                        "willReplaceOnChanges": true
                    },
                    "remoteVpcName": {
                        "type": "string",
                        "description": "Name of the remote VPC for a LAN BGP connection. Only valid when 'connection_type' = 'bgp' and tunnel_protocol' = 'LAN'\nwith an Azure transit gateway. Must be in the form \"\u003cVNET-name\u003e:\u003cresource-group-name\u003e\". Available as of provider version\nR2.18+.\n",
                        "willReplaceOnChanges": true
                    },
                    "switchToHaStandbyGateway": {
                        "type": "boolean",
                        "description": "Only valid for Transit Gateway's with Active-Standby Mode enabled. Valid values: true, false. Default: false.\n"
                    },
                    "tunnelProtocol": {
                        "type": "string",
                        "description": "Tunnel Protocol. Valid values: 'IPsec', 'GRE' or 'LAN'. Default value: 'IPsec'. Case insensitive.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "ID of the VPC where the Transit Gateway is located. For GCP BGP over LAN connection, it is in the format of\n'vpc_name~-~account_name'.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixTransitFirenetPolicy:AviatrixTransitFirenetPolicy": {
            "properties": {
                "inspectedResourceName": {
                    "type": "string",
                    "description": "Name of the resource to be added to transit firenet policy.\n"
                },
                "transitFirenetGatewayName": {
                    "type": "string",
                    "description": "Name of the transit firenet gateway.\n"
                }
            },
            "required": [
                "inspectedResourceName",
                "transitFirenetGatewayName"
            ],
            "inputProperties": {
                "inspectedResourceName": {
                    "type": "string",
                    "description": "Name of the resource to be added to transit firenet policy.\n",
                    "willReplaceOnChanges": true
                },
                "transitFirenetGatewayName": {
                    "type": "string",
                    "description": "Name of the transit firenet gateway.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "inspectedResourceName",
                "transitFirenetGatewayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixTransitFirenetPolicy resources.\n",
                "properties": {
                    "inspectedResourceName": {
                        "type": "string",
                        "description": "Name of the resource to be added to transit firenet policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "transitFirenetGatewayName": {
                        "type": "string",
                        "description": "Name of the transit firenet gateway.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixTransitGateway:AviatrixTransitGateway": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                },
                "allocateNewEip": {
                    "type": "boolean",
                    "description": "If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for\nthis gateway.\n"
                },
                "approvedLearnedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Approved learned CIDRs. Available as of provider version R2.21+.\n"
                },
                "availabilityDomain": {
                    "type": "string",
                    "description": "Availability domain for OCI.\n"
                },
                "azureEipNameResourceGroup": {
                    "type": "string",
                    "description": "The name of the public IP address and its resource group in Azure to assign to this Transit Gateway.\n"
                },
                "bgpEcmp": {
                    "type": "boolean",
                    "description": "Enable Equal Cost Multi Path (ECMP) routing for the next hop.\n"
                },
                "bgpHoldTime": {
                    "type": "integer",
                    "description": "BGP Hold Time.\n"
                },
                "bgpLanInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixTransitGatewayBgpLanInterface:AviatrixTransitGatewayBgpLanInterface"
                    },
                    "description": "Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available\nfor GCP Transit.\n"
                },
                "bgpLanInterfacesCount": {
                    "type": "integer",
                    "description": "Number of interfaces that will be created for BGP over LAN enabled Azure transit.\n"
                },
                "bgpLanIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of available BGP LAN interface IPs for transit external device connection creation. Only supports GCP and Azure.\nAvailable as of provider version R2.21.0+.\n"
                },
                "bgpManualSpokeAdvertiseCidrs": {
                    "type": "string",
                    "description": "Intended CIDR list to be advertised to external bgp router.\n"
                },
                "bgpPollingTime": {
                    "type": "string",
                    "description": "BGP route polling time. Unit is in seconds. Valid values are between 10 and 50.\n"
                },
                "cloudInstanceId": {
                    "type": "string",
                    "description": "Instance ID of the transit gateway.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider, requires an integer value. Use 1 for AWS.\n"
                },
                "connectedTransit": {
                    "type": "boolean",
                    "description": "Specify Connected Transit status.\n"
                },
                "customerManagedKeys": {
                    "type": "string",
                    "description": "Customer managed key ID.\n"
                },
                "customizedSpokeVpcRoutes": {
                    "type": "string",
                    "description": "A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned\nroutes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to all spoke gateways attached to this\ntransit gateway.\n"
                },
                "customizedTransitVpcRoutes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CIDRs to be customized for the transit VPC routes. When configured, it will replace all learned routes in VPC\nrouting tables, including RFC1918 and non-RFC1918 CIDRs.To be effective, `enable_advertise_transit_cidr` or firewall\nmanagement access for a transit firenet gateway must be enabled.\n"
                },
                "eip": {
                    "type": "string",
                    "description": "Required when allocate_new_eip is false. It uses specified EIP for this gateway.\n"
                },
                "enableActiveStandby": {
                    "type": "boolean",
                    "description": "Enables Active-Standby Mode, available only with HA enabled.\n"
                },
                "enableActiveStandbyPreemptive": {
                    "type": "boolean",
                    "description": "Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.\n"
                },
                "enableAdvertiseTransitCidr": {
                    "type": "boolean",
                    "description": "Switch to Enable/Disable advertise transit VPC network CIDR.\n"
                },
                "enableBgpOverLan": {
                    "type": "boolean",
                    "description": "Pre-allocate a network interface(eth4) for \"BGP over LAN\" functionality. Only valid for cloud_type = 4 (GCP) and 8\n(Azure). Valid values: true or false. Default value: false. Available as of provider version R2.18+\n"
                },
                "enableEgressTransitFirenet": {
                    "type": "boolean",
                    "description": "Specify whether to enable egress transit firenet interfaces or not.\n"
                },
                "enableEncryptVolume": {
                    "type": "boolean",
                    "description": "Enable encrypt gateway EBS volume. Only supported for AWS and AWSGov providers. Valid values: true, false. Default\nvalue: false.\n"
                },
                "enableFirenet": {
                    "type": "boolean",
                    "description": "Specify whether to enable firenet interfaces or not.\n"
                },
                "enableGatewayLoadBalancer": {
                    "type": "boolean",
                    "description": "Enable firenet interfaces with AWS Gateway Load Balancer. Only valid when `enable_firenet` or `enable_transit_firenet`\nare set to true and `cloud_type` = 1 (AWS). Currently AWS Gateway Load Balancer is only supported in AWS regions\nus-west-2 and us-east-1. Valid values: true or false. Default value: false.\n"
                },
                "enableHybridConnection": {
                    "type": "boolean",
                    "description": "Sign of readiness for TGW connection.\n"
                },
                "enableJumboFrame": {
                    "type": "boolean",
                    "description": "Enable jumbo frame support for transit gateway. Valid values: true or false. Default value: true.\n"
                },
                "enableLearnedCidrsApproval": {
                    "type": "boolean",
                    "description": "Switch to enable/disable encrypted transit approval for transit Gateway. Valid values: true, false.\n"
                },
                "enableMonitorGatewaySubnets": {
                    "type": "boolean",
                    "description": "Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for\ncloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.\n"
                },
                "enableMultiTierTransit": {
                    "type": "boolean",
                    "description": "Enable Multi-tier Transit mode on transit gateway.\n"
                },
                "enablePreserveAsPath": {
                    "type": "boolean",
                    "description": "Enable preserve as_path when advertising manual summary cidrs on transit gateway.\n"
                },
                "enablePrivateOob": {
                    "type": "boolean",
                    "description": "Enable private OOB.\n"
                },
                "enableS2cRxBalancing": {
                    "type": "boolean",
                    "description": "Enable S2C receive packet CPU re-balancing on transit gateway.\n"
                },
                "enableSegmentation": {
                    "type": "boolean",
                    "description": "Enable segmentation to allow association of transit gateway to security domains.\n"
                },
                "enableSpotInstance": {
                    "type": "boolean",
                    "description": "Enable spot instance. NOT supported for production deployment.\n"
                },
                "enableTransitFirenet": {
                    "type": "boolean",
                    "description": "Specify whether to enable transit firenet interfaces or not.\n"
                },
                "enableTransitSummarizeCidrToTgw": {
                    "type": "boolean",
                    "description": "Enable summarize CIDR to TGW.\n"
                },
                "enableVpcDnsServer": {
                    "type": "boolean",
                    "description": "Enable vpc_dns_server for Gateway. Valid values: true, false.\n"
                },
                "excludedAdvertisedSpokeRoutes": {
                    "type": "string",
                    "description": "A list of comma separated CIDRs to be advertised to on-prem as 'Excluded CIDR List'. When configured, it inspects all\nthe advertised CIDRs from its spoke gateways and remove those included in the 'Excluded CIDR List'.\n"
                },
                "faultDomain": {
                    "type": "string",
                    "description": "Fault domain for OCI.\n"
                },
                "filteredSpokeVpcRoutes": {
                    "type": "string",
                    "description": "A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or\nit’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to all\nspoke gateways attached to this transit gateway.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Name of the gateway which is going to be created.\n"
                },
                "gwSize": {
                    "type": "string",
                    "description": "Size of the gateway instance.\n"
                },
                "haAvailabilityDomain": {
                    "type": "string",
                    "description": "HA availability domain for OCI.\n"
                },
                "haAzureEipNameResourceGroup": {
                    "type": "string",
                    "description": "The name of the public IP address and its resource group in Azure to assign to the HA Transit Gateway.\n"
                },
                "haBgpLanInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixTransitGatewayHaBgpLanInterface:AviatrixTransitGatewayHaBgpLanInterface"
                    },
                    "description": "Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available\nfor GCP HA Transit.\n"
                },
                "haBgpLanIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of available BGP LAN interface IPs for transit external device HA connection creation. Only supports GCP and Azure.\nAvailable as of provider version R2.21.0+.\n"
                },
                "haCloudInstanceId": {
                    "type": "string",
                    "description": "Cloud instance ID of HA transit gateway.\n"
                },
                "haEip": {
                    "type": "string",
                    "description": "Public IP address that you want assigned to the HA Transit Gateway.\n"
                },
                "haFaultDomain": {
                    "type": "string",
                    "description": "HA fault domain for OCI.\n"
                },
                "haGwName": {
                    "type": "string",
                    "description": "Aviatrix transit gateway unique name of HA transit gateway.\n"
                },
                "haGwSize": {
                    "type": "string",
                    "description": "HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).\n"
                },
                "haImageVersion": {
                    "type": "string",
                    "description": "ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the\ngateway to the specified version.\n"
                },
                "haInsaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Transit HA Gateway. Required for AWS if insane_mode is enabled and ha_subnet\nis set.\n"
                },
                "haLanInterfaceCidr": {
                    "type": "string",
                    "description": "Transit gateway lan interface cidr for the HA gateway.\n"
                },
                "haOobAvailabilityZone": {
                    "type": "string",
                    "description": "OOB HA availability zone.\n"
                },
                "haOobManagementSubnet": {
                    "type": "string",
                    "description": "OOB HA management subnet.\n"
                },
                "haPrivateIp": {
                    "type": "string",
                    "description": "Private IP address of HA transit gateway.\n"
                },
                "haPrivateModeSubnetZone": {
                    "type": "string",
                    "description": "Private Mode HA subnet availability zone.\n"
                },
                "haPublicIp": {
                    "type": "string",
                    "description": "Public IP address of the HA Transit Gateway.\n"
                },
                "haSecurityGroupId": {
                    "type": "string",
                    "description": "HA security group used for the transit gateway.\n"
                },
                "haSoftwareVersion": {
                    "type": "string",
                    "description": "ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update\nthe gateway to the specified version. If left blank, the gateway software version will continue to be managed through\nthe aviatrix_controller_config resource.\n"
                },
                "haSubnet": {
                    "type": "string",
                    "description": "HA Subnet. Required for enabling HA for AWS/AWSGov/AWSChina/Azure/OCI/Alibaba Cloud. Optional for enabling HA for GCP\ngateway.\n"
                },
                "haZone": {
                    "type": "string",
                    "description": "HA Zone. Required if enabling HA for GCP. Optional for Azure.\n"
                },
                "imageVersion": {
                    "type": "string",
                    "description": "image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway\nto the specified version.\n"
                },
                "insaneMode": {
                    "type": "boolean",
                    "description": "Enable Insane Mode for Transit. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane mode\nis enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.\n"
                },
                "insaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Transit Gateway. Required for AWS if insane_mode is enabled.\n"
                },
                "lanInterfaceCidr": {
                    "type": "string",
                    "description": "Transit gateway lan interface cidr.\n"
                },
                "lanPrivateSubnet": {
                    "type": "string",
                    "description": "LAN Private Subnet. Only used for GCP Transit FireNet.\n"
                },
                "lanVpcId": {
                    "type": "string",
                    "description": "LAN VPC ID. Only used for GCP Transit FireNet.\n"
                },
                "learnedCidrsApprovalMode": {
                    "type": "string",
                    "description": "Set the learned CIDRs approval mode. Only valid when 'enable_learned_cidrs_approval' is set to true. If set to\n'gateway', learned CIDR approval applies to ALL connections. If set to 'connection', learned CIDR approval is configured\non a per connection basis. When configuring per connection, use the enable_learned_cidrs_approval attribute within the\nconnection resource to toggle learned CIDR approval. Valid values: 'gateway' or 'connection'. Default value: 'gateway'.\n"
                },
                "localAsNumber": {
                    "type": "string",
                    "description": "Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.\n"
                },
                "monitorExcludeLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.\n"
                },
                "oobAvailabilityZone": {
                    "type": "string",
                    "description": "OOB subnet availability zone.\n"
                },
                "oobManagementSubnet": {
                    "type": "string",
                    "description": "OOB management subnet.\n"
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "Private IP address of the transit gateway created.\n"
                },
                "privateModeLbVpcId": {
                    "type": "string",
                    "description": "Private Mode Controller load balancer VPC ID. Required when private mode is enabled for the Controller.\n"
                },
                "privateModeSubnetZone": {
                    "type": "string",
                    "description": "Private Mode subnet availability zone.\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "Public IP address of the Transit Gateway created.\n"
                },
                "rxQueueSize": {
                    "type": "string",
                    "description": "Gateway ethernet interface RX queue size. Supported for AWS related clouds only.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "Security group used for the transit gateway.\n"
                },
                "singleAzHa": {
                    "type": "boolean",
                    "description": "Set to 'enabled' if this feature is desired.\n"
                },
                "singleIpSnat": {
                    "type": "boolean",
                    "description": "Enable or disable Source NAT feature in 'single_ip' mode for this container.\n"
                },
                "softwareVersion": {
                    "type": "string",
                    "description": "software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the\ngateway to the specified version. If left blank, the gateway software version will continue to be managed through the\naviatrix_controller_config resource.\n"
                },
                "spotPrice": {
                    "type": "string",
                    "description": "Price for spot instance. NOT supported for production deployment.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "Public Subnet Name.\n"
                },
                "tagLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Instance tag of cloud provider.\n",
                    "deprecationMessage": "Use tags instead."
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of tags to assign to the transit gateway.\n"
                },
                "tunnelDetectionTime": {
                    "type": "integer",
                    "description": "The IPSec tunnel down detection time for the transit gateway.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC-ID/VNet-Name of cloud provider.\n"
                },
                "vpcReg": {
                    "type": "string",
                    "description": "Region of cloud provider.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.\n"
                }
            },
            "required": [
                "accountName",
                "availabilityDomain",
                "azureEipNameResourceGroup",
                "bgpLanIpLists",
                "cloudInstanceId",
                "cloudType",
                "eip",
                "faultDomain",
                "gwName",
                "gwSize",
                "haAvailabilityDomain",
                "haAzureEipNameResourceGroup",
                "haBgpLanIpLists",
                "haCloudInstanceId",
                "haEip",
                "haFaultDomain",
                "haGwName",
                "haImageVersion",
                "haLanInterfaceCidr",
                "haPrivateIp",
                "haPublicIp",
                "haSecurityGroupId",
                "haSoftwareVersion",
                "imageVersion",
                "lanInterfaceCidr",
                "localAsNumber",
                "privateIp",
                "publicIp",
                "securityGroupId",
                "softwareVersion",
                "subnet",
                "tunnelDetectionTime",
                "vpcId",
                "vpcReg"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                },
                "allocateNewEip": {
                    "type": "boolean",
                    "description": "If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for\nthis gateway.\n"
                },
                "approvedLearnedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Approved learned CIDRs. Available as of provider version R2.21+.\n"
                },
                "availabilityDomain": {
                    "type": "string",
                    "description": "Availability domain for OCI.\n",
                    "willReplaceOnChanges": true
                },
                "azureEipNameResourceGroup": {
                    "type": "string",
                    "description": "The name of the public IP address and its resource group in Azure to assign to this Transit Gateway.\n"
                },
                "bgpEcmp": {
                    "type": "boolean",
                    "description": "Enable Equal Cost Multi Path (ECMP) routing for the next hop.\n"
                },
                "bgpHoldTime": {
                    "type": "integer",
                    "description": "BGP Hold Time.\n"
                },
                "bgpLanInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixTransitGatewayBgpLanInterface:AviatrixTransitGatewayBgpLanInterface"
                    },
                    "description": "Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available\nfor GCP Transit.\n",
                    "willReplaceOnChanges": true
                },
                "bgpLanInterfacesCount": {
                    "type": "integer",
                    "description": "Number of interfaces that will be created for BGP over LAN enabled Azure transit.\n",
                    "willReplaceOnChanges": true
                },
                "bgpManualSpokeAdvertiseCidrs": {
                    "type": "string",
                    "description": "Intended CIDR list to be advertised to external bgp router.\n"
                },
                "bgpPollingTime": {
                    "type": "string",
                    "description": "BGP route polling time. Unit is in seconds. Valid values are between 10 and 50.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider, requires an integer value. Use 1 for AWS.\n"
                },
                "connectedTransit": {
                    "type": "boolean",
                    "description": "Specify Connected Transit status.\n"
                },
                "customerManagedKeys": {
                    "type": "string",
                    "description": "Customer managed key ID.\n"
                },
                "customizedSpokeVpcRoutes": {
                    "type": "string",
                    "description": "A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned\nroutes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to all spoke gateways attached to this\ntransit gateway.\n"
                },
                "customizedTransitVpcRoutes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CIDRs to be customized for the transit VPC routes. When configured, it will replace all learned routes in VPC\nrouting tables, including RFC1918 and non-RFC1918 CIDRs.To be effective, `enable_advertise_transit_cidr` or firewall\nmanagement access for a transit firenet gateway must be enabled.\n"
                },
                "eip": {
                    "type": "string",
                    "description": "Required when allocate_new_eip is false. It uses specified EIP for this gateway.\n"
                },
                "enableActiveStandby": {
                    "type": "boolean",
                    "description": "Enables Active-Standby Mode, available only with HA enabled.\n"
                },
                "enableActiveStandbyPreemptive": {
                    "type": "boolean",
                    "description": "Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.\n"
                },
                "enableAdvertiseTransitCidr": {
                    "type": "boolean",
                    "description": "Switch to Enable/Disable advertise transit VPC network CIDR.\n"
                },
                "enableBgpOverLan": {
                    "type": "boolean",
                    "description": "Pre-allocate a network interface(eth4) for \"BGP over LAN\" functionality. Only valid for cloud_type = 4 (GCP) and 8\n(Azure). Valid values: true or false. Default value: false. Available as of provider version R2.18+\n",
                    "willReplaceOnChanges": true
                },
                "enableEgressTransitFirenet": {
                    "type": "boolean",
                    "description": "Specify whether to enable egress transit firenet interfaces or not.\n"
                },
                "enableEncryptVolume": {
                    "type": "boolean",
                    "description": "Enable encrypt gateway EBS volume. Only supported for AWS and AWSGov providers. Valid values: true, false. Default\nvalue: false.\n"
                },
                "enableFirenet": {
                    "type": "boolean",
                    "description": "Specify whether to enable firenet interfaces or not.\n"
                },
                "enableGatewayLoadBalancer": {
                    "type": "boolean",
                    "description": "Enable firenet interfaces with AWS Gateway Load Balancer. Only valid when `enable_firenet` or `enable_transit_firenet`\nare set to true and `cloud_type` = 1 (AWS). Currently AWS Gateway Load Balancer is only supported in AWS regions\nus-west-2 and us-east-1. Valid values: true or false. Default value: false.\n"
                },
                "enableHybridConnection": {
                    "type": "boolean",
                    "description": "Sign of readiness for TGW connection.\n"
                },
                "enableJumboFrame": {
                    "type": "boolean",
                    "description": "Enable jumbo frame support for transit gateway. Valid values: true or false. Default value: true.\n"
                },
                "enableLearnedCidrsApproval": {
                    "type": "boolean",
                    "description": "Switch to enable/disable encrypted transit approval for transit Gateway. Valid values: true, false.\n"
                },
                "enableMonitorGatewaySubnets": {
                    "type": "boolean",
                    "description": "Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for\ncloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.\n"
                },
                "enableMultiTierTransit": {
                    "type": "boolean",
                    "description": "Enable Multi-tier Transit mode on transit gateway.\n"
                },
                "enablePreserveAsPath": {
                    "type": "boolean",
                    "description": "Enable preserve as_path when advertising manual summary cidrs on transit gateway.\n"
                },
                "enablePrivateOob": {
                    "type": "boolean",
                    "description": "Enable private OOB.\n"
                },
                "enableS2cRxBalancing": {
                    "type": "boolean",
                    "description": "Enable S2C receive packet CPU re-balancing on transit gateway.\n"
                },
                "enableSegmentation": {
                    "type": "boolean",
                    "description": "Enable segmentation to allow association of transit gateway to security domains.\n"
                },
                "enableSpotInstance": {
                    "type": "boolean",
                    "description": "Enable spot instance. NOT supported for production deployment.\n"
                },
                "enableTransitFirenet": {
                    "type": "boolean",
                    "description": "Specify whether to enable transit firenet interfaces or not.\n"
                },
                "enableTransitSummarizeCidrToTgw": {
                    "type": "boolean",
                    "description": "Enable summarize CIDR to TGW.\n"
                },
                "enableVpcDnsServer": {
                    "type": "boolean",
                    "description": "Enable vpc_dns_server for Gateway. Valid values: true, false.\n"
                },
                "excludedAdvertisedSpokeRoutes": {
                    "type": "string",
                    "description": "A list of comma separated CIDRs to be advertised to on-prem as 'Excluded CIDR List'. When configured, it inspects all\nthe advertised CIDRs from its spoke gateways and remove those included in the 'Excluded CIDR List'.\n"
                },
                "faultDomain": {
                    "type": "string",
                    "description": "Fault domain for OCI.\n",
                    "willReplaceOnChanges": true
                },
                "filteredSpokeVpcRoutes": {
                    "type": "string",
                    "description": "A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or\nit’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to all\nspoke gateways attached to this transit gateway.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Name of the gateway which is going to be created.\n",
                    "willReplaceOnChanges": true
                },
                "gwSize": {
                    "type": "string",
                    "description": "Size of the gateway instance.\n"
                },
                "haAvailabilityDomain": {
                    "type": "string",
                    "description": "HA availability domain for OCI.\n"
                },
                "haAzureEipNameResourceGroup": {
                    "type": "string",
                    "description": "The name of the public IP address and its resource group in Azure to assign to the HA Transit Gateway.\n"
                },
                "haBgpLanInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixTransitGatewayHaBgpLanInterface:AviatrixTransitGatewayHaBgpLanInterface"
                    },
                    "description": "Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available\nfor GCP HA Transit.\n"
                },
                "haEip": {
                    "type": "string",
                    "description": "Public IP address that you want assigned to the HA Transit Gateway.\n"
                },
                "haFaultDomain": {
                    "type": "string",
                    "description": "HA fault domain for OCI.\n"
                },
                "haGwSize": {
                    "type": "string",
                    "description": "HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).\n"
                },
                "haImageVersion": {
                    "type": "string",
                    "description": "ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the\ngateway to the specified version.\n"
                },
                "haInsaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Transit HA Gateway. Required for AWS if insane_mode is enabled and ha_subnet\nis set.\n"
                },
                "haOobAvailabilityZone": {
                    "type": "string",
                    "description": "OOB HA availability zone.\n"
                },
                "haOobManagementSubnet": {
                    "type": "string",
                    "description": "OOB HA management subnet.\n"
                },
                "haPrivateModeSubnetZone": {
                    "type": "string",
                    "description": "Private Mode HA subnet availability zone.\n"
                },
                "haSoftwareVersion": {
                    "type": "string",
                    "description": "ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update\nthe gateway to the specified version. If left blank, the gateway software version will continue to be managed through\nthe aviatrix_controller_config resource.\n"
                },
                "haSubnet": {
                    "type": "string",
                    "description": "HA Subnet. Required for enabling HA for AWS/AWSGov/AWSChina/Azure/OCI/Alibaba Cloud. Optional for enabling HA for GCP\ngateway.\n"
                },
                "haZone": {
                    "type": "string",
                    "description": "HA Zone. Required if enabling HA for GCP. Optional for Azure.\n"
                },
                "imageVersion": {
                    "type": "string",
                    "description": "image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway\nto the specified version.\n"
                },
                "insaneMode": {
                    "type": "boolean",
                    "description": "Enable Insane Mode for Transit. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane mode\nis enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.\n"
                },
                "insaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Transit Gateway. Required for AWS if insane_mode is enabled.\n"
                },
                "lanPrivateSubnet": {
                    "type": "string",
                    "description": "LAN Private Subnet. Only used for GCP Transit FireNet.\n"
                },
                "lanVpcId": {
                    "type": "string",
                    "description": "LAN VPC ID. Only used for GCP Transit FireNet.\n"
                },
                "learnedCidrsApprovalMode": {
                    "type": "string",
                    "description": "Set the learned CIDRs approval mode. Only valid when 'enable_learned_cidrs_approval' is set to true. If set to\n'gateway', learned CIDR approval applies to ALL connections. If set to 'connection', learned CIDR approval is configured\non a per connection basis. When configuring per connection, use the enable_learned_cidrs_approval attribute within the\nconnection resource to toggle learned CIDR approval. Valid values: 'gateway' or 'connection'. Default value: 'gateway'.\n"
                },
                "localAsNumber": {
                    "type": "string",
                    "description": "Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.\n"
                },
                "monitorExcludeLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.\n"
                },
                "oobAvailabilityZone": {
                    "type": "string",
                    "description": "OOB subnet availability zone.\n",
                    "willReplaceOnChanges": true
                },
                "oobManagementSubnet": {
                    "type": "string",
                    "description": "OOB management subnet.\n",
                    "willReplaceOnChanges": true
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.\n"
                },
                "privateModeLbVpcId": {
                    "type": "string",
                    "description": "Private Mode Controller load balancer VPC ID. Required when private mode is enabled for the Controller.\n",
                    "willReplaceOnChanges": true
                },
                "privateModeSubnetZone": {
                    "type": "string",
                    "description": "Private Mode subnet availability zone.\n",
                    "willReplaceOnChanges": true
                },
                "rxQueueSize": {
                    "type": "string",
                    "description": "Gateway ethernet interface RX queue size. Supported for AWS related clouds only.\n"
                },
                "singleAzHa": {
                    "type": "boolean",
                    "description": "Set to 'enabled' if this feature is desired.\n"
                },
                "singleIpSnat": {
                    "type": "boolean",
                    "description": "Enable or disable Source NAT feature in 'single_ip' mode for this container.\n"
                },
                "softwareVersion": {
                    "type": "string",
                    "description": "software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the\ngateway to the specified version. If left blank, the gateway software version will continue to be managed through the\naviatrix_controller_config resource.\n"
                },
                "spotPrice": {
                    "type": "string",
                    "description": "Price for spot instance. NOT supported for production deployment.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "Public Subnet Name.\n",
                    "willReplaceOnChanges": true
                },
                "tagLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Instance tag of cloud provider.\n",
                    "deprecationMessage": "Use tags instead."
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of tags to assign to the transit gateway.\n"
                },
                "tunnelDetectionTime": {
                    "type": "integer",
                    "description": "The IPSec tunnel down detection time for the transit gateway.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC-ID/VNet-Name of cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "vpcReg": {
                    "type": "string",
                    "description": "Region of cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountName",
                "cloudType",
                "gwName",
                "gwSize",
                "subnet",
                "vpcId",
                "vpcReg"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixTransitGateway resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                    },
                    "allocateNewEip": {
                        "type": "boolean",
                        "description": "If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for\nthis gateway.\n"
                    },
                    "approvedLearnedCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Approved learned CIDRs. Available as of provider version R2.21+.\n"
                    },
                    "availabilityDomain": {
                        "type": "string",
                        "description": "Availability domain for OCI.\n",
                        "willReplaceOnChanges": true
                    },
                    "azureEipNameResourceGroup": {
                        "type": "string",
                        "description": "The name of the public IP address and its resource group in Azure to assign to this Transit Gateway.\n"
                    },
                    "bgpEcmp": {
                        "type": "boolean",
                        "description": "Enable Equal Cost Multi Path (ECMP) routing for the next hop.\n"
                    },
                    "bgpHoldTime": {
                        "type": "integer",
                        "description": "BGP Hold Time.\n"
                    },
                    "bgpLanInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixTransitGatewayBgpLanInterface:AviatrixTransitGatewayBgpLanInterface"
                        },
                        "description": "Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available\nfor GCP Transit.\n",
                        "willReplaceOnChanges": true
                    },
                    "bgpLanInterfacesCount": {
                        "type": "integer",
                        "description": "Number of interfaces that will be created for BGP over LAN enabled Azure transit.\n",
                        "willReplaceOnChanges": true
                    },
                    "bgpLanIpLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of available BGP LAN interface IPs for transit external device connection creation. Only supports GCP and Azure.\nAvailable as of provider version R2.21.0+.\n"
                    },
                    "bgpManualSpokeAdvertiseCidrs": {
                        "type": "string",
                        "description": "Intended CIDR list to be advertised to external bgp router.\n"
                    },
                    "bgpPollingTime": {
                        "type": "string",
                        "description": "BGP route polling time. Unit is in seconds. Valid values are between 10 and 50.\n"
                    },
                    "cloudInstanceId": {
                        "type": "string",
                        "description": "Instance ID of the transit gateway.\n"
                    },
                    "cloudType": {
                        "type": "integer",
                        "description": "Type of cloud service provider, requires an integer value. Use 1 for AWS.\n"
                    },
                    "connectedTransit": {
                        "type": "boolean",
                        "description": "Specify Connected Transit status.\n"
                    },
                    "customerManagedKeys": {
                        "type": "string",
                        "description": "Customer managed key ID.\n"
                    },
                    "customizedSpokeVpcRoutes": {
                        "type": "string",
                        "description": "A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned\nroutes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to all spoke gateways attached to this\ntransit gateway.\n"
                    },
                    "customizedTransitVpcRoutes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of CIDRs to be customized for the transit VPC routes. When configured, it will replace all learned routes in VPC\nrouting tables, including RFC1918 and non-RFC1918 CIDRs.To be effective, `enable_advertise_transit_cidr` or firewall\nmanagement access for a transit firenet gateway must be enabled.\n"
                    },
                    "eip": {
                        "type": "string",
                        "description": "Required when allocate_new_eip is false. It uses specified EIP for this gateway.\n"
                    },
                    "enableActiveStandby": {
                        "type": "boolean",
                        "description": "Enables Active-Standby Mode, available only with HA enabled.\n"
                    },
                    "enableActiveStandbyPreemptive": {
                        "type": "boolean",
                        "description": "Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.\n"
                    },
                    "enableAdvertiseTransitCidr": {
                        "type": "boolean",
                        "description": "Switch to Enable/Disable advertise transit VPC network CIDR.\n"
                    },
                    "enableBgpOverLan": {
                        "type": "boolean",
                        "description": "Pre-allocate a network interface(eth4) for \"BGP over LAN\" functionality. Only valid for cloud_type = 4 (GCP) and 8\n(Azure). Valid values: true or false. Default value: false. Available as of provider version R2.18+\n",
                        "willReplaceOnChanges": true
                    },
                    "enableEgressTransitFirenet": {
                        "type": "boolean",
                        "description": "Specify whether to enable egress transit firenet interfaces or not.\n"
                    },
                    "enableEncryptVolume": {
                        "type": "boolean",
                        "description": "Enable encrypt gateway EBS volume. Only supported for AWS and AWSGov providers. Valid values: true, false. Default\nvalue: false.\n"
                    },
                    "enableFirenet": {
                        "type": "boolean",
                        "description": "Specify whether to enable firenet interfaces or not.\n"
                    },
                    "enableGatewayLoadBalancer": {
                        "type": "boolean",
                        "description": "Enable firenet interfaces with AWS Gateway Load Balancer. Only valid when `enable_firenet` or `enable_transit_firenet`\nare set to true and `cloud_type` = 1 (AWS). Currently AWS Gateway Load Balancer is only supported in AWS regions\nus-west-2 and us-east-1. Valid values: true or false. Default value: false.\n"
                    },
                    "enableHybridConnection": {
                        "type": "boolean",
                        "description": "Sign of readiness for TGW connection.\n"
                    },
                    "enableJumboFrame": {
                        "type": "boolean",
                        "description": "Enable jumbo frame support for transit gateway. Valid values: true or false. Default value: true.\n"
                    },
                    "enableLearnedCidrsApproval": {
                        "type": "boolean",
                        "description": "Switch to enable/disable encrypted transit approval for transit Gateway. Valid values: true, false.\n"
                    },
                    "enableMonitorGatewaySubnets": {
                        "type": "boolean",
                        "description": "Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for\ncloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.\n"
                    },
                    "enableMultiTierTransit": {
                        "type": "boolean",
                        "description": "Enable Multi-tier Transit mode on transit gateway.\n"
                    },
                    "enablePreserveAsPath": {
                        "type": "boolean",
                        "description": "Enable preserve as_path when advertising manual summary cidrs on transit gateway.\n"
                    },
                    "enablePrivateOob": {
                        "type": "boolean",
                        "description": "Enable private OOB.\n"
                    },
                    "enableS2cRxBalancing": {
                        "type": "boolean",
                        "description": "Enable S2C receive packet CPU re-balancing on transit gateway.\n"
                    },
                    "enableSegmentation": {
                        "type": "boolean",
                        "description": "Enable segmentation to allow association of transit gateway to security domains.\n"
                    },
                    "enableSpotInstance": {
                        "type": "boolean",
                        "description": "Enable spot instance. NOT supported for production deployment.\n"
                    },
                    "enableTransitFirenet": {
                        "type": "boolean",
                        "description": "Specify whether to enable transit firenet interfaces or not.\n"
                    },
                    "enableTransitSummarizeCidrToTgw": {
                        "type": "boolean",
                        "description": "Enable summarize CIDR to TGW.\n"
                    },
                    "enableVpcDnsServer": {
                        "type": "boolean",
                        "description": "Enable vpc_dns_server for Gateway. Valid values: true, false.\n"
                    },
                    "excludedAdvertisedSpokeRoutes": {
                        "type": "string",
                        "description": "A list of comma separated CIDRs to be advertised to on-prem as 'Excluded CIDR List'. When configured, it inspects all\nthe advertised CIDRs from its spoke gateways and remove those included in the 'Excluded CIDR List'.\n"
                    },
                    "faultDomain": {
                        "type": "string",
                        "description": "Fault domain for OCI.\n",
                        "willReplaceOnChanges": true
                    },
                    "filteredSpokeVpcRoutes": {
                        "type": "string",
                        "description": "A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or\nit’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to all\nspoke gateways attached to this transit gateway.\n"
                    },
                    "gwName": {
                        "type": "string",
                        "description": "Name of the gateway which is going to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "gwSize": {
                        "type": "string",
                        "description": "Size of the gateway instance.\n"
                    },
                    "haAvailabilityDomain": {
                        "type": "string",
                        "description": "HA availability domain for OCI.\n"
                    },
                    "haAzureEipNameResourceGroup": {
                        "type": "string",
                        "description": "The name of the public IP address and its resource group in Azure to assign to the HA Transit Gateway.\n"
                    },
                    "haBgpLanInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixTransitGatewayHaBgpLanInterface:AviatrixTransitGatewayHaBgpLanInterface"
                        },
                        "description": "Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available\nfor GCP HA Transit.\n"
                    },
                    "haBgpLanIpLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of available BGP LAN interface IPs for transit external device HA connection creation. Only supports GCP and Azure.\nAvailable as of provider version R2.21.0+.\n"
                    },
                    "haCloudInstanceId": {
                        "type": "string",
                        "description": "Cloud instance ID of HA transit gateway.\n"
                    },
                    "haEip": {
                        "type": "string",
                        "description": "Public IP address that you want assigned to the HA Transit Gateway.\n"
                    },
                    "haFaultDomain": {
                        "type": "string",
                        "description": "HA fault domain for OCI.\n"
                    },
                    "haGwName": {
                        "type": "string",
                        "description": "Aviatrix transit gateway unique name of HA transit gateway.\n"
                    },
                    "haGwSize": {
                        "type": "string",
                        "description": "HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).\n"
                    },
                    "haImageVersion": {
                        "type": "string",
                        "description": "ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the\ngateway to the specified version.\n"
                    },
                    "haInsaneModeAz": {
                        "type": "string",
                        "description": "AZ of subnet being created for Insane Mode Transit HA Gateway. Required for AWS if insane_mode is enabled and ha_subnet\nis set.\n"
                    },
                    "haLanInterfaceCidr": {
                        "type": "string",
                        "description": "Transit gateway lan interface cidr for the HA gateway.\n"
                    },
                    "haOobAvailabilityZone": {
                        "type": "string",
                        "description": "OOB HA availability zone.\n"
                    },
                    "haOobManagementSubnet": {
                        "type": "string",
                        "description": "OOB HA management subnet.\n"
                    },
                    "haPrivateIp": {
                        "type": "string",
                        "description": "Private IP address of HA transit gateway.\n"
                    },
                    "haPrivateModeSubnetZone": {
                        "type": "string",
                        "description": "Private Mode HA subnet availability zone.\n"
                    },
                    "haPublicIp": {
                        "type": "string",
                        "description": "Public IP address of the HA Transit Gateway.\n"
                    },
                    "haSecurityGroupId": {
                        "type": "string",
                        "description": "HA security group used for the transit gateway.\n"
                    },
                    "haSoftwareVersion": {
                        "type": "string",
                        "description": "ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update\nthe gateway to the specified version. If left blank, the gateway software version will continue to be managed through\nthe aviatrix_controller_config resource.\n"
                    },
                    "haSubnet": {
                        "type": "string",
                        "description": "HA Subnet. Required for enabling HA for AWS/AWSGov/AWSChina/Azure/OCI/Alibaba Cloud. Optional for enabling HA for GCP\ngateway.\n"
                    },
                    "haZone": {
                        "type": "string",
                        "description": "HA Zone. Required if enabling HA for GCP. Optional for Azure.\n"
                    },
                    "imageVersion": {
                        "type": "string",
                        "description": "image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway\nto the specified version.\n"
                    },
                    "insaneMode": {
                        "type": "boolean",
                        "description": "Enable Insane Mode for Transit. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane mode\nis enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.\n"
                    },
                    "insaneModeAz": {
                        "type": "string",
                        "description": "AZ of subnet being created for Insane Mode Transit Gateway. Required for AWS if insane_mode is enabled.\n"
                    },
                    "lanInterfaceCidr": {
                        "type": "string",
                        "description": "Transit gateway lan interface cidr.\n"
                    },
                    "lanPrivateSubnet": {
                        "type": "string",
                        "description": "LAN Private Subnet. Only used for GCP Transit FireNet.\n"
                    },
                    "lanVpcId": {
                        "type": "string",
                        "description": "LAN VPC ID. Only used for GCP Transit FireNet.\n"
                    },
                    "learnedCidrsApprovalMode": {
                        "type": "string",
                        "description": "Set the learned CIDRs approval mode. Only valid when 'enable_learned_cidrs_approval' is set to true. If set to\n'gateway', learned CIDR approval applies to ALL connections. If set to 'connection', learned CIDR approval is configured\non a per connection basis. When configuring per connection, use the enable_learned_cidrs_approval attribute within the\nconnection resource to toggle learned CIDR approval. Valid values: 'gateway' or 'connection'. Default value: 'gateway'.\n"
                    },
                    "localAsNumber": {
                        "type": "string",
                        "description": "Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.\n"
                    },
                    "monitorExcludeLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.\n"
                    },
                    "oobAvailabilityZone": {
                        "type": "string",
                        "description": "OOB subnet availability zone.\n",
                        "willReplaceOnChanges": true
                    },
                    "oobManagementSubnet": {
                        "type": "string",
                        "description": "OOB management subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "prependAsPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "Private IP address of the transit gateway created.\n"
                    },
                    "privateModeLbVpcId": {
                        "type": "string",
                        "description": "Private Mode Controller load balancer VPC ID. Required when private mode is enabled for the Controller.\n",
                        "willReplaceOnChanges": true
                    },
                    "privateModeSubnetZone": {
                        "type": "string",
                        "description": "Private Mode subnet availability zone.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "Public IP address of the Transit Gateway created.\n"
                    },
                    "rxQueueSize": {
                        "type": "string",
                        "description": "Gateway ethernet interface RX queue size. Supported for AWS related clouds only.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "Security group used for the transit gateway.\n"
                    },
                    "singleAzHa": {
                        "type": "boolean",
                        "description": "Set to 'enabled' if this feature is desired.\n"
                    },
                    "singleIpSnat": {
                        "type": "boolean",
                        "description": "Enable or disable Source NAT feature in 'single_ip' mode for this container.\n"
                    },
                    "softwareVersion": {
                        "type": "string",
                        "description": "software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the\ngateway to the specified version. If left blank, the gateway software version will continue to be managed through the\naviatrix_controller_config resource.\n"
                    },
                    "spotPrice": {
                        "type": "string",
                        "description": "Price for spot instance. NOT supported for production deployment.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "Public Subnet Name.\n",
                        "willReplaceOnChanges": true
                    },
                    "tagLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Instance tag of cloud provider.\n",
                        "deprecationMessage": "Use tags instead."
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of tags to assign to the transit gateway.\n"
                    },
                    "tunnelDetectionTime": {
                        "type": "integer",
                        "description": "The IPSec tunnel down detection time for the transit gateway.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "VPC-ID/VNet-Name of cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcReg": {
                        "type": "string",
                        "description": "Region of cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixTransitGatewayPeering:AviatrixTransitGatewayPeering": {
            "properties": {
                "enableInsaneModeEncryptionOverInternet": {
                    "type": "boolean",
                    "description": "(Optional) Advanced option. Enable Insane Mode Encryption over Internet. Transit gateways must be in Insane Mode.\nCurrently, only inter-cloud connections between AWS and Azure are supported. Required with valid `tunnel_count`.\nConflicts with `enable_peering_over_private_network` and `enable_single_tunnel_mode`. Type: Boolean. Default: false.\nAvailable as of provider version R2.19+.\n"
                },
                "enableMaxPerformance": {
                    "type": "boolean",
                    "description": "Indicates whether the maximum amount of HPE tunnels will be created. Only valid when the two transit gateways are each\nlaunched in Insane Mode and in the same cloud type. Available as of provider version R2.22.2+.\n"
                },
                "enablePeeringOverPrivateNetwork": {
                    "type": "boolean",
                    "description": "(Optional) Advanced option. Enable peering over private network. Only appears and applies to when the two Multi-cloud\nTransit Gateways are each launched in Insane Mode and in a different cloud type. Conflicts with\n`enable_insane_mode_encryption_over_internet` and `tunnel_count`. Type: Boolean. Default: false. Available in provider\nversion R2.17.1+\n"
                },
                "enableSingleTunnelMode": {
                    "type": "boolean",
                    "description": "(Optional) Advanced option. Enable peering with Single-Tunnel mode. Only appears and applies to when the two Multi-cloud\nTransit Gateways are each launched in Insane Mode and in a different cloud type. Required with\n`enable_peering_over_private_network`. Conflicts with `enable_insane_mode_encryption_over_internet` and `tunnel_count`.\nType: Boolean. Default: false. Available as of provider version R2.18+.\n"
                },
                "gateway1ExcludedNetworkCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded network CIDRs for the first transit gateway.\n"
                },
                "gateway1ExcludedTgwConnections": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded TGW connections for the first transit gateway.\n"
                },
                "gateway2ExcludedNetworkCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded network CIDRs for the second transit gateway.\n"
                },
                "gateway2ExcludedTgwConnections": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded TGW connections for the second transit gateway.\n"
                },
                "prependAsPath1s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit_gateway_name1.\n"
                },
                "prependAsPath2s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit_gateway_name2.\n"
                },
                "transitGatewayName1": {
                    "type": "string",
                    "description": "The first transit gateway name to make a peer pair.\n"
                },
                "transitGatewayName2": {
                    "type": "string",
                    "description": "The second transit gateway name to make a peer pair.\n"
                },
                "tunnelCount": {
                    "type": "integer",
                    "description": "(Optional) Advanced option. Number of public tunnels. Required with `enable_insane_mode_encryption_over_internet`.\nConflicts with `enable_peering_over_private_network` and `enable_single_tunnel_mode`. Type: Integer. Valid Range: 2-20.\nAvailable as of provider version R2.19+.\n"
                }
            },
            "required": [
                "transitGatewayName1",
                "transitGatewayName2"
            ],
            "inputProperties": {
                "enableInsaneModeEncryptionOverInternet": {
                    "type": "boolean",
                    "description": "(Optional) Advanced option. Enable Insane Mode Encryption over Internet. Transit gateways must be in Insane Mode.\nCurrently, only inter-cloud connections between AWS and Azure are supported. Required with valid `tunnel_count`.\nConflicts with `enable_peering_over_private_network` and `enable_single_tunnel_mode`. Type: Boolean. Default: false.\nAvailable as of provider version R2.19+.\n",
                    "willReplaceOnChanges": true
                },
                "enableMaxPerformance": {
                    "type": "boolean",
                    "description": "Indicates whether the maximum amount of HPE tunnels will be created. Only valid when the two transit gateways are each\nlaunched in Insane Mode and in the same cloud type. Available as of provider version R2.22.2+.\n",
                    "willReplaceOnChanges": true
                },
                "enablePeeringOverPrivateNetwork": {
                    "type": "boolean",
                    "description": "(Optional) Advanced option. Enable peering over private network. Only appears and applies to when the two Multi-cloud\nTransit Gateways are each launched in Insane Mode and in a different cloud type. Conflicts with\n`enable_insane_mode_encryption_over_internet` and `tunnel_count`. Type: Boolean. Default: false. Available in provider\nversion R2.17.1+\n",
                    "willReplaceOnChanges": true
                },
                "enableSingleTunnelMode": {
                    "type": "boolean",
                    "description": "(Optional) Advanced option. Enable peering with Single-Tunnel mode. Only appears and applies to when the two Multi-cloud\nTransit Gateways are each launched in Insane Mode and in a different cloud type. Required with\n`enable_peering_over_private_network`. Conflicts with `enable_insane_mode_encryption_over_internet` and `tunnel_count`.\nType: Boolean. Default: false. Available as of provider version R2.18+.\n",
                    "willReplaceOnChanges": true
                },
                "gateway1ExcludedNetworkCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded network CIDRs for the first transit gateway.\n"
                },
                "gateway1ExcludedTgwConnections": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded TGW connections for the first transit gateway.\n"
                },
                "gateway2ExcludedNetworkCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded network CIDRs for the second transit gateway.\n"
                },
                "gateway2ExcludedTgwConnections": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of excluded TGW connections for the second transit gateway.\n"
                },
                "prependAsPath1s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit_gateway_name1.\n"
                },
                "prependAsPath2s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit_gateway_name2.\n"
                },
                "transitGatewayName1": {
                    "type": "string",
                    "description": "The first transit gateway name to make a peer pair.\n",
                    "willReplaceOnChanges": true
                },
                "transitGatewayName2": {
                    "type": "string",
                    "description": "The second transit gateway name to make a peer pair.\n",
                    "willReplaceOnChanges": true
                },
                "tunnelCount": {
                    "type": "integer",
                    "description": "(Optional) Advanced option. Number of public tunnels. Required with `enable_insane_mode_encryption_over_internet`.\nConflicts with `enable_peering_over_private_network` and `enable_single_tunnel_mode`. Type: Integer. Valid Range: 2-20.\nAvailable as of provider version R2.19+.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "transitGatewayName1",
                "transitGatewayName2"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixTransitGatewayPeering resources.\n",
                "properties": {
                    "enableInsaneModeEncryptionOverInternet": {
                        "type": "boolean",
                        "description": "(Optional) Advanced option. Enable Insane Mode Encryption over Internet. Transit gateways must be in Insane Mode.\nCurrently, only inter-cloud connections between AWS and Azure are supported. Required with valid `tunnel_count`.\nConflicts with `enable_peering_over_private_network` and `enable_single_tunnel_mode`. Type: Boolean. Default: false.\nAvailable as of provider version R2.19+.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableMaxPerformance": {
                        "type": "boolean",
                        "description": "Indicates whether the maximum amount of HPE tunnels will be created. Only valid when the two transit gateways are each\nlaunched in Insane Mode and in the same cloud type. Available as of provider version R2.22.2+.\n",
                        "willReplaceOnChanges": true
                    },
                    "enablePeeringOverPrivateNetwork": {
                        "type": "boolean",
                        "description": "(Optional) Advanced option. Enable peering over private network. Only appears and applies to when the two Multi-cloud\nTransit Gateways are each launched in Insane Mode and in a different cloud type. Conflicts with\n`enable_insane_mode_encryption_over_internet` and `tunnel_count`. Type: Boolean. Default: false. Available in provider\nversion R2.17.1+\n",
                        "willReplaceOnChanges": true
                    },
                    "enableSingleTunnelMode": {
                        "type": "boolean",
                        "description": "(Optional) Advanced option. Enable peering with Single-Tunnel mode. Only appears and applies to when the two Multi-cloud\nTransit Gateways are each launched in Insane Mode and in a different cloud type. Required with\n`enable_peering_over_private_network`. Conflicts with `enable_insane_mode_encryption_over_internet` and `tunnel_count`.\nType: Boolean. Default: false. Available as of provider version R2.18+.\n",
                        "willReplaceOnChanges": true
                    },
                    "gateway1ExcludedNetworkCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of excluded network CIDRs for the first transit gateway.\n"
                    },
                    "gateway1ExcludedTgwConnections": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of excluded TGW connections for the first transit gateway.\n"
                    },
                    "gateway2ExcludedNetworkCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of excluded network CIDRs for the second transit gateway.\n"
                    },
                    "gateway2ExcludedTgwConnections": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of excluded TGW connections for the second transit gateway.\n"
                    },
                    "prependAsPath1s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit_gateway_name1.\n"
                    },
                    "prependAsPath2s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit_gateway_name2.\n"
                    },
                    "transitGatewayName1": {
                        "type": "string",
                        "description": "The first transit gateway name to make a peer pair.\n",
                        "willReplaceOnChanges": true
                    },
                    "transitGatewayName2": {
                        "type": "string",
                        "description": "The second transit gateway name to make a peer pair.\n",
                        "willReplaceOnChanges": true
                    },
                    "tunnelCount": {
                        "type": "integer",
                        "description": "(Optional) Advanced option. Number of public tunnels. Required with `enable_insane_mode_encryption_over_internet`.\nConflicts with `enable_peering_over_private_network` and `enable_single_tunnel_mode`. Type: Integer. Valid Range: 2-20.\nAvailable as of provider version R2.19+.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixTransitVpc:AviatrixTransitVpc": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider, requires an integer value. Use 1 for AWS.\n"
                },
                "connectedTransit": {
                    "type": "string",
                    "description": "Specify Connected Transit status.\n"
                },
                "enableFirenetInterfaces": {
                    "type": "boolean",
                    "description": "Specify whether to enable firenet interfaces or not.\n"
                },
                "enableHybridConnection": {
                    "type": "boolean",
                    "description": "Sign of readiness for TGW connection.\n"
                },
                "enableNat": {
                    "type": "string",
                    "description": "Enable NAT for this container.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Name of the gateway which is going to be created.\n"
                },
                "haGwSize": {
                    "type": "string",
                    "description": "HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).\n"
                },
                "haInsaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Transit HA Gateway. Required if insane_mode is enabled and ha_subnet is set.\n"
                },
                "haSubnet": {
                    "type": "string",
                    "description": "HA Subnet.\n"
                },
                "insaneMode": {
                    "type": "boolean",
                    "description": "Enable Insane Mode for Transit. Valid values: true, false. If insane mode is enabled, gateway size has to at least be c5\nsize.\n"
                },
                "insaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Transit Gateway. Required if insane_mode is enabled.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "Public Subnet Name.\n"
                },
                "tagLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Instance tag of cloud provider.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC-ID/VNet-Name of cloud provider.\n"
                },
                "vpcReg": {
                    "type": "string",
                    "description": "Region of cloud provider.\n"
                },
                "vpcSize": {
                    "type": "string",
                    "description": "Size of the gateway instance.\n"
                }
            },
            "required": [
                "accountName",
                "cloudType",
                "gwName",
                "subnet",
                "vpcId",
                "vpcReg",
                "vpcSize"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider, requires an integer value. Use 1 for AWS.\n"
                },
                "connectedTransit": {
                    "type": "string",
                    "description": "Specify Connected Transit status.\n"
                },
                "enableFirenetInterfaces": {
                    "type": "boolean",
                    "description": "Specify whether to enable firenet interfaces or not.\n"
                },
                "enableHybridConnection": {
                    "type": "boolean",
                    "description": "Sign of readiness for TGW connection.\n"
                },
                "enableNat": {
                    "type": "string",
                    "description": "Enable NAT for this container.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Name of the gateway which is going to be created.\n"
                },
                "haGwSize": {
                    "type": "string",
                    "description": "HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).\n"
                },
                "haInsaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Transit HA Gateway. Required if insane_mode is enabled and ha_subnet is set.\n"
                },
                "haSubnet": {
                    "type": "string",
                    "description": "HA Subnet.\n"
                },
                "insaneMode": {
                    "type": "boolean",
                    "description": "Enable Insane Mode for Transit. Valid values: true, false. If insane mode is enabled, gateway size has to at least be c5\nsize.\n"
                },
                "insaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Transit Gateway. Required if insane_mode is enabled.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "Public Subnet Name.\n"
                },
                "tagLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Instance tag of cloud provider.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC-ID/VNet-Name of cloud provider.\n"
                },
                "vpcReg": {
                    "type": "string",
                    "description": "Region of cloud provider.\n"
                },
                "vpcSize": {
                    "type": "string",
                    "description": "Size of the gateway instance.\n"
                }
            },
            "requiredInputs": [
                "accountName",
                "cloudType",
                "gwName",
                "subnet",
                "vpcId",
                "vpcReg",
                "vpcSize"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixTransitVpc resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "This parameter represents the name of a Cloud-Account in Aviatrix controller.\n"
                    },
                    "cloudType": {
                        "type": "integer",
                        "description": "Type of cloud service provider, requires an integer value. Use 1 for AWS.\n"
                    },
                    "connectedTransit": {
                        "type": "string",
                        "description": "Specify Connected Transit status.\n"
                    },
                    "enableFirenetInterfaces": {
                        "type": "boolean",
                        "description": "Specify whether to enable firenet interfaces or not.\n"
                    },
                    "enableHybridConnection": {
                        "type": "boolean",
                        "description": "Sign of readiness for TGW connection.\n"
                    },
                    "enableNat": {
                        "type": "string",
                        "description": "Enable NAT for this container.\n"
                    },
                    "gwName": {
                        "type": "string",
                        "description": "Name of the gateway which is going to be created.\n"
                    },
                    "haGwSize": {
                        "type": "string",
                        "description": "HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).\n"
                    },
                    "haInsaneModeAz": {
                        "type": "string",
                        "description": "AZ of subnet being created for Insane Mode Transit HA Gateway. Required if insane_mode is enabled and ha_subnet is set.\n"
                    },
                    "haSubnet": {
                        "type": "string",
                        "description": "HA Subnet.\n"
                    },
                    "insaneMode": {
                        "type": "boolean",
                        "description": "Enable Insane Mode for Transit. Valid values: true, false. If insane mode is enabled, gateway size has to at least be c5\nsize.\n"
                    },
                    "insaneModeAz": {
                        "type": "string",
                        "description": "AZ of subnet being created for Insane Mode Transit Gateway. Required if insane_mode is enabled.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "Public Subnet Name.\n"
                    },
                    "tagLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Instance tag of cloud provider.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "VPC-ID/VNet-Name of cloud provider.\n"
                    },
                    "vpcReg": {
                        "type": "string",
                        "description": "Region of cloud provider.\n"
                    },
                    "vpcSize": {
                        "type": "string",
                        "description": "Size of the gateway instance.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixTunnel:AviatrixTunnel": {
            "properties": {
                "enableHa": {
                    "type": "boolean",
                    "description": "Whether Peering HA is enabled. Valid inputs: true or false.\n"
                },
                "gwName1": {
                    "type": "string",
                    "description": "The first VPC Container name to make a peer pair.\n"
                },
                "gwName2": {
                    "type": "string",
                    "description": "The second VPC Container name to make a peer pair.\n"
                },
                "peeringHastatus": {
                    "type": "string",
                    "description": "Status of the HA tunnel.\n"
                },
                "peeringLink": {
                    "type": "string",
                    "description": "Name of the peering link.\n"
                },
                "peeringState": {
                    "type": "string",
                    "description": "Status of the tunnel.\n"
                }
            },
            "required": [
                "gwName1",
                "gwName2",
                "peeringHastatus",
                "peeringLink",
                "peeringState"
            ],
            "inputProperties": {
                "enableHa": {
                    "type": "boolean",
                    "description": "Whether Peering HA is enabled. Valid inputs: true or false.\n"
                },
                "gwName1": {
                    "type": "string",
                    "description": "The first VPC Container name to make a peer pair.\n"
                },
                "gwName2": {
                    "type": "string",
                    "description": "The second VPC Container name to make a peer pair.\n"
                }
            },
            "requiredInputs": [
                "gwName1",
                "gwName2"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixTunnel resources.\n",
                "properties": {
                    "enableHa": {
                        "type": "boolean",
                        "description": "Whether Peering HA is enabled. Valid inputs: true or false.\n"
                    },
                    "gwName1": {
                        "type": "string",
                        "description": "The first VPC Container name to make a peer pair.\n"
                    },
                    "gwName2": {
                        "type": "string",
                        "description": "The second VPC Container name to make a peer pair.\n"
                    },
                    "peeringHastatus": {
                        "type": "string",
                        "description": "Status of the HA tunnel.\n"
                    },
                    "peeringLink": {
                        "type": "string",
                        "description": "Name of the peering link.\n"
                    },
                    "peeringState": {
                        "type": "string",
                        "description": "Status of the tunnel.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixVgwConn:AviatrixVgwConn": {
            "properties": {
                "bgpLocalAsNum": {
                    "type": "string",
                    "description": "BGP local ASN (Autonomous System Number). Integer between 1-4294967294.\n"
                },
                "bgpVgwAccount": {
                    "type": "string",
                    "description": "Account of AWS's VGW that is used for this connection.\n"
                },
                "bgpVgwId": {
                    "type": "string",
                    "description": "Id of AWS's VGW that is used for this connection.\n"
                },
                "bgpVgwRegion": {
                    "type": "string",
                    "description": "Region of AWS's VGW that is used for this connection.\n"
                },
                "connName": {
                    "type": "string",
                    "description": "The name of the VGW connection which is going to be created.\n"
                },
                "enableEventTriggeredHa": {
                    "type": "boolean",
                    "description": "Enable Event Triggered HA.\n"
                },
                "enableLearnedCidrsApproval": {
                    "type": "boolean",
                    "description": "Enable learned CIDR approval for the connection. Requires the transit_gateway's 'learned_cidrs_approval_mode' attribute\nbe set to 'connection'. Valid values: true, false. Default value: false. Available as of provider version R2.18+.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Name of the Transit Gateway.\n"
                },
                "manualBgpAdvertisedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Configure manual BGP advertised CIDRs for this connection. Available as of provider version R2.18+.\n"
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC-ID where the Transit Gateway is located.\n"
                }
            },
            "required": [
                "bgpLocalAsNum",
                "bgpVgwAccount",
                "bgpVgwId",
                "bgpVgwRegion",
                "connName",
                "gwName",
                "vpcId"
            ],
            "inputProperties": {
                "bgpLocalAsNum": {
                    "type": "string",
                    "description": "BGP local ASN (Autonomous System Number). Integer between 1-4294967294.\n",
                    "willReplaceOnChanges": true
                },
                "bgpVgwAccount": {
                    "type": "string",
                    "description": "Account of AWS's VGW that is used for this connection.\n",
                    "willReplaceOnChanges": true
                },
                "bgpVgwId": {
                    "type": "string",
                    "description": "Id of AWS's VGW that is used for this connection.\n",
                    "willReplaceOnChanges": true
                },
                "bgpVgwRegion": {
                    "type": "string",
                    "description": "Region of AWS's VGW that is used for this connection.\n",
                    "willReplaceOnChanges": true
                },
                "connName": {
                    "type": "string",
                    "description": "The name of the VGW connection which is going to be created.\n",
                    "willReplaceOnChanges": true
                },
                "enableEventTriggeredHa": {
                    "type": "boolean",
                    "description": "Enable Event Triggered HA.\n"
                },
                "enableLearnedCidrsApproval": {
                    "type": "boolean",
                    "description": "Enable learned CIDR approval for the connection. Requires the transit_gateway's 'learned_cidrs_approval_mode' attribute\nbe set to 'connection'. Valid values: true, false. Default value: false. Available as of provider version R2.18+.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Name of the Transit Gateway.\n",
                    "willReplaceOnChanges": true
                },
                "manualBgpAdvertisedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Configure manual BGP advertised CIDRs for this connection. Available as of provider version R2.18+.\n"
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC-ID where the Transit Gateway is located.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "bgpLocalAsNum",
                "bgpVgwAccount",
                "bgpVgwId",
                "bgpVgwRegion",
                "connName",
                "gwName",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixVgwConn resources.\n",
                "properties": {
                    "bgpLocalAsNum": {
                        "type": "string",
                        "description": "BGP local ASN (Autonomous System Number). Integer between 1-4294967294.\n",
                        "willReplaceOnChanges": true
                    },
                    "bgpVgwAccount": {
                        "type": "string",
                        "description": "Account of AWS's VGW that is used for this connection.\n",
                        "willReplaceOnChanges": true
                    },
                    "bgpVgwId": {
                        "type": "string",
                        "description": "Id of AWS's VGW that is used for this connection.\n",
                        "willReplaceOnChanges": true
                    },
                    "bgpVgwRegion": {
                        "type": "string",
                        "description": "Region of AWS's VGW that is used for this connection.\n",
                        "willReplaceOnChanges": true
                    },
                    "connName": {
                        "type": "string",
                        "description": "The name of the VGW connection which is going to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableEventTriggeredHa": {
                        "type": "boolean",
                        "description": "Enable Event Triggered HA.\n"
                    },
                    "enableLearnedCidrsApproval": {
                        "type": "boolean",
                        "description": "Enable learned CIDR approval for the connection. Requires the transit_gateway's 'learned_cidrs_approval_mode' attribute\nbe set to 'connection'. Valid values: true, false. Default value: false. Available as of provider version R2.18+.\n"
                    },
                    "gwName": {
                        "type": "string",
                        "description": "Name of the Transit Gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "manualBgpAdvertisedCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Configure manual BGP advertised CIDRs for this connection. Available as of provider version R2.18+.\n"
                    },
                    "prependAsPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "VPC-ID where the Transit Gateway is located.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixVpc:AviatrixVpc": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Account name. This account will be used to create an Aviatrix VPC.\n"
                },
                "availabilityDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of OCI availability domains.\n"
                },
                "aviatrixFirenetVpc": {
                    "type": "boolean",
                    "description": "Specify the VPC as Aviatrix FireNet VPC or not. Required to be false for GCP provider.\n"
                },
                "aviatrixTransitVpc": {
                    "type": "boolean",
                    "description": "Specify the VPC as Aviatrix Transit VPC or not. Required to be false for GCP provider.\n"
                },
                "azureVnetResourceId": {
                    "type": "string",
                    "description": "Azure vnet resource ID.\n"
                },
                "cidr": {
                    "type": "string",
                    "description": "Subnet of the VPC to be created. Required to be empty for GCP provider, and non-empty for other providers.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider.\n"
                },
                "enableNativeGwlb": {
                    "type": "boolean",
                    "description": "Enable Native AWS GWLB for FireNet Function. Only valid with cloud_type = 1 (AWS). Valid values: true or false. Default\nvalue: false. Available as of provider version R2.18+.\n"
                },
                "enablePrivateOobSubnet": {
                    "type": "boolean",
                    "description": "Switch to enable private oob subnet. Only supported for AWS/AWSGov provider. Valid values: true, false. Default value:\nfalse.\n"
                },
                "faultDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of OCI fault domains.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the VPC to be created.\n"
                },
                "numOfSubnetPairs": {
                    "type": "integer",
                    "description": "Number of public subnet and private subnet pair to be created.\n"
                },
                "privateModeSubnets": {
                    "type": "boolean",
                    "description": "Switch to only launch private subnets. Only available when Private Mode is enabled on the Controller.\n"
                },
                "privateSubnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixVpcPrivateSubnet:AviatrixVpcPrivateSubnet"
                    },
                    "description": "List of private subnet of the VPC to be created.\n"
                },
                "publicSubnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixVpcPublicSubnet:AviatrixVpcPublicSubnet"
                    },
                    "description": "List of public subnet of the VPC to be created.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of cloud provider. Required to be empty for GCP provider, and non-empty for other providers.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "Resource group of the Azure VPC created.\n"
                },
                "routeTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of route table ids associated with this VPC.\n"
                },
                "subnetSize": {
                    "type": "integer",
                    "description": "Subnet size.\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixVpcSubnet:AviatrixVpcSubnet"
                    },
                    "description": "List of subnet of the VPC to be created. Required to be non-empty for GCP provider, and empty for other providers.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "ID of the VPC created.\n"
                }
            },
            "required": [
                "accountName",
                "availabilityDomains",
                "azureVnetResourceId",
                "cloudType",
                "faultDomains",
                "name",
                "privateSubnets",
                "publicSubnets",
                "resourceGroup",
                "routeTables",
                "subnets",
                "vpcId"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "Account name. This account will be used to create an Aviatrix VPC.\n",
                    "willReplaceOnChanges": true
                },
                "aviatrixFirenetVpc": {
                    "type": "boolean",
                    "description": "Specify the VPC as Aviatrix FireNet VPC or not. Required to be false for GCP provider.\n",
                    "willReplaceOnChanges": true
                },
                "aviatrixTransitVpc": {
                    "type": "boolean",
                    "description": "Specify the VPC as Aviatrix Transit VPC or not. Required to be false for GCP provider.\n",
                    "willReplaceOnChanges": true
                },
                "cidr": {
                    "type": "string",
                    "description": "Subnet of the VPC to be created. Required to be empty for GCP provider, and non-empty for other providers.\n",
                    "willReplaceOnChanges": true
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider.\n",
                    "willReplaceOnChanges": true
                },
                "enableNativeGwlb": {
                    "type": "boolean",
                    "description": "Enable Native AWS GWLB for FireNet Function. Only valid with cloud_type = 1 (AWS). Valid values: true or false. Default\nvalue: false. Available as of provider version R2.18+.\n"
                },
                "enablePrivateOobSubnet": {
                    "type": "boolean",
                    "description": "Switch to enable private oob subnet. Only supported for AWS/AWSGov provider. Valid values: true, false. Default value:\nfalse.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the VPC to be created.\n",
                    "willReplaceOnChanges": true
                },
                "numOfSubnetPairs": {
                    "type": "integer",
                    "description": "Number of public subnet and private subnet pair to be created.\n",
                    "willReplaceOnChanges": true
                },
                "privateModeSubnets": {
                    "type": "boolean",
                    "description": "Switch to only launch private subnets. Only available when Private Mode is enabled on the Controller.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "Region of cloud provider. Required to be empty for GCP provider, and non-empty for other providers.\n",
                    "willReplaceOnChanges": true
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "Resource group of the Azure VPC created.\n",
                    "willReplaceOnChanges": true
                },
                "subnetSize": {
                    "type": "integer",
                    "description": "Subnet size.\n",
                    "willReplaceOnChanges": true
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixVpcSubnet:AviatrixVpcSubnet"
                    },
                    "description": "List of subnet of the VPC to be created. Required to be non-empty for GCP provider, and empty for other providers.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountName",
                "cloudType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixVpc resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "Account name. This account will be used to create an Aviatrix VPC.\n",
                        "willReplaceOnChanges": true
                    },
                    "availabilityDomains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of OCI availability domains.\n"
                    },
                    "aviatrixFirenetVpc": {
                        "type": "boolean",
                        "description": "Specify the VPC as Aviatrix FireNet VPC or not. Required to be false for GCP provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "aviatrixTransitVpc": {
                        "type": "boolean",
                        "description": "Specify the VPC as Aviatrix Transit VPC or not. Required to be false for GCP provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "azureVnetResourceId": {
                        "type": "string",
                        "description": "Azure vnet resource ID.\n"
                    },
                    "cidr": {
                        "type": "string",
                        "description": "Subnet of the VPC to be created. Required to be empty for GCP provider, and non-empty for other providers.\n",
                        "willReplaceOnChanges": true
                    },
                    "cloudType": {
                        "type": "integer",
                        "description": "Type of cloud service provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableNativeGwlb": {
                        "type": "boolean",
                        "description": "Enable Native AWS GWLB for FireNet Function. Only valid with cloud_type = 1 (AWS). Valid values: true or false. Default\nvalue: false. Available as of provider version R2.18+.\n"
                    },
                    "enablePrivateOobSubnet": {
                        "type": "boolean",
                        "description": "Switch to enable private oob subnet. Only supported for AWS/AWSGov provider. Valid values: true, false. Default value:\nfalse.\n",
                        "willReplaceOnChanges": true
                    },
                    "faultDomains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of OCI fault domains.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the VPC to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "numOfSubnetPairs": {
                        "type": "integer",
                        "description": "Number of public subnet and private subnet pair to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "privateModeSubnets": {
                        "type": "boolean",
                        "description": "Switch to only launch private subnets. Only available when Private Mode is enabled on the Controller.\n",
                        "willReplaceOnChanges": true
                    },
                    "privateSubnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixVpcPrivateSubnet:AviatrixVpcPrivateSubnet"
                        },
                        "description": "List of private subnet of the VPC to be created.\n"
                    },
                    "publicSubnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixVpcPublicSubnet:AviatrixVpcPublicSubnet"
                        },
                        "description": "List of public subnet of the VPC to be created.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of cloud provider. Required to be empty for GCP provider, and non-empty for other providers.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceGroup": {
                        "type": "string",
                        "description": "Resource group of the Azure VPC created.\n",
                        "willReplaceOnChanges": true
                    },
                    "routeTables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of route table ids associated with this VPC.\n"
                    },
                    "subnetSize": {
                        "type": "integer",
                        "description": "Subnet size.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixVpcSubnet:AviatrixVpcSubnet"
                        },
                        "description": "List of subnet of the VPC to be created. Required to be non-empty for GCP provider, and empty for other providers.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "ID of the VPC created.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixVpnCertDownload:AviatrixVpnCertDownload": {
            "properties": {
                "downloadEnabled": {
                    "type": "boolean",
                    "description": "Whether the VPN Certificate download is enabled. Supported Values: \"true\", \"false\"\n"
                },
                "samlEndpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SAML endpoint names for which the downloading should be enabled . Currently, only a single endpoint is\nsupported. Example: [\"saml_endpoint_1\"].\n"
                }
            },
            "inputProperties": {
                "downloadEnabled": {
                    "type": "boolean",
                    "description": "Whether the VPN Certificate download is enabled. Supported Values: \"true\", \"false\"\n"
                },
                "samlEndpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SAML endpoint names for which the downloading should be enabled . Currently, only a single endpoint is\nsupported. Example: [\"saml_endpoint_1\"].\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixVpnCertDownload resources.\n",
                "properties": {
                    "downloadEnabled": {
                        "type": "boolean",
                        "description": "Whether the VPN Certificate download is enabled. Supported Values: \"true\", \"false\"\n"
                    },
                    "samlEndpoints": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of SAML endpoint names for which the downloading should be enabled . Currently, only a single endpoint is\nsupported. Example: [\"saml_endpoint_1\"].\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixVpnProfile:AviatrixVpnProfile": {
            "properties": {
                "baseRule": {
                    "type": "string",
                    "description": "Base policy rule of the profile to be added. Enter 'allow_all' or 'deny_all'.\n"
                },
                "manageUserAttachment": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "name for the VPN profile.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixVpnProfilePolicy:AviatrixVpnProfilePolicy"
                    },
                    "description": "New security policy for the profile.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VPN users to attach to this profile.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "baseRule": {
                    "type": "string",
                    "description": "Base policy rule of the profile to be added. Enter 'allow_all' or 'deny_all'.\n"
                },
                "manageUserAttachment": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "name for the VPN profile.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/AviatrixVpnProfilePolicy:AviatrixVpnProfilePolicy"
                    },
                    "description": "New security policy for the profile.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VPN users to attach to this profile.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixVpnProfile resources.\n",
                "properties": {
                    "baseRule": {
                        "type": "string",
                        "description": "Base policy rule of the profile to be added. Enter 'allow_all' or 'deny_all'.\n"
                    },
                    "manageUserAttachment": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "name for the VPN profile.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/AviatrixVpnProfilePolicy:AviatrixVpnProfilePolicy"
                        },
                        "description": "New security policy for the profile.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of VPN users to attach to this profile.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixVpnUser:AviatrixVpnUser": {
            "properties": {
                "dnsName": {
                    "type": "string",
                    "description": "FQDN of a DNS based VPN service such as GeoVPN or UDP load balancer.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "If ELB is enabled, this will be the name of the ELB, else it will be the name of the Aviatrix VPN gateway.\n"
                },
                "manageUserAttachment": {
                    "type": "boolean"
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of profiles for user to attach to.\n"
                },
                "samlEndpoint": {
                    "type": "string",
                    "description": "This is the name of the SAML endpoint to which the user will be associated.\n"
                },
                "userEmail": {
                    "type": "string",
                    "description": "VPN User's email.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "VPN user name.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC Id of Aviatrix VPN gateway.\n"
                }
            },
            "required": [
                "userName"
            ],
            "inputProperties": {
                "dnsName": {
                    "type": "string",
                    "description": "FQDN of a DNS based VPN service such as GeoVPN or UDP load balancer.\n",
                    "willReplaceOnChanges": true
                },
                "gwName": {
                    "type": "string",
                    "description": "If ELB is enabled, this will be the name of the ELB, else it will be the name of the Aviatrix VPN gateway.\n",
                    "willReplaceOnChanges": true
                },
                "manageUserAttachment": {
                    "type": "boolean"
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of profiles for user to attach to.\n"
                },
                "samlEndpoint": {
                    "type": "string",
                    "description": "This is the name of the SAML endpoint to which the user will be associated.\n",
                    "willReplaceOnChanges": true
                },
                "userEmail": {
                    "type": "string",
                    "description": "VPN User's email.\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "VPN user name.\n",
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC Id of Aviatrix VPN gateway.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixVpnUser resources.\n",
                "properties": {
                    "dnsName": {
                        "type": "string",
                        "description": "FQDN of a DNS based VPN service such as GeoVPN or UDP load balancer.\n",
                        "willReplaceOnChanges": true
                    },
                    "gwName": {
                        "type": "string",
                        "description": "If ELB is enabled, this will be the name of the ELB, else it will be the name of the Aviatrix VPN gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "manageUserAttachment": {
                        "type": "boolean"
                    },
                    "profiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of profiles for user to attach to.\n"
                    },
                    "samlEndpoint": {
                        "type": "string",
                        "description": "This is the name of the SAML endpoint to which the user will be associated.\n",
                        "willReplaceOnChanges": true
                    },
                    "userEmail": {
                        "type": "string",
                        "description": "VPN User's email.\n",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string",
                        "description": "VPN user name.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "VPC Id of Aviatrix VPN gateway.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrixVpnUserAccelerator:AviatrixVpnUserAccelerator": {
            "properties": {
                "elbName": {
                    "type": "string",
                    "description": "ELB to include into the VPN User Accelerator.\n"
                }
            },
            "required": [
                "elbName"
            ],
            "inputProperties": {
                "elbName": {
                    "type": "string",
                    "description": "ELB to include into the VPN User Accelerator.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "elbName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AviatrixVpnUserAccelerator resources.\n",
                "properties": {
                    "elbName": {
                        "type": "string",
                        "description": "ELB to include into the VPN User Accelerator.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/aviatrix_spoke_external_device_conn:aviatrix_spoke_external_device_conn": {
            "properties": {
                "approvedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).\n"
                },
                "backupBgpMd5Key": {
                    "type": "string",
                    "description": "Backup BGP MD5 authentication key.\n"
                },
                "backupBgpRemoteAsNum": {
                    "type": "string",
                    "description": "Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.\n"
                },
                "backupDirectConnect": {
                    "type": "boolean",
                    "description": "Backup direct connect for backup external device.\n"
                },
                "backupLocalTunnelCidr": {
                    "type": "string",
                    "description": "Source CIDR for the tunnel from the backup Aviatrix spoke gateway.\n"
                },
                "backupPreSharedKey": {
                    "type": "string",
                    "description": "Backup pre shared key.\n"
                },
                "backupRemoteGatewayIp": {
                    "type": "string",
                    "description": "Backup remote gateway IP.\n"
                },
                "backupRemoteTunnelCidr": {
                    "type": "string",
                    "description": "Destination CIDR for the tunnel to the backup external device.\n"
                },
                "bgpLocalAsNum": {
                    "type": "string",
                    "description": "BGP local ASN (Autonomous System Number). Integer between 1-4294967294.\n"
                },
                "bgpMd5Key": {
                    "type": "string",
                    "description": "BGP MD5 authentication key.\n"
                },
                "bgpRemoteAsNum": {
                    "type": "string",
                    "description": "BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.\n"
                },
                "connectionName": {
                    "type": "string",
                    "description": "The name of the spoke external device connection which is going to be created.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Connection type. Valid values: 'bgp', 'static'. Default value: 'bgp'.\n"
                },
                "customAlgorithms": {
                    "type": "boolean",
                    "description": "Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.\n"
                },
                "directConnect": {
                    "type": "boolean",
                    "description": "Set true for private network infrastructure.\n"
                },
                "enableEventTriggeredHa": {
                    "type": "boolean",
                    "description": "Enable Event Triggered HA.\n"
                },
                "enableIkev2": {
                    "type": "boolean",
                    "description": "Set as true if use IKEv2.\n"
                },
                "enableLearnedCidrsApproval": {
                    "type": "boolean",
                    "description": "Enable learned CIDR approval for the connection. Only valid with 'connection_type' = 'bgp'. Requires the spoke_gateway's\n'learned_cidrs_approval_mode' attribute be set to 'connection'. Valid values: true, false. Default value: false.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Name of the BGP Spoke Gateway.\n"
                },
                "haEnabled": {
                    "type": "boolean",
                    "description": "Set as true if there are two external devices.\n"
                },
                "localTunnelCidr": {
                    "type": "string",
                    "description": "Source CIDR for the tunnel from the Aviatrix spoke gateway.\n"
                },
                "manualBgpAdvertisedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Configure manual BGP advertised CIDRs for this connection. Only valid with 'connection_type' = 'bgp'.\n"
                },
                "phase1Authentication": {
                    "type": "string",
                    "description": "Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.\n"
                },
                "phase1DhGroups": {
                    "type": "string",
                    "description": "Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.\n"
                },
                "phase1Encryption": {
                    "type": "string",
                    "description": "Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',\n'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.\n"
                },
                "phase1RemoteIdentifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Phase 1 remote identifier of the IPsec tunnel.\n"
                },
                "phase2Authentication": {
                    "type": "string",
                    "description": "Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.\n"
                },
                "phase2DhGroups": {
                    "type": "string",
                    "description": "Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.\n"
                },
                "phase2Encryption": {
                    "type": "string",
                    "description": "Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',\n'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.\n"
                },
                "preSharedKey": {
                    "type": "string",
                    "description": "If left blank, the pre-shared key will be auto generated.\n"
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.\n"
                },
                "remoteGatewayIp": {
                    "type": "string",
                    "description": "Remote Gateway IP.\n"
                },
                "remoteSubnet": {
                    "type": "string",
                    "description": "Remote CIDRs joined as a string with ','. Required for a 'static' type connection.\n"
                },
                "remoteTunnelCidr": {
                    "type": "string",
                    "description": "Destination CIDR for the tunnel to the external device.\n"
                },
                "tunnelProtocol": {
                    "type": "string",
                    "description": "Tunnel Protocol. Valid value: 'IPsec'. Default value: 'IPsec'. Case insensitive.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "ID of the VPC where the BGP Spoke Gateway is located.\n"
                }
            },
            "required": [
                "approvedCidrs",
                "backupLocalTunnelCidr",
                "backupRemoteTunnelCidr",
                "connectionName",
                "gwName",
                "localTunnelCidr",
                "remoteGatewayIp",
                "remoteTunnelCidr",
                "vpcId"
            ],
            "inputProperties": {
                "approvedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).\n"
                },
                "backupBgpMd5Key": {
                    "type": "string",
                    "description": "Backup BGP MD5 authentication key.\n"
                },
                "backupBgpRemoteAsNum": {
                    "type": "string",
                    "description": "Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.\n",
                    "willReplaceOnChanges": true
                },
                "backupDirectConnect": {
                    "type": "boolean",
                    "description": "Backup direct connect for backup external device.\n",
                    "willReplaceOnChanges": true
                },
                "backupLocalTunnelCidr": {
                    "type": "string",
                    "description": "Source CIDR for the tunnel from the backup Aviatrix spoke gateway.\n",
                    "willReplaceOnChanges": true
                },
                "backupPreSharedKey": {
                    "type": "string",
                    "description": "Backup pre shared key.\n",
                    "willReplaceOnChanges": true
                },
                "backupRemoteGatewayIp": {
                    "type": "string",
                    "description": "Backup remote gateway IP.\n",
                    "willReplaceOnChanges": true
                },
                "backupRemoteTunnelCidr": {
                    "type": "string",
                    "description": "Destination CIDR for the tunnel to the backup external device.\n",
                    "willReplaceOnChanges": true
                },
                "bgpLocalAsNum": {
                    "type": "string",
                    "description": "BGP local ASN (Autonomous System Number). Integer between 1-4294967294.\n",
                    "willReplaceOnChanges": true
                },
                "bgpMd5Key": {
                    "type": "string",
                    "description": "BGP MD5 authentication key.\n"
                },
                "bgpRemoteAsNum": {
                    "type": "string",
                    "description": "BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.\n",
                    "willReplaceOnChanges": true
                },
                "connectionName": {
                    "type": "string",
                    "description": "The name of the spoke external device connection which is going to be created.\n",
                    "willReplaceOnChanges": true
                },
                "connectionType": {
                    "type": "string",
                    "description": "Connection type. Valid values: 'bgp', 'static'. Default value: 'bgp'.\n",
                    "willReplaceOnChanges": true
                },
                "customAlgorithms": {
                    "type": "boolean",
                    "description": "Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.\n",
                    "willReplaceOnChanges": true
                },
                "directConnect": {
                    "type": "boolean",
                    "description": "Set true for private network infrastructure.\n",
                    "willReplaceOnChanges": true
                },
                "enableEventTriggeredHa": {
                    "type": "boolean",
                    "description": "Enable Event Triggered HA.\n"
                },
                "enableIkev2": {
                    "type": "boolean",
                    "description": "Set as true if use IKEv2.\n",
                    "willReplaceOnChanges": true
                },
                "enableLearnedCidrsApproval": {
                    "type": "boolean",
                    "description": "Enable learned CIDR approval for the connection. Only valid with 'connection_type' = 'bgp'. Requires the spoke_gateway's\n'learned_cidrs_approval_mode' attribute be set to 'connection'. Valid values: true, false. Default value: false.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Name of the BGP Spoke Gateway.\n",
                    "willReplaceOnChanges": true
                },
                "haEnabled": {
                    "type": "boolean",
                    "description": "Set as true if there are two external devices.\n",
                    "willReplaceOnChanges": true
                },
                "localTunnelCidr": {
                    "type": "string",
                    "description": "Source CIDR for the tunnel from the Aviatrix spoke gateway.\n",
                    "willReplaceOnChanges": true
                },
                "manualBgpAdvertisedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Configure manual BGP advertised CIDRs for this connection. Only valid with 'connection_type' = 'bgp'.\n"
                },
                "phase1Authentication": {
                    "type": "string",
                    "description": "Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.\n",
                    "willReplaceOnChanges": true
                },
                "phase1DhGroups": {
                    "type": "string",
                    "description": "Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.\n",
                    "willReplaceOnChanges": true
                },
                "phase1Encryption": {
                    "type": "string",
                    "description": "Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',\n'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.\n",
                    "willReplaceOnChanges": true
                },
                "phase1RemoteIdentifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Phase 1 remote identifier of the IPsec tunnel.\n"
                },
                "phase2Authentication": {
                    "type": "string",
                    "description": "Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.\n",
                    "willReplaceOnChanges": true
                },
                "phase2DhGroups": {
                    "type": "string",
                    "description": "Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.\n",
                    "willReplaceOnChanges": true
                },
                "phase2Encryption": {
                    "type": "string",
                    "description": "Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',\n'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.\n",
                    "willReplaceOnChanges": true
                },
                "preSharedKey": {
                    "type": "string",
                    "description": "If left blank, the pre-shared key will be auto generated.\n",
                    "willReplaceOnChanges": true
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.\n"
                },
                "remoteGatewayIp": {
                    "type": "string",
                    "description": "Remote Gateway IP.\n",
                    "willReplaceOnChanges": true
                },
                "remoteSubnet": {
                    "type": "string",
                    "description": "Remote CIDRs joined as a string with ','. Required for a 'static' type connection.\n",
                    "willReplaceOnChanges": true
                },
                "remoteTunnelCidr": {
                    "type": "string",
                    "description": "Destination CIDR for the tunnel to the external device.\n",
                    "willReplaceOnChanges": true
                },
                "tunnelProtocol": {
                    "type": "string",
                    "description": "Tunnel Protocol. Valid value: 'IPsec'. Default value: 'IPsec'. Case insensitive.\n",
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "ID of the VPC where the BGP Spoke Gateway is located.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "connectionName",
                "gwName",
                "remoteGatewayIp",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering aviatrix_spoke_external_device_conn resources.\n",
                "properties": {
                    "approvedCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).\n"
                    },
                    "backupBgpMd5Key": {
                        "type": "string",
                        "description": "Backup BGP MD5 authentication key.\n"
                    },
                    "backupBgpRemoteAsNum": {
                        "type": "string",
                        "description": "Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupDirectConnect": {
                        "type": "boolean",
                        "description": "Backup direct connect for backup external device.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupLocalTunnelCidr": {
                        "type": "string",
                        "description": "Source CIDR for the tunnel from the backup Aviatrix spoke gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupPreSharedKey": {
                        "type": "string",
                        "description": "Backup pre shared key.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupRemoteGatewayIp": {
                        "type": "string",
                        "description": "Backup remote gateway IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupRemoteTunnelCidr": {
                        "type": "string",
                        "description": "Destination CIDR for the tunnel to the backup external device.\n",
                        "willReplaceOnChanges": true
                    },
                    "bgpLocalAsNum": {
                        "type": "string",
                        "description": "BGP local ASN (Autonomous System Number). Integer between 1-4294967294.\n",
                        "willReplaceOnChanges": true
                    },
                    "bgpMd5Key": {
                        "type": "string",
                        "description": "BGP MD5 authentication key.\n"
                    },
                    "bgpRemoteAsNum": {
                        "type": "string",
                        "description": "BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionName": {
                        "type": "string",
                        "description": "The name of the spoke external device connection which is going to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Connection type. Valid values: 'bgp', 'static'. Default value: 'bgp'.\n",
                        "willReplaceOnChanges": true
                    },
                    "customAlgorithms": {
                        "type": "boolean",
                        "description": "Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.\n",
                        "willReplaceOnChanges": true
                    },
                    "directConnect": {
                        "type": "boolean",
                        "description": "Set true for private network infrastructure.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableEventTriggeredHa": {
                        "type": "boolean",
                        "description": "Enable Event Triggered HA.\n"
                    },
                    "enableIkev2": {
                        "type": "boolean",
                        "description": "Set as true if use IKEv2.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableLearnedCidrsApproval": {
                        "type": "boolean",
                        "description": "Enable learned CIDR approval for the connection. Only valid with 'connection_type' = 'bgp'. Requires the spoke_gateway's\n'learned_cidrs_approval_mode' attribute be set to 'connection'. Valid values: true, false. Default value: false.\n"
                    },
                    "gwName": {
                        "type": "string",
                        "description": "Name of the BGP Spoke Gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "haEnabled": {
                        "type": "boolean",
                        "description": "Set as true if there are two external devices.\n",
                        "willReplaceOnChanges": true
                    },
                    "localTunnelCidr": {
                        "type": "string",
                        "description": "Source CIDR for the tunnel from the Aviatrix spoke gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "manualBgpAdvertisedCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Configure manual BGP advertised CIDRs for this connection. Only valid with 'connection_type' = 'bgp'.\n"
                    },
                    "phase1Authentication": {
                        "type": "string",
                        "description": "Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.\n",
                        "willReplaceOnChanges": true
                    },
                    "phase1DhGroups": {
                        "type": "string",
                        "description": "Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.\n",
                        "willReplaceOnChanges": true
                    },
                    "phase1Encryption": {
                        "type": "string",
                        "description": "Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',\n'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.\n",
                        "willReplaceOnChanges": true
                    },
                    "phase1RemoteIdentifiers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Phase 1 remote identifier of the IPsec tunnel.\n"
                    },
                    "phase2Authentication": {
                        "type": "string",
                        "description": "Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.\n",
                        "willReplaceOnChanges": true
                    },
                    "phase2DhGroups": {
                        "type": "string",
                        "description": "Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.\n",
                        "willReplaceOnChanges": true
                    },
                    "phase2Encryption": {
                        "type": "string",
                        "description": "Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',\n'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.\n",
                        "willReplaceOnChanges": true
                    },
                    "preSharedKey": {
                        "type": "string",
                        "description": "If left blank, the pre-shared key will be auto generated.\n",
                        "willReplaceOnChanges": true
                    },
                    "prependAsPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.\n"
                    },
                    "remoteGatewayIp": {
                        "type": "string",
                        "description": "Remote Gateway IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "remoteSubnet": {
                        "type": "string",
                        "description": "Remote CIDRs joined as a string with ','. Required for a 'static' type connection.\n",
                        "willReplaceOnChanges": true
                    },
                    "remoteTunnelCidr": {
                        "type": "string",
                        "description": "Destination CIDR for the tunnel to the external device.\n",
                        "willReplaceOnChanges": true
                    },
                    "tunnelProtocol": {
                        "type": "string",
                        "description": "Tunnel Protocol. Valid value: 'IPsec'. Default value: 'IPsec'. Case insensitive.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "ID of the VPC where the BGP Spoke Gateway is located.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "aviatrix:index/getAviatrixAccount:getAviatrixAccount": {
            "inputs": {
                "description": "A collection of arguments for invoking getAviatrixAccount.\n",
                "properties": {
                    "accountName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accountName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAviatrixAccount.\n",
                "properties": {
                    "accountName": {
                        "type": "string"
                    },
                    "alicloudAccountId": {
                        "type": "string"
                    },
                    "armSubscriptionId": {
                        "type": "string"
                    },
                    "awsAccountNumber": {
                        "type": "string"
                    },
                    "awsCaCertPath": {
                        "type": "string"
                    },
                    "awsGatewayRoleApp": {
                        "type": "string"
                    },
                    "awsGatewayRoleEc2": {
                        "type": "string"
                    },
                    "awsRoleArn": {
                        "type": "string"
                    },
                    "awsRoleEc2": {
                        "type": "string"
                    },
                    "awschinaAccountNumber": {
                        "type": "string"
                    },
                    "awschinaIam": {
                        "type": "boolean"
                    },
                    "awschinaRoleApp": {
                        "type": "string"
                    },
                    "awschinaRoleEc2": {
                        "type": "string"
                    },
                    "awsgovAccountNumber": {
                        "type": "string"
                    },
                    "awsgovIam": {
                        "type": "boolean"
                    },
                    "awsgovRoleApp": {
                        "type": "string"
                    },
                    "awsgovRoleEc2": {
                        "type": "string"
                    },
                    "awssAccountNumber": {
                        "type": "string"
                    },
                    "awssCapAccountName": {
                        "type": "string"
                    },
                    "awssCapAgency": {
                        "type": "string"
                    },
                    "awssCapCertKeyPath": {
                        "type": "string"
                    },
                    "awssCapCertPath": {
                        "type": "string"
                    },
                    "awssCapRoleName": {
                        "type": "string"
                    },
                    "awssCapUrl": {
                        "type": "string"
                    },
                    "awstsAccountNumber": {
                        "type": "string"
                    },
                    "awstsCapAgency": {
                        "type": "string"
                    },
                    "awstsCapCertKeyPath": {
                        "type": "string"
                    },
                    "awstsCapCertPath": {
                        "type": "string"
                    },
                    "awstsCapMission": {
                        "type": "string"
                    },
                    "awstsCapRoleName": {
                        "type": "string"
                    },
                    "awstsCapUrl": {
                        "type": "string"
                    },
                    "azurechinaSubscriptionId": {
                        "type": "string"
                    },
                    "azuregovSubscriptionId": {
                        "type": "string"
                    },
                    "cloudType": {
                        "type": "integer"
                    },
                    "gcloudProjectId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountName",
                    "alicloudAccountId",
                    "armSubscriptionId",
                    "awsAccountNumber",
                    "awsCaCertPath",
                    "awsGatewayRoleApp",
                    "awsGatewayRoleEc2",
                    "awsRoleArn",
                    "awsRoleEc2",
                    "awschinaAccountNumber",
                    "awschinaIam",
                    "awschinaRoleApp",
                    "awschinaRoleEc2",
                    "awsgovAccountNumber",
                    "awsgovIam",
                    "awsgovRoleApp",
                    "awsgovRoleEc2",
                    "awssAccountNumber",
                    "awssCapAccountName",
                    "awssCapAgency",
                    "awssCapCertKeyPath",
                    "awssCapCertPath",
                    "awssCapRoleName",
                    "awssCapUrl",
                    "awstsAccountNumber",
                    "awstsCapAgency",
                    "awstsCapCertKeyPath",
                    "awstsCapCertPath",
                    "awstsCapMission",
                    "awstsCapRoleName",
                    "awstsCapUrl",
                    "azurechinaSubscriptionId",
                    "azuregovSubscriptionId",
                    "cloudType",
                    "gcloudProjectId",
                    "id"
                ]
            }
        },
        "aviatrix:index/getAviatrixCallerIdentity:getAviatrixCallerIdentity": {
            "outputs": {
                "description": "A collection of values returned by getAviatrixCallerIdentity.\n",
                "properties": {
                    "cid": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cid",
                    "id"
                ]
            }
        },
        "aviatrix:index/getAviatrixDeviceInterfaces:getAviatrixDeviceInterfaces": {
            "inputs": {
                "description": "A collection of arguments for invoking getAviatrixDeviceInterfaces.\n",
                "properties": {
                    "deviceName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "deviceName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAviatrixDeviceInterfaces.\n",
                "properties": {
                    "deviceName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "wanInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/getAviatrixDeviceInterfacesWanInterface:getAviatrixDeviceInterfacesWanInterface"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "deviceName",
                    "wanInterfaces",
                    "id"
                ]
            }
        },
        "aviatrix:index/getAviatrixFirenet:getAviatrixFirenet": {
            "inputs": {
                "description": "A collection of arguments for invoking getAviatrixFirenet.\n",
                "properties": {
                    "firewallInstanceAssociations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/getAviatrixFirenetFirewallInstanceAssociation:getAviatrixFirenetFirewallInstanceAssociation"
                        }
                    },
                    "vpcId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "vpcId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAviatrixFirenet.\n",
                "properties": {
                    "egressEnabled": {
                        "type": "boolean"
                    },
                    "egressStaticCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "firewallInstanceAssociations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/getAviatrixFirenetFirewallInstanceAssociation:getAviatrixFirenetFirewallInstanceAssociation"
                        }
                    },
                    "hashingAlgorithm": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "inspectionEnabled": {
                        "type": "boolean"
                    },
                    "keepAliveViaLanInterfaceEnabled": {
                        "type": "boolean"
                    },
                    "tgwSegmentationForEgressEnabled": {
                        "type": "boolean"
                    },
                    "vpcId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "egressEnabled",
                    "egressStaticCidrs",
                    "hashingAlgorithm",
                    "inspectionEnabled",
                    "keepAliveViaLanInterfaceEnabled",
                    "tgwSegmentationForEgressEnabled",
                    "vpcId",
                    "id"
                ]
            }
        },
        "aviatrix:index/getAviatrixFirenetFirewallManager:getAviatrixFirenetFirewallManager": {
            "inputs": {
                "description": "A collection of arguments for invoking getAviatrixFirenetFirewallManager.\n",
                "properties": {
                    "gatewayName": {
                        "type": "string"
                    },
                    "numberOfRetries": {
                        "type": "integer"
                    },
                    "password": {
                        "type": "string"
                    },
                    "publicIp": {
                        "type": "string"
                    },
                    "retryInterval": {
                        "type": "integer"
                    },
                    "routeTable": {
                        "type": "string"
                    },
                    "save": {
                        "type": "boolean"
                    },
                    "synchronize": {
                        "type": "boolean"
                    },
                    "template": {
                        "type": "string"
                    },
                    "templateStack": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "vendorType": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "gatewayName",
                    "vendorType",
                    "vpcId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAviatrixFirenetFirewallManager.\n",
                "properties": {
                    "gatewayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "numberOfRetries": {
                        "type": "integer"
                    },
                    "password": {
                        "type": "string"
                    },
                    "publicIp": {
                        "type": "string"
                    },
                    "retryInterval": {
                        "type": "integer"
                    },
                    "routeTable": {
                        "type": "string"
                    },
                    "save": {
                        "type": "boolean"
                    },
                    "synchronize": {
                        "type": "boolean"
                    },
                    "template": {
                        "type": "string"
                    },
                    "templateStack": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "vendorType": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "gatewayName",
                    "vendorType",
                    "vpcId",
                    "id"
                ]
            }
        },
        "aviatrix:index/getAviatrixFirenetVendorIntegration:getAviatrixFirenetVendorIntegration": {
            "inputs": {
                "description": "A collection of arguments for invoking getAviatrixFirenetVendorIntegration.\n",
                "properties": {
                    "apiToken": {
                        "type": "string"
                    },
                    "firewallName": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "numberOfRetries": {
                        "type": "integer"
                    },
                    "password": {
                        "type": "string"
                    },
                    "privateKeyFile": {
                        "type": "string"
                    },
                    "publicIp": {
                        "type": "string"
                    },
                    "retryInterval": {
                        "type": "integer"
                    },
                    "routeTable": {
                        "type": "string"
                    },
                    "save": {
                        "type": "boolean"
                    },
                    "synchronize": {
                        "type": "boolean"
                    },
                    "username": {
                        "type": "string"
                    },
                    "vendorType": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "vendorType",
                    "vpcId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAviatrixFirenetVendorIntegration.\n",
                "properties": {
                    "apiToken": {
                        "type": "string"
                    },
                    "firewallName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "numberOfRetries": {
                        "type": "integer"
                    },
                    "password": {
                        "type": "string"
                    },
                    "privateKeyFile": {
                        "type": "string"
                    },
                    "publicIp": {
                        "type": "string"
                    },
                    "retryInterval": {
                        "type": "integer"
                    },
                    "routeTable": {
                        "type": "string"
                    },
                    "save": {
                        "type": "boolean"
                    },
                    "synchronize": {
                        "type": "boolean"
                    },
                    "username": {
                        "type": "string"
                    },
                    "vendorType": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "vendorType",
                    "vpcId",
                    "id"
                ]
            }
        },
        "aviatrix:index/getAviatrixFirewall:getAviatrixFirewall": {
            "inputs": {
                "description": "A collection of arguments for invoking getAviatrixFirewall.\n",
                "properties": {
                    "gwName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "gwName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAviatrixFirewall.\n",
                "properties": {
                    "baseLogEnabled": {
                        "type": "boolean"
                    },
                    "basePolicy": {
                        "type": "string"
                    },
                    "gwName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/getAviatrixFirewallPolicy:getAviatrixFirewallPolicy"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "baseLogEnabled",
                    "basePolicy",
                    "gwName",
                    "policies",
                    "id"
                ]
            }
        },
        "aviatrix:index/getAviatrixFirewallInstanceImages:getAviatrixFirewallInstanceImages": {
            "inputs": {
                "description": "A collection of arguments for invoking getAviatrixFirewallInstanceImages.\n",
                "properties": {
                    "vpcId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "vpcId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAviatrixFirewallInstanceImages.\n",
                "properties": {
                    "firewallImages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/getAviatrixFirewallInstanceImagesFirewallImage:getAviatrixFirewallInstanceImagesFirewallImage"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "vpcId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "firewallImages",
                    "vpcId",
                    "id"
                ]
            }
        },
        "aviatrix:index/getAviatrixGateway:getAviatrixGateway": {
            "inputs": {
                "description": "A collection of arguments for invoking getAviatrixGateway.\n",
                "properties": {
                    "gwName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "gwName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAviatrixGateway.\n",
                "properties": {
                    "accountName": {
                        "type": "string"
                    },
                    "additionalCidrs": {
                        "type": "string"
                    },
                    "additionalCidrsDesignatedGateway": {
                        "type": "string"
                    },
                    "allocateNewEip": {
                        "type": "boolean"
                    },
                    "availabilityDomain": {
                        "type": "string"
                    },
                    "azureEipNameResourceGroup": {
                        "type": "string"
                    },
                    "cloudInstanceId": {
                        "type": "string"
                    },
                    "cloudType": {
                        "type": "integer"
                    },
                    "duoApiHostname": {
                        "type": "string"
                    },
                    "duoIntegrationKey": {
                        "type": "string"
                    },
                    "duoPushMode": {
                        "type": "string"
                    },
                    "elbDnsName": {
                        "type": "string"
                    },
                    "elbName": {
                        "type": "string"
                    },
                    "enableDesignatedGateway": {
                        "type": "boolean"
                    },
                    "enableElb": {
                        "type": "boolean"
                    },
                    "enableEncryptVolume": {
                        "type": "boolean"
                    },
                    "enableJumboFrame": {
                        "type": "boolean"
                    },
                    "enableLdap": {
                        "type": "boolean"
                    },
                    "enableMonitorGatewaySubnets": {
                        "type": "boolean"
                    },
                    "enablePublicSubnetFiltering": {
                        "type": "boolean"
                    },
                    "enableSpotInstance": {
                        "type": "boolean"
                    },
                    "enableVpcDnsServer": {
                        "type": "boolean"
                    },
                    "enableVpnNat": {
                        "type": "boolean"
                    },
                    "faultDomain": {
                        "type": "string"
                    },
                    "fqdnLanCidr": {
                        "type": "string"
                    },
                    "fqdnLanInterface": {
                        "type": "string"
                    },
                    "fqdnLanVpcId": {
                        "type": "string"
                    },
                    "gwName": {
                        "type": "string"
                    },
                    "gwSize": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "idleTimeout": {
                        "type": "integer"
                    },
                    "imageVersion": {
                        "type": "string"
                    },
                    "insaneMode": {
                        "type": "boolean"
                    },
                    "insaneModeAz": {
                        "type": "string"
                    },
                    "ldapBaseDn": {
                        "type": "string"
                    },
                    "ldapBindDn": {
                        "type": "string"
                    },
                    "ldapServer": {
                        "type": "string"
                    },
                    "ldapUsernameAttribute": {
                        "type": "string"
                    },
                    "maxVpnConn": {
                        "type": "string"
                    },
                    "monitorExcludeLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameServers": {
                        "type": "string"
                    },
                    "oktaUrl": {
                        "type": "string"
                    },
                    "oktaUsernameSuffix": {
                        "type": "string"
                    },
                    "otpMode": {
                        "type": "string"
                    },
                    "peeringHaAvailabilityDomain": {
                        "type": "string"
                    },
                    "peeringHaAzureEipNameResourceGroup": {
                        "type": "string"
                    },
                    "peeringHaCloudInstanceId": {
                        "type": "string"
                    },
                    "peeringHaFaultDomain": {
                        "type": "string"
                    },
                    "peeringHaGwName": {
                        "type": "string"
                    },
                    "peeringHaGwSize": {
                        "type": "string"
                    },
                    "peeringHaImageVersion": {
                        "type": "string"
                    },
                    "peeringHaInsaneModeAz": {
                        "type": "string"
                    },
                    "peeringHaPrivateIp": {
                        "type": "string"
                    },
                    "peeringHaPublicIp": {
                        "type": "string"
                    },
                    "peeringHaSecurityGroupId": {
                        "type": "string"
                    },
                    "peeringHaSoftwareVersion": {
                        "type": "string"
                    },
                    "peeringHaSubnet": {
                        "type": "string"
                    },
                    "peeringHaZone": {
                        "type": "string"
                    },
                    "privateIp": {
                        "type": "string"
                    },
                    "publicDnsServer": {
                        "type": "string"
                    },
                    "publicIp": {
                        "type": "string"
                    },
                    "publicSubnetFilteringGuardDutyEnforced": {
                        "type": "boolean"
                    },
                    "publicSubnetFilteringHaRouteTables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "publicSubnetFilteringRouteTables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "renegotiationInterval": {
                        "type": "integer"
                    },
                    "samlEnabled": {
                        "type": "boolean"
                    },
                    "searchDomains": {
                        "type": "string"
                    },
                    "securityGroupId": {
                        "type": "string"
                    },
                    "singleAzHa": {
                        "type": "boolean"
                    },
                    "singleIpSnat": {
                        "type": "boolean"
                    },
                    "softwareVersion": {
                        "type": "string"
                    },
                    "splitTunnel": {
                        "type": "boolean"
                    },
                    "spotPrice": {
                        "type": "string"
                    },
                    "subnet": {
                        "type": "string"
                    },
                    "tagLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tunnelDetectionTime": {
                        "type": "integer"
                    },
                    "vpcId": {
                        "type": "string"
                    },
                    "vpcReg": {
                        "type": "string"
                    },
                    "vpnAccess": {
                        "type": "boolean"
                    },
                    "vpnCidr": {
                        "type": "string"
                    },
                    "vpnProtocol": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accountName",
                    "additionalCidrs",
                    "additionalCidrsDesignatedGateway",
                    "allocateNewEip",
                    "availabilityDomain",
                    "azureEipNameResourceGroup",
                    "cloudInstanceId",
                    "cloudType",
                    "duoApiHostname",
                    "duoIntegrationKey",
                    "duoPushMode",
                    "elbDnsName",
                    "elbName",
                    "enableDesignatedGateway",
                    "enableElb",
                    "enableEncryptVolume",
                    "enableJumboFrame",
                    "enableLdap",
                    "enableMonitorGatewaySubnets",
                    "enablePublicSubnetFiltering",
                    "enableSpotInstance",
                    "enableVpcDnsServer",
                    "enableVpnNat",
                    "faultDomain",
                    "fqdnLanCidr",
                    "fqdnLanInterface",
                    "fqdnLanVpcId",
                    "gwName",
                    "gwSize",
                    "idleTimeout",
                    "imageVersion",
                    "insaneMode",
                    "insaneModeAz",
                    "ldapBaseDn",
                    "ldapBindDn",
                    "ldapServer",
                    "ldapUsernameAttribute",
                    "maxVpnConn",
                    "monitorExcludeLists",
                    "nameServers",
                    "oktaUrl",
                    "oktaUsernameSuffix",
                    "otpMode",
                    "peeringHaAvailabilityDomain",
                    "peeringHaAzureEipNameResourceGroup",
                    "peeringHaCloudInstanceId",
                    "peeringHaFaultDomain",
                    "peeringHaGwName",
                    "peeringHaGwSize",
                    "peeringHaImageVersion",
                    "peeringHaInsaneModeAz",
                    "peeringHaPrivateIp",
                    "peeringHaPublicIp",
                    "peeringHaSecurityGroupId",
                    "peeringHaSoftwareVersion",
                    "peeringHaSubnet",
                    "peeringHaZone",
                    "privateIp",
                    "publicDnsServer",
                    "publicIp",
                    "publicSubnetFilteringGuardDutyEnforced",
                    "publicSubnetFilteringHaRouteTables",
                    "publicSubnetFilteringRouteTables",
                    "renegotiationInterval",
                    "samlEnabled",
                    "searchDomains",
                    "securityGroupId",
                    "singleAzHa",
                    "singleIpSnat",
                    "softwareVersion",
                    "splitTunnel",
                    "spotPrice",
                    "subnet",
                    "tagLists",
                    "tags",
                    "tunnelDetectionTime",
                    "vpcId",
                    "vpcReg",
                    "vpnAccess",
                    "vpnCidr",
                    "vpnProtocol",
                    "zone",
                    "id"
                ]
            }
        },
        "aviatrix:index/getAviatrixGatewayImage:getAviatrixGatewayImage": {
            "inputs": {
                "description": "A collection of arguments for invoking getAviatrixGatewayImage.\n",
                "properties": {
                    "cloudType": {
                        "type": "integer"
                    },
                    "softwareVersion": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cloudType",
                    "softwareVersion"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAviatrixGatewayImage.\n",
                "properties": {
                    "cloudType": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageVersion": {
                        "type": "string"
                    },
                    "softwareVersion": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cloudType",
                    "imageVersion",
                    "softwareVersion",
                    "id"
                ]
            }
        },
        "aviatrix:index/getAviatrixNetworkDomains:getAviatrixNetworkDomains": {
            "outputs": {
                "description": "A collection of values returned by getAviatrixNetworkDomains.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "networkDomains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/getAviatrixNetworkDomainsNetworkDomain:getAviatrixNetworkDomainsNetworkDomain"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "networkDomains",
                    "id"
                ]
            }
        },
        "aviatrix:index/getAviatrixSpokeGateway:getAviatrixSpokeGateway": {
            "inputs": {
                "description": "A collection of arguments for invoking getAviatrixSpokeGateway.\n",
                "properties": {
                    "gwName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "gwName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAviatrixSpokeGateway.\n",
                "properties": {
                    "accountName": {
                        "type": "string"
                    },
                    "allocateNewEip": {
                        "type": "boolean"
                    },
                    "approvedLearnedCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "availabilityDomain": {
                        "type": "string"
                    },
                    "azureEipNameResourceGroup": {
                        "type": "string"
                    },
                    "bgpEcmp": {
                        "type": "boolean"
                    },
                    "bgpHoldTime": {
                        "type": "integer"
                    },
                    "bgpPollingTime": {
                        "type": "integer"
                    },
                    "cloudInstanceId": {
                        "type": "string"
                    },
                    "cloudType": {
                        "type": "integer"
                    },
                    "customizedSpokeVpcRoutes": {
                        "type": "string"
                    },
                    "disableRoutePropagation": {
                        "type": "boolean"
                    },
                    "eip": {
                        "type": "string"
                    },
                    "enableActiveStandby": {
                        "type": "boolean"
                    },
                    "enableActiveStandbyPreemptive": {
                        "type": "boolean"
                    },
                    "enableAutoAdvertiseS2cCidrs": {
                        "type": "boolean"
                    },
                    "enableBgp": {
                        "type": "boolean"
                    },
                    "enableEncryptVolume": {
                        "type": "boolean"
                    },
                    "enableJumboFrame": {
                        "type": "boolean"
                    },
                    "enableLearnedCidrsApproval": {
                        "type": "boolean"
                    },
                    "enableMonitorGatewaySubnets": {
                        "type": "boolean"
                    },
                    "enablePrivateOob": {
                        "type": "boolean"
                    },
                    "enablePrivateVpcDefaultRoute": {
                        "type": "boolean"
                    },
                    "enableSkipPublicRouteTableUpdate": {
                        "type": "boolean"
                    },
                    "enableSpotInstance": {
                        "type": "boolean"
                    },
                    "enableVpcDnsServer": {
                        "type": "boolean"
                    },
                    "faultDomain": {
                        "type": "string"
                    },
                    "filteredSpokeVpcRoutes": {
                        "type": "string"
                    },
                    "gwName": {
                        "type": "string"
                    },
                    "gwSize": {
                        "type": "string"
                    },
                    "haAvailabilityDomain": {
                        "type": "string"
                    },
                    "haAzureEipNameResourceGroup": {
                        "type": "string"
                    },
                    "haCloudInstanceId": {
                        "type": "string"
                    },
                    "haEip": {
                        "type": "string"
                    },
                    "haFaultDomain": {
                        "type": "string"
                    },
                    "haGwName": {
                        "type": "string"
                    },
                    "haGwSize": {
                        "type": "string"
                    },
                    "haImageVersion": {
                        "type": "string"
                    },
                    "haInsaneModeAz": {
                        "type": "string"
                    },
                    "haOobAvailabilityZone": {
                        "type": "string"
                    },
                    "haOobManagementSubnet": {
                        "type": "string"
                    },
                    "haPrivateIp": {
                        "type": "string"
                    },
                    "haPublicIp": {
                        "type": "string"
                    },
                    "haSecurityGroupId": {
                        "type": "string"
                    },
                    "haSoftwareVersion": {
                        "type": "string"
                    },
                    "haSubnet": {
                        "type": "string"
                    },
                    "haZone": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageVersion": {
                        "type": "string"
                    },
                    "includedAdvertisedSpokeRoutes": {
                        "type": "string"
                    },
                    "insaneMode": {
                        "type": "boolean"
                    },
                    "insaneModeAz": {
                        "type": "string"
                    },
                    "learnedCidrsApprovalMode": {
                        "type": "string"
                    },
                    "localAsNumber": {
                        "type": "string"
                    },
                    "monitorExcludeLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "oobAvailabilityZone": {
                        "type": "string"
                    },
                    "oobManagementSubnet": {
                        "type": "string"
                    },
                    "prependAsPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "privateIp": {
                        "type": "string"
                    },
                    "publicIp": {
                        "type": "string"
                    },
                    "securityGroupId": {
                        "type": "string"
                    },
                    "singleAzHa": {
                        "type": "boolean"
                    },
                    "singleIpSnat": {
                        "type": "boolean"
                    },
                    "softwareVersion": {
                        "type": "string"
                    },
                    "spokeBgpManualAdvertiseCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "spotPrice": {
                        "type": "string"
                    },
                    "subnet": {
                        "type": "string"
                    },
                    "tagLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "transitGw": {
                        "type": "string"
                    },
                    "tunnelDetectionTime": {
                        "type": "integer"
                    },
                    "vpcId": {
                        "type": "string"
                    },
                    "vpcReg": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accountName",
                    "allocateNewEip",
                    "approvedLearnedCidrs",
                    "availabilityDomain",
                    "azureEipNameResourceGroup",
                    "bgpEcmp",
                    "bgpHoldTime",
                    "bgpPollingTime",
                    "cloudInstanceId",
                    "cloudType",
                    "customizedSpokeVpcRoutes",
                    "disableRoutePropagation",
                    "eip",
                    "enableActiveStandby",
                    "enableActiveStandbyPreemptive",
                    "enableAutoAdvertiseS2cCidrs",
                    "enableBgp",
                    "enableEncryptVolume",
                    "enableJumboFrame",
                    "enableLearnedCidrsApproval",
                    "enableMonitorGatewaySubnets",
                    "enablePrivateOob",
                    "enablePrivateVpcDefaultRoute",
                    "enableSkipPublicRouteTableUpdate",
                    "enableSpotInstance",
                    "enableVpcDnsServer",
                    "faultDomain",
                    "filteredSpokeVpcRoutes",
                    "gwName",
                    "gwSize",
                    "haAvailabilityDomain",
                    "haAzureEipNameResourceGroup",
                    "haCloudInstanceId",
                    "haEip",
                    "haFaultDomain",
                    "haGwName",
                    "haGwSize",
                    "haImageVersion",
                    "haInsaneModeAz",
                    "haOobAvailabilityZone",
                    "haOobManagementSubnet",
                    "haPrivateIp",
                    "haPublicIp",
                    "haSecurityGroupId",
                    "haSoftwareVersion",
                    "haSubnet",
                    "haZone",
                    "imageVersion",
                    "includedAdvertisedSpokeRoutes",
                    "insaneMode",
                    "insaneModeAz",
                    "learnedCidrsApprovalMode",
                    "localAsNumber",
                    "monitorExcludeLists",
                    "oobAvailabilityZone",
                    "oobManagementSubnet",
                    "prependAsPaths",
                    "privateIp",
                    "publicIp",
                    "securityGroupId",
                    "singleAzHa",
                    "singleIpSnat",
                    "softwareVersion",
                    "spokeBgpManualAdvertiseCidrs",
                    "spotPrice",
                    "subnet",
                    "tagLists",
                    "tags",
                    "transitGw",
                    "tunnelDetectionTime",
                    "vpcId",
                    "vpcReg",
                    "zone",
                    "id"
                ]
            }
        },
        "aviatrix:index/getAviatrixSpokeGatewayInspectionSubnets:getAviatrixSpokeGatewayInspectionSubnets": {
            "inputs": {
                "description": "A collection of arguments for invoking getAviatrixSpokeGatewayInspectionSubnets.\n",
                "properties": {
                    "gwName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "gwName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAviatrixSpokeGatewayInspectionSubnets.\n",
                "properties": {
                    "gwName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "subnetsForInspections": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "gwName",
                    "subnetsForInspections",
                    "id"
                ]
            }
        },
        "aviatrix:index/getAviatrixTransitGateway:getAviatrixTransitGateway": {
            "inputs": {
                "description": "A collection of arguments for invoking getAviatrixTransitGateway.\n",
                "properties": {
                    "gwName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "gwName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAviatrixTransitGateway.\n",
                "properties": {
                    "accountName": {
                        "type": "string"
                    },
                    "allocateNewEip": {
                        "type": "boolean"
                    },
                    "approvedLearnedCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "availabilityDomain": {
                        "type": "string"
                    },
                    "azureEipNameResourceGroup": {
                        "type": "string"
                    },
                    "bgpEcmp": {
                        "type": "boolean"
                    },
                    "bgpHoldTime": {
                        "type": "integer"
                    },
                    "bgpLanInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/getAviatrixTransitGatewayBgpLanInterface:getAviatrixTransitGatewayBgpLanInterface"
                        }
                    },
                    "bgpLanIpLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "bgpManualSpokeAdvertiseCidrs": {
                        "type": "string"
                    },
                    "bgpPollingTime": {
                        "type": "string"
                    },
                    "cloudInstanceId": {
                        "type": "string"
                    },
                    "cloudType": {
                        "type": "integer"
                    },
                    "connectedTransit": {
                        "type": "boolean"
                    },
                    "customizedSpokeVpcRoutes": {
                        "type": "string"
                    },
                    "customizedTransitVpcRoutes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "eip": {
                        "type": "string"
                    },
                    "enableActiveStandby": {
                        "type": "boolean"
                    },
                    "enableActiveStandbyPreemptive": {
                        "type": "boolean"
                    },
                    "enableAdvertiseTransitCidr": {
                        "type": "boolean"
                    },
                    "enableBgpOverLan": {
                        "type": "boolean"
                    },
                    "enableEgressTransitFirenet": {
                        "type": "boolean"
                    },
                    "enableEncryptVolume": {
                        "type": "boolean"
                    },
                    "enableFirenet": {
                        "type": "boolean"
                    },
                    "enableGatewayLoadBalancer": {
                        "type": "boolean"
                    },
                    "enableHybridConnection": {
                        "type": "boolean"
                    },
                    "enableJumboFrame": {
                        "type": "boolean"
                    },
                    "enableLearnedCidrsApproval": {
                        "type": "boolean"
                    },
                    "enableMonitorGatewaySubnets": {
                        "type": "boolean"
                    },
                    "enableMultiTierTransit": {
                        "type": "boolean"
                    },
                    "enablePrivateOob": {
                        "type": "boolean"
                    },
                    "enableSegmentation": {
                        "type": "boolean"
                    },
                    "enableSpotInstance": {
                        "type": "boolean"
                    },
                    "enableTransitFirenet": {
                        "type": "boolean"
                    },
                    "enableTransitSummarizeCidrToTgw": {
                        "type": "boolean"
                    },
                    "enableVpcDnsServer": {
                        "type": "boolean"
                    },
                    "excludedAdvertisedSpokeRoutes": {
                        "type": "string"
                    },
                    "faultDomain": {
                        "type": "string"
                    },
                    "filteredSpokeVpcRoutes": {
                        "type": "string"
                    },
                    "gwName": {
                        "type": "string"
                    },
                    "gwSize": {
                        "type": "string"
                    },
                    "haAvailabilityDomain": {
                        "type": "string"
                    },
                    "haAzureEipNameResourceGroup": {
                        "type": "string"
                    },
                    "haBgpLanInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/getAviatrixTransitGatewayHaBgpLanInterface:getAviatrixTransitGatewayHaBgpLanInterface"
                        }
                    },
                    "haBgpLanIpLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "haCloudInstanceId": {
                        "type": "string"
                    },
                    "haEip": {
                        "type": "string"
                    },
                    "haFaultDomain": {
                        "type": "string"
                    },
                    "haGwName": {
                        "type": "string"
                    },
                    "haGwSize": {
                        "type": "string"
                    },
                    "haImageVersion": {
                        "type": "string"
                    },
                    "haInsaneModeAz": {
                        "type": "string"
                    },
                    "haLanInterfaceCidr": {
                        "type": "string"
                    },
                    "haOobAvailabilityZone": {
                        "type": "string"
                    },
                    "haOobManagementSubnet": {
                        "type": "string"
                    },
                    "haPrivateIp": {
                        "type": "string"
                    },
                    "haPublicIp": {
                        "type": "string"
                    },
                    "haSecurityGroupId": {
                        "type": "string"
                    },
                    "haSoftwareVersion": {
                        "type": "string"
                    },
                    "haSubnet": {
                        "type": "string"
                    },
                    "haZone": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageVersion": {
                        "type": "string"
                    },
                    "insaneMode": {
                        "type": "boolean"
                    },
                    "insaneModeAz": {
                        "type": "string"
                    },
                    "lanInterfaceCidr": {
                        "type": "string"
                    },
                    "lanPrivateSubnet": {
                        "type": "string"
                    },
                    "lanVpcId": {
                        "type": "string"
                    },
                    "learnedCidrsApprovalMode": {
                        "type": "string"
                    },
                    "localAsNumber": {
                        "type": "string"
                    },
                    "monitorExcludeLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "oobAvailabilityZone": {
                        "type": "string"
                    },
                    "oobManagementSubnet": {
                        "type": "string"
                    },
                    "prependAsPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "privateIp": {
                        "type": "string"
                    },
                    "publicIp": {
                        "type": "string"
                    },
                    "securityGroupId": {
                        "type": "string"
                    },
                    "singleAzHa": {
                        "type": "boolean"
                    },
                    "singleIpSnat": {
                        "type": "boolean"
                    },
                    "softwareVersion": {
                        "type": "string"
                    },
                    "spotPrice": {
                        "type": "string"
                    },
                    "subnet": {
                        "type": "string"
                    },
                    "tagLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tunnelDetectionTime": {
                        "type": "integer"
                    },
                    "vpcId": {
                        "type": "string"
                    },
                    "vpcReg": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accountName",
                    "allocateNewEip",
                    "approvedLearnedCidrs",
                    "availabilityDomain",
                    "azureEipNameResourceGroup",
                    "bgpEcmp",
                    "bgpHoldTime",
                    "bgpLanInterfaces",
                    "bgpLanIpLists",
                    "bgpManualSpokeAdvertiseCidrs",
                    "bgpPollingTime",
                    "cloudInstanceId",
                    "cloudType",
                    "connectedTransit",
                    "customizedSpokeVpcRoutes",
                    "customizedTransitVpcRoutes",
                    "eip",
                    "enableActiveStandby",
                    "enableActiveStandbyPreemptive",
                    "enableAdvertiseTransitCidr",
                    "enableBgpOverLan",
                    "enableEgressTransitFirenet",
                    "enableEncryptVolume",
                    "enableFirenet",
                    "enableGatewayLoadBalancer",
                    "enableHybridConnection",
                    "enableJumboFrame",
                    "enableLearnedCidrsApproval",
                    "enableMonitorGatewaySubnets",
                    "enableMultiTierTransit",
                    "enablePrivateOob",
                    "enableSegmentation",
                    "enableSpotInstance",
                    "enableTransitFirenet",
                    "enableTransitSummarizeCidrToTgw",
                    "enableVpcDnsServer",
                    "excludedAdvertisedSpokeRoutes",
                    "faultDomain",
                    "filteredSpokeVpcRoutes",
                    "gwName",
                    "gwSize",
                    "haAvailabilityDomain",
                    "haAzureEipNameResourceGroup",
                    "haBgpLanInterfaces",
                    "haBgpLanIpLists",
                    "haCloudInstanceId",
                    "haEip",
                    "haFaultDomain",
                    "haGwName",
                    "haGwSize",
                    "haImageVersion",
                    "haInsaneModeAz",
                    "haLanInterfaceCidr",
                    "haOobAvailabilityZone",
                    "haOobManagementSubnet",
                    "haPrivateIp",
                    "haPublicIp",
                    "haSecurityGroupId",
                    "haSoftwareVersion",
                    "haSubnet",
                    "haZone",
                    "imageVersion",
                    "insaneMode",
                    "insaneModeAz",
                    "lanInterfaceCidr",
                    "lanPrivateSubnet",
                    "lanVpcId",
                    "learnedCidrsApprovalMode",
                    "localAsNumber",
                    "monitorExcludeLists",
                    "oobAvailabilityZone",
                    "oobManagementSubnet",
                    "prependAsPaths",
                    "privateIp",
                    "publicIp",
                    "securityGroupId",
                    "singleAzHa",
                    "singleIpSnat",
                    "softwareVersion",
                    "spotPrice",
                    "subnet",
                    "tagLists",
                    "tags",
                    "tunnelDetectionTime",
                    "vpcId",
                    "vpcReg",
                    "zone",
                    "id"
                ]
            }
        },
        "aviatrix:index/getAviatrixTransitGateways:getAviatrixTransitGateways": {
            "outputs": {
                "description": "A collection of values returned by getAviatrixTransitGateways.\n",
                "properties": {
                    "gatewayLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/getAviatrixTransitGatewaysGatewayList:getAviatrixTransitGatewaysGatewayList"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "gatewayLists",
                    "id"
                ]
            }
        },
        "aviatrix:index/getAviatrixVpc:getAviatrixVpc": {
            "inputs": {
                "description": "A collection of arguments for invoking getAviatrixVpc.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "routeTablesFilter": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAviatrixVpc.\n",
                "properties": {
                    "accountName": {
                        "type": "string"
                    },
                    "availabilityDomains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "aviatrixFirenetVpc": {
                        "type": "boolean"
                    },
                    "aviatrixTransitVpc": {
                        "type": "boolean"
                    },
                    "azureVnetResourceId": {
                        "type": "string"
                    },
                    "cidr": {
                        "type": "string"
                    },
                    "cloudType": {
                        "type": "integer"
                    },
                    "faultDomains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "numOfSubnetPairs": {
                        "type": "integer"
                    },
                    "privateSubnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/getAviatrixVpcPrivateSubnet:getAviatrixVpcPrivateSubnet"
                        }
                    },
                    "publicSubnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/getAviatrixVpcPublicSubnet:getAviatrixVpcPublicSubnet"
                        }
                    },
                    "region": {
                        "type": "string"
                    },
                    "resourceGroup": {
                        "type": "string"
                    },
                    "routeTables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "routeTablesFilter": {
                        "type": "string"
                    },
                    "subnetSize": {
                        "type": "integer"
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/getAviatrixVpcSubnet:getAviatrixVpcSubnet"
                        }
                    },
                    "vpcId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accountName",
                    "availabilityDomains",
                    "aviatrixFirenetVpc",
                    "aviatrixTransitVpc",
                    "azureVnetResourceId",
                    "cidr",
                    "cloudType",
                    "faultDomains",
                    "name",
                    "numOfSubnetPairs",
                    "privateSubnets",
                    "publicSubnets",
                    "region",
                    "resourceGroup",
                    "routeTables",
                    "subnetSize",
                    "subnets",
                    "vpcId",
                    "id"
                ]
            }
        },
        "aviatrix:index/getAviatrixVpcTracker:getAviatrixVpcTracker": {
            "inputs": {
                "description": "A collection of arguments for invoking getAviatrixVpcTracker.\n",
                "properties": {
                    "accountName": {
                        "type": "string"
                    },
                    "cidr": {
                        "type": "string"
                    },
                    "cloudType": {
                        "type": "integer"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAviatrixVpcTracker.\n",
                "properties": {
                    "accountName": {
                        "type": "string"
                    },
                    "cidr": {
                        "type": "string"
                    },
                    "cloudType": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string"
                    },
                    "vpcLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/getAviatrixVpcTrackerVpcList:getAviatrixVpcTrackerVpcList"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vpcLists",
                    "id"
                ]
            }
        }
    }
}