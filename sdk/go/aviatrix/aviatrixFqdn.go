// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// **fqdn** can be imported using the `fqdn_tag`, e.g.
//
// ```sh
//
//	$ pulumi import aviatrix:index/aviatrixFqdn:AviatrixFqdn test fqdn_tag
//
// ```
type AviatrixFqdn struct {
	pulumi.CustomResourceState

	// One or more domain names in a list with details as listed below:
	DomainNames AviatrixFqdnDomainNameArrayOutput `pulumi:"domainNames"`
	// FQDN Filter tag status. Valid values: true, false.
	FqdnEnabled pulumi.BoolPtrOutput `pulumi:"fqdnEnabled"`
	// Specify FQDN mode: whitelist or blacklist. Valid values: "white", "black".
	FqdnMode pulumi.StringPtrOutput `pulumi:"fqdnMode"`
	// FQDN Filter tag name.
	FqdnTag pulumi.StringOutput `pulumi:"fqdnTag"`
	// A list of gateways to attach to the specific tag.
	GwFilterTagLists AviatrixFqdnGwFilterTagListArrayOutput `pulumi:"gwFilterTagLists"`
	// Enable to manage domain name rules in-line. If false, domain name rules must be managed using `AviatrixFqdnTagRule` resources. Default: true. Valid values: true, false. Available in provider version R2.17+.
	ManageDomainNames pulumi.BoolPtrOutput `pulumi:"manageDomainNames"`
}

// NewAviatrixFqdn registers a new resource with the given unique name, arguments, and options.
func NewAviatrixFqdn(ctx *pulumi.Context,
	name string, args *AviatrixFqdnArgs, opts ...pulumi.ResourceOption) (*AviatrixFqdn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FqdnTag == nil {
		return nil, errors.New("invalid value for required argument 'FqdnTag'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixFqdn
	err := ctx.RegisterResource("aviatrix:index/aviatrixFqdn:AviatrixFqdn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixFqdn gets an existing AviatrixFqdn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixFqdn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixFqdnState, opts ...pulumi.ResourceOption) (*AviatrixFqdn, error) {
	var resource AviatrixFqdn
	err := ctx.ReadResource("aviatrix:index/aviatrixFqdn:AviatrixFqdn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixFqdn resources.
type aviatrixFqdnState struct {
	// One or more domain names in a list with details as listed below:
	DomainNames []AviatrixFqdnDomainName `pulumi:"domainNames"`
	// FQDN Filter tag status. Valid values: true, false.
	FqdnEnabled *bool `pulumi:"fqdnEnabled"`
	// Specify FQDN mode: whitelist or blacklist. Valid values: "white", "black".
	FqdnMode *string `pulumi:"fqdnMode"`
	// FQDN Filter tag name.
	FqdnTag *string `pulumi:"fqdnTag"`
	// A list of gateways to attach to the specific tag.
	GwFilterTagLists []AviatrixFqdnGwFilterTagList `pulumi:"gwFilterTagLists"`
	// Enable to manage domain name rules in-line. If false, domain name rules must be managed using `AviatrixFqdnTagRule` resources. Default: true. Valid values: true, false. Available in provider version R2.17+.
	ManageDomainNames *bool `pulumi:"manageDomainNames"`
}

type AviatrixFqdnState struct {
	// One or more domain names in a list with details as listed below:
	DomainNames AviatrixFqdnDomainNameArrayInput
	// FQDN Filter tag status. Valid values: true, false.
	FqdnEnabled pulumi.BoolPtrInput
	// Specify FQDN mode: whitelist or blacklist. Valid values: "white", "black".
	FqdnMode pulumi.StringPtrInput
	// FQDN Filter tag name.
	FqdnTag pulumi.StringPtrInput
	// A list of gateways to attach to the specific tag.
	GwFilterTagLists AviatrixFqdnGwFilterTagListArrayInput
	// Enable to manage domain name rules in-line. If false, domain name rules must be managed using `AviatrixFqdnTagRule` resources. Default: true. Valid values: true, false. Available in provider version R2.17+.
	ManageDomainNames pulumi.BoolPtrInput
}

func (AviatrixFqdnState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixFqdnState)(nil)).Elem()
}

type aviatrixFqdnArgs struct {
	// One or more domain names in a list with details as listed below:
	DomainNames []AviatrixFqdnDomainName `pulumi:"domainNames"`
	// FQDN Filter tag status. Valid values: true, false.
	FqdnEnabled *bool `pulumi:"fqdnEnabled"`
	// Specify FQDN mode: whitelist or blacklist. Valid values: "white", "black".
	FqdnMode *string `pulumi:"fqdnMode"`
	// FQDN Filter tag name.
	FqdnTag string `pulumi:"fqdnTag"`
	// A list of gateways to attach to the specific tag.
	GwFilterTagLists []AviatrixFqdnGwFilterTagList `pulumi:"gwFilterTagLists"`
	// Enable to manage domain name rules in-line. If false, domain name rules must be managed using `AviatrixFqdnTagRule` resources. Default: true. Valid values: true, false. Available in provider version R2.17+.
	ManageDomainNames *bool `pulumi:"manageDomainNames"`
}

// The set of arguments for constructing a AviatrixFqdn resource.
type AviatrixFqdnArgs struct {
	// One or more domain names in a list with details as listed below:
	DomainNames AviatrixFqdnDomainNameArrayInput
	// FQDN Filter tag status. Valid values: true, false.
	FqdnEnabled pulumi.BoolPtrInput
	// Specify FQDN mode: whitelist or blacklist. Valid values: "white", "black".
	FqdnMode pulumi.StringPtrInput
	// FQDN Filter tag name.
	FqdnTag pulumi.StringInput
	// A list of gateways to attach to the specific tag.
	GwFilterTagLists AviatrixFqdnGwFilterTagListArrayInput
	// Enable to manage domain name rules in-line. If false, domain name rules must be managed using `AviatrixFqdnTagRule` resources. Default: true. Valid values: true, false. Available in provider version R2.17+.
	ManageDomainNames pulumi.BoolPtrInput
}

func (AviatrixFqdnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixFqdnArgs)(nil)).Elem()
}

type AviatrixFqdnInput interface {
	pulumi.Input

	ToAviatrixFqdnOutput() AviatrixFqdnOutput
	ToAviatrixFqdnOutputWithContext(ctx context.Context) AviatrixFqdnOutput
}

func (*AviatrixFqdn) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixFqdn)(nil)).Elem()
}

func (i *AviatrixFqdn) ToAviatrixFqdnOutput() AviatrixFqdnOutput {
	return i.ToAviatrixFqdnOutputWithContext(context.Background())
}

func (i *AviatrixFqdn) ToAviatrixFqdnOutputWithContext(ctx context.Context) AviatrixFqdnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFqdnOutput)
}

// AviatrixFqdnArrayInput is an input type that accepts AviatrixFqdnArray and AviatrixFqdnArrayOutput values.
// You can construct a concrete instance of `AviatrixFqdnArrayInput` via:
//
//	AviatrixFqdnArray{ AviatrixFqdnArgs{...} }
type AviatrixFqdnArrayInput interface {
	pulumi.Input

	ToAviatrixFqdnArrayOutput() AviatrixFqdnArrayOutput
	ToAviatrixFqdnArrayOutputWithContext(context.Context) AviatrixFqdnArrayOutput
}

type AviatrixFqdnArray []AviatrixFqdnInput

func (AviatrixFqdnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixFqdn)(nil)).Elem()
}

func (i AviatrixFqdnArray) ToAviatrixFqdnArrayOutput() AviatrixFqdnArrayOutput {
	return i.ToAviatrixFqdnArrayOutputWithContext(context.Background())
}

func (i AviatrixFqdnArray) ToAviatrixFqdnArrayOutputWithContext(ctx context.Context) AviatrixFqdnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFqdnArrayOutput)
}

// AviatrixFqdnMapInput is an input type that accepts AviatrixFqdnMap and AviatrixFqdnMapOutput values.
// You can construct a concrete instance of `AviatrixFqdnMapInput` via:
//
//	AviatrixFqdnMap{ "key": AviatrixFqdnArgs{...} }
type AviatrixFqdnMapInput interface {
	pulumi.Input

	ToAviatrixFqdnMapOutput() AviatrixFqdnMapOutput
	ToAviatrixFqdnMapOutputWithContext(context.Context) AviatrixFqdnMapOutput
}

type AviatrixFqdnMap map[string]AviatrixFqdnInput

func (AviatrixFqdnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixFqdn)(nil)).Elem()
}

func (i AviatrixFqdnMap) ToAviatrixFqdnMapOutput() AviatrixFqdnMapOutput {
	return i.ToAviatrixFqdnMapOutputWithContext(context.Background())
}

func (i AviatrixFqdnMap) ToAviatrixFqdnMapOutputWithContext(ctx context.Context) AviatrixFqdnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFqdnMapOutput)
}

type AviatrixFqdnOutput struct{ *pulumi.OutputState }

func (AviatrixFqdnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixFqdn)(nil)).Elem()
}

func (o AviatrixFqdnOutput) ToAviatrixFqdnOutput() AviatrixFqdnOutput {
	return o
}

func (o AviatrixFqdnOutput) ToAviatrixFqdnOutputWithContext(ctx context.Context) AviatrixFqdnOutput {
	return o
}

// One or more domain names in a list with details as listed below:
func (o AviatrixFqdnOutput) DomainNames() AviatrixFqdnDomainNameArrayOutput {
	return o.ApplyT(func(v *AviatrixFqdn) AviatrixFqdnDomainNameArrayOutput { return v.DomainNames }).(AviatrixFqdnDomainNameArrayOutput)
}

// FQDN Filter tag status. Valid values: true, false.
func (o AviatrixFqdnOutput) FqdnEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixFqdn) pulumi.BoolPtrOutput { return v.FqdnEnabled }).(pulumi.BoolPtrOutput)
}

// Specify FQDN mode: whitelist or blacklist. Valid values: "white", "black".
func (o AviatrixFqdnOutput) FqdnMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixFqdn) pulumi.StringPtrOutput { return v.FqdnMode }).(pulumi.StringPtrOutput)
}

// FQDN Filter tag name.
func (o AviatrixFqdnOutput) FqdnTag() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixFqdn) pulumi.StringOutput { return v.FqdnTag }).(pulumi.StringOutput)
}

// A list of gateways to attach to the specific tag.
func (o AviatrixFqdnOutput) GwFilterTagLists() AviatrixFqdnGwFilterTagListArrayOutput {
	return o.ApplyT(func(v *AviatrixFqdn) AviatrixFqdnGwFilterTagListArrayOutput { return v.GwFilterTagLists }).(AviatrixFqdnGwFilterTagListArrayOutput)
}

// Enable to manage domain name rules in-line. If false, domain name rules must be managed using `AviatrixFqdnTagRule` resources. Default: true. Valid values: true, false. Available in provider version R2.17+.
func (o AviatrixFqdnOutput) ManageDomainNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixFqdn) pulumi.BoolPtrOutput { return v.ManageDomainNames }).(pulumi.BoolPtrOutput)
}

type AviatrixFqdnArrayOutput struct{ *pulumi.OutputState }

func (AviatrixFqdnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixFqdn)(nil)).Elem()
}

func (o AviatrixFqdnArrayOutput) ToAviatrixFqdnArrayOutput() AviatrixFqdnArrayOutput {
	return o
}

func (o AviatrixFqdnArrayOutput) ToAviatrixFqdnArrayOutputWithContext(ctx context.Context) AviatrixFqdnArrayOutput {
	return o
}

func (o AviatrixFqdnArrayOutput) Index(i pulumi.IntInput) AviatrixFqdnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixFqdn {
		return vs[0].([]*AviatrixFqdn)[vs[1].(int)]
	}).(AviatrixFqdnOutput)
}

type AviatrixFqdnMapOutput struct{ *pulumi.OutputState }

func (AviatrixFqdnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixFqdn)(nil)).Elem()
}

func (o AviatrixFqdnMapOutput) ToAviatrixFqdnMapOutput() AviatrixFqdnMapOutput {
	return o
}

func (o AviatrixFqdnMapOutput) ToAviatrixFqdnMapOutputWithContext(ctx context.Context) AviatrixFqdnMapOutput {
	return o
}

func (o AviatrixFqdnMapOutput) MapIndex(k pulumi.StringInput) AviatrixFqdnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixFqdn {
		return vs[0].(map[string]*AviatrixFqdn)[vs[1].(string)]
	}).(AviatrixFqdnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFqdnInput)(nil)).Elem(), &AviatrixFqdn{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFqdnArrayInput)(nil)).Elem(), AviatrixFqdnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFqdnMapInput)(nil)).Elem(), AviatrixFqdnMap{})
	pulumi.RegisterOutputType(AviatrixFqdnOutput{})
	pulumi.RegisterOutputType(AviatrixFqdnArrayOutput{})
	pulumi.RegisterOutputType(AviatrixFqdnMapOutput{})
}
