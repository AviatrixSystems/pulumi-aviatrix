// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The **aviatrix_tunnel** resource allows the creation and management of Aviatrix Encrypted Peering tunnels.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aviatrix from "@pulumi/aviatrix";
 *
 * // Create an Aviatrix AWS Tunnel
 * const testTunnel = new aviatrix.AviatrixTunnel("test_tunnel", {
 *     gwName1: "avtx-gw1",
 *     gwName2: "avtx-gw2",
 * });
 * ```
 *
 * ## Import
 *
 * **tunnel** can be imported using the `gw_name1` and `gw_name2`, e.g.
 *
 * ```sh
 *  $ pulumi import aviatrix:index/aviatrixTunnel:AviatrixTunnel test gw_name1~gw_name2
 * ```
 */
export class AviatrixTunnel extends pulumi.CustomResource {
    /**
     * Get an existing AviatrixTunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AviatrixTunnelState, opts?: pulumi.CustomResourceOptions): AviatrixTunnel {
        return new AviatrixTunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/aviatrixTunnel:AviatrixTunnel';

    /**
     * Returns true if the given object is an instance of AviatrixTunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AviatrixTunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AviatrixTunnel.__pulumiType;
    }

    /**
     * Enable this attribute if peering-HA is enabled on the gateways. Valid values: true, false. Default value: false.
     */
    public readonly enableHa!: pulumi.Output<boolean | undefined>;
    /**
     * The first VPC Container name to make a peer pair.
     */
    public readonly gwName1!: pulumi.Output<string>;
    /**
     * The second VPC Container name to make a peer pair.
     */
    public readonly gwName2!: pulumi.Output<string>;
    /**
     * (Computed) Status of the HA tunnel.
     */
    public /*out*/ readonly peeringHastatus!: pulumi.Output<string>;
    /**
     * (Computed) Name of the peering link.
     */
    public /*out*/ readonly peeringLink!: pulumi.Output<string>;
    /**
     * (Computed) Status of the tunnel.
     */
    public /*out*/ readonly peeringState!: pulumi.Output<string>;

    /**
     * Create a AviatrixTunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AviatrixTunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AviatrixTunnelArgs | AviatrixTunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AviatrixTunnelState | undefined;
            resourceInputs["enableHa"] = state ? state.enableHa : undefined;
            resourceInputs["gwName1"] = state ? state.gwName1 : undefined;
            resourceInputs["gwName2"] = state ? state.gwName2 : undefined;
            resourceInputs["peeringHastatus"] = state ? state.peeringHastatus : undefined;
            resourceInputs["peeringLink"] = state ? state.peeringLink : undefined;
            resourceInputs["peeringState"] = state ? state.peeringState : undefined;
        } else {
            const args = argsOrState as AviatrixTunnelArgs | undefined;
            if ((!args || args.gwName1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gwName1'");
            }
            if ((!args || args.gwName2 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gwName2'");
            }
            resourceInputs["enableHa"] = args ? args.enableHa : undefined;
            resourceInputs["gwName1"] = args ? args.gwName1 : undefined;
            resourceInputs["gwName2"] = args ? args.gwName2 : undefined;
            resourceInputs["peeringHastatus"] = undefined /*out*/;
            resourceInputs["peeringLink"] = undefined /*out*/;
            resourceInputs["peeringState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AviatrixTunnel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AviatrixTunnel resources.
 */
export interface AviatrixTunnelState {
    /**
     * Enable this attribute if peering-HA is enabled on the gateways. Valid values: true, false. Default value: false.
     */
    enableHa?: pulumi.Input<boolean>;
    /**
     * The first VPC Container name to make a peer pair.
     */
    gwName1?: pulumi.Input<string>;
    /**
     * The second VPC Container name to make a peer pair.
     */
    gwName2?: pulumi.Input<string>;
    /**
     * (Computed) Status of the HA tunnel.
     */
    peeringHastatus?: pulumi.Input<string>;
    /**
     * (Computed) Name of the peering link.
     */
    peeringLink?: pulumi.Input<string>;
    /**
     * (Computed) Status of the tunnel.
     */
    peeringState?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AviatrixTunnel resource.
 */
export interface AviatrixTunnelArgs {
    /**
     * Enable this attribute if peering-HA is enabled on the gateways. Valid values: true, false. Default value: false.
     */
    enableHa?: pulumi.Input<boolean>;
    /**
     * The first VPC Container name to make a peer pair.
     */
    gwName1: pulumi.Input<string>;
    /**
     * The second VPC Container name to make a peer pair.
     */
    gwName2: pulumi.Input<string>;
}
