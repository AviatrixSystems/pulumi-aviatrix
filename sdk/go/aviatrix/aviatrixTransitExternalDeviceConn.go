// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixTransitExternalDeviceConn struct {
	pulumi.CustomResourceState

	// Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).
	ApprovedCidrs pulumi.StringArrayOutput `pulumi:"approvedCidrs"`
	// Backup BGP MD5 authentication key.
	BackupBgpMd5Key pulumi.StringPtrOutput `pulumi:"backupBgpMd5Key"`
	// Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BackupBgpRemoteAsNum pulumi.StringPtrOutput `pulumi:"backupBgpRemoteAsNum"`
	// Backup direct connect for backup external device.
	BackupDirectConnect pulumi.BoolPtrOutput `pulumi:"backupDirectConnect"`
	// Backup Local LAN IP. Required for GCP BGP over LAN Connection with HA enabled.
	BackupLocalLanIp pulumi.StringOutput `pulumi:"backupLocalLanIp"`
	// Source CIDR for the tunnel from the backup Aviatrix transit gateway.
	BackupLocalTunnelCidr pulumi.StringOutput `pulumi:"backupLocalTunnelCidr"`
	// Backup pre shared key.
	BackupPreSharedKey pulumi.StringPtrOutput `pulumi:"backupPreSharedKey"`
	// Backup remote gateway IP.
	BackupRemoteGatewayIp pulumi.StringPtrOutput `pulumi:"backupRemoteGatewayIp"`
	// Backup Remote LAN IP.
	BackupRemoteLanIp pulumi.StringPtrOutput `pulumi:"backupRemoteLanIp"`
	// Destination CIDR for the tunnel to the backup external device.
	BackupRemoteTunnelCidr pulumi.StringOutput `pulumi:"backupRemoteTunnelCidr"`
	// BGP local ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpLocalAsNum pulumi.StringPtrOutput `pulumi:"bgpLocalAsNum"`
	// BGP MD5 authentication key.
	BgpMd5Key pulumi.StringPtrOutput `pulumi:"bgpMd5Key"`
	// BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpRemoteAsNum pulumi.StringPtrOutput `pulumi:"bgpRemoteAsNum"`
	// The name of the transit external device connection which is going to be created.
	ConnectionName pulumi.StringOutput `pulumi:"connectionName"`
	// Connection type. Valid values: 'bgp', 'static'. Default value: 'bgp'.
	ConnectionType pulumi.StringPtrOutput `pulumi:"connectionType"`
	// Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.
	CustomAlgorithms pulumi.BoolPtrOutput `pulumi:"customAlgorithms"`
	// Set true for private network infrastructure.
	DirectConnect pulumi.BoolPtrOutput `pulumi:"directConnect"`
	// Switch to enable BGP LAN ActiveMesh. Only valid for GCP with Remote Gateway HA enabled. Default: false. Available as of
	// provider version R2.21+.
	EnableBgpLanActivemesh pulumi.BoolPtrOutput `pulumi:"enableBgpLanActivemesh"`
	// Switch to allow this connection to communicate with a Network Domain via Connection Policy.
	EnableEdgeSegmentation pulumi.BoolPtrOutput `pulumi:"enableEdgeSegmentation"`
	// Enable Event Triggered HA.
	EnableEventTriggeredHa pulumi.BoolPtrOutput `pulumi:"enableEventTriggeredHa"`
	// Set as true if use IKEv2.
	EnableIkev2 pulumi.BoolPtrOutput `pulumi:"enableIkev2"`
	// Enable Jumbo Frame for the transit external device connection. Valid values: true, false.
	EnableJumboFrame pulumi.BoolPtrOutput `pulumi:"enableJumboFrame"`
	// Enable learned CIDR approval for the connection. Only valid with 'connection_type' = 'bgp'. Requires the
	// transit_gateway's 'learned_cidrs_approval_mode' attribute be set to 'connection'. Valid values: true, false. Default
	// value: false. Available as of provider version R2.18+.
	EnableLearnedCidrsApproval pulumi.BoolPtrOutput `pulumi:"enableLearnedCidrsApproval"`
	// Name of the Transit Gateway.
	GwName pulumi.StringOutput `pulumi:"gwName"`
	// Set as true if there are two external devices.
	HaEnabled pulumi.BoolPtrOutput `pulumi:"haEnabled"`
	// Local LAN IP. Required for GCP BGP over LAN Connection.
	LocalLanIp pulumi.StringOutput `pulumi:"localLanIp"`
	// Source CIDR for the tunnel from the Aviatrix transit gateway.
	LocalTunnelCidr pulumi.StringOutput `pulumi:"localTunnelCidr"`
	// Configure manual BGP advertised CIDRs for this connection. Only valid with 'connection_type' = 'bgp'. Available as of
	// provider version R2.18+.
	ManualBgpAdvertisedCidrs pulumi.StringArrayOutput `pulumi:"manualBgpAdvertisedCidrs"`
	// Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.
	Phase1Authentication pulumi.StringPtrOutput `pulumi:"phase1Authentication"`
	// Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase1DhGroups pulumi.StringPtrOutput `pulumi:"phase1DhGroups"`
	// Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.
	Phase1Encryption pulumi.StringPtrOutput `pulumi:"phase1Encryption"`
	// Phase 1 remote identifier of the IPsec tunnel.
	Phase1RemoteIdentifiers pulumi.StringArrayOutput `pulumi:"phase1RemoteIdentifiers"`
	// Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.
	Phase2Authentication pulumi.StringPtrOutput `pulumi:"phase2Authentication"`
	// Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase2DhGroups pulumi.StringPtrOutput `pulumi:"phase2DhGroups"`
	// Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.
	Phase2Encryption pulumi.StringPtrOutput `pulumi:"phase2Encryption"`
	// If left blank, the pre-shared key will be auto generated.
	PreSharedKey pulumi.StringPtrOutput `pulumi:"preSharedKey"`
	// Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.
	PrependAsPaths pulumi.StringArrayOutput `pulumi:"prependAsPaths"`
	// Remote Gateway IP.
	RemoteGatewayIp pulumi.StringPtrOutput `pulumi:"remoteGatewayIp"`
	// Remote LAN IP.
	RemoteLanIp pulumi.StringPtrOutput `pulumi:"remoteLanIp"`
	// Remote CIDRs joined as a string with ','. Required for a 'static' type connection.
	RemoteSubnet pulumi.StringPtrOutput `pulumi:"remoteSubnet"`
	// Destination CIDR for the tunnel to the external device.
	RemoteTunnelCidr pulumi.StringOutput `pulumi:"remoteTunnelCidr"`
	// Name of the remote VPC for a LAN BGP connection. Only valid when 'connection_type' = 'bgp' and tunnel_protocol' = 'LAN'
	// with an Azure transit gateway. Must be in the form "<VNET-name>:<resource-group-name>". Available as of provider version
	// R2.18+.
	RemoteVpcName pulumi.StringPtrOutput `pulumi:"remoteVpcName"`
	// Only valid for Transit Gateway's with Active-Standby Mode enabled. Valid values: true, false. Default: false.
	SwitchToHaStandbyGateway pulumi.BoolPtrOutput `pulumi:"switchToHaStandbyGateway"`
	// Tunnel Protocol. Valid values: 'IPsec', 'GRE' or 'LAN'. Default value: 'IPsec'. Case insensitive.
	TunnelProtocol pulumi.StringPtrOutput `pulumi:"tunnelProtocol"`
	// ID of the VPC where the Transit Gateway is located. For GCP BGP over LAN connection, it is in the format of
	// 'vpc_name~-~account_name'.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewAviatrixTransitExternalDeviceConn registers a new resource with the given unique name, arguments, and options.
func NewAviatrixTransitExternalDeviceConn(ctx *pulumi.Context,
	name string, args *AviatrixTransitExternalDeviceConnArgs, opts ...pulumi.ResourceOption) (*AviatrixTransitExternalDeviceConn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionName == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionName'")
	}
	if args.GwName == nil {
		return nil, errors.New("invalid value for required argument 'GwName'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixTransitExternalDeviceConn
	err := ctx.RegisterResource("aviatrix:index/aviatrixTransitExternalDeviceConn:AviatrixTransitExternalDeviceConn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixTransitExternalDeviceConn gets an existing AviatrixTransitExternalDeviceConn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixTransitExternalDeviceConn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixTransitExternalDeviceConnState, opts ...pulumi.ResourceOption) (*AviatrixTransitExternalDeviceConn, error) {
	var resource AviatrixTransitExternalDeviceConn
	err := ctx.ReadResource("aviatrix:index/aviatrixTransitExternalDeviceConn:AviatrixTransitExternalDeviceConn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixTransitExternalDeviceConn resources.
type aviatrixTransitExternalDeviceConnState struct {
	// Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).
	ApprovedCidrs []string `pulumi:"approvedCidrs"`
	// Backup BGP MD5 authentication key.
	BackupBgpMd5Key *string `pulumi:"backupBgpMd5Key"`
	// Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BackupBgpRemoteAsNum *string `pulumi:"backupBgpRemoteAsNum"`
	// Backup direct connect for backup external device.
	BackupDirectConnect *bool `pulumi:"backupDirectConnect"`
	// Backup Local LAN IP. Required for GCP BGP over LAN Connection with HA enabled.
	BackupLocalLanIp *string `pulumi:"backupLocalLanIp"`
	// Source CIDR for the tunnel from the backup Aviatrix transit gateway.
	BackupLocalTunnelCidr *string `pulumi:"backupLocalTunnelCidr"`
	// Backup pre shared key.
	BackupPreSharedKey *string `pulumi:"backupPreSharedKey"`
	// Backup remote gateway IP.
	BackupRemoteGatewayIp *string `pulumi:"backupRemoteGatewayIp"`
	// Backup Remote LAN IP.
	BackupRemoteLanIp *string `pulumi:"backupRemoteLanIp"`
	// Destination CIDR for the tunnel to the backup external device.
	BackupRemoteTunnelCidr *string `pulumi:"backupRemoteTunnelCidr"`
	// BGP local ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpLocalAsNum *string `pulumi:"bgpLocalAsNum"`
	// BGP MD5 authentication key.
	BgpMd5Key *string `pulumi:"bgpMd5Key"`
	// BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpRemoteAsNum *string `pulumi:"bgpRemoteAsNum"`
	// The name of the transit external device connection which is going to be created.
	ConnectionName *string `pulumi:"connectionName"`
	// Connection type. Valid values: 'bgp', 'static'. Default value: 'bgp'.
	ConnectionType *string `pulumi:"connectionType"`
	// Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.
	CustomAlgorithms *bool `pulumi:"customAlgorithms"`
	// Set true for private network infrastructure.
	DirectConnect *bool `pulumi:"directConnect"`
	// Switch to enable BGP LAN ActiveMesh. Only valid for GCP with Remote Gateway HA enabled. Default: false. Available as of
	// provider version R2.21+.
	EnableBgpLanActivemesh *bool `pulumi:"enableBgpLanActivemesh"`
	// Switch to allow this connection to communicate with a Network Domain via Connection Policy.
	EnableEdgeSegmentation *bool `pulumi:"enableEdgeSegmentation"`
	// Enable Event Triggered HA.
	EnableEventTriggeredHa *bool `pulumi:"enableEventTriggeredHa"`
	// Set as true if use IKEv2.
	EnableIkev2 *bool `pulumi:"enableIkev2"`
	// Enable Jumbo Frame for the transit external device connection. Valid values: true, false.
	EnableJumboFrame *bool `pulumi:"enableJumboFrame"`
	// Enable learned CIDR approval for the connection. Only valid with 'connection_type' = 'bgp'. Requires the
	// transit_gateway's 'learned_cidrs_approval_mode' attribute be set to 'connection'. Valid values: true, false. Default
	// value: false. Available as of provider version R2.18+.
	EnableLearnedCidrsApproval *bool `pulumi:"enableLearnedCidrsApproval"`
	// Name of the Transit Gateway.
	GwName *string `pulumi:"gwName"`
	// Set as true if there are two external devices.
	HaEnabled *bool `pulumi:"haEnabled"`
	// Local LAN IP. Required for GCP BGP over LAN Connection.
	LocalLanIp *string `pulumi:"localLanIp"`
	// Source CIDR for the tunnel from the Aviatrix transit gateway.
	LocalTunnelCidr *string `pulumi:"localTunnelCidr"`
	// Configure manual BGP advertised CIDRs for this connection. Only valid with 'connection_type' = 'bgp'. Available as of
	// provider version R2.18+.
	ManualBgpAdvertisedCidrs []string `pulumi:"manualBgpAdvertisedCidrs"`
	// Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.
	Phase1Authentication *string `pulumi:"phase1Authentication"`
	// Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase1DhGroups *string `pulumi:"phase1DhGroups"`
	// Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.
	Phase1Encryption *string `pulumi:"phase1Encryption"`
	// Phase 1 remote identifier of the IPsec tunnel.
	Phase1RemoteIdentifiers []string `pulumi:"phase1RemoteIdentifiers"`
	// Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.
	Phase2Authentication *string `pulumi:"phase2Authentication"`
	// Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase2DhGroups *string `pulumi:"phase2DhGroups"`
	// Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.
	Phase2Encryption *string `pulumi:"phase2Encryption"`
	// If left blank, the pre-shared key will be auto generated.
	PreSharedKey *string `pulumi:"preSharedKey"`
	// Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.
	PrependAsPaths []string `pulumi:"prependAsPaths"`
	// Remote Gateway IP.
	RemoteGatewayIp *string `pulumi:"remoteGatewayIp"`
	// Remote LAN IP.
	RemoteLanIp *string `pulumi:"remoteLanIp"`
	// Remote CIDRs joined as a string with ','. Required for a 'static' type connection.
	RemoteSubnet *string `pulumi:"remoteSubnet"`
	// Destination CIDR for the tunnel to the external device.
	RemoteTunnelCidr *string `pulumi:"remoteTunnelCidr"`
	// Name of the remote VPC for a LAN BGP connection. Only valid when 'connection_type' = 'bgp' and tunnel_protocol' = 'LAN'
	// with an Azure transit gateway. Must be in the form "<VNET-name>:<resource-group-name>". Available as of provider version
	// R2.18+.
	RemoteVpcName *string `pulumi:"remoteVpcName"`
	// Only valid for Transit Gateway's with Active-Standby Mode enabled. Valid values: true, false. Default: false.
	SwitchToHaStandbyGateway *bool `pulumi:"switchToHaStandbyGateway"`
	// Tunnel Protocol. Valid values: 'IPsec', 'GRE' or 'LAN'. Default value: 'IPsec'. Case insensitive.
	TunnelProtocol *string `pulumi:"tunnelProtocol"`
	// ID of the VPC where the Transit Gateway is located. For GCP BGP over LAN connection, it is in the format of
	// 'vpc_name~-~account_name'.
	VpcId *string `pulumi:"vpcId"`
}

type AviatrixTransitExternalDeviceConnState struct {
	// Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).
	ApprovedCidrs pulumi.StringArrayInput
	// Backup BGP MD5 authentication key.
	BackupBgpMd5Key pulumi.StringPtrInput
	// Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BackupBgpRemoteAsNum pulumi.StringPtrInput
	// Backup direct connect for backup external device.
	BackupDirectConnect pulumi.BoolPtrInput
	// Backup Local LAN IP. Required for GCP BGP over LAN Connection with HA enabled.
	BackupLocalLanIp pulumi.StringPtrInput
	// Source CIDR for the tunnel from the backup Aviatrix transit gateway.
	BackupLocalTunnelCidr pulumi.StringPtrInput
	// Backup pre shared key.
	BackupPreSharedKey pulumi.StringPtrInput
	// Backup remote gateway IP.
	BackupRemoteGatewayIp pulumi.StringPtrInput
	// Backup Remote LAN IP.
	BackupRemoteLanIp pulumi.StringPtrInput
	// Destination CIDR for the tunnel to the backup external device.
	BackupRemoteTunnelCidr pulumi.StringPtrInput
	// BGP local ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpLocalAsNum pulumi.StringPtrInput
	// BGP MD5 authentication key.
	BgpMd5Key pulumi.StringPtrInput
	// BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpRemoteAsNum pulumi.StringPtrInput
	// The name of the transit external device connection which is going to be created.
	ConnectionName pulumi.StringPtrInput
	// Connection type. Valid values: 'bgp', 'static'. Default value: 'bgp'.
	ConnectionType pulumi.StringPtrInput
	// Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.
	CustomAlgorithms pulumi.BoolPtrInput
	// Set true for private network infrastructure.
	DirectConnect pulumi.BoolPtrInput
	// Switch to enable BGP LAN ActiveMesh. Only valid for GCP with Remote Gateway HA enabled. Default: false. Available as of
	// provider version R2.21+.
	EnableBgpLanActivemesh pulumi.BoolPtrInput
	// Switch to allow this connection to communicate with a Network Domain via Connection Policy.
	EnableEdgeSegmentation pulumi.BoolPtrInput
	// Enable Event Triggered HA.
	EnableEventTriggeredHa pulumi.BoolPtrInput
	// Set as true if use IKEv2.
	EnableIkev2 pulumi.BoolPtrInput
	// Enable Jumbo Frame for the transit external device connection. Valid values: true, false.
	EnableJumboFrame pulumi.BoolPtrInput
	// Enable learned CIDR approval for the connection. Only valid with 'connection_type' = 'bgp'. Requires the
	// transit_gateway's 'learned_cidrs_approval_mode' attribute be set to 'connection'. Valid values: true, false. Default
	// value: false. Available as of provider version R2.18+.
	EnableLearnedCidrsApproval pulumi.BoolPtrInput
	// Name of the Transit Gateway.
	GwName pulumi.StringPtrInput
	// Set as true if there are two external devices.
	HaEnabled pulumi.BoolPtrInput
	// Local LAN IP. Required for GCP BGP over LAN Connection.
	LocalLanIp pulumi.StringPtrInput
	// Source CIDR for the tunnel from the Aviatrix transit gateway.
	LocalTunnelCidr pulumi.StringPtrInput
	// Configure manual BGP advertised CIDRs for this connection. Only valid with 'connection_type' = 'bgp'. Available as of
	// provider version R2.18+.
	ManualBgpAdvertisedCidrs pulumi.StringArrayInput
	// Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.
	Phase1Authentication pulumi.StringPtrInput
	// Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase1DhGroups pulumi.StringPtrInput
	// Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.
	Phase1Encryption pulumi.StringPtrInput
	// Phase 1 remote identifier of the IPsec tunnel.
	Phase1RemoteIdentifiers pulumi.StringArrayInput
	// Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.
	Phase2Authentication pulumi.StringPtrInput
	// Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase2DhGroups pulumi.StringPtrInput
	// Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.
	Phase2Encryption pulumi.StringPtrInput
	// If left blank, the pre-shared key will be auto generated.
	PreSharedKey pulumi.StringPtrInput
	// Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.
	PrependAsPaths pulumi.StringArrayInput
	// Remote Gateway IP.
	RemoteGatewayIp pulumi.StringPtrInput
	// Remote LAN IP.
	RemoteLanIp pulumi.StringPtrInput
	// Remote CIDRs joined as a string with ','. Required for a 'static' type connection.
	RemoteSubnet pulumi.StringPtrInput
	// Destination CIDR for the tunnel to the external device.
	RemoteTunnelCidr pulumi.StringPtrInput
	// Name of the remote VPC for a LAN BGP connection. Only valid when 'connection_type' = 'bgp' and tunnel_protocol' = 'LAN'
	// with an Azure transit gateway. Must be in the form "<VNET-name>:<resource-group-name>". Available as of provider version
	// R2.18+.
	RemoteVpcName pulumi.StringPtrInput
	// Only valid for Transit Gateway's with Active-Standby Mode enabled. Valid values: true, false. Default: false.
	SwitchToHaStandbyGateway pulumi.BoolPtrInput
	// Tunnel Protocol. Valid values: 'IPsec', 'GRE' or 'LAN'. Default value: 'IPsec'. Case insensitive.
	TunnelProtocol pulumi.StringPtrInput
	// ID of the VPC where the Transit Gateway is located. For GCP BGP over LAN connection, it is in the format of
	// 'vpc_name~-~account_name'.
	VpcId pulumi.StringPtrInput
}

func (AviatrixTransitExternalDeviceConnState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixTransitExternalDeviceConnState)(nil)).Elem()
}

type aviatrixTransitExternalDeviceConnArgs struct {
	// Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).
	ApprovedCidrs []string `pulumi:"approvedCidrs"`
	// Backup BGP MD5 authentication key.
	BackupBgpMd5Key *string `pulumi:"backupBgpMd5Key"`
	// Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BackupBgpRemoteAsNum *string `pulumi:"backupBgpRemoteAsNum"`
	// Backup direct connect for backup external device.
	BackupDirectConnect *bool `pulumi:"backupDirectConnect"`
	// Backup Local LAN IP. Required for GCP BGP over LAN Connection with HA enabled.
	BackupLocalLanIp *string `pulumi:"backupLocalLanIp"`
	// Source CIDR for the tunnel from the backup Aviatrix transit gateway.
	BackupLocalTunnelCidr *string `pulumi:"backupLocalTunnelCidr"`
	// Backup pre shared key.
	BackupPreSharedKey *string `pulumi:"backupPreSharedKey"`
	// Backup remote gateway IP.
	BackupRemoteGatewayIp *string `pulumi:"backupRemoteGatewayIp"`
	// Backup Remote LAN IP.
	BackupRemoteLanIp *string `pulumi:"backupRemoteLanIp"`
	// Destination CIDR for the tunnel to the backup external device.
	BackupRemoteTunnelCidr *string `pulumi:"backupRemoteTunnelCidr"`
	// BGP local ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpLocalAsNum *string `pulumi:"bgpLocalAsNum"`
	// BGP MD5 authentication key.
	BgpMd5Key *string `pulumi:"bgpMd5Key"`
	// BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpRemoteAsNum *string `pulumi:"bgpRemoteAsNum"`
	// The name of the transit external device connection which is going to be created.
	ConnectionName string `pulumi:"connectionName"`
	// Connection type. Valid values: 'bgp', 'static'. Default value: 'bgp'.
	ConnectionType *string `pulumi:"connectionType"`
	// Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.
	CustomAlgorithms *bool `pulumi:"customAlgorithms"`
	// Set true for private network infrastructure.
	DirectConnect *bool `pulumi:"directConnect"`
	// Switch to enable BGP LAN ActiveMesh. Only valid for GCP with Remote Gateway HA enabled. Default: false. Available as of
	// provider version R2.21+.
	EnableBgpLanActivemesh *bool `pulumi:"enableBgpLanActivemesh"`
	// Switch to allow this connection to communicate with a Network Domain via Connection Policy.
	EnableEdgeSegmentation *bool `pulumi:"enableEdgeSegmentation"`
	// Enable Event Triggered HA.
	EnableEventTriggeredHa *bool `pulumi:"enableEventTriggeredHa"`
	// Set as true if use IKEv2.
	EnableIkev2 *bool `pulumi:"enableIkev2"`
	// Enable Jumbo Frame for the transit external device connection. Valid values: true, false.
	EnableJumboFrame *bool `pulumi:"enableJumboFrame"`
	// Enable learned CIDR approval for the connection. Only valid with 'connection_type' = 'bgp'. Requires the
	// transit_gateway's 'learned_cidrs_approval_mode' attribute be set to 'connection'. Valid values: true, false. Default
	// value: false. Available as of provider version R2.18+.
	EnableLearnedCidrsApproval *bool `pulumi:"enableLearnedCidrsApproval"`
	// Name of the Transit Gateway.
	GwName string `pulumi:"gwName"`
	// Set as true if there are two external devices.
	HaEnabled *bool `pulumi:"haEnabled"`
	// Local LAN IP. Required for GCP BGP over LAN Connection.
	LocalLanIp *string `pulumi:"localLanIp"`
	// Source CIDR for the tunnel from the Aviatrix transit gateway.
	LocalTunnelCidr *string `pulumi:"localTunnelCidr"`
	// Configure manual BGP advertised CIDRs for this connection. Only valid with 'connection_type' = 'bgp'. Available as of
	// provider version R2.18+.
	ManualBgpAdvertisedCidrs []string `pulumi:"manualBgpAdvertisedCidrs"`
	// Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.
	Phase1Authentication *string `pulumi:"phase1Authentication"`
	// Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase1DhGroups *string `pulumi:"phase1DhGroups"`
	// Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.
	Phase1Encryption *string `pulumi:"phase1Encryption"`
	// Phase 1 remote identifier of the IPsec tunnel.
	Phase1RemoteIdentifiers []string `pulumi:"phase1RemoteIdentifiers"`
	// Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.
	Phase2Authentication *string `pulumi:"phase2Authentication"`
	// Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase2DhGroups *string `pulumi:"phase2DhGroups"`
	// Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.
	Phase2Encryption *string `pulumi:"phase2Encryption"`
	// If left blank, the pre-shared key will be auto generated.
	PreSharedKey *string `pulumi:"preSharedKey"`
	// Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.
	PrependAsPaths []string `pulumi:"prependAsPaths"`
	// Remote Gateway IP.
	RemoteGatewayIp *string `pulumi:"remoteGatewayIp"`
	// Remote LAN IP.
	RemoteLanIp *string `pulumi:"remoteLanIp"`
	// Remote CIDRs joined as a string with ','. Required for a 'static' type connection.
	RemoteSubnet *string `pulumi:"remoteSubnet"`
	// Destination CIDR for the tunnel to the external device.
	RemoteTunnelCidr *string `pulumi:"remoteTunnelCidr"`
	// Name of the remote VPC for a LAN BGP connection. Only valid when 'connection_type' = 'bgp' and tunnel_protocol' = 'LAN'
	// with an Azure transit gateway. Must be in the form "<VNET-name>:<resource-group-name>". Available as of provider version
	// R2.18+.
	RemoteVpcName *string `pulumi:"remoteVpcName"`
	// Only valid for Transit Gateway's with Active-Standby Mode enabled. Valid values: true, false. Default: false.
	SwitchToHaStandbyGateway *bool `pulumi:"switchToHaStandbyGateway"`
	// Tunnel Protocol. Valid values: 'IPsec', 'GRE' or 'LAN'. Default value: 'IPsec'. Case insensitive.
	TunnelProtocol *string `pulumi:"tunnelProtocol"`
	// ID of the VPC where the Transit Gateway is located. For GCP BGP over LAN connection, it is in the format of
	// 'vpc_name~-~account_name'.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a AviatrixTransitExternalDeviceConn resource.
type AviatrixTransitExternalDeviceConnArgs struct {
	// Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).
	ApprovedCidrs pulumi.StringArrayInput
	// Backup BGP MD5 authentication key.
	BackupBgpMd5Key pulumi.StringPtrInput
	// Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BackupBgpRemoteAsNum pulumi.StringPtrInput
	// Backup direct connect for backup external device.
	BackupDirectConnect pulumi.BoolPtrInput
	// Backup Local LAN IP. Required for GCP BGP over LAN Connection with HA enabled.
	BackupLocalLanIp pulumi.StringPtrInput
	// Source CIDR for the tunnel from the backup Aviatrix transit gateway.
	BackupLocalTunnelCidr pulumi.StringPtrInput
	// Backup pre shared key.
	BackupPreSharedKey pulumi.StringPtrInput
	// Backup remote gateway IP.
	BackupRemoteGatewayIp pulumi.StringPtrInput
	// Backup Remote LAN IP.
	BackupRemoteLanIp pulumi.StringPtrInput
	// Destination CIDR for the tunnel to the backup external device.
	BackupRemoteTunnelCidr pulumi.StringPtrInput
	// BGP local ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpLocalAsNum pulumi.StringPtrInput
	// BGP MD5 authentication key.
	BgpMd5Key pulumi.StringPtrInput
	// BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
	BgpRemoteAsNum pulumi.StringPtrInput
	// The name of the transit external device connection which is going to be created.
	ConnectionName pulumi.StringInput
	// Connection type. Valid values: 'bgp', 'static'. Default value: 'bgp'.
	ConnectionType pulumi.StringPtrInput
	// Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.
	CustomAlgorithms pulumi.BoolPtrInput
	// Set true for private network infrastructure.
	DirectConnect pulumi.BoolPtrInput
	// Switch to enable BGP LAN ActiveMesh. Only valid for GCP with Remote Gateway HA enabled. Default: false. Available as of
	// provider version R2.21+.
	EnableBgpLanActivemesh pulumi.BoolPtrInput
	// Switch to allow this connection to communicate with a Network Domain via Connection Policy.
	EnableEdgeSegmentation pulumi.BoolPtrInput
	// Enable Event Triggered HA.
	EnableEventTriggeredHa pulumi.BoolPtrInput
	// Set as true if use IKEv2.
	EnableIkev2 pulumi.BoolPtrInput
	// Enable Jumbo Frame for the transit external device connection. Valid values: true, false.
	EnableJumboFrame pulumi.BoolPtrInput
	// Enable learned CIDR approval for the connection. Only valid with 'connection_type' = 'bgp'. Requires the
	// transit_gateway's 'learned_cidrs_approval_mode' attribute be set to 'connection'. Valid values: true, false. Default
	// value: false. Available as of provider version R2.18+.
	EnableLearnedCidrsApproval pulumi.BoolPtrInput
	// Name of the Transit Gateway.
	GwName pulumi.StringInput
	// Set as true if there are two external devices.
	HaEnabled pulumi.BoolPtrInput
	// Local LAN IP. Required for GCP BGP over LAN Connection.
	LocalLanIp pulumi.StringPtrInput
	// Source CIDR for the tunnel from the Aviatrix transit gateway.
	LocalTunnelCidr pulumi.StringPtrInput
	// Configure manual BGP advertised CIDRs for this connection. Only valid with 'connection_type' = 'bgp'. Available as of
	// provider version R2.18+.
	ManualBgpAdvertisedCidrs pulumi.StringArrayInput
	// Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.
	Phase1Authentication pulumi.StringPtrInput
	// Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase1DhGroups pulumi.StringPtrInput
	// Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.
	Phase1Encryption pulumi.StringPtrInput
	// Phase 1 remote identifier of the IPsec tunnel.
	Phase1RemoteIdentifiers pulumi.StringArrayInput
	// Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.
	Phase2Authentication pulumi.StringPtrInput
	// Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
	Phase2DhGroups pulumi.StringPtrInput
	// Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',
	// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.
	Phase2Encryption pulumi.StringPtrInput
	// If left blank, the pre-shared key will be auto generated.
	PreSharedKey pulumi.StringPtrInput
	// Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.
	PrependAsPaths pulumi.StringArrayInput
	// Remote Gateway IP.
	RemoteGatewayIp pulumi.StringPtrInput
	// Remote LAN IP.
	RemoteLanIp pulumi.StringPtrInput
	// Remote CIDRs joined as a string with ','. Required for a 'static' type connection.
	RemoteSubnet pulumi.StringPtrInput
	// Destination CIDR for the tunnel to the external device.
	RemoteTunnelCidr pulumi.StringPtrInput
	// Name of the remote VPC for a LAN BGP connection. Only valid when 'connection_type' = 'bgp' and tunnel_protocol' = 'LAN'
	// with an Azure transit gateway. Must be in the form "<VNET-name>:<resource-group-name>". Available as of provider version
	// R2.18+.
	RemoteVpcName pulumi.StringPtrInput
	// Only valid for Transit Gateway's with Active-Standby Mode enabled. Valid values: true, false. Default: false.
	SwitchToHaStandbyGateway pulumi.BoolPtrInput
	// Tunnel Protocol. Valid values: 'IPsec', 'GRE' or 'LAN'. Default value: 'IPsec'. Case insensitive.
	TunnelProtocol pulumi.StringPtrInput
	// ID of the VPC where the Transit Gateway is located. For GCP BGP over LAN connection, it is in the format of
	// 'vpc_name~-~account_name'.
	VpcId pulumi.StringInput
}

func (AviatrixTransitExternalDeviceConnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixTransitExternalDeviceConnArgs)(nil)).Elem()
}

type AviatrixTransitExternalDeviceConnInput interface {
	pulumi.Input

	ToAviatrixTransitExternalDeviceConnOutput() AviatrixTransitExternalDeviceConnOutput
	ToAviatrixTransitExternalDeviceConnOutputWithContext(ctx context.Context) AviatrixTransitExternalDeviceConnOutput
}

func (*AviatrixTransitExternalDeviceConn) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixTransitExternalDeviceConn)(nil)).Elem()
}

func (i *AviatrixTransitExternalDeviceConn) ToAviatrixTransitExternalDeviceConnOutput() AviatrixTransitExternalDeviceConnOutput {
	return i.ToAviatrixTransitExternalDeviceConnOutputWithContext(context.Background())
}

func (i *AviatrixTransitExternalDeviceConn) ToAviatrixTransitExternalDeviceConnOutputWithContext(ctx context.Context) AviatrixTransitExternalDeviceConnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixTransitExternalDeviceConnOutput)
}

// AviatrixTransitExternalDeviceConnArrayInput is an input type that accepts AviatrixTransitExternalDeviceConnArray and AviatrixTransitExternalDeviceConnArrayOutput values.
// You can construct a concrete instance of `AviatrixTransitExternalDeviceConnArrayInput` via:
//
//	AviatrixTransitExternalDeviceConnArray{ AviatrixTransitExternalDeviceConnArgs{...} }
type AviatrixTransitExternalDeviceConnArrayInput interface {
	pulumi.Input

	ToAviatrixTransitExternalDeviceConnArrayOutput() AviatrixTransitExternalDeviceConnArrayOutput
	ToAviatrixTransitExternalDeviceConnArrayOutputWithContext(context.Context) AviatrixTransitExternalDeviceConnArrayOutput
}

type AviatrixTransitExternalDeviceConnArray []AviatrixTransitExternalDeviceConnInput

func (AviatrixTransitExternalDeviceConnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixTransitExternalDeviceConn)(nil)).Elem()
}

func (i AviatrixTransitExternalDeviceConnArray) ToAviatrixTransitExternalDeviceConnArrayOutput() AviatrixTransitExternalDeviceConnArrayOutput {
	return i.ToAviatrixTransitExternalDeviceConnArrayOutputWithContext(context.Background())
}

func (i AviatrixTransitExternalDeviceConnArray) ToAviatrixTransitExternalDeviceConnArrayOutputWithContext(ctx context.Context) AviatrixTransitExternalDeviceConnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixTransitExternalDeviceConnArrayOutput)
}

// AviatrixTransitExternalDeviceConnMapInput is an input type that accepts AviatrixTransitExternalDeviceConnMap and AviatrixTransitExternalDeviceConnMapOutput values.
// You can construct a concrete instance of `AviatrixTransitExternalDeviceConnMapInput` via:
//
//	AviatrixTransitExternalDeviceConnMap{ "key": AviatrixTransitExternalDeviceConnArgs{...} }
type AviatrixTransitExternalDeviceConnMapInput interface {
	pulumi.Input

	ToAviatrixTransitExternalDeviceConnMapOutput() AviatrixTransitExternalDeviceConnMapOutput
	ToAviatrixTransitExternalDeviceConnMapOutputWithContext(context.Context) AviatrixTransitExternalDeviceConnMapOutput
}

type AviatrixTransitExternalDeviceConnMap map[string]AviatrixTransitExternalDeviceConnInput

func (AviatrixTransitExternalDeviceConnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixTransitExternalDeviceConn)(nil)).Elem()
}

func (i AviatrixTransitExternalDeviceConnMap) ToAviatrixTransitExternalDeviceConnMapOutput() AviatrixTransitExternalDeviceConnMapOutput {
	return i.ToAviatrixTransitExternalDeviceConnMapOutputWithContext(context.Background())
}

func (i AviatrixTransitExternalDeviceConnMap) ToAviatrixTransitExternalDeviceConnMapOutputWithContext(ctx context.Context) AviatrixTransitExternalDeviceConnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixTransitExternalDeviceConnMapOutput)
}

type AviatrixTransitExternalDeviceConnOutput struct{ *pulumi.OutputState }

func (AviatrixTransitExternalDeviceConnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixTransitExternalDeviceConn)(nil)).Elem()
}

func (o AviatrixTransitExternalDeviceConnOutput) ToAviatrixTransitExternalDeviceConnOutput() AviatrixTransitExternalDeviceConnOutput {
	return o
}

func (o AviatrixTransitExternalDeviceConnOutput) ToAviatrixTransitExternalDeviceConnOutputWithContext(ctx context.Context) AviatrixTransitExternalDeviceConnOutput {
	return o
}

// Set of approved cidrs. Requires 'enable_learned_cidrs_approval' to be true. Type: Set(String).
func (o AviatrixTransitExternalDeviceConnOutput) ApprovedCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringArrayOutput { return v.ApprovedCidrs }).(pulumi.StringArrayOutput)
}

// Backup BGP MD5 authentication key.
func (o AviatrixTransitExternalDeviceConnOutput) BackupBgpMd5Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.BackupBgpMd5Key }).(pulumi.StringPtrOutput)
}

// Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
func (o AviatrixTransitExternalDeviceConnOutput) BackupBgpRemoteAsNum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.BackupBgpRemoteAsNum }).(pulumi.StringPtrOutput)
}

// Backup direct connect for backup external device.
func (o AviatrixTransitExternalDeviceConnOutput) BackupDirectConnect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.BoolPtrOutput { return v.BackupDirectConnect }).(pulumi.BoolPtrOutput)
}

// Backup Local LAN IP. Required for GCP BGP over LAN Connection with HA enabled.
func (o AviatrixTransitExternalDeviceConnOutput) BackupLocalLanIp() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringOutput { return v.BackupLocalLanIp }).(pulumi.StringOutput)
}

// Source CIDR for the tunnel from the backup Aviatrix transit gateway.
func (o AviatrixTransitExternalDeviceConnOutput) BackupLocalTunnelCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringOutput { return v.BackupLocalTunnelCidr }).(pulumi.StringOutput)
}

// Backup pre shared key.
func (o AviatrixTransitExternalDeviceConnOutput) BackupPreSharedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.BackupPreSharedKey }).(pulumi.StringPtrOutput)
}

// Backup remote gateway IP.
func (o AviatrixTransitExternalDeviceConnOutput) BackupRemoteGatewayIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.BackupRemoteGatewayIp }).(pulumi.StringPtrOutput)
}

// Backup Remote LAN IP.
func (o AviatrixTransitExternalDeviceConnOutput) BackupRemoteLanIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.BackupRemoteLanIp }).(pulumi.StringPtrOutput)
}

// Destination CIDR for the tunnel to the backup external device.
func (o AviatrixTransitExternalDeviceConnOutput) BackupRemoteTunnelCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringOutput { return v.BackupRemoteTunnelCidr }).(pulumi.StringOutput)
}

// BGP local ASN (Autonomous System Number). Integer between 1-4294967294.
func (o AviatrixTransitExternalDeviceConnOutput) BgpLocalAsNum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.BgpLocalAsNum }).(pulumi.StringPtrOutput)
}

// BGP MD5 authentication key.
func (o AviatrixTransitExternalDeviceConnOutput) BgpMd5Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.BgpMd5Key }).(pulumi.StringPtrOutput)
}

// BGP remote ASN (Autonomous System Number). Integer between 1-4294967294.
func (o AviatrixTransitExternalDeviceConnOutput) BgpRemoteAsNum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.BgpRemoteAsNum }).(pulumi.StringPtrOutput)
}

// The name of the transit external device connection which is going to be created.
func (o AviatrixTransitExternalDeviceConnOutput) ConnectionName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringOutput { return v.ConnectionName }).(pulumi.StringOutput)
}

// Connection type. Valid values: 'bgp', 'static'. Default value: 'bgp'.
func (o AviatrixTransitExternalDeviceConnOutput) ConnectionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.ConnectionType }).(pulumi.StringPtrOutput)
}

// Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption.
func (o AviatrixTransitExternalDeviceConnOutput) CustomAlgorithms() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.BoolPtrOutput { return v.CustomAlgorithms }).(pulumi.BoolPtrOutput)
}

// Set true for private network infrastructure.
func (o AviatrixTransitExternalDeviceConnOutput) DirectConnect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.BoolPtrOutput { return v.DirectConnect }).(pulumi.BoolPtrOutput)
}

// Switch to enable BGP LAN ActiveMesh. Only valid for GCP with Remote Gateway HA enabled. Default: false. Available as of
// provider version R2.21+.
func (o AviatrixTransitExternalDeviceConnOutput) EnableBgpLanActivemesh() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.BoolPtrOutput { return v.EnableBgpLanActivemesh }).(pulumi.BoolPtrOutput)
}

// Switch to allow this connection to communicate with a Network Domain via Connection Policy.
func (o AviatrixTransitExternalDeviceConnOutput) EnableEdgeSegmentation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.BoolPtrOutput { return v.EnableEdgeSegmentation }).(pulumi.BoolPtrOutput)
}

// Enable Event Triggered HA.
func (o AviatrixTransitExternalDeviceConnOutput) EnableEventTriggeredHa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.BoolPtrOutput { return v.EnableEventTriggeredHa }).(pulumi.BoolPtrOutput)
}

// Set as true if use IKEv2.
func (o AviatrixTransitExternalDeviceConnOutput) EnableIkev2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.BoolPtrOutput { return v.EnableIkev2 }).(pulumi.BoolPtrOutput)
}

// Enable Jumbo Frame for the transit external device connection. Valid values: true, false.
func (o AviatrixTransitExternalDeviceConnOutput) EnableJumboFrame() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.BoolPtrOutput { return v.EnableJumboFrame }).(pulumi.BoolPtrOutput)
}

// Enable learned CIDR approval for the connection. Only valid with 'connection_type' = 'bgp'. Requires the
// transit_gateway's 'learned_cidrs_approval_mode' attribute be set to 'connection'. Valid values: true, false. Default
// value: false. Available as of provider version R2.18+.
func (o AviatrixTransitExternalDeviceConnOutput) EnableLearnedCidrsApproval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.BoolPtrOutput { return v.EnableLearnedCidrsApproval }).(pulumi.BoolPtrOutput)
}

// Name of the Transit Gateway.
func (o AviatrixTransitExternalDeviceConnOutput) GwName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringOutput { return v.GwName }).(pulumi.StringOutput)
}

// Set as true if there are two external devices.
func (o AviatrixTransitExternalDeviceConnOutput) HaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.BoolPtrOutput { return v.HaEnabled }).(pulumi.BoolPtrOutput)
}

// Local LAN IP. Required for GCP BGP over LAN Connection.
func (o AviatrixTransitExternalDeviceConnOutput) LocalLanIp() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringOutput { return v.LocalLanIp }).(pulumi.StringOutput)
}

// Source CIDR for the tunnel from the Aviatrix transit gateway.
func (o AviatrixTransitExternalDeviceConnOutput) LocalTunnelCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringOutput { return v.LocalTunnelCidr }).(pulumi.StringOutput)
}

// Configure manual BGP advertised CIDRs for this connection. Only valid with 'connection_type' = 'bgp'. Available as of
// provider version R2.18+.
func (o AviatrixTransitExternalDeviceConnOutput) ManualBgpAdvertisedCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringArrayOutput { return v.ManualBgpAdvertisedCidrs }).(pulumi.StringArrayOutput)
}

// Phase one Authentication. Valid values: 'SHA-1', 'SHA-256', 'SHA-384' and 'SHA-512'.
func (o AviatrixTransitExternalDeviceConnOutput) Phase1Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.Phase1Authentication }).(pulumi.StringPtrOutput)
}

// Phase one DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
func (o AviatrixTransitExternalDeviceConnOutput) Phase1DhGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.Phase1DhGroups }).(pulumi.StringPtrOutput)
}

// Phase one Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC' and 'AES-256-CBC', 'AES-128-GCM-64',
// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', and 'AES-256-GCM-128'.
func (o AviatrixTransitExternalDeviceConnOutput) Phase1Encryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.Phase1Encryption }).(pulumi.StringPtrOutput)
}

// Phase 1 remote identifier of the IPsec tunnel.
func (o AviatrixTransitExternalDeviceConnOutput) Phase1RemoteIdentifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringArrayOutput { return v.Phase1RemoteIdentifiers }).(pulumi.StringArrayOutput)
}

// Phase two Authentication. Valid values: 'NO-AUTH', 'HMAC-SHA-1', 'HMAC-SHA-256', 'HMAC-SHA-384' and 'HMAC-SHA-512'.
func (o AviatrixTransitExternalDeviceConnOutput) Phase2Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.Phase2Authentication }).(pulumi.StringPtrOutput)
}

// Phase two DH Groups. Valid values: '1', '2', '5', '14', '15', '16', '17', '18', '19', '20' and '21'.
func (o AviatrixTransitExternalDeviceConnOutput) Phase2DhGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.Phase2DhGroups }).(pulumi.StringPtrOutput)
}

// Phase two Encryption. Valid values: '3DES', 'AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM-64',
// 'AES-128-GCM-96', 'AES-128-GCM-128', 'AES-256-GCM-64', 'AES-256-GCM-96', 'AES-256-GCM-128', and 'NULL-ENCR'.
func (o AviatrixTransitExternalDeviceConnOutput) Phase2Encryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.Phase2Encryption }).(pulumi.StringPtrOutput)
}

// If left blank, the pre-shared key will be auto generated.
func (o AviatrixTransitExternalDeviceConnOutput) PreSharedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.PreSharedKey }).(pulumi.StringPtrOutput)
}

// Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.
func (o AviatrixTransitExternalDeviceConnOutput) PrependAsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringArrayOutput { return v.PrependAsPaths }).(pulumi.StringArrayOutput)
}

// Remote Gateway IP.
func (o AviatrixTransitExternalDeviceConnOutput) RemoteGatewayIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.RemoteGatewayIp }).(pulumi.StringPtrOutput)
}

// Remote LAN IP.
func (o AviatrixTransitExternalDeviceConnOutput) RemoteLanIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.RemoteLanIp }).(pulumi.StringPtrOutput)
}

// Remote CIDRs joined as a string with ','. Required for a 'static' type connection.
func (o AviatrixTransitExternalDeviceConnOutput) RemoteSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.RemoteSubnet }).(pulumi.StringPtrOutput)
}

// Destination CIDR for the tunnel to the external device.
func (o AviatrixTransitExternalDeviceConnOutput) RemoteTunnelCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringOutput { return v.RemoteTunnelCidr }).(pulumi.StringOutput)
}

// Name of the remote VPC for a LAN BGP connection. Only valid when 'connection_type' = 'bgp' and tunnel_protocol' = 'LAN'
// with an Azure transit gateway. Must be in the form "<VNET-name>:<resource-group-name>". Available as of provider version
// R2.18+.
func (o AviatrixTransitExternalDeviceConnOutput) RemoteVpcName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.RemoteVpcName }).(pulumi.StringPtrOutput)
}

// Only valid for Transit Gateway's with Active-Standby Mode enabled. Valid values: true, false. Default: false.
func (o AviatrixTransitExternalDeviceConnOutput) SwitchToHaStandbyGateway() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.BoolPtrOutput { return v.SwitchToHaStandbyGateway }).(pulumi.BoolPtrOutput)
}

// Tunnel Protocol. Valid values: 'IPsec', 'GRE' or 'LAN'. Default value: 'IPsec'. Case insensitive.
func (o AviatrixTransitExternalDeviceConnOutput) TunnelProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringPtrOutput { return v.TunnelProtocol }).(pulumi.StringPtrOutput)
}

// ID of the VPC where the Transit Gateway is located. For GCP BGP over LAN connection, it is in the format of
// 'vpc_name~-~account_name'.
func (o AviatrixTransitExternalDeviceConnOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitExternalDeviceConn) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type AviatrixTransitExternalDeviceConnArrayOutput struct{ *pulumi.OutputState }

func (AviatrixTransitExternalDeviceConnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixTransitExternalDeviceConn)(nil)).Elem()
}

func (o AviatrixTransitExternalDeviceConnArrayOutput) ToAviatrixTransitExternalDeviceConnArrayOutput() AviatrixTransitExternalDeviceConnArrayOutput {
	return o
}

func (o AviatrixTransitExternalDeviceConnArrayOutput) ToAviatrixTransitExternalDeviceConnArrayOutputWithContext(ctx context.Context) AviatrixTransitExternalDeviceConnArrayOutput {
	return o
}

func (o AviatrixTransitExternalDeviceConnArrayOutput) Index(i pulumi.IntInput) AviatrixTransitExternalDeviceConnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixTransitExternalDeviceConn {
		return vs[0].([]*AviatrixTransitExternalDeviceConn)[vs[1].(int)]
	}).(AviatrixTransitExternalDeviceConnOutput)
}

type AviatrixTransitExternalDeviceConnMapOutput struct{ *pulumi.OutputState }

func (AviatrixTransitExternalDeviceConnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixTransitExternalDeviceConn)(nil)).Elem()
}

func (o AviatrixTransitExternalDeviceConnMapOutput) ToAviatrixTransitExternalDeviceConnMapOutput() AviatrixTransitExternalDeviceConnMapOutput {
	return o
}

func (o AviatrixTransitExternalDeviceConnMapOutput) ToAviatrixTransitExternalDeviceConnMapOutputWithContext(ctx context.Context) AviatrixTransitExternalDeviceConnMapOutput {
	return o
}

func (o AviatrixTransitExternalDeviceConnMapOutput) MapIndex(k pulumi.StringInput) AviatrixTransitExternalDeviceConnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixTransitExternalDeviceConn {
		return vs[0].(map[string]*AviatrixTransitExternalDeviceConn)[vs[1].(string)]
	}).(AviatrixTransitExternalDeviceConnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixTransitExternalDeviceConnInput)(nil)).Elem(), &AviatrixTransitExternalDeviceConn{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixTransitExternalDeviceConnArrayInput)(nil)).Elem(), AviatrixTransitExternalDeviceConnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixTransitExternalDeviceConnMapInput)(nil)).Elem(), AviatrixTransitExternalDeviceConnMap{})
	pulumi.RegisterOutputType(AviatrixTransitExternalDeviceConnOutput{})
	pulumi.RegisterOutputType(AviatrixTransitExternalDeviceConnArrayOutput{})
	pulumi.RegisterOutputType(AviatrixTransitExternalDeviceConnMapOutput{})
}
