// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **aviatrix_rbac_group_access_account_attachment** resource allows the creation and management of access account attachments to Aviatrix (Role-Based Access Control) RBAC groups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/astipkovits/pulumi-aviatrix/sdk/go/aviatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aviatrix.NewAviatrixRbacGroupAccessAccountAttachment(ctx, "testAttachment", &aviatrix.AviatrixRbacGroupAccessAccountAttachmentArgs{
//				AccessAccountName: pulumi.String("account_name"),
//				GroupName:         pulumi.String("write_only"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// **rbac_group_access_account_attachment** can be imported using the `group_name` and `access_account_name`, e.g.
//
// ```sh
//
//	$ pulumi import aviatrix:index/aviatrixRbacGroupAccessAccountAttachment:AviatrixRbacGroupAccessAccountAttachment test group_name~access_account_name
//
// ```
type AviatrixRbacGroupAccessAccountAttachment struct {
	pulumi.CustomResourceState

	// Account name. This can be used for logging in to CloudN console or UserConnect controller.
	AccessAccountName pulumi.StringOutput `pulumi:"accessAccountName"`
	// This parameter represents the name of a RBAC group.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
}

// NewAviatrixRbacGroupAccessAccountAttachment registers a new resource with the given unique name, arguments, and options.
func NewAviatrixRbacGroupAccessAccountAttachment(ctx *pulumi.Context,
	name string, args *AviatrixRbacGroupAccessAccountAttachmentArgs, opts ...pulumi.ResourceOption) (*AviatrixRbacGroupAccessAccountAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessAccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccessAccountName'")
	}
	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixRbacGroupAccessAccountAttachment
	err := ctx.RegisterResource("aviatrix:index/aviatrixRbacGroupAccessAccountAttachment:AviatrixRbacGroupAccessAccountAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixRbacGroupAccessAccountAttachment gets an existing AviatrixRbacGroupAccessAccountAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixRbacGroupAccessAccountAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixRbacGroupAccessAccountAttachmentState, opts ...pulumi.ResourceOption) (*AviatrixRbacGroupAccessAccountAttachment, error) {
	var resource AviatrixRbacGroupAccessAccountAttachment
	err := ctx.ReadResource("aviatrix:index/aviatrixRbacGroupAccessAccountAttachment:AviatrixRbacGroupAccessAccountAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixRbacGroupAccessAccountAttachment resources.
type aviatrixRbacGroupAccessAccountAttachmentState struct {
	// Account name. This can be used for logging in to CloudN console or UserConnect controller.
	AccessAccountName *string `pulumi:"accessAccountName"`
	// This parameter represents the name of a RBAC group.
	GroupName *string `pulumi:"groupName"`
}

type AviatrixRbacGroupAccessAccountAttachmentState struct {
	// Account name. This can be used for logging in to CloudN console or UserConnect controller.
	AccessAccountName pulumi.StringPtrInput
	// This parameter represents the name of a RBAC group.
	GroupName pulumi.StringPtrInput
}

func (AviatrixRbacGroupAccessAccountAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixRbacGroupAccessAccountAttachmentState)(nil)).Elem()
}

type aviatrixRbacGroupAccessAccountAttachmentArgs struct {
	// Account name. This can be used for logging in to CloudN console or UserConnect controller.
	AccessAccountName string `pulumi:"accessAccountName"`
	// This parameter represents the name of a RBAC group.
	GroupName string `pulumi:"groupName"`
}

// The set of arguments for constructing a AviatrixRbacGroupAccessAccountAttachment resource.
type AviatrixRbacGroupAccessAccountAttachmentArgs struct {
	// Account name. This can be used for logging in to CloudN console or UserConnect controller.
	AccessAccountName pulumi.StringInput
	// This parameter represents the name of a RBAC group.
	GroupName pulumi.StringInput
}

func (AviatrixRbacGroupAccessAccountAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixRbacGroupAccessAccountAttachmentArgs)(nil)).Elem()
}

type AviatrixRbacGroupAccessAccountAttachmentInput interface {
	pulumi.Input

	ToAviatrixRbacGroupAccessAccountAttachmentOutput() AviatrixRbacGroupAccessAccountAttachmentOutput
	ToAviatrixRbacGroupAccessAccountAttachmentOutputWithContext(ctx context.Context) AviatrixRbacGroupAccessAccountAttachmentOutput
}

func (*AviatrixRbacGroupAccessAccountAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixRbacGroupAccessAccountAttachment)(nil)).Elem()
}

func (i *AviatrixRbacGroupAccessAccountAttachment) ToAviatrixRbacGroupAccessAccountAttachmentOutput() AviatrixRbacGroupAccessAccountAttachmentOutput {
	return i.ToAviatrixRbacGroupAccessAccountAttachmentOutputWithContext(context.Background())
}

func (i *AviatrixRbacGroupAccessAccountAttachment) ToAviatrixRbacGroupAccessAccountAttachmentOutputWithContext(ctx context.Context) AviatrixRbacGroupAccessAccountAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixRbacGroupAccessAccountAttachmentOutput)
}

// AviatrixRbacGroupAccessAccountAttachmentArrayInput is an input type that accepts AviatrixRbacGroupAccessAccountAttachmentArray and AviatrixRbacGroupAccessAccountAttachmentArrayOutput values.
// You can construct a concrete instance of `AviatrixRbacGroupAccessAccountAttachmentArrayInput` via:
//
//	AviatrixRbacGroupAccessAccountAttachmentArray{ AviatrixRbacGroupAccessAccountAttachmentArgs{...} }
type AviatrixRbacGroupAccessAccountAttachmentArrayInput interface {
	pulumi.Input

	ToAviatrixRbacGroupAccessAccountAttachmentArrayOutput() AviatrixRbacGroupAccessAccountAttachmentArrayOutput
	ToAviatrixRbacGroupAccessAccountAttachmentArrayOutputWithContext(context.Context) AviatrixRbacGroupAccessAccountAttachmentArrayOutput
}

type AviatrixRbacGroupAccessAccountAttachmentArray []AviatrixRbacGroupAccessAccountAttachmentInput

func (AviatrixRbacGroupAccessAccountAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixRbacGroupAccessAccountAttachment)(nil)).Elem()
}

func (i AviatrixRbacGroupAccessAccountAttachmentArray) ToAviatrixRbacGroupAccessAccountAttachmentArrayOutput() AviatrixRbacGroupAccessAccountAttachmentArrayOutput {
	return i.ToAviatrixRbacGroupAccessAccountAttachmentArrayOutputWithContext(context.Background())
}

func (i AviatrixRbacGroupAccessAccountAttachmentArray) ToAviatrixRbacGroupAccessAccountAttachmentArrayOutputWithContext(ctx context.Context) AviatrixRbacGroupAccessAccountAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixRbacGroupAccessAccountAttachmentArrayOutput)
}

// AviatrixRbacGroupAccessAccountAttachmentMapInput is an input type that accepts AviatrixRbacGroupAccessAccountAttachmentMap and AviatrixRbacGroupAccessAccountAttachmentMapOutput values.
// You can construct a concrete instance of `AviatrixRbacGroupAccessAccountAttachmentMapInput` via:
//
//	AviatrixRbacGroupAccessAccountAttachmentMap{ "key": AviatrixRbacGroupAccessAccountAttachmentArgs{...} }
type AviatrixRbacGroupAccessAccountAttachmentMapInput interface {
	pulumi.Input

	ToAviatrixRbacGroupAccessAccountAttachmentMapOutput() AviatrixRbacGroupAccessAccountAttachmentMapOutput
	ToAviatrixRbacGroupAccessAccountAttachmentMapOutputWithContext(context.Context) AviatrixRbacGroupAccessAccountAttachmentMapOutput
}

type AviatrixRbacGroupAccessAccountAttachmentMap map[string]AviatrixRbacGroupAccessAccountAttachmentInput

func (AviatrixRbacGroupAccessAccountAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixRbacGroupAccessAccountAttachment)(nil)).Elem()
}

func (i AviatrixRbacGroupAccessAccountAttachmentMap) ToAviatrixRbacGroupAccessAccountAttachmentMapOutput() AviatrixRbacGroupAccessAccountAttachmentMapOutput {
	return i.ToAviatrixRbacGroupAccessAccountAttachmentMapOutputWithContext(context.Background())
}

func (i AviatrixRbacGroupAccessAccountAttachmentMap) ToAviatrixRbacGroupAccessAccountAttachmentMapOutputWithContext(ctx context.Context) AviatrixRbacGroupAccessAccountAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixRbacGroupAccessAccountAttachmentMapOutput)
}

type AviatrixRbacGroupAccessAccountAttachmentOutput struct{ *pulumi.OutputState }

func (AviatrixRbacGroupAccessAccountAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixRbacGroupAccessAccountAttachment)(nil)).Elem()
}

func (o AviatrixRbacGroupAccessAccountAttachmentOutput) ToAviatrixRbacGroupAccessAccountAttachmentOutput() AviatrixRbacGroupAccessAccountAttachmentOutput {
	return o
}

func (o AviatrixRbacGroupAccessAccountAttachmentOutput) ToAviatrixRbacGroupAccessAccountAttachmentOutputWithContext(ctx context.Context) AviatrixRbacGroupAccessAccountAttachmentOutput {
	return o
}

// Account name. This can be used for logging in to CloudN console or UserConnect controller.
func (o AviatrixRbacGroupAccessAccountAttachmentOutput) AccessAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixRbacGroupAccessAccountAttachment) pulumi.StringOutput { return v.AccessAccountName }).(pulumi.StringOutput)
}

// This parameter represents the name of a RBAC group.
func (o AviatrixRbacGroupAccessAccountAttachmentOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixRbacGroupAccessAccountAttachment) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

type AviatrixRbacGroupAccessAccountAttachmentArrayOutput struct{ *pulumi.OutputState }

func (AviatrixRbacGroupAccessAccountAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixRbacGroupAccessAccountAttachment)(nil)).Elem()
}

func (o AviatrixRbacGroupAccessAccountAttachmentArrayOutput) ToAviatrixRbacGroupAccessAccountAttachmentArrayOutput() AviatrixRbacGroupAccessAccountAttachmentArrayOutput {
	return o
}

func (o AviatrixRbacGroupAccessAccountAttachmentArrayOutput) ToAviatrixRbacGroupAccessAccountAttachmentArrayOutputWithContext(ctx context.Context) AviatrixRbacGroupAccessAccountAttachmentArrayOutput {
	return o
}

func (o AviatrixRbacGroupAccessAccountAttachmentArrayOutput) Index(i pulumi.IntInput) AviatrixRbacGroupAccessAccountAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixRbacGroupAccessAccountAttachment {
		return vs[0].([]*AviatrixRbacGroupAccessAccountAttachment)[vs[1].(int)]
	}).(AviatrixRbacGroupAccessAccountAttachmentOutput)
}

type AviatrixRbacGroupAccessAccountAttachmentMapOutput struct{ *pulumi.OutputState }

func (AviatrixRbacGroupAccessAccountAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixRbacGroupAccessAccountAttachment)(nil)).Elem()
}

func (o AviatrixRbacGroupAccessAccountAttachmentMapOutput) ToAviatrixRbacGroupAccessAccountAttachmentMapOutput() AviatrixRbacGroupAccessAccountAttachmentMapOutput {
	return o
}

func (o AviatrixRbacGroupAccessAccountAttachmentMapOutput) ToAviatrixRbacGroupAccessAccountAttachmentMapOutputWithContext(ctx context.Context) AviatrixRbacGroupAccessAccountAttachmentMapOutput {
	return o
}

func (o AviatrixRbacGroupAccessAccountAttachmentMapOutput) MapIndex(k pulumi.StringInput) AviatrixRbacGroupAccessAccountAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixRbacGroupAccessAccountAttachment {
		return vs[0].(map[string]*AviatrixRbacGroupAccessAccountAttachment)[vs[1].(string)]
	}).(AviatrixRbacGroupAccessAccountAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixRbacGroupAccessAccountAttachmentInput)(nil)).Elem(), &AviatrixRbacGroupAccessAccountAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixRbacGroupAccessAccountAttachmentArrayInput)(nil)).Elem(), AviatrixRbacGroupAccessAccountAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixRbacGroupAccessAccountAttachmentMapInput)(nil)).Elem(), AviatrixRbacGroupAccessAccountAttachmentMap{})
	pulumi.RegisterOutputType(AviatrixRbacGroupAccessAccountAttachmentOutput{})
	pulumi.RegisterOutputType(AviatrixRbacGroupAccessAccountAttachmentArrayOutput{})
	pulumi.RegisterOutputType(AviatrixRbacGroupAccessAccountAttachmentMapOutput{})
}
