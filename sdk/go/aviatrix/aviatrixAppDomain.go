// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// !> **WARNING** **aviatrix_app_domain** is part of the Micro-segmentation private preview feature for R2.22.0. If you wish to enable a private preview mode feature, please contact your sales representative or Aviatrix Support.
// The **aviatrix_app_domain** resource handles the creation and management of App Domains. Available as of Provider R2.22.0+.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/astipkovits/pulumi-aviatrix/sdk/go/aviatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aviatrix.NewAviatrixAppDomain(ctx, "testAppDomainIp", &aviatrix.AviatrixAppDomainArgs{
//				Selector: &AviatrixAppDomainSelectorArgs{
//					MatchExpressions: AviatrixAppDomainSelectorMatchExpressionArray{
//						&AviatrixAppDomainSelectorMatchExpressionArgs{
//							AccountName: pulumi.String("devops"),
//							Region:      pulumi.String("us-west-2"),
//							Tags: pulumi.StringMap{
//								"k3": pulumi.String("v3"),
//							},
//							Type: pulumi.String("vm"),
//						},
//						&AviatrixAppDomainSelectorMatchExpressionArgs{
//							Cidr: pulumi.String("10.0.0.0/16"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// **aviatrix_app_domain** can be imported using the `uuid`, e.g.
//
// ```sh
//
//	$ pulumi import aviatrix:index/aviatrixAppDomain:AviatrixAppDomain test 41984f8b-5a37-4272-89b3-57c79e9ff77c
//
// ```
type AviatrixAppDomain struct {
	pulumi.CustomResourceState

	// Name of the App Domain.
	Name pulumi.StringOutput `pulumi:"name"`
	// Block containing match expressions to filter the App Domain.
	Selector AviatrixAppDomainSelectorOutput `pulumi:"selector"`
	// UUID of the App Domain.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewAviatrixAppDomain registers a new resource with the given unique name, arguments, and options.
func NewAviatrixAppDomain(ctx *pulumi.Context,
	name string, args *AviatrixAppDomainArgs, opts ...pulumi.ResourceOption) (*AviatrixAppDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Selector == nil {
		return nil, errors.New("invalid value for required argument 'Selector'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixAppDomain
	err := ctx.RegisterResource("aviatrix:index/aviatrixAppDomain:AviatrixAppDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixAppDomain gets an existing AviatrixAppDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixAppDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixAppDomainState, opts ...pulumi.ResourceOption) (*AviatrixAppDomain, error) {
	var resource AviatrixAppDomain
	err := ctx.ReadResource("aviatrix:index/aviatrixAppDomain:AviatrixAppDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixAppDomain resources.
type aviatrixAppDomainState struct {
	// Name of the App Domain.
	Name *string `pulumi:"name"`
	// Block containing match expressions to filter the App Domain.
	Selector *AviatrixAppDomainSelector `pulumi:"selector"`
	// UUID of the App Domain.
	Uuid *string `pulumi:"uuid"`
}

type AviatrixAppDomainState struct {
	// Name of the App Domain.
	Name pulumi.StringPtrInput
	// Block containing match expressions to filter the App Domain.
	Selector AviatrixAppDomainSelectorPtrInput
	// UUID of the App Domain.
	Uuid pulumi.StringPtrInput
}

func (AviatrixAppDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixAppDomainState)(nil)).Elem()
}

type aviatrixAppDomainArgs struct {
	// Name of the App Domain.
	Name *string `pulumi:"name"`
	// Block containing match expressions to filter the App Domain.
	Selector AviatrixAppDomainSelector `pulumi:"selector"`
}

// The set of arguments for constructing a AviatrixAppDomain resource.
type AviatrixAppDomainArgs struct {
	// Name of the App Domain.
	Name pulumi.StringPtrInput
	// Block containing match expressions to filter the App Domain.
	Selector AviatrixAppDomainSelectorInput
}

func (AviatrixAppDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixAppDomainArgs)(nil)).Elem()
}

type AviatrixAppDomainInput interface {
	pulumi.Input

	ToAviatrixAppDomainOutput() AviatrixAppDomainOutput
	ToAviatrixAppDomainOutputWithContext(ctx context.Context) AviatrixAppDomainOutput
}

func (*AviatrixAppDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixAppDomain)(nil)).Elem()
}

func (i *AviatrixAppDomain) ToAviatrixAppDomainOutput() AviatrixAppDomainOutput {
	return i.ToAviatrixAppDomainOutputWithContext(context.Background())
}

func (i *AviatrixAppDomain) ToAviatrixAppDomainOutputWithContext(ctx context.Context) AviatrixAppDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAppDomainOutput)
}

// AviatrixAppDomainArrayInput is an input type that accepts AviatrixAppDomainArray and AviatrixAppDomainArrayOutput values.
// You can construct a concrete instance of `AviatrixAppDomainArrayInput` via:
//
//	AviatrixAppDomainArray{ AviatrixAppDomainArgs{...} }
type AviatrixAppDomainArrayInput interface {
	pulumi.Input

	ToAviatrixAppDomainArrayOutput() AviatrixAppDomainArrayOutput
	ToAviatrixAppDomainArrayOutputWithContext(context.Context) AviatrixAppDomainArrayOutput
}

type AviatrixAppDomainArray []AviatrixAppDomainInput

func (AviatrixAppDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixAppDomain)(nil)).Elem()
}

func (i AviatrixAppDomainArray) ToAviatrixAppDomainArrayOutput() AviatrixAppDomainArrayOutput {
	return i.ToAviatrixAppDomainArrayOutputWithContext(context.Background())
}

func (i AviatrixAppDomainArray) ToAviatrixAppDomainArrayOutputWithContext(ctx context.Context) AviatrixAppDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAppDomainArrayOutput)
}

// AviatrixAppDomainMapInput is an input type that accepts AviatrixAppDomainMap and AviatrixAppDomainMapOutput values.
// You can construct a concrete instance of `AviatrixAppDomainMapInput` via:
//
//	AviatrixAppDomainMap{ "key": AviatrixAppDomainArgs{...} }
type AviatrixAppDomainMapInput interface {
	pulumi.Input

	ToAviatrixAppDomainMapOutput() AviatrixAppDomainMapOutput
	ToAviatrixAppDomainMapOutputWithContext(context.Context) AviatrixAppDomainMapOutput
}

type AviatrixAppDomainMap map[string]AviatrixAppDomainInput

func (AviatrixAppDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixAppDomain)(nil)).Elem()
}

func (i AviatrixAppDomainMap) ToAviatrixAppDomainMapOutput() AviatrixAppDomainMapOutput {
	return i.ToAviatrixAppDomainMapOutputWithContext(context.Background())
}

func (i AviatrixAppDomainMap) ToAviatrixAppDomainMapOutputWithContext(ctx context.Context) AviatrixAppDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAppDomainMapOutput)
}

type AviatrixAppDomainOutput struct{ *pulumi.OutputState }

func (AviatrixAppDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixAppDomain)(nil)).Elem()
}

func (o AviatrixAppDomainOutput) ToAviatrixAppDomainOutput() AviatrixAppDomainOutput {
	return o
}

func (o AviatrixAppDomainOutput) ToAviatrixAppDomainOutputWithContext(ctx context.Context) AviatrixAppDomainOutput {
	return o
}

// Name of the App Domain.
func (o AviatrixAppDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixAppDomain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Block containing match expressions to filter the App Domain.
func (o AviatrixAppDomainOutput) Selector() AviatrixAppDomainSelectorOutput {
	return o.ApplyT(func(v *AviatrixAppDomain) AviatrixAppDomainSelectorOutput { return v.Selector }).(AviatrixAppDomainSelectorOutput)
}

// UUID of the App Domain.
func (o AviatrixAppDomainOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixAppDomain) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type AviatrixAppDomainArrayOutput struct{ *pulumi.OutputState }

func (AviatrixAppDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixAppDomain)(nil)).Elem()
}

func (o AviatrixAppDomainArrayOutput) ToAviatrixAppDomainArrayOutput() AviatrixAppDomainArrayOutput {
	return o
}

func (o AviatrixAppDomainArrayOutput) ToAviatrixAppDomainArrayOutputWithContext(ctx context.Context) AviatrixAppDomainArrayOutput {
	return o
}

func (o AviatrixAppDomainArrayOutput) Index(i pulumi.IntInput) AviatrixAppDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixAppDomain {
		return vs[0].([]*AviatrixAppDomain)[vs[1].(int)]
	}).(AviatrixAppDomainOutput)
}

type AviatrixAppDomainMapOutput struct{ *pulumi.OutputState }

func (AviatrixAppDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixAppDomain)(nil)).Elem()
}

func (o AviatrixAppDomainMapOutput) ToAviatrixAppDomainMapOutput() AviatrixAppDomainMapOutput {
	return o
}

func (o AviatrixAppDomainMapOutput) ToAviatrixAppDomainMapOutputWithContext(ctx context.Context) AviatrixAppDomainMapOutput {
	return o
}

func (o AviatrixAppDomainMapOutput) MapIndex(k pulumi.StringInput) AviatrixAppDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixAppDomain {
		return vs[0].(map[string]*AviatrixAppDomain)[vs[1].(string)]
	}).(AviatrixAppDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAppDomainInput)(nil)).Elem(), &AviatrixAppDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAppDomainArrayInput)(nil)).Elem(), AviatrixAppDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAppDomainMapInput)(nil)).Elem(), AviatrixAppDomainMap{})
	pulumi.RegisterOutputType(AviatrixAppDomainOutput{})
	pulumi.RegisterOutputType(AviatrixAppDomainArrayOutput{})
	pulumi.RegisterOutputType(AviatrixAppDomainMapOutput{})
}
