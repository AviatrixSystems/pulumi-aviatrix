// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixEdgeSpokeTransitAttachment struct {
	pulumi.CustomResourceState

	// Enable jumbo frame.
	EnableInsaneMode pulumi.BoolPtrOutput `pulumi:"enableInsaneMode"`
	// Enable jumbo frame.
	EnableJumboFrame pulumi.BoolPtrOutput `pulumi:"enableJumboFrame"`
	// Enable over private network.
	EnableOverPrivateNetwork pulumi.BoolPtrOutput `pulumi:"enableOverPrivateNetwork"`
	// Insane mode tunnel number.
	InsaneModeTunnelNumber pulumi.IntPtrOutput `pulumi:"insaneModeTunnelNumber"`
	// Name of the Edge as a Spoke to attach to the transit network.
	SpokeGwName pulumi.StringOutput `pulumi:"spokeGwName"`
	// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on Edge as a Spoke.
	SpokePrependAsPaths pulumi.StringArrayOutput `pulumi:"spokePrependAsPaths"`
	// Name of the transit gateway to attach the Edge as a Spoke to.
	TransitGwName pulumi.StringOutput `pulumi:"transitGwName"`
	// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.
	TransitPrependAsPaths pulumi.StringArrayOutput `pulumi:"transitPrependAsPaths"`
}

// NewAviatrixEdgeSpokeTransitAttachment registers a new resource with the given unique name, arguments, and options.
func NewAviatrixEdgeSpokeTransitAttachment(ctx *pulumi.Context,
	name string, args *AviatrixEdgeSpokeTransitAttachmentArgs, opts ...pulumi.ResourceOption) (*AviatrixEdgeSpokeTransitAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SpokeGwName == nil {
		return nil, errors.New("invalid value for required argument 'SpokeGwName'")
	}
	if args.TransitGwName == nil {
		return nil, errors.New("invalid value for required argument 'TransitGwName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixEdgeSpokeTransitAttachment
	err := ctx.RegisterResource("aviatrix:index/aviatrixEdgeSpokeTransitAttachment:AviatrixEdgeSpokeTransitAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixEdgeSpokeTransitAttachment gets an existing AviatrixEdgeSpokeTransitAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixEdgeSpokeTransitAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixEdgeSpokeTransitAttachmentState, opts ...pulumi.ResourceOption) (*AviatrixEdgeSpokeTransitAttachment, error) {
	var resource AviatrixEdgeSpokeTransitAttachment
	err := ctx.ReadResource("aviatrix:index/aviatrixEdgeSpokeTransitAttachment:AviatrixEdgeSpokeTransitAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixEdgeSpokeTransitAttachment resources.
type aviatrixEdgeSpokeTransitAttachmentState struct {
	// Enable jumbo frame.
	EnableInsaneMode *bool `pulumi:"enableInsaneMode"`
	// Enable jumbo frame.
	EnableJumboFrame *bool `pulumi:"enableJumboFrame"`
	// Enable over private network.
	EnableOverPrivateNetwork *bool `pulumi:"enableOverPrivateNetwork"`
	// Insane mode tunnel number.
	InsaneModeTunnelNumber *int `pulumi:"insaneModeTunnelNumber"`
	// Name of the Edge as a Spoke to attach to the transit network.
	SpokeGwName *string `pulumi:"spokeGwName"`
	// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on Edge as a Spoke.
	SpokePrependAsPaths []string `pulumi:"spokePrependAsPaths"`
	// Name of the transit gateway to attach the Edge as a Spoke to.
	TransitGwName *string `pulumi:"transitGwName"`
	// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.
	TransitPrependAsPaths []string `pulumi:"transitPrependAsPaths"`
}

type AviatrixEdgeSpokeTransitAttachmentState struct {
	// Enable jumbo frame.
	EnableInsaneMode pulumi.BoolPtrInput
	// Enable jumbo frame.
	EnableJumboFrame pulumi.BoolPtrInput
	// Enable over private network.
	EnableOverPrivateNetwork pulumi.BoolPtrInput
	// Insane mode tunnel number.
	InsaneModeTunnelNumber pulumi.IntPtrInput
	// Name of the Edge as a Spoke to attach to the transit network.
	SpokeGwName pulumi.StringPtrInput
	// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on Edge as a Spoke.
	SpokePrependAsPaths pulumi.StringArrayInput
	// Name of the transit gateway to attach the Edge as a Spoke to.
	TransitGwName pulumi.StringPtrInput
	// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.
	TransitPrependAsPaths pulumi.StringArrayInput
}

func (AviatrixEdgeSpokeTransitAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixEdgeSpokeTransitAttachmentState)(nil)).Elem()
}

type aviatrixEdgeSpokeTransitAttachmentArgs struct {
	// Enable jumbo frame.
	EnableInsaneMode *bool `pulumi:"enableInsaneMode"`
	// Enable jumbo frame.
	EnableJumboFrame *bool `pulumi:"enableJumboFrame"`
	// Enable over private network.
	EnableOverPrivateNetwork *bool `pulumi:"enableOverPrivateNetwork"`
	// Insane mode tunnel number.
	InsaneModeTunnelNumber *int `pulumi:"insaneModeTunnelNumber"`
	// Name of the Edge as a Spoke to attach to the transit network.
	SpokeGwName string `pulumi:"spokeGwName"`
	// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on Edge as a Spoke.
	SpokePrependAsPaths []string `pulumi:"spokePrependAsPaths"`
	// Name of the transit gateway to attach the Edge as a Spoke to.
	TransitGwName string `pulumi:"transitGwName"`
	// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.
	TransitPrependAsPaths []string `pulumi:"transitPrependAsPaths"`
}

// The set of arguments for constructing a AviatrixEdgeSpokeTransitAttachment resource.
type AviatrixEdgeSpokeTransitAttachmentArgs struct {
	// Enable jumbo frame.
	EnableInsaneMode pulumi.BoolPtrInput
	// Enable jumbo frame.
	EnableJumboFrame pulumi.BoolPtrInput
	// Enable over private network.
	EnableOverPrivateNetwork pulumi.BoolPtrInput
	// Insane mode tunnel number.
	InsaneModeTunnelNumber pulumi.IntPtrInput
	// Name of the Edge as a Spoke to attach to the transit network.
	SpokeGwName pulumi.StringInput
	// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on Edge as a Spoke.
	SpokePrependAsPaths pulumi.StringArrayInput
	// Name of the transit gateway to attach the Edge as a Spoke to.
	TransitGwName pulumi.StringInput
	// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.
	TransitPrependAsPaths pulumi.StringArrayInput
}

func (AviatrixEdgeSpokeTransitAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixEdgeSpokeTransitAttachmentArgs)(nil)).Elem()
}

type AviatrixEdgeSpokeTransitAttachmentInput interface {
	pulumi.Input

	ToAviatrixEdgeSpokeTransitAttachmentOutput() AviatrixEdgeSpokeTransitAttachmentOutput
	ToAviatrixEdgeSpokeTransitAttachmentOutputWithContext(ctx context.Context) AviatrixEdgeSpokeTransitAttachmentOutput
}

func (*AviatrixEdgeSpokeTransitAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixEdgeSpokeTransitAttachment)(nil)).Elem()
}

func (i *AviatrixEdgeSpokeTransitAttachment) ToAviatrixEdgeSpokeTransitAttachmentOutput() AviatrixEdgeSpokeTransitAttachmentOutput {
	return i.ToAviatrixEdgeSpokeTransitAttachmentOutputWithContext(context.Background())
}

func (i *AviatrixEdgeSpokeTransitAttachment) ToAviatrixEdgeSpokeTransitAttachmentOutputWithContext(ctx context.Context) AviatrixEdgeSpokeTransitAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixEdgeSpokeTransitAttachmentOutput)
}

// AviatrixEdgeSpokeTransitAttachmentArrayInput is an input type that accepts AviatrixEdgeSpokeTransitAttachmentArray and AviatrixEdgeSpokeTransitAttachmentArrayOutput values.
// You can construct a concrete instance of `AviatrixEdgeSpokeTransitAttachmentArrayInput` via:
//
//	AviatrixEdgeSpokeTransitAttachmentArray{ AviatrixEdgeSpokeTransitAttachmentArgs{...} }
type AviatrixEdgeSpokeTransitAttachmentArrayInput interface {
	pulumi.Input

	ToAviatrixEdgeSpokeTransitAttachmentArrayOutput() AviatrixEdgeSpokeTransitAttachmentArrayOutput
	ToAviatrixEdgeSpokeTransitAttachmentArrayOutputWithContext(context.Context) AviatrixEdgeSpokeTransitAttachmentArrayOutput
}

type AviatrixEdgeSpokeTransitAttachmentArray []AviatrixEdgeSpokeTransitAttachmentInput

func (AviatrixEdgeSpokeTransitAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixEdgeSpokeTransitAttachment)(nil)).Elem()
}

func (i AviatrixEdgeSpokeTransitAttachmentArray) ToAviatrixEdgeSpokeTransitAttachmentArrayOutput() AviatrixEdgeSpokeTransitAttachmentArrayOutput {
	return i.ToAviatrixEdgeSpokeTransitAttachmentArrayOutputWithContext(context.Background())
}

func (i AviatrixEdgeSpokeTransitAttachmentArray) ToAviatrixEdgeSpokeTransitAttachmentArrayOutputWithContext(ctx context.Context) AviatrixEdgeSpokeTransitAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixEdgeSpokeTransitAttachmentArrayOutput)
}

// AviatrixEdgeSpokeTransitAttachmentMapInput is an input type that accepts AviatrixEdgeSpokeTransitAttachmentMap and AviatrixEdgeSpokeTransitAttachmentMapOutput values.
// You can construct a concrete instance of `AviatrixEdgeSpokeTransitAttachmentMapInput` via:
//
//	AviatrixEdgeSpokeTransitAttachmentMap{ "key": AviatrixEdgeSpokeTransitAttachmentArgs{...} }
type AviatrixEdgeSpokeTransitAttachmentMapInput interface {
	pulumi.Input

	ToAviatrixEdgeSpokeTransitAttachmentMapOutput() AviatrixEdgeSpokeTransitAttachmentMapOutput
	ToAviatrixEdgeSpokeTransitAttachmentMapOutputWithContext(context.Context) AviatrixEdgeSpokeTransitAttachmentMapOutput
}

type AviatrixEdgeSpokeTransitAttachmentMap map[string]AviatrixEdgeSpokeTransitAttachmentInput

func (AviatrixEdgeSpokeTransitAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixEdgeSpokeTransitAttachment)(nil)).Elem()
}

func (i AviatrixEdgeSpokeTransitAttachmentMap) ToAviatrixEdgeSpokeTransitAttachmentMapOutput() AviatrixEdgeSpokeTransitAttachmentMapOutput {
	return i.ToAviatrixEdgeSpokeTransitAttachmentMapOutputWithContext(context.Background())
}

func (i AviatrixEdgeSpokeTransitAttachmentMap) ToAviatrixEdgeSpokeTransitAttachmentMapOutputWithContext(ctx context.Context) AviatrixEdgeSpokeTransitAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixEdgeSpokeTransitAttachmentMapOutput)
}

type AviatrixEdgeSpokeTransitAttachmentOutput struct{ *pulumi.OutputState }

func (AviatrixEdgeSpokeTransitAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixEdgeSpokeTransitAttachment)(nil)).Elem()
}

func (o AviatrixEdgeSpokeTransitAttachmentOutput) ToAviatrixEdgeSpokeTransitAttachmentOutput() AviatrixEdgeSpokeTransitAttachmentOutput {
	return o
}

func (o AviatrixEdgeSpokeTransitAttachmentOutput) ToAviatrixEdgeSpokeTransitAttachmentOutputWithContext(ctx context.Context) AviatrixEdgeSpokeTransitAttachmentOutput {
	return o
}

// Enable jumbo frame.
func (o AviatrixEdgeSpokeTransitAttachmentOutput) EnableInsaneMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpokeTransitAttachment) pulumi.BoolPtrOutput { return v.EnableInsaneMode }).(pulumi.BoolPtrOutput)
}

// Enable jumbo frame.
func (o AviatrixEdgeSpokeTransitAttachmentOutput) EnableJumboFrame() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpokeTransitAttachment) pulumi.BoolPtrOutput { return v.EnableJumboFrame }).(pulumi.BoolPtrOutput)
}

// Enable over private network.
func (o AviatrixEdgeSpokeTransitAttachmentOutput) EnableOverPrivateNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpokeTransitAttachment) pulumi.BoolPtrOutput { return v.EnableOverPrivateNetwork }).(pulumi.BoolPtrOutput)
}

// Insane mode tunnel number.
func (o AviatrixEdgeSpokeTransitAttachmentOutput) InsaneModeTunnelNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpokeTransitAttachment) pulumi.IntPtrOutput { return v.InsaneModeTunnelNumber }).(pulumi.IntPtrOutput)
}

// Name of the Edge as a Spoke to attach to the transit network.
func (o AviatrixEdgeSpokeTransitAttachmentOutput) SpokeGwName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpokeTransitAttachment) pulumi.StringOutput { return v.SpokeGwName }).(pulumi.StringOutput)
}

// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on Edge as a Spoke.
func (o AviatrixEdgeSpokeTransitAttachmentOutput) SpokePrependAsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpokeTransitAttachment) pulumi.StringArrayOutput { return v.SpokePrependAsPaths }).(pulumi.StringArrayOutput)
}

// Name of the transit gateway to attach the Edge as a Spoke to.
func (o AviatrixEdgeSpokeTransitAttachmentOutput) TransitGwName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpokeTransitAttachment) pulumi.StringOutput { return v.TransitGwName }).(pulumi.StringOutput)
}

// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.
func (o AviatrixEdgeSpokeTransitAttachmentOutput) TransitPrependAsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixEdgeSpokeTransitAttachment) pulumi.StringArrayOutput { return v.TransitPrependAsPaths }).(pulumi.StringArrayOutput)
}

type AviatrixEdgeSpokeTransitAttachmentArrayOutput struct{ *pulumi.OutputState }

func (AviatrixEdgeSpokeTransitAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixEdgeSpokeTransitAttachment)(nil)).Elem()
}

func (o AviatrixEdgeSpokeTransitAttachmentArrayOutput) ToAviatrixEdgeSpokeTransitAttachmentArrayOutput() AviatrixEdgeSpokeTransitAttachmentArrayOutput {
	return o
}

func (o AviatrixEdgeSpokeTransitAttachmentArrayOutput) ToAviatrixEdgeSpokeTransitAttachmentArrayOutputWithContext(ctx context.Context) AviatrixEdgeSpokeTransitAttachmentArrayOutput {
	return o
}

func (o AviatrixEdgeSpokeTransitAttachmentArrayOutput) Index(i pulumi.IntInput) AviatrixEdgeSpokeTransitAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixEdgeSpokeTransitAttachment {
		return vs[0].([]*AviatrixEdgeSpokeTransitAttachment)[vs[1].(int)]
	}).(AviatrixEdgeSpokeTransitAttachmentOutput)
}

type AviatrixEdgeSpokeTransitAttachmentMapOutput struct{ *pulumi.OutputState }

func (AviatrixEdgeSpokeTransitAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixEdgeSpokeTransitAttachment)(nil)).Elem()
}

func (o AviatrixEdgeSpokeTransitAttachmentMapOutput) ToAviatrixEdgeSpokeTransitAttachmentMapOutput() AviatrixEdgeSpokeTransitAttachmentMapOutput {
	return o
}

func (o AviatrixEdgeSpokeTransitAttachmentMapOutput) ToAviatrixEdgeSpokeTransitAttachmentMapOutputWithContext(ctx context.Context) AviatrixEdgeSpokeTransitAttachmentMapOutput {
	return o
}

func (o AviatrixEdgeSpokeTransitAttachmentMapOutput) MapIndex(k pulumi.StringInput) AviatrixEdgeSpokeTransitAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixEdgeSpokeTransitAttachment {
		return vs[0].(map[string]*AviatrixEdgeSpokeTransitAttachment)[vs[1].(string)]
	}).(AviatrixEdgeSpokeTransitAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixEdgeSpokeTransitAttachmentInput)(nil)).Elem(), &AviatrixEdgeSpokeTransitAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixEdgeSpokeTransitAttachmentArrayInput)(nil)).Elem(), AviatrixEdgeSpokeTransitAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixEdgeSpokeTransitAttachmentMapInput)(nil)).Elem(), AviatrixEdgeSpokeTransitAttachmentMap{})
	pulumi.RegisterOutputType(AviatrixEdgeSpokeTransitAttachmentOutput{})
	pulumi.RegisterOutputType(AviatrixEdgeSpokeTransitAttachmentArrayOutput{})
	pulumi.RegisterOutputType(AviatrixEdgeSpokeTransitAttachmentMapOutput{})
}
