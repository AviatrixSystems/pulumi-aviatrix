// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **aviatrix_filebeat_forwarder** resource allows the enabling and disabling of filebeat forwarder.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"io/ioutil"
//
//	"github.com/astipkovits/pulumi-aviatrix/sdk/go/aviatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := ioutil.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aviatrix.NewAviatrixFilebeatForwarder(ctx, "testFilebeatForwarder", &aviatrix.AviatrixFilebeatForwarderArgs{
//				Server:        pulumi.String("1.2.3.4"),
//				Port:          pulumi.Int(10),
//				TrustedCaFile: readFileOrPanic("/path/to/ca.pem"),
//				ConfigFile:    readFileOrPanic("/path/to/config.txt"),
//				ExcludedGateways: pulumi.StringArray{
//					pulumi.String("a"),
//					pulumi.String("b"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// **filebeat_forwarder** can be imported using "filebeat_forwarder", e.g.
//
// ```sh
//
//	$ pulumi import aviatrix:index/aviatrixFilebeatForwarder:AviatrixFilebeatForwarder test filebeat_forwarder
//
// ```
type AviatrixFilebeatForwarder struct {
	pulumi.CustomResourceState

	// The config file. Use the `file` function to read from a file.
	ConfigFile pulumi.StringPtrOutput `pulumi:"configFile"`
	// List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].
	ExcludedGateways pulumi.StringArrayOutput `pulumi:"excludedGateways"`
	// Port number.
	Port pulumi.IntOutput `pulumi:"port"`
	// Server IP.
	Server pulumi.StringOutput `pulumi:"server"`
	// The status of filebeat forwarder.
	Status pulumi.StringOutput `pulumi:"status"`
	// The trusted CA file. Use the `file` function to read from a file.
	TrustedCaFile pulumi.StringPtrOutput `pulumi:"trustedCaFile"`
}

// NewAviatrixFilebeatForwarder registers a new resource with the given unique name, arguments, and options.
func NewAviatrixFilebeatForwarder(ctx *pulumi.Context,
	name string, args *AviatrixFilebeatForwarderArgs, opts ...pulumi.ResourceOption) (*AviatrixFilebeatForwarder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.Server == nil {
		return nil, errors.New("invalid value for required argument 'Server'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixFilebeatForwarder
	err := ctx.RegisterResource("aviatrix:index/aviatrixFilebeatForwarder:AviatrixFilebeatForwarder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixFilebeatForwarder gets an existing AviatrixFilebeatForwarder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixFilebeatForwarder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixFilebeatForwarderState, opts ...pulumi.ResourceOption) (*AviatrixFilebeatForwarder, error) {
	var resource AviatrixFilebeatForwarder
	err := ctx.ReadResource("aviatrix:index/aviatrixFilebeatForwarder:AviatrixFilebeatForwarder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixFilebeatForwarder resources.
type aviatrixFilebeatForwarderState struct {
	// The config file. Use the `file` function to read from a file.
	ConfigFile *string `pulumi:"configFile"`
	// List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].
	ExcludedGateways []string `pulumi:"excludedGateways"`
	// Port number.
	Port *int `pulumi:"port"`
	// Server IP.
	Server *string `pulumi:"server"`
	// The status of filebeat forwarder.
	Status *string `pulumi:"status"`
	// The trusted CA file. Use the `file` function to read from a file.
	TrustedCaFile *string `pulumi:"trustedCaFile"`
}

type AviatrixFilebeatForwarderState struct {
	// The config file. Use the `file` function to read from a file.
	ConfigFile pulumi.StringPtrInput
	// List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].
	ExcludedGateways pulumi.StringArrayInput
	// Port number.
	Port pulumi.IntPtrInput
	// Server IP.
	Server pulumi.StringPtrInput
	// The status of filebeat forwarder.
	Status pulumi.StringPtrInput
	// The trusted CA file. Use the `file` function to read from a file.
	TrustedCaFile pulumi.StringPtrInput
}

func (AviatrixFilebeatForwarderState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixFilebeatForwarderState)(nil)).Elem()
}

type aviatrixFilebeatForwarderArgs struct {
	// The config file. Use the `file` function to read from a file.
	ConfigFile *string `pulumi:"configFile"`
	// List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].
	ExcludedGateways []string `pulumi:"excludedGateways"`
	// Port number.
	Port int `pulumi:"port"`
	// Server IP.
	Server string `pulumi:"server"`
	// The trusted CA file. Use the `file` function to read from a file.
	TrustedCaFile *string `pulumi:"trustedCaFile"`
}

// The set of arguments for constructing a AviatrixFilebeatForwarder resource.
type AviatrixFilebeatForwarderArgs struct {
	// The config file. Use the `file` function to read from a file.
	ConfigFile pulumi.StringPtrInput
	// List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].
	ExcludedGateways pulumi.StringArrayInput
	// Port number.
	Port pulumi.IntInput
	// Server IP.
	Server pulumi.StringInput
	// The trusted CA file. Use the `file` function to read from a file.
	TrustedCaFile pulumi.StringPtrInput
}

func (AviatrixFilebeatForwarderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixFilebeatForwarderArgs)(nil)).Elem()
}

type AviatrixFilebeatForwarderInput interface {
	pulumi.Input

	ToAviatrixFilebeatForwarderOutput() AviatrixFilebeatForwarderOutput
	ToAviatrixFilebeatForwarderOutputWithContext(ctx context.Context) AviatrixFilebeatForwarderOutput
}

func (*AviatrixFilebeatForwarder) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixFilebeatForwarder)(nil)).Elem()
}

func (i *AviatrixFilebeatForwarder) ToAviatrixFilebeatForwarderOutput() AviatrixFilebeatForwarderOutput {
	return i.ToAviatrixFilebeatForwarderOutputWithContext(context.Background())
}

func (i *AviatrixFilebeatForwarder) ToAviatrixFilebeatForwarderOutputWithContext(ctx context.Context) AviatrixFilebeatForwarderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFilebeatForwarderOutput)
}

// AviatrixFilebeatForwarderArrayInput is an input type that accepts AviatrixFilebeatForwarderArray and AviatrixFilebeatForwarderArrayOutput values.
// You can construct a concrete instance of `AviatrixFilebeatForwarderArrayInput` via:
//
//	AviatrixFilebeatForwarderArray{ AviatrixFilebeatForwarderArgs{...} }
type AviatrixFilebeatForwarderArrayInput interface {
	pulumi.Input

	ToAviatrixFilebeatForwarderArrayOutput() AviatrixFilebeatForwarderArrayOutput
	ToAviatrixFilebeatForwarderArrayOutputWithContext(context.Context) AviatrixFilebeatForwarderArrayOutput
}

type AviatrixFilebeatForwarderArray []AviatrixFilebeatForwarderInput

func (AviatrixFilebeatForwarderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixFilebeatForwarder)(nil)).Elem()
}

func (i AviatrixFilebeatForwarderArray) ToAviatrixFilebeatForwarderArrayOutput() AviatrixFilebeatForwarderArrayOutput {
	return i.ToAviatrixFilebeatForwarderArrayOutputWithContext(context.Background())
}

func (i AviatrixFilebeatForwarderArray) ToAviatrixFilebeatForwarderArrayOutputWithContext(ctx context.Context) AviatrixFilebeatForwarderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFilebeatForwarderArrayOutput)
}

// AviatrixFilebeatForwarderMapInput is an input type that accepts AviatrixFilebeatForwarderMap and AviatrixFilebeatForwarderMapOutput values.
// You can construct a concrete instance of `AviatrixFilebeatForwarderMapInput` via:
//
//	AviatrixFilebeatForwarderMap{ "key": AviatrixFilebeatForwarderArgs{...} }
type AviatrixFilebeatForwarderMapInput interface {
	pulumi.Input

	ToAviatrixFilebeatForwarderMapOutput() AviatrixFilebeatForwarderMapOutput
	ToAviatrixFilebeatForwarderMapOutputWithContext(context.Context) AviatrixFilebeatForwarderMapOutput
}

type AviatrixFilebeatForwarderMap map[string]AviatrixFilebeatForwarderInput

func (AviatrixFilebeatForwarderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixFilebeatForwarder)(nil)).Elem()
}

func (i AviatrixFilebeatForwarderMap) ToAviatrixFilebeatForwarderMapOutput() AviatrixFilebeatForwarderMapOutput {
	return i.ToAviatrixFilebeatForwarderMapOutputWithContext(context.Background())
}

func (i AviatrixFilebeatForwarderMap) ToAviatrixFilebeatForwarderMapOutputWithContext(ctx context.Context) AviatrixFilebeatForwarderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFilebeatForwarderMapOutput)
}

type AviatrixFilebeatForwarderOutput struct{ *pulumi.OutputState }

func (AviatrixFilebeatForwarderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixFilebeatForwarder)(nil)).Elem()
}

func (o AviatrixFilebeatForwarderOutput) ToAviatrixFilebeatForwarderOutput() AviatrixFilebeatForwarderOutput {
	return o
}

func (o AviatrixFilebeatForwarderOutput) ToAviatrixFilebeatForwarderOutputWithContext(ctx context.Context) AviatrixFilebeatForwarderOutput {
	return o
}

// The config file. Use the `file` function to read from a file.
func (o AviatrixFilebeatForwarderOutput) ConfigFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixFilebeatForwarder) pulumi.StringPtrOutput { return v.ConfigFile }).(pulumi.StringPtrOutput)
}

// List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].
func (o AviatrixFilebeatForwarderOutput) ExcludedGateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixFilebeatForwarder) pulumi.StringArrayOutput { return v.ExcludedGateways }).(pulumi.StringArrayOutput)
}

// Port number.
func (o AviatrixFilebeatForwarderOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *AviatrixFilebeatForwarder) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Server IP.
func (o AviatrixFilebeatForwarderOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixFilebeatForwarder) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

// The status of filebeat forwarder.
func (o AviatrixFilebeatForwarderOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixFilebeatForwarder) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The trusted CA file. Use the `file` function to read from a file.
func (o AviatrixFilebeatForwarderOutput) TrustedCaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixFilebeatForwarder) pulumi.StringPtrOutput { return v.TrustedCaFile }).(pulumi.StringPtrOutput)
}

type AviatrixFilebeatForwarderArrayOutput struct{ *pulumi.OutputState }

func (AviatrixFilebeatForwarderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixFilebeatForwarder)(nil)).Elem()
}

func (o AviatrixFilebeatForwarderArrayOutput) ToAviatrixFilebeatForwarderArrayOutput() AviatrixFilebeatForwarderArrayOutput {
	return o
}

func (o AviatrixFilebeatForwarderArrayOutput) ToAviatrixFilebeatForwarderArrayOutputWithContext(ctx context.Context) AviatrixFilebeatForwarderArrayOutput {
	return o
}

func (o AviatrixFilebeatForwarderArrayOutput) Index(i pulumi.IntInput) AviatrixFilebeatForwarderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixFilebeatForwarder {
		return vs[0].([]*AviatrixFilebeatForwarder)[vs[1].(int)]
	}).(AviatrixFilebeatForwarderOutput)
}

type AviatrixFilebeatForwarderMapOutput struct{ *pulumi.OutputState }

func (AviatrixFilebeatForwarderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixFilebeatForwarder)(nil)).Elem()
}

func (o AviatrixFilebeatForwarderMapOutput) ToAviatrixFilebeatForwarderMapOutput() AviatrixFilebeatForwarderMapOutput {
	return o
}

func (o AviatrixFilebeatForwarderMapOutput) ToAviatrixFilebeatForwarderMapOutputWithContext(ctx context.Context) AviatrixFilebeatForwarderMapOutput {
	return o
}

func (o AviatrixFilebeatForwarderMapOutput) MapIndex(k pulumi.StringInput) AviatrixFilebeatForwarderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixFilebeatForwarder {
		return vs[0].(map[string]*AviatrixFilebeatForwarder)[vs[1].(string)]
	}).(AviatrixFilebeatForwarderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFilebeatForwarderInput)(nil)).Elem(), &AviatrixFilebeatForwarder{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFilebeatForwarderArrayInput)(nil)).Elem(), AviatrixFilebeatForwarderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFilebeatForwarderMapInput)(nil)).Elem(), AviatrixFilebeatForwarderMap{})
	pulumi.RegisterOutputType(AviatrixFilebeatForwarderOutput{})
	pulumi.RegisterOutputType(AviatrixFilebeatForwarderArrayOutput{})
	pulumi.RegisterOutputType(AviatrixFilebeatForwarderMapOutput{})
}
