// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixAppDomainSelector struct {
	// List of match expressions. The App Domain will be a union of all resources matched by each `matchExpressions`.`matchExpressions` blocks cannot be empty.
	MatchExpressions []AviatrixAppDomainSelectorMatchExpression `pulumi:"matchExpressions"`
}

// AviatrixAppDomainSelectorInput is an input type that accepts AviatrixAppDomainSelectorArgs and AviatrixAppDomainSelectorOutput values.
// You can construct a concrete instance of `AviatrixAppDomainSelectorInput` via:
//
//	AviatrixAppDomainSelectorArgs{...}
type AviatrixAppDomainSelectorInput interface {
	pulumi.Input

	ToAviatrixAppDomainSelectorOutput() AviatrixAppDomainSelectorOutput
	ToAviatrixAppDomainSelectorOutputWithContext(context.Context) AviatrixAppDomainSelectorOutput
}

type AviatrixAppDomainSelectorArgs struct {
	// List of match expressions. The App Domain will be a union of all resources matched by each `matchExpressions`.`matchExpressions` blocks cannot be empty.
	MatchExpressions AviatrixAppDomainSelectorMatchExpressionArrayInput `pulumi:"matchExpressions"`
}

func (AviatrixAppDomainSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixAppDomainSelector)(nil)).Elem()
}

func (i AviatrixAppDomainSelectorArgs) ToAviatrixAppDomainSelectorOutput() AviatrixAppDomainSelectorOutput {
	return i.ToAviatrixAppDomainSelectorOutputWithContext(context.Background())
}

func (i AviatrixAppDomainSelectorArgs) ToAviatrixAppDomainSelectorOutputWithContext(ctx context.Context) AviatrixAppDomainSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAppDomainSelectorOutput)
}

func (i AviatrixAppDomainSelectorArgs) ToAviatrixAppDomainSelectorPtrOutput() AviatrixAppDomainSelectorPtrOutput {
	return i.ToAviatrixAppDomainSelectorPtrOutputWithContext(context.Background())
}

func (i AviatrixAppDomainSelectorArgs) ToAviatrixAppDomainSelectorPtrOutputWithContext(ctx context.Context) AviatrixAppDomainSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAppDomainSelectorOutput).ToAviatrixAppDomainSelectorPtrOutputWithContext(ctx)
}

// AviatrixAppDomainSelectorPtrInput is an input type that accepts AviatrixAppDomainSelectorArgs, AviatrixAppDomainSelectorPtr and AviatrixAppDomainSelectorPtrOutput values.
// You can construct a concrete instance of `AviatrixAppDomainSelectorPtrInput` via:
//
//	        AviatrixAppDomainSelectorArgs{...}
//
//	or:
//
//	        nil
type AviatrixAppDomainSelectorPtrInput interface {
	pulumi.Input

	ToAviatrixAppDomainSelectorPtrOutput() AviatrixAppDomainSelectorPtrOutput
	ToAviatrixAppDomainSelectorPtrOutputWithContext(context.Context) AviatrixAppDomainSelectorPtrOutput
}

type aviatrixAppDomainSelectorPtrType AviatrixAppDomainSelectorArgs

func AviatrixAppDomainSelectorPtr(v *AviatrixAppDomainSelectorArgs) AviatrixAppDomainSelectorPtrInput {
	return (*aviatrixAppDomainSelectorPtrType)(v)
}

func (*aviatrixAppDomainSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixAppDomainSelector)(nil)).Elem()
}

func (i *aviatrixAppDomainSelectorPtrType) ToAviatrixAppDomainSelectorPtrOutput() AviatrixAppDomainSelectorPtrOutput {
	return i.ToAviatrixAppDomainSelectorPtrOutputWithContext(context.Background())
}

func (i *aviatrixAppDomainSelectorPtrType) ToAviatrixAppDomainSelectorPtrOutputWithContext(ctx context.Context) AviatrixAppDomainSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAppDomainSelectorPtrOutput)
}

type AviatrixAppDomainSelectorOutput struct{ *pulumi.OutputState }

func (AviatrixAppDomainSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixAppDomainSelector)(nil)).Elem()
}

func (o AviatrixAppDomainSelectorOutput) ToAviatrixAppDomainSelectorOutput() AviatrixAppDomainSelectorOutput {
	return o
}

func (o AviatrixAppDomainSelectorOutput) ToAviatrixAppDomainSelectorOutputWithContext(ctx context.Context) AviatrixAppDomainSelectorOutput {
	return o
}

func (o AviatrixAppDomainSelectorOutput) ToAviatrixAppDomainSelectorPtrOutput() AviatrixAppDomainSelectorPtrOutput {
	return o.ToAviatrixAppDomainSelectorPtrOutputWithContext(context.Background())
}

func (o AviatrixAppDomainSelectorOutput) ToAviatrixAppDomainSelectorPtrOutputWithContext(ctx context.Context) AviatrixAppDomainSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AviatrixAppDomainSelector) *AviatrixAppDomainSelector {
		return &v
	}).(AviatrixAppDomainSelectorPtrOutput)
}

// List of match expressions. The App Domain will be a union of all resources matched by each `matchExpressions`.`matchExpressions` blocks cannot be empty.
func (o AviatrixAppDomainSelectorOutput) MatchExpressions() AviatrixAppDomainSelectorMatchExpressionArrayOutput {
	return o.ApplyT(func(v AviatrixAppDomainSelector) []AviatrixAppDomainSelectorMatchExpression {
		return v.MatchExpressions
	}).(AviatrixAppDomainSelectorMatchExpressionArrayOutput)
}

type AviatrixAppDomainSelectorPtrOutput struct{ *pulumi.OutputState }

func (AviatrixAppDomainSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixAppDomainSelector)(nil)).Elem()
}

func (o AviatrixAppDomainSelectorPtrOutput) ToAviatrixAppDomainSelectorPtrOutput() AviatrixAppDomainSelectorPtrOutput {
	return o
}

func (o AviatrixAppDomainSelectorPtrOutput) ToAviatrixAppDomainSelectorPtrOutputWithContext(ctx context.Context) AviatrixAppDomainSelectorPtrOutput {
	return o
}

func (o AviatrixAppDomainSelectorPtrOutput) Elem() AviatrixAppDomainSelectorOutput {
	return o.ApplyT(func(v *AviatrixAppDomainSelector) AviatrixAppDomainSelector {
		if v != nil {
			return *v
		}
		var ret AviatrixAppDomainSelector
		return ret
	}).(AviatrixAppDomainSelectorOutput)
}

// List of match expressions. The App Domain will be a union of all resources matched by each `matchExpressions`.`matchExpressions` blocks cannot be empty.
func (o AviatrixAppDomainSelectorPtrOutput) MatchExpressions() AviatrixAppDomainSelectorMatchExpressionArrayOutput {
	return o.ApplyT(func(v *AviatrixAppDomainSelector) []AviatrixAppDomainSelectorMatchExpression {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(AviatrixAppDomainSelectorMatchExpressionArrayOutput)
}

type AviatrixAppDomainSelectorMatchExpression struct {
	// - Account ID this expression matches.
	AccountId *string `pulumi:"accountId"`
	// - Account name this expression matches.
	AccountName *string `pulumi:"accountName"`
	// - CIDR block or IP Address this expression matches. `cidr` cannot be used with any other filters in the same `matchExpressions` block.
	Cidr *string `pulumi:"cidr"`
	// - Region this expression matches.
	Region *string `pulumi:"region"`
	// - Resource ID this expression matches.
	ResId *string `pulumi:"resId"`
	// - Map of tags this expression matches.
	Tags map[string]string `pulumi:"tags"`
	// - Type of resource this expression matches. Must be one of "vm", "vpc" or "subnet". `type` is required when `cidr` is not used.
	Type *string `pulumi:"type"`
	// - Zone this expression matches.
	Zone *string `pulumi:"zone"`
}

// AviatrixAppDomainSelectorMatchExpressionInput is an input type that accepts AviatrixAppDomainSelectorMatchExpressionArgs and AviatrixAppDomainSelectorMatchExpressionOutput values.
// You can construct a concrete instance of `AviatrixAppDomainSelectorMatchExpressionInput` via:
//
//	AviatrixAppDomainSelectorMatchExpressionArgs{...}
type AviatrixAppDomainSelectorMatchExpressionInput interface {
	pulumi.Input

	ToAviatrixAppDomainSelectorMatchExpressionOutput() AviatrixAppDomainSelectorMatchExpressionOutput
	ToAviatrixAppDomainSelectorMatchExpressionOutputWithContext(context.Context) AviatrixAppDomainSelectorMatchExpressionOutput
}

type AviatrixAppDomainSelectorMatchExpressionArgs struct {
	// - Account ID this expression matches.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// - Account name this expression matches.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// - CIDR block or IP Address this expression matches. `cidr` cannot be used with any other filters in the same `matchExpressions` block.
	Cidr pulumi.StringPtrInput `pulumi:"cidr"`
	// - Region this expression matches.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// - Resource ID this expression matches.
	ResId pulumi.StringPtrInput `pulumi:"resId"`
	// - Map of tags this expression matches.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// - Type of resource this expression matches. Must be one of "vm", "vpc" or "subnet". `type` is required when `cidr` is not used.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// - Zone this expression matches.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (AviatrixAppDomainSelectorMatchExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixAppDomainSelectorMatchExpression)(nil)).Elem()
}

func (i AviatrixAppDomainSelectorMatchExpressionArgs) ToAviatrixAppDomainSelectorMatchExpressionOutput() AviatrixAppDomainSelectorMatchExpressionOutput {
	return i.ToAviatrixAppDomainSelectorMatchExpressionOutputWithContext(context.Background())
}

func (i AviatrixAppDomainSelectorMatchExpressionArgs) ToAviatrixAppDomainSelectorMatchExpressionOutputWithContext(ctx context.Context) AviatrixAppDomainSelectorMatchExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAppDomainSelectorMatchExpressionOutput)
}

// AviatrixAppDomainSelectorMatchExpressionArrayInput is an input type that accepts AviatrixAppDomainSelectorMatchExpressionArray and AviatrixAppDomainSelectorMatchExpressionArrayOutput values.
// You can construct a concrete instance of `AviatrixAppDomainSelectorMatchExpressionArrayInput` via:
//
//	AviatrixAppDomainSelectorMatchExpressionArray{ AviatrixAppDomainSelectorMatchExpressionArgs{...} }
type AviatrixAppDomainSelectorMatchExpressionArrayInput interface {
	pulumi.Input

	ToAviatrixAppDomainSelectorMatchExpressionArrayOutput() AviatrixAppDomainSelectorMatchExpressionArrayOutput
	ToAviatrixAppDomainSelectorMatchExpressionArrayOutputWithContext(context.Context) AviatrixAppDomainSelectorMatchExpressionArrayOutput
}

type AviatrixAppDomainSelectorMatchExpressionArray []AviatrixAppDomainSelectorMatchExpressionInput

func (AviatrixAppDomainSelectorMatchExpressionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixAppDomainSelectorMatchExpression)(nil)).Elem()
}

func (i AviatrixAppDomainSelectorMatchExpressionArray) ToAviatrixAppDomainSelectorMatchExpressionArrayOutput() AviatrixAppDomainSelectorMatchExpressionArrayOutput {
	return i.ToAviatrixAppDomainSelectorMatchExpressionArrayOutputWithContext(context.Background())
}

func (i AviatrixAppDomainSelectorMatchExpressionArray) ToAviatrixAppDomainSelectorMatchExpressionArrayOutputWithContext(ctx context.Context) AviatrixAppDomainSelectorMatchExpressionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAppDomainSelectorMatchExpressionArrayOutput)
}

type AviatrixAppDomainSelectorMatchExpressionOutput struct{ *pulumi.OutputState }

func (AviatrixAppDomainSelectorMatchExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixAppDomainSelectorMatchExpression)(nil)).Elem()
}

func (o AviatrixAppDomainSelectorMatchExpressionOutput) ToAviatrixAppDomainSelectorMatchExpressionOutput() AviatrixAppDomainSelectorMatchExpressionOutput {
	return o
}

func (o AviatrixAppDomainSelectorMatchExpressionOutput) ToAviatrixAppDomainSelectorMatchExpressionOutputWithContext(ctx context.Context) AviatrixAppDomainSelectorMatchExpressionOutput {
	return o
}

// - Account ID this expression matches.
func (o AviatrixAppDomainSelectorMatchExpressionOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixAppDomainSelectorMatchExpression) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// - Account name this expression matches.
func (o AviatrixAppDomainSelectorMatchExpressionOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixAppDomainSelectorMatchExpression) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// - CIDR block or IP Address this expression matches. `cidr` cannot be used with any other filters in the same `matchExpressions` block.
func (o AviatrixAppDomainSelectorMatchExpressionOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixAppDomainSelectorMatchExpression) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

// - Region this expression matches.
func (o AviatrixAppDomainSelectorMatchExpressionOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixAppDomainSelectorMatchExpression) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// - Resource ID this expression matches.
func (o AviatrixAppDomainSelectorMatchExpressionOutput) ResId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixAppDomainSelectorMatchExpression) *string { return v.ResId }).(pulumi.StringPtrOutput)
}

// - Map of tags this expression matches.
func (o AviatrixAppDomainSelectorMatchExpressionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AviatrixAppDomainSelectorMatchExpression) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// - Type of resource this expression matches. Must be one of "vm", "vpc" or "subnet". `type` is required when `cidr` is not used.
func (o AviatrixAppDomainSelectorMatchExpressionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixAppDomainSelectorMatchExpression) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// - Zone this expression matches.
func (o AviatrixAppDomainSelectorMatchExpressionOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixAppDomainSelectorMatchExpression) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type AviatrixAppDomainSelectorMatchExpressionArrayOutput struct{ *pulumi.OutputState }

func (AviatrixAppDomainSelectorMatchExpressionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixAppDomainSelectorMatchExpression)(nil)).Elem()
}

func (o AviatrixAppDomainSelectorMatchExpressionArrayOutput) ToAviatrixAppDomainSelectorMatchExpressionArrayOutput() AviatrixAppDomainSelectorMatchExpressionArrayOutput {
	return o
}

func (o AviatrixAppDomainSelectorMatchExpressionArrayOutput) ToAviatrixAppDomainSelectorMatchExpressionArrayOutputWithContext(ctx context.Context) AviatrixAppDomainSelectorMatchExpressionArrayOutput {
	return o
}

func (o AviatrixAppDomainSelectorMatchExpressionArrayOutput) Index(i pulumi.IntInput) AviatrixAppDomainSelectorMatchExpressionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixAppDomainSelectorMatchExpression {
		return vs[0].([]AviatrixAppDomainSelectorMatchExpression)[vs[1].(int)]
	}).(AviatrixAppDomainSelectorMatchExpressionOutput)
}

type AviatrixAwsTgwSecurityDomainType struct {
	// A list of VPCs attached to the domain (name: `securityDomainName`) together with its creation. This list needs to be null for "Aviatrix_Edge_Domain".
	//
	// Deprecated: Please set `manage_vpc_attachment` to false, and use the standalone aviatrix_aws_tgw_vpc_attachment resource instead.
	AttachedVpcs []AviatrixAwsTgwSecurityDomainAttachedVpc `pulumi:"attachedVpcs"`
	// Set to true if the security domain is to be used as an Aviatrix Firewall Domain for the Aviatrix Firewall Network. Valid values: true, false. Default value: false.
	AviatrixFirewall *bool `pulumi:"aviatrixFirewall"`
	// A list of domains connected to the domain (name: `securityDomainName`) together with its creation.
	ConnectedDomains []string `pulumi:"connectedDomains"`
	// Set to true if the security domain is to be used as a native egress domain (for non-Aviatrix Firewall Network-based central Internet bound traffic). Valid values: true, false. Default value: false.
	NativeEgress *bool `pulumi:"nativeEgress"`
	// Set to true if the security domain is to be used as a native firewall domain (for non-Aviatrix Firewall Network-based firewall traffic inspection). Valid values: true, false. Default value: false.
	NativeFirewall *bool `pulumi:"nativeFirewall"`
	// Three default domains ("Aviatrix_Edge_Domain", "Default_Domain" and "Shared_Service_Domain") are required with AWS TGW's creation.
	SecurityDomainName string `pulumi:"securityDomainName"`
}

// AviatrixAwsTgwSecurityDomainTypeInput is an input type that accepts AviatrixAwsTgwSecurityDomainTypeArgs and AviatrixAwsTgwSecurityDomainTypeOutput values.
// You can construct a concrete instance of `AviatrixAwsTgwSecurityDomainTypeInput` via:
//
//	AviatrixAwsTgwSecurityDomainTypeArgs{...}
type AviatrixAwsTgwSecurityDomainTypeInput interface {
	pulumi.Input

	ToAviatrixAwsTgwSecurityDomainTypeOutput() AviatrixAwsTgwSecurityDomainTypeOutput
	ToAviatrixAwsTgwSecurityDomainTypeOutputWithContext(context.Context) AviatrixAwsTgwSecurityDomainTypeOutput
}

type AviatrixAwsTgwSecurityDomainTypeArgs struct {
	// A list of VPCs attached to the domain (name: `securityDomainName`) together with its creation. This list needs to be null for "Aviatrix_Edge_Domain".
	//
	// Deprecated: Please set `manage_vpc_attachment` to false, and use the standalone aviatrix_aws_tgw_vpc_attachment resource instead.
	AttachedVpcs AviatrixAwsTgwSecurityDomainAttachedVpcArrayInput `pulumi:"attachedVpcs"`
	// Set to true if the security domain is to be used as an Aviatrix Firewall Domain for the Aviatrix Firewall Network. Valid values: true, false. Default value: false.
	AviatrixFirewall pulumi.BoolPtrInput `pulumi:"aviatrixFirewall"`
	// A list of domains connected to the domain (name: `securityDomainName`) together with its creation.
	ConnectedDomains pulumi.StringArrayInput `pulumi:"connectedDomains"`
	// Set to true if the security domain is to be used as a native egress domain (for non-Aviatrix Firewall Network-based central Internet bound traffic). Valid values: true, false. Default value: false.
	NativeEgress pulumi.BoolPtrInput `pulumi:"nativeEgress"`
	// Set to true if the security domain is to be used as a native firewall domain (for non-Aviatrix Firewall Network-based firewall traffic inspection). Valid values: true, false. Default value: false.
	NativeFirewall pulumi.BoolPtrInput `pulumi:"nativeFirewall"`
	// Three default domains ("Aviatrix_Edge_Domain", "Default_Domain" and "Shared_Service_Domain") are required with AWS TGW's creation.
	SecurityDomainName pulumi.StringInput `pulumi:"securityDomainName"`
}

func (AviatrixAwsTgwSecurityDomainTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixAwsTgwSecurityDomainType)(nil)).Elem()
}

func (i AviatrixAwsTgwSecurityDomainTypeArgs) ToAviatrixAwsTgwSecurityDomainTypeOutput() AviatrixAwsTgwSecurityDomainTypeOutput {
	return i.ToAviatrixAwsTgwSecurityDomainTypeOutputWithContext(context.Background())
}

func (i AviatrixAwsTgwSecurityDomainTypeArgs) ToAviatrixAwsTgwSecurityDomainTypeOutputWithContext(ctx context.Context) AviatrixAwsTgwSecurityDomainTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAwsTgwSecurityDomainTypeOutput)
}

// AviatrixAwsTgwSecurityDomainTypeArrayInput is an input type that accepts AviatrixAwsTgwSecurityDomainTypeArray and AviatrixAwsTgwSecurityDomainTypeArrayOutput values.
// You can construct a concrete instance of `AviatrixAwsTgwSecurityDomainTypeArrayInput` via:
//
//	AviatrixAwsTgwSecurityDomainTypeArray{ AviatrixAwsTgwSecurityDomainTypeArgs{...} }
type AviatrixAwsTgwSecurityDomainTypeArrayInput interface {
	pulumi.Input

	ToAviatrixAwsTgwSecurityDomainTypeArrayOutput() AviatrixAwsTgwSecurityDomainTypeArrayOutput
	ToAviatrixAwsTgwSecurityDomainTypeArrayOutputWithContext(context.Context) AviatrixAwsTgwSecurityDomainTypeArrayOutput
}

type AviatrixAwsTgwSecurityDomainTypeArray []AviatrixAwsTgwSecurityDomainTypeInput

func (AviatrixAwsTgwSecurityDomainTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixAwsTgwSecurityDomainType)(nil)).Elem()
}

func (i AviatrixAwsTgwSecurityDomainTypeArray) ToAviatrixAwsTgwSecurityDomainTypeArrayOutput() AviatrixAwsTgwSecurityDomainTypeArrayOutput {
	return i.ToAviatrixAwsTgwSecurityDomainTypeArrayOutputWithContext(context.Background())
}

func (i AviatrixAwsTgwSecurityDomainTypeArray) ToAviatrixAwsTgwSecurityDomainTypeArrayOutputWithContext(ctx context.Context) AviatrixAwsTgwSecurityDomainTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAwsTgwSecurityDomainTypeArrayOutput)
}

type AviatrixAwsTgwSecurityDomainTypeOutput struct{ *pulumi.OutputState }

func (AviatrixAwsTgwSecurityDomainTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixAwsTgwSecurityDomainType)(nil)).Elem()
}

func (o AviatrixAwsTgwSecurityDomainTypeOutput) ToAviatrixAwsTgwSecurityDomainTypeOutput() AviatrixAwsTgwSecurityDomainTypeOutput {
	return o
}

func (o AviatrixAwsTgwSecurityDomainTypeOutput) ToAviatrixAwsTgwSecurityDomainTypeOutputWithContext(ctx context.Context) AviatrixAwsTgwSecurityDomainTypeOutput {
	return o
}

// A list of VPCs attached to the domain (name: `securityDomainName`) together with its creation. This list needs to be null for "Aviatrix_Edge_Domain".
//
// Deprecated: Please set `manage_vpc_attachment` to false, and use the standalone aviatrix_aws_tgw_vpc_attachment resource instead.
func (o AviatrixAwsTgwSecurityDomainTypeOutput) AttachedVpcs() AviatrixAwsTgwSecurityDomainAttachedVpcArrayOutput {
	return o.ApplyT(func(v AviatrixAwsTgwSecurityDomainType) []AviatrixAwsTgwSecurityDomainAttachedVpc {
		return v.AttachedVpcs
	}).(AviatrixAwsTgwSecurityDomainAttachedVpcArrayOutput)
}

// Set to true if the security domain is to be used as an Aviatrix Firewall Domain for the Aviatrix Firewall Network. Valid values: true, false. Default value: false.
func (o AviatrixAwsTgwSecurityDomainTypeOutput) AviatrixFirewall() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AviatrixAwsTgwSecurityDomainType) *bool { return v.AviatrixFirewall }).(pulumi.BoolPtrOutput)
}

// A list of domains connected to the domain (name: `securityDomainName`) together with its creation.
func (o AviatrixAwsTgwSecurityDomainTypeOutput) ConnectedDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AviatrixAwsTgwSecurityDomainType) []string { return v.ConnectedDomains }).(pulumi.StringArrayOutput)
}

// Set to true if the security domain is to be used as a native egress domain (for non-Aviatrix Firewall Network-based central Internet bound traffic). Valid values: true, false. Default value: false.
func (o AviatrixAwsTgwSecurityDomainTypeOutput) NativeEgress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AviatrixAwsTgwSecurityDomainType) *bool { return v.NativeEgress }).(pulumi.BoolPtrOutput)
}

// Set to true if the security domain is to be used as a native firewall domain (for non-Aviatrix Firewall Network-based firewall traffic inspection). Valid values: true, false. Default value: false.
func (o AviatrixAwsTgwSecurityDomainTypeOutput) NativeFirewall() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AviatrixAwsTgwSecurityDomainType) *bool { return v.NativeFirewall }).(pulumi.BoolPtrOutput)
}

// Three default domains ("Aviatrix_Edge_Domain", "Default_Domain" and "Shared_Service_Domain") are required with AWS TGW's creation.
func (o AviatrixAwsTgwSecurityDomainTypeOutput) SecurityDomainName() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixAwsTgwSecurityDomainType) string { return v.SecurityDomainName }).(pulumi.StringOutput)
}

type AviatrixAwsTgwSecurityDomainTypeArrayOutput struct{ *pulumi.OutputState }

func (AviatrixAwsTgwSecurityDomainTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixAwsTgwSecurityDomainType)(nil)).Elem()
}

func (o AviatrixAwsTgwSecurityDomainTypeArrayOutput) ToAviatrixAwsTgwSecurityDomainTypeArrayOutput() AviatrixAwsTgwSecurityDomainTypeArrayOutput {
	return o
}

func (o AviatrixAwsTgwSecurityDomainTypeArrayOutput) ToAviatrixAwsTgwSecurityDomainTypeArrayOutputWithContext(ctx context.Context) AviatrixAwsTgwSecurityDomainTypeArrayOutput {
	return o
}

func (o AviatrixAwsTgwSecurityDomainTypeArrayOutput) Index(i pulumi.IntInput) AviatrixAwsTgwSecurityDomainTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixAwsTgwSecurityDomainType {
		return vs[0].([]AviatrixAwsTgwSecurityDomainType)[vs[1].(int)]
	}).(AviatrixAwsTgwSecurityDomainTypeOutput)
}

type AviatrixAwsTgwSecurityDomainAttachedVpc struct {
	// Advanced option. Customized route(s) to be advertised to other VPCs that are connected to the same TGW. Example: "10.8.0.0/16,10.9.0.0/16,10.10.0.0/16".
	CustomizedRouteAdvertisement *string `pulumi:"customizedRouteAdvertisement"`
	// Advanced option. Customized Spoke VPC Routes. It allows the admin to enter non-RFC1918 routes in the VPC route table targeting the TGW. Example: "10.8.0.0/16,10.9.0.0/16,10.10.0.0/16".
	CustomizedRoutes *string `pulumi:"customizedRoutes"`
	// Advanced option. If set to true, it disables automatic route propagation of this VPC to other VPCs within the same security domain. Valid values: true, false. Default value: false.
	DisableLocalRoutePropagation *bool `pulumi:"disableLocalRoutePropagation"`
	// Advanced option. Route tables separated by ',' to participate in TGW Orchestrator, i.e., learned routes will be propagated to these route tables. Example: "rtb-212ff547,rtb-045397874c170c745".
	RouteTables *string `pulumi:"routeTables"`
	// Advanced option. VPC subnets separated by ',' to attach to the VPC. If left blank, the Aviatrix Controller automatically selects a subnet representing each AZ for the VPC attachment. Example: "subnet-214f5646,subnet-085e8c81a89d70846".
	Subnets *string `pulumi:"subnets"`
	// Cloud account name of the VPC in the Aviatrix controller.
	VpcAccountName string `pulumi:"vpcAccountName"`
	// VPC ID of the VPC to be attached to the security domain
	VpcId string `pulumi:"vpcId"`
	// Region of the VPC, needs to be consistent with AWS TGW's region.
	VpcRegion string `pulumi:"vpcRegion"`
}

// AviatrixAwsTgwSecurityDomainAttachedVpcInput is an input type that accepts AviatrixAwsTgwSecurityDomainAttachedVpcArgs and AviatrixAwsTgwSecurityDomainAttachedVpcOutput values.
// You can construct a concrete instance of `AviatrixAwsTgwSecurityDomainAttachedVpcInput` via:
//
//	AviatrixAwsTgwSecurityDomainAttachedVpcArgs{...}
type AviatrixAwsTgwSecurityDomainAttachedVpcInput interface {
	pulumi.Input

	ToAviatrixAwsTgwSecurityDomainAttachedVpcOutput() AviatrixAwsTgwSecurityDomainAttachedVpcOutput
	ToAviatrixAwsTgwSecurityDomainAttachedVpcOutputWithContext(context.Context) AviatrixAwsTgwSecurityDomainAttachedVpcOutput
}

type AviatrixAwsTgwSecurityDomainAttachedVpcArgs struct {
	// Advanced option. Customized route(s) to be advertised to other VPCs that are connected to the same TGW. Example: "10.8.0.0/16,10.9.0.0/16,10.10.0.0/16".
	CustomizedRouteAdvertisement pulumi.StringPtrInput `pulumi:"customizedRouteAdvertisement"`
	// Advanced option. Customized Spoke VPC Routes. It allows the admin to enter non-RFC1918 routes in the VPC route table targeting the TGW. Example: "10.8.0.0/16,10.9.0.0/16,10.10.0.0/16".
	CustomizedRoutes pulumi.StringPtrInput `pulumi:"customizedRoutes"`
	// Advanced option. If set to true, it disables automatic route propagation of this VPC to other VPCs within the same security domain. Valid values: true, false. Default value: false.
	DisableLocalRoutePropagation pulumi.BoolPtrInput `pulumi:"disableLocalRoutePropagation"`
	// Advanced option. Route tables separated by ',' to participate in TGW Orchestrator, i.e., learned routes will be propagated to these route tables. Example: "rtb-212ff547,rtb-045397874c170c745".
	RouteTables pulumi.StringPtrInput `pulumi:"routeTables"`
	// Advanced option. VPC subnets separated by ',' to attach to the VPC. If left blank, the Aviatrix Controller automatically selects a subnet representing each AZ for the VPC attachment. Example: "subnet-214f5646,subnet-085e8c81a89d70846".
	Subnets pulumi.StringPtrInput `pulumi:"subnets"`
	// Cloud account name of the VPC in the Aviatrix controller.
	VpcAccountName pulumi.StringInput `pulumi:"vpcAccountName"`
	// VPC ID of the VPC to be attached to the security domain
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// Region of the VPC, needs to be consistent with AWS TGW's region.
	VpcRegion pulumi.StringInput `pulumi:"vpcRegion"`
}

func (AviatrixAwsTgwSecurityDomainAttachedVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixAwsTgwSecurityDomainAttachedVpc)(nil)).Elem()
}

func (i AviatrixAwsTgwSecurityDomainAttachedVpcArgs) ToAviatrixAwsTgwSecurityDomainAttachedVpcOutput() AviatrixAwsTgwSecurityDomainAttachedVpcOutput {
	return i.ToAviatrixAwsTgwSecurityDomainAttachedVpcOutputWithContext(context.Background())
}

func (i AviatrixAwsTgwSecurityDomainAttachedVpcArgs) ToAviatrixAwsTgwSecurityDomainAttachedVpcOutputWithContext(ctx context.Context) AviatrixAwsTgwSecurityDomainAttachedVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAwsTgwSecurityDomainAttachedVpcOutput)
}

// AviatrixAwsTgwSecurityDomainAttachedVpcArrayInput is an input type that accepts AviatrixAwsTgwSecurityDomainAttachedVpcArray and AviatrixAwsTgwSecurityDomainAttachedVpcArrayOutput values.
// You can construct a concrete instance of `AviatrixAwsTgwSecurityDomainAttachedVpcArrayInput` via:
//
//	AviatrixAwsTgwSecurityDomainAttachedVpcArray{ AviatrixAwsTgwSecurityDomainAttachedVpcArgs{...} }
type AviatrixAwsTgwSecurityDomainAttachedVpcArrayInput interface {
	pulumi.Input

	ToAviatrixAwsTgwSecurityDomainAttachedVpcArrayOutput() AviatrixAwsTgwSecurityDomainAttachedVpcArrayOutput
	ToAviatrixAwsTgwSecurityDomainAttachedVpcArrayOutputWithContext(context.Context) AviatrixAwsTgwSecurityDomainAttachedVpcArrayOutput
}

type AviatrixAwsTgwSecurityDomainAttachedVpcArray []AviatrixAwsTgwSecurityDomainAttachedVpcInput

func (AviatrixAwsTgwSecurityDomainAttachedVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixAwsTgwSecurityDomainAttachedVpc)(nil)).Elem()
}

func (i AviatrixAwsTgwSecurityDomainAttachedVpcArray) ToAviatrixAwsTgwSecurityDomainAttachedVpcArrayOutput() AviatrixAwsTgwSecurityDomainAttachedVpcArrayOutput {
	return i.ToAviatrixAwsTgwSecurityDomainAttachedVpcArrayOutputWithContext(context.Background())
}

func (i AviatrixAwsTgwSecurityDomainAttachedVpcArray) ToAviatrixAwsTgwSecurityDomainAttachedVpcArrayOutputWithContext(ctx context.Context) AviatrixAwsTgwSecurityDomainAttachedVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAwsTgwSecurityDomainAttachedVpcArrayOutput)
}

type AviatrixAwsTgwSecurityDomainAttachedVpcOutput struct{ *pulumi.OutputState }

func (AviatrixAwsTgwSecurityDomainAttachedVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixAwsTgwSecurityDomainAttachedVpc)(nil)).Elem()
}

func (o AviatrixAwsTgwSecurityDomainAttachedVpcOutput) ToAviatrixAwsTgwSecurityDomainAttachedVpcOutput() AviatrixAwsTgwSecurityDomainAttachedVpcOutput {
	return o
}

func (o AviatrixAwsTgwSecurityDomainAttachedVpcOutput) ToAviatrixAwsTgwSecurityDomainAttachedVpcOutputWithContext(ctx context.Context) AviatrixAwsTgwSecurityDomainAttachedVpcOutput {
	return o
}

// Advanced option. Customized route(s) to be advertised to other VPCs that are connected to the same TGW. Example: "10.8.0.0/16,10.9.0.0/16,10.10.0.0/16".
func (o AviatrixAwsTgwSecurityDomainAttachedVpcOutput) CustomizedRouteAdvertisement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixAwsTgwSecurityDomainAttachedVpc) *string { return v.CustomizedRouteAdvertisement }).(pulumi.StringPtrOutput)
}

// Advanced option. Customized Spoke VPC Routes. It allows the admin to enter non-RFC1918 routes in the VPC route table targeting the TGW. Example: "10.8.0.0/16,10.9.0.0/16,10.10.0.0/16".
func (o AviatrixAwsTgwSecurityDomainAttachedVpcOutput) CustomizedRoutes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixAwsTgwSecurityDomainAttachedVpc) *string { return v.CustomizedRoutes }).(pulumi.StringPtrOutput)
}

// Advanced option. If set to true, it disables automatic route propagation of this VPC to other VPCs within the same security domain. Valid values: true, false. Default value: false.
func (o AviatrixAwsTgwSecurityDomainAttachedVpcOutput) DisableLocalRoutePropagation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AviatrixAwsTgwSecurityDomainAttachedVpc) *bool { return v.DisableLocalRoutePropagation }).(pulumi.BoolPtrOutput)
}

// Advanced option. Route tables separated by ',' to participate in TGW Orchestrator, i.e., learned routes will be propagated to these route tables. Example: "rtb-212ff547,rtb-045397874c170c745".
func (o AviatrixAwsTgwSecurityDomainAttachedVpcOutput) RouteTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixAwsTgwSecurityDomainAttachedVpc) *string { return v.RouteTables }).(pulumi.StringPtrOutput)
}

// Advanced option. VPC subnets separated by ',' to attach to the VPC. If left blank, the Aviatrix Controller automatically selects a subnet representing each AZ for the VPC attachment. Example: "subnet-214f5646,subnet-085e8c81a89d70846".
func (o AviatrixAwsTgwSecurityDomainAttachedVpcOutput) Subnets() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixAwsTgwSecurityDomainAttachedVpc) *string { return v.Subnets }).(pulumi.StringPtrOutput)
}

// Cloud account name of the VPC in the Aviatrix controller.
func (o AviatrixAwsTgwSecurityDomainAttachedVpcOutput) VpcAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixAwsTgwSecurityDomainAttachedVpc) string { return v.VpcAccountName }).(pulumi.StringOutput)
}

// VPC ID of the VPC to be attached to the security domain
func (o AviatrixAwsTgwSecurityDomainAttachedVpcOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixAwsTgwSecurityDomainAttachedVpc) string { return v.VpcId }).(pulumi.StringOutput)
}

// Region of the VPC, needs to be consistent with AWS TGW's region.
func (o AviatrixAwsTgwSecurityDomainAttachedVpcOutput) VpcRegion() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixAwsTgwSecurityDomainAttachedVpc) string { return v.VpcRegion }).(pulumi.StringOutput)
}

type AviatrixAwsTgwSecurityDomainAttachedVpcArrayOutput struct{ *pulumi.OutputState }

func (AviatrixAwsTgwSecurityDomainAttachedVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixAwsTgwSecurityDomainAttachedVpc)(nil)).Elem()
}

func (o AviatrixAwsTgwSecurityDomainAttachedVpcArrayOutput) ToAviatrixAwsTgwSecurityDomainAttachedVpcArrayOutput() AviatrixAwsTgwSecurityDomainAttachedVpcArrayOutput {
	return o
}

func (o AviatrixAwsTgwSecurityDomainAttachedVpcArrayOutput) ToAviatrixAwsTgwSecurityDomainAttachedVpcArrayOutputWithContext(ctx context.Context) AviatrixAwsTgwSecurityDomainAttachedVpcArrayOutput {
	return o
}

func (o AviatrixAwsTgwSecurityDomainAttachedVpcArrayOutput) Index(i pulumi.IntInput) AviatrixAwsTgwSecurityDomainAttachedVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixAwsTgwSecurityDomainAttachedVpc {
		return vs[0].([]AviatrixAwsTgwSecurityDomainAttachedVpc)[vs[1].(int)]
	}).(AviatrixAwsTgwSecurityDomainAttachedVpcOutput)
}

type AviatrixAwsTgwVpnConnVpnTunnelData struct {
	LastStatusChangeTime *string `pulumi:"lastStatusChangeTime"`
	RouteCount           *int    `pulumi:"routeCount"`
	Status               *string `pulumi:"status"`
	StatusMessage        *string `pulumi:"statusMessage"`
	TgwAsn               *string `pulumi:"tgwAsn"`
	TunnelName           *string `pulumi:"tunnelName"`
	VpnInsideAddress     *string `pulumi:"vpnInsideAddress"`
	VpnOutsideAddress    *string `pulumi:"vpnOutsideAddress"`
}

// AviatrixAwsTgwVpnConnVpnTunnelDataInput is an input type that accepts AviatrixAwsTgwVpnConnVpnTunnelDataArgs and AviatrixAwsTgwVpnConnVpnTunnelDataOutput values.
// You can construct a concrete instance of `AviatrixAwsTgwVpnConnVpnTunnelDataInput` via:
//
//	AviatrixAwsTgwVpnConnVpnTunnelDataArgs{...}
type AviatrixAwsTgwVpnConnVpnTunnelDataInput interface {
	pulumi.Input

	ToAviatrixAwsTgwVpnConnVpnTunnelDataOutput() AviatrixAwsTgwVpnConnVpnTunnelDataOutput
	ToAviatrixAwsTgwVpnConnVpnTunnelDataOutputWithContext(context.Context) AviatrixAwsTgwVpnConnVpnTunnelDataOutput
}

type AviatrixAwsTgwVpnConnVpnTunnelDataArgs struct {
	LastStatusChangeTime pulumi.StringPtrInput `pulumi:"lastStatusChangeTime"`
	RouteCount           pulumi.IntPtrInput    `pulumi:"routeCount"`
	Status               pulumi.StringPtrInput `pulumi:"status"`
	StatusMessage        pulumi.StringPtrInput `pulumi:"statusMessage"`
	TgwAsn               pulumi.StringPtrInput `pulumi:"tgwAsn"`
	TunnelName           pulumi.StringPtrInput `pulumi:"tunnelName"`
	VpnInsideAddress     pulumi.StringPtrInput `pulumi:"vpnInsideAddress"`
	VpnOutsideAddress    pulumi.StringPtrInput `pulumi:"vpnOutsideAddress"`
}

func (AviatrixAwsTgwVpnConnVpnTunnelDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixAwsTgwVpnConnVpnTunnelData)(nil)).Elem()
}

func (i AviatrixAwsTgwVpnConnVpnTunnelDataArgs) ToAviatrixAwsTgwVpnConnVpnTunnelDataOutput() AviatrixAwsTgwVpnConnVpnTunnelDataOutput {
	return i.ToAviatrixAwsTgwVpnConnVpnTunnelDataOutputWithContext(context.Background())
}

func (i AviatrixAwsTgwVpnConnVpnTunnelDataArgs) ToAviatrixAwsTgwVpnConnVpnTunnelDataOutputWithContext(ctx context.Context) AviatrixAwsTgwVpnConnVpnTunnelDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAwsTgwVpnConnVpnTunnelDataOutput)
}

// AviatrixAwsTgwVpnConnVpnTunnelDataArrayInput is an input type that accepts AviatrixAwsTgwVpnConnVpnTunnelDataArray and AviatrixAwsTgwVpnConnVpnTunnelDataArrayOutput values.
// You can construct a concrete instance of `AviatrixAwsTgwVpnConnVpnTunnelDataArrayInput` via:
//
//	AviatrixAwsTgwVpnConnVpnTunnelDataArray{ AviatrixAwsTgwVpnConnVpnTunnelDataArgs{...} }
type AviatrixAwsTgwVpnConnVpnTunnelDataArrayInput interface {
	pulumi.Input

	ToAviatrixAwsTgwVpnConnVpnTunnelDataArrayOutput() AviatrixAwsTgwVpnConnVpnTunnelDataArrayOutput
	ToAviatrixAwsTgwVpnConnVpnTunnelDataArrayOutputWithContext(context.Context) AviatrixAwsTgwVpnConnVpnTunnelDataArrayOutput
}

type AviatrixAwsTgwVpnConnVpnTunnelDataArray []AviatrixAwsTgwVpnConnVpnTunnelDataInput

func (AviatrixAwsTgwVpnConnVpnTunnelDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixAwsTgwVpnConnVpnTunnelData)(nil)).Elem()
}

func (i AviatrixAwsTgwVpnConnVpnTunnelDataArray) ToAviatrixAwsTgwVpnConnVpnTunnelDataArrayOutput() AviatrixAwsTgwVpnConnVpnTunnelDataArrayOutput {
	return i.ToAviatrixAwsTgwVpnConnVpnTunnelDataArrayOutputWithContext(context.Background())
}

func (i AviatrixAwsTgwVpnConnVpnTunnelDataArray) ToAviatrixAwsTgwVpnConnVpnTunnelDataArrayOutputWithContext(ctx context.Context) AviatrixAwsTgwVpnConnVpnTunnelDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAwsTgwVpnConnVpnTunnelDataArrayOutput)
}

type AviatrixAwsTgwVpnConnVpnTunnelDataOutput struct{ *pulumi.OutputState }

func (AviatrixAwsTgwVpnConnVpnTunnelDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixAwsTgwVpnConnVpnTunnelData)(nil)).Elem()
}

func (o AviatrixAwsTgwVpnConnVpnTunnelDataOutput) ToAviatrixAwsTgwVpnConnVpnTunnelDataOutput() AviatrixAwsTgwVpnConnVpnTunnelDataOutput {
	return o
}

func (o AviatrixAwsTgwVpnConnVpnTunnelDataOutput) ToAviatrixAwsTgwVpnConnVpnTunnelDataOutputWithContext(ctx context.Context) AviatrixAwsTgwVpnConnVpnTunnelDataOutput {
	return o
}

func (o AviatrixAwsTgwVpnConnVpnTunnelDataOutput) LastStatusChangeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixAwsTgwVpnConnVpnTunnelData) *string { return v.LastStatusChangeTime }).(pulumi.StringPtrOutput)
}

func (o AviatrixAwsTgwVpnConnVpnTunnelDataOutput) RouteCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AviatrixAwsTgwVpnConnVpnTunnelData) *int { return v.RouteCount }).(pulumi.IntPtrOutput)
}

func (o AviatrixAwsTgwVpnConnVpnTunnelDataOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixAwsTgwVpnConnVpnTunnelData) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func (o AviatrixAwsTgwVpnConnVpnTunnelDataOutput) StatusMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixAwsTgwVpnConnVpnTunnelData) *string { return v.StatusMessage }).(pulumi.StringPtrOutput)
}

func (o AviatrixAwsTgwVpnConnVpnTunnelDataOutput) TgwAsn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixAwsTgwVpnConnVpnTunnelData) *string { return v.TgwAsn }).(pulumi.StringPtrOutput)
}

func (o AviatrixAwsTgwVpnConnVpnTunnelDataOutput) TunnelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixAwsTgwVpnConnVpnTunnelData) *string { return v.TunnelName }).(pulumi.StringPtrOutput)
}

func (o AviatrixAwsTgwVpnConnVpnTunnelDataOutput) VpnInsideAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixAwsTgwVpnConnVpnTunnelData) *string { return v.VpnInsideAddress }).(pulumi.StringPtrOutput)
}

func (o AviatrixAwsTgwVpnConnVpnTunnelDataOutput) VpnOutsideAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixAwsTgwVpnConnVpnTunnelData) *string { return v.VpnOutsideAddress }).(pulumi.StringPtrOutput)
}

type AviatrixAwsTgwVpnConnVpnTunnelDataArrayOutput struct{ *pulumi.OutputState }

func (AviatrixAwsTgwVpnConnVpnTunnelDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixAwsTgwVpnConnVpnTunnelData)(nil)).Elem()
}

func (o AviatrixAwsTgwVpnConnVpnTunnelDataArrayOutput) ToAviatrixAwsTgwVpnConnVpnTunnelDataArrayOutput() AviatrixAwsTgwVpnConnVpnTunnelDataArrayOutput {
	return o
}

func (o AviatrixAwsTgwVpnConnVpnTunnelDataArrayOutput) ToAviatrixAwsTgwVpnConnVpnTunnelDataArrayOutputWithContext(ctx context.Context) AviatrixAwsTgwVpnConnVpnTunnelDataArrayOutput {
	return o
}

func (o AviatrixAwsTgwVpnConnVpnTunnelDataArrayOutput) Index(i pulumi.IntInput) AviatrixAwsTgwVpnConnVpnTunnelDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixAwsTgwVpnConnVpnTunnelData {
		return vs[0].([]AviatrixAwsTgwVpnConnVpnTunnelData)[vs[1].(int)]
	}).(AviatrixAwsTgwVpnConnVpnTunnelDataOutput)
}

type AviatrixFirenetFirewallInstanceAssociation struct {
	// Switch to attach/detach firewall instance to/from FireNet. Valid values: true, false. Default value: false.
	Attached *bool `pulumi:"attached"`
	// Egress interface ID. **Required if it is a firewall instance.**
	EgressInterface *string `pulumi:"egressInterface"`
	// Name of the primary FireNet gateway.
	FirenetGwName string `pulumi:"firenetGwName"`
	// Firewall instance name. **Required if it is a firewall instance.**
	FirewallName *string `pulumi:"firewallName"`
	// ID of Firewall instance.
	InstanceId string `pulumi:"instanceId"`
	// Lan interface ID. **Required if it is a firewall instance or FQDN gateway in Azure.**
	LanInterface *string `pulumi:"lanInterface"`
	// Management interface ID. **Required if it is a firewall instance.**
	ManagementInterface *string `pulumi:"managementInterface"`
	// Type of firewall. Valid values: "Generic", "fqdnGateway". Default value: "Generic". Value "fqdnGateway" is required for FQDN gateway.
	VendorType *string `pulumi:"vendorType"`
}

// AviatrixFirenetFirewallInstanceAssociationInput is an input type that accepts AviatrixFirenetFirewallInstanceAssociationArgs and AviatrixFirenetFirewallInstanceAssociationOutput values.
// You can construct a concrete instance of `AviatrixFirenetFirewallInstanceAssociationInput` via:
//
//	AviatrixFirenetFirewallInstanceAssociationArgs{...}
type AviatrixFirenetFirewallInstanceAssociationInput interface {
	pulumi.Input

	ToAviatrixFirenetFirewallInstanceAssociationOutput() AviatrixFirenetFirewallInstanceAssociationOutput
	ToAviatrixFirenetFirewallInstanceAssociationOutputWithContext(context.Context) AviatrixFirenetFirewallInstanceAssociationOutput
}

type AviatrixFirenetFirewallInstanceAssociationArgs struct {
	// Switch to attach/detach firewall instance to/from FireNet. Valid values: true, false. Default value: false.
	Attached pulumi.BoolPtrInput `pulumi:"attached"`
	// Egress interface ID. **Required if it is a firewall instance.**
	EgressInterface pulumi.StringPtrInput `pulumi:"egressInterface"`
	// Name of the primary FireNet gateway.
	FirenetGwName pulumi.StringInput `pulumi:"firenetGwName"`
	// Firewall instance name. **Required if it is a firewall instance.**
	FirewallName pulumi.StringPtrInput `pulumi:"firewallName"`
	// ID of Firewall instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Lan interface ID. **Required if it is a firewall instance or FQDN gateway in Azure.**
	LanInterface pulumi.StringPtrInput `pulumi:"lanInterface"`
	// Management interface ID. **Required if it is a firewall instance.**
	ManagementInterface pulumi.StringPtrInput `pulumi:"managementInterface"`
	// Type of firewall. Valid values: "Generic", "fqdnGateway". Default value: "Generic". Value "fqdnGateway" is required for FQDN gateway.
	VendorType pulumi.StringPtrInput `pulumi:"vendorType"`
}

func (AviatrixFirenetFirewallInstanceAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixFirenetFirewallInstanceAssociation)(nil)).Elem()
}

func (i AviatrixFirenetFirewallInstanceAssociationArgs) ToAviatrixFirenetFirewallInstanceAssociationOutput() AviatrixFirenetFirewallInstanceAssociationOutput {
	return i.ToAviatrixFirenetFirewallInstanceAssociationOutputWithContext(context.Background())
}

func (i AviatrixFirenetFirewallInstanceAssociationArgs) ToAviatrixFirenetFirewallInstanceAssociationOutputWithContext(ctx context.Context) AviatrixFirenetFirewallInstanceAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFirenetFirewallInstanceAssociationOutput)
}

// AviatrixFirenetFirewallInstanceAssociationArrayInput is an input type that accepts AviatrixFirenetFirewallInstanceAssociationArray and AviatrixFirenetFirewallInstanceAssociationArrayOutput values.
// You can construct a concrete instance of `AviatrixFirenetFirewallInstanceAssociationArrayInput` via:
//
//	AviatrixFirenetFirewallInstanceAssociationArray{ AviatrixFirenetFirewallInstanceAssociationArgs{...} }
type AviatrixFirenetFirewallInstanceAssociationArrayInput interface {
	pulumi.Input

	ToAviatrixFirenetFirewallInstanceAssociationArrayOutput() AviatrixFirenetFirewallInstanceAssociationArrayOutput
	ToAviatrixFirenetFirewallInstanceAssociationArrayOutputWithContext(context.Context) AviatrixFirenetFirewallInstanceAssociationArrayOutput
}

type AviatrixFirenetFirewallInstanceAssociationArray []AviatrixFirenetFirewallInstanceAssociationInput

func (AviatrixFirenetFirewallInstanceAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixFirenetFirewallInstanceAssociation)(nil)).Elem()
}

func (i AviatrixFirenetFirewallInstanceAssociationArray) ToAviatrixFirenetFirewallInstanceAssociationArrayOutput() AviatrixFirenetFirewallInstanceAssociationArrayOutput {
	return i.ToAviatrixFirenetFirewallInstanceAssociationArrayOutputWithContext(context.Background())
}

func (i AviatrixFirenetFirewallInstanceAssociationArray) ToAviatrixFirenetFirewallInstanceAssociationArrayOutputWithContext(ctx context.Context) AviatrixFirenetFirewallInstanceAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFirenetFirewallInstanceAssociationArrayOutput)
}

type AviatrixFirenetFirewallInstanceAssociationOutput struct{ *pulumi.OutputState }

func (AviatrixFirenetFirewallInstanceAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixFirenetFirewallInstanceAssociation)(nil)).Elem()
}

func (o AviatrixFirenetFirewallInstanceAssociationOutput) ToAviatrixFirenetFirewallInstanceAssociationOutput() AviatrixFirenetFirewallInstanceAssociationOutput {
	return o
}

func (o AviatrixFirenetFirewallInstanceAssociationOutput) ToAviatrixFirenetFirewallInstanceAssociationOutputWithContext(ctx context.Context) AviatrixFirenetFirewallInstanceAssociationOutput {
	return o
}

// Switch to attach/detach firewall instance to/from FireNet. Valid values: true, false. Default value: false.
func (o AviatrixFirenetFirewallInstanceAssociationOutput) Attached() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AviatrixFirenetFirewallInstanceAssociation) *bool { return v.Attached }).(pulumi.BoolPtrOutput)
}

// Egress interface ID. **Required if it is a firewall instance.**
func (o AviatrixFirenetFirewallInstanceAssociationOutput) EgressInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixFirenetFirewallInstanceAssociation) *string { return v.EgressInterface }).(pulumi.StringPtrOutput)
}

// Name of the primary FireNet gateway.
func (o AviatrixFirenetFirewallInstanceAssociationOutput) FirenetGwName() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixFirenetFirewallInstanceAssociation) string { return v.FirenetGwName }).(pulumi.StringOutput)
}

// Firewall instance name. **Required if it is a firewall instance.**
func (o AviatrixFirenetFirewallInstanceAssociationOutput) FirewallName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixFirenetFirewallInstanceAssociation) *string { return v.FirewallName }).(pulumi.StringPtrOutput)
}

// ID of Firewall instance.
func (o AviatrixFirenetFirewallInstanceAssociationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixFirenetFirewallInstanceAssociation) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Lan interface ID. **Required if it is a firewall instance or FQDN gateway in Azure.**
func (o AviatrixFirenetFirewallInstanceAssociationOutput) LanInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixFirenetFirewallInstanceAssociation) *string { return v.LanInterface }).(pulumi.StringPtrOutput)
}

// Management interface ID. **Required if it is a firewall instance.**
func (o AviatrixFirenetFirewallInstanceAssociationOutput) ManagementInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixFirenetFirewallInstanceAssociation) *string { return v.ManagementInterface }).(pulumi.StringPtrOutput)
}

// Type of firewall. Valid values: "Generic", "fqdnGateway". Default value: "Generic". Value "fqdnGateway" is required for FQDN gateway.
func (o AviatrixFirenetFirewallInstanceAssociationOutput) VendorType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixFirenetFirewallInstanceAssociation) *string { return v.VendorType }).(pulumi.StringPtrOutput)
}

type AviatrixFirenetFirewallInstanceAssociationArrayOutput struct{ *pulumi.OutputState }

func (AviatrixFirenetFirewallInstanceAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixFirenetFirewallInstanceAssociation)(nil)).Elem()
}

func (o AviatrixFirenetFirewallInstanceAssociationArrayOutput) ToAviatrixFirenetFirewallInstanceAssociationArrayOutput() AviatrixFirenetFirewallInstanceAssociationArrayOutput {
	return o
}

func (o AviatrixFirenetFirewallInstanceAssociationArrayOutput) ToAviatrixFirenetFirewallInstanceAssociationArrayOutputWithContext(ctx context.Context) AviatrixFirenetFirewallInstanceAssociationArrayOutput {
	return o
}

func (o AviatrixFirenetFirewallInstanceAssociationArrayOutput) Index(i pulumi.IntInput) AviatrixFirenetFirewallInstanceAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixFirenetFirewallInstanceAssociation {
		return vs[0].([]AviatrixFirenetFirewallInstanceAssociation)[vs[1].(int)]
	}).(AviatrixFirenetFirewallInstanceAssociationOutput)
}

type AviatrixFirewallPolicyType struct {
	// Valid values: "allow", "deny" and "force-drop" (in stateful firewall rule to allow immediate packet dropping on established sessions).
	Action string `pulumi:"action"`
	// Description of the policy. Example: "This is policy no.1".
	Description *string `pulumi:"description"`
	// Destination address, a valid IPv4 address or tag name such "HR" or "marketing" etc. Example: "10.30.0.0/16". The **aviatrix_firewall_tag** resource should be created prior to using the tag name.
	DstIp string `pulumi:"dstIp"`
	// Valid values: true, false. Default value: false.
	LogEnabled *bool `pulumi:"logEnabled"`
	// A single port or a range of port numbers. Example: "25", "25:1024".
	Port string `pulumi:"port"`
	// : Valid values: "all", "tcp", "udp", "icmp", "sctp", "rdp", "dccp". Default value: "all".
	Protocol *string `pulumi:"protocol"`
	// Source address, a valid IPv4 address or tag name such "HR" or "marketing" etc. Example: "10.30.0.0/16". The **aviatrix_firewall_tag** resource should be created prior to using the tag name.
	SrcIp string `pulumi:"srcIp"`
}

// AviatrixFirewallPolicyTypeInput is an input type that accepts AviatrixFirewallPolicyTypeArgs and AviatrixFirewallPolicyTypeOutput values.
// You can construct a concrete instance of `AviatrixFirewallPolicyTypeInput` via:
//
//	AviatrixFirewallPolicyTypeArgs{...}
type AviatrixFirewallPolicyTypeInput interface {
	pulumi.Input

	ToAviatrixFirewallPolicyTypeOutput() AviatrixFirewallPolicyTypeOutput
	ToAviatrixFirewallPolicyTypeOutputWithContext(context.Context) AviatrixFirewallPolicyTypeOutput
}

type AviatrixFirewallPolicyTypeArgs struct {
	// Valid values: "allow", "deny" and "force-drop" (in stateful firewall rule to allow immediate packet dropping on established sessions).
	Action pulumi.StringInput `pulumi:"action"`
	// Description of the policy. Example: "This is policy no.1".
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Destination address, a valid IPv4 address or tag name such "HR" or "marketing" etc. Example: "10.30.0.0/16". The **aviatrix_firewall_tag** resource should be created prior to using the tag name.
	DstIp pulumi.StringInput `pulumi:"dstIp"`
	// Valid values: true, false. Default value: false.
	LogEnabled pulumi.BoolPtrInput `pulumi:"logEnabled"`
	// A single port or a range of port numbers. Example: "25", "25:1024".
	Port pulumi.StringInput `pulumi:"port"`
	// : Valid values: "all", "tcp", "udp", "icmp", "sctp", "rdp", "dccp". Default value: "all".
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Source address, a valid IPv4 address or tag name such "HR" or "marketing" etc. Example: "10.30.0.0/16". The **aviatrix_firewall_tag** resource should be created prior to using the tag name.
	SrcIp pulumi.StringInput `pulumi:"srcIp"`
}

func (AviatrixFirewallPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixFirewallPolicyType)(nil)).Elem()
}

func (i AviatrixFirewallPolicyTypeArgs) ToAviatrixFirewallPolicyTypeOutput() AviatrixFirewallPolicyTypeOutput {
	return i.ToAviatrixFirewallPolicyTypeOutputWithContext(context.Background())
}

func (i AviatrixFirewallPolicyTypeArgs) ToAviatrixFirewallPolicyTypeOutputWithContext(ctx context.Context) AviatrixFirewallPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFirewallPolicyTypeOutput)
}

// AviatrixFirewallPolicyTypeArrayInput is an input type that accepts AviatrixFirewallPolicyTypeArray and AviatrixFirewallPolicyTypeArrayOutput values.
// You can construct a concrete instance of `AviatrixFirewallPolicyTypeArrayInput` via:
//
//	AviatrixFirewallPolicyTypeArray{ AviatrixFirewallPolicyTypeArgs{...} }
type AviatrixFirewallPolicyTypeArrayInput interface {
	pulumi.Input

	ToAviatrixFirewallPolicyTypeArrayOutput() AviatrixFirewallPolicyTypeArrayOutput
	ToAviatrixFirewallPolicyTypeArrayOutputWithContext(context.Context) AviatrixFirewallPolicyTypeArrayOutput
}

type AviatrixFirewallPolicyTypeArray []AviatrixFirewallPolicyTypeInput

func (AviatrixFirewallPolicyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixFirewallPolicyType)(nil)).Elem()
}

func (i AviatrixFirewallPolicyTypeArray) ToAviatrixFirewallPolicyTypeArrayOutput() AviatrixFirewallPolicyTypeArrayOutput {
	return i.ToAviatrixFirewallPolicyTypeArrayOutputWithContext(context.Background())
}

func (i AviatrixFirewallPolicyTypeArray) ToAviatrixFirewallPolicyTypeArrayOutputWithContext(ctx context.Context) AviatrixFirewallPolicyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFirewallPolicyTypeArrayOutput)
}

type AviatrixFirewallPolicyTypeOutput struct{ *pulumi.OutputState }

func (AviatrixFirewallPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixFirewallPolicyType)(nil)).Elem()
}

func (o AviatrixFirewallPolicyTypeOutput) ToAviatrixFirewallPolicyTypeOutput() AviatrixFirewallPolicyTypeOutput {
	return o
}

func (o AviatrixFirewallPolicyTypeOutput) ToAviatrixFirewallPolicyTypeOutputWithContext(ctx context.Context) AviatrixFirewallPolicyTypeOutput {
	return o
}

// Valid values: "allow", "deny" and "force-drop" (in stateful firewall rule to allow immediate packet dropping on established sessions).
func (o AviatrixFirewallPolicyTypeOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixFirewallPolicyType) string { return v.Action }).(pulumi.StringOutput)
}

// Description of the policy. Example: "This is policy no.1".
func (o AviatrixFirewallPolicyTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixFirewallPolicyType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Destination address, a valid IPv4 address or tag name such "HR" or "marketing" etc. Example: "10.30.0.0/16". The **aviatrix_firewall_tag** resource should be created prior to using the tag name.
func (o AviatrixFirewallPolicyTypeOutput) DstIp() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixFirewallPolicyType) string { return v.DstIp }).(pulumi.StringOutput)
}

// Valid values: true, false. Default value: false.
func (o AviatrixFirewallPolicyTypeOutput) LogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AviatrixFirewallPolicyType) *bool { return v.LogEnabled }).(pulumi.BoolPtrOutput)
}

// A single port or a range of port numbers. Example: "25", "25:1024".
func (o AviatrixFirewallPolicyTypeOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixFirewallPolicyType) string { return v.Port }).(pulumi.StringOutput)
}

// : Valid values: "all", "tcp", "udp", "icmp", "sctp", "rdp", "dccp". Default value: "all".
func (o AviatrixFirewallPolicyTypeOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixFirewallPolicyType) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Source address, a valid IPv4 address or tag name such "HR" or "marketing" etc. Example: "10.30.0.0/16". The **aviatrix_firewall_tag** resource should be created prior to using the tag name.
func (o AviatrixFirewallPolicyTypeOutput) SrcIp() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixFirewallPolicyType) string { return v.SrcIp }).(pulumi.StringOutput)
}

type AviatrixFirewallPolicyTypeArrayOutput struct{ *pulumi.OutputState }

func (AviatrixFirewallPolicyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixFirewallPolicyType)(nil)).Elem()
}

func (o AviatrixFirewallPolicyTypeArrayOutput) ToAviatrixFirewallPolicyTypeArrayOutput() AviatrixFirewallPolicyTypeArrayOutput {
	return o
}

func (o AviatrixFirewallPolicyTypeArrayOutput) ToAviatrixFirewallPolicyTypeArrayOutputWithContext(ctx context.Context) AviatrixFirewallPolicyTypeArrayOutput {
	return o
}

func (o AviatrixFirewallPolicyTypeArrayOutput) Index(i pulumi.IntInput) AviatrixFirewallPolicyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixFirewallPolicyType {
		return vs[0].([]AviatrixFirewallPolicyType)[vs[1].(int)]
	}).(AviatrixFirewallPolicyTypeOutput)
}

type AviatrixFirewallTagCidrList struct {
	// CIDR address to filter. Example: "10.88.88.88/32".
	Cidr string `pulumi:"cidr"`
	// A name to identify the CIDR. Example: "policy1".
	CidrTagName string `pulumi:"cidrTagName"`
}

// AviatrixFirewallTagCidrListInput is an input type that accepts AviatrixFirewallTagCidrListArgs and AviatrixFirewallTagCidrListOutput values.
// You can construct a concrete instance of `AviatrixFirewallTagCidrListInput` via:
//
//	AviatrixFirewallTagCidrListArgs{...}
type AviatrixFirewallTagCidrListInput interface {
	pulumi.Input

	ToAviatrixFirewallTagCidrListOutput() AviatrixFirewallTagCidrListOutput
	ToAviatrixFirewallTagCidrListOutputWithContext(context.Context) AviatrixFirewallTagCidrListOutput
}

type AviatrixFirewallTagCidrListArgs struct {
	// CIDR address to filter. Example: "10.88.88.88/32".
	Cidr pulumi.StringInput `pulumi:"cidr"`
	// A name to identify the CIDR. Example: "policy1".
	CidrTagName pulumi.StringInput `pulumi:"cidrTagName"`
}

func (AviatrixFirewallTagCidrListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixFirewallTagCidrList)(nil)).Elem()
}

func (i AviatrixFirewallTagCidrListArgs) ToAviatrixFirewallTagCidrListOutput() AviatrixFirewallTagCidrListOutput {
	return i.ToAviatrixFirewallTagCidrListOutputWithContext(context.Background())
}

func (i AviatrixFirewallTagCidrListArgs) ToAviatrixFirewallTagCidrListOutputWithContext(ctx context.Context) AviatrixFirewallTagCidrListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFirewallTagCidrListOutput)
}

// AviatrixFirewallTagCidrListArrayInput is an input type that accepts AviatrixFirewallTagCidrListArray and AviatrixFirewallTagCidrListArrayOutput values.
// You can construct a concrete instance of `AviatrixFirewallTagCidrListArrayInput` via:
//
//	AviatrixFirewallTagCidrListArray{ AviatrixFirewallTagCidrListArgs{...} }
type AviatrixFirewallTagCidrListArrayInput interface {
	pulumi.Input

	ToAviatrixFirewallTagCidrListArrayOutput() AviatrixFirewallTagCidrListArrayOutput
	ToAviatrixFirewallTagCidrListArrayOutputWithContext(context.Context) AviatrixFirewallTagCidrListArrayOutput
}

type AviatrixFirewallTagCidrListArray []AviatrixFirewallTagCidrListInput

func (AviatrixFirewallTagCidrListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixFirewallTagCidrList)(nil)).Elem()
}

func (i AviatrixFirewallTagCidrListArray) ToAviatrixFirewallTagCidrListArrayOutput() AviatrixFirewallTagCidrListArrayOutput {
	return i.ToAviatrixFirewallTagCidrListArrayOutputWithContext(context.Background())
}

func (i AviatrixFirewallTagCidrListArray) ToAviatrixFirewallTagCidrListArrayOutputWithContext(ctx context.Context) AviatrixFirewallTagCidrListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFirewallTagCidrListArrayOutput)
}

type AviatrixFirewallTagCidrListOutput struct{ *pulumi.OutputState }

func (AviatrixFirewallTagCidrListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixFirewallTagCidrList)(nil)).Elem()
}

func (o AviatrixFirewallTagCidrListOutput) ToAviatrixFirewallTagCidrListOutput() AviatrixFirewallTagCidrListOutput {
	return o
}

func (o AviatrixFirewallTagCidrListOutput) ToAviatrixFirewallTagCidrListOutputWithContext(ctx context.Context) AviatrixFirewallTagCidrListOutput {
	return o
}

// CIDR address to filter. Example: "10.88.88.88/32".
func (o AviatrixFirewallTagCidrListOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixFirewallTagCidrList) string { return v.Cidr }).(pulumi.StringOutput)
}

// A name to identify the CIDR. Example: "policy1".
func (o AviatrixFirewallTagCidrListOutput) CidrTagName() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixFirewallTagCidrList) string { return v.CidrTagName }).(pulumi.StringOutput)
}

type AviatrixFirewallTagCidrListArrayOutput struct{ *pulumi.OutputState }

func (AviatrixFirewallTagCidrListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixFirewallTagCidrList)(nil)).Elem()
}

func (o AviatrixFirewallTagCidrListArrayOutput) ToAviatrixFirewallTagCidrListArrayOutput() AviatrixFirewallTagCidrListArrayOutput {
	return o
}

func (o AviatrixFirewallTagCidrListArrayOutput) ToAviatrixFirewallTagCidrListArrayOutputWithContext(ctx context.Context) AviatrixFirewallTagCidrListArrayOutput {
	return o
}

func (o AviatrixFirewallTagCidrListArrayOutput) Index(i pulumi.IntInput) AviatrixFirewallTagCidrListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixFirewallTagCidrList {
		return vs[0].([]AviatrixFirewallTagCidrList)[vs[1].(int)]
	}).(AviatrixFirewallTagCidrListOutput)
}

type AviatrixFqdnDomainName struct {
	// What action should happen to matching requests. Possible values are: 'Base Policy', 'Allow' or 'Deny'. Defaults to 'Base Policy' if no value provided.
	// * For protocol "all", port must be set to "all".
	// * For protocol “icmp”, port must be set to “ping”.
	Action *string `pulumi:"action"`
	// FQDN. Example: "facebook.com".
	Fqdn string `pulumi:"fqdn"`
	// Port. Example "25".
	Port string `pulumi:"port"`
	// Protocol. Valid values: "all", "tcp", "udp", "icmp".
	Proto string `pulumi:"proto"`
}

// AviatrixFqdnDomainNameInput is an input type that accepts AviatrixFqdnDomainNameArgs and AviatrixFqdnDomainNameOutput values.
// You can construct a concrete instance of `AviatrixFqdnDomainNameInput` via:
//
//	AviatrixFqdnDomainNameArgs{...}
type AviatrixFqdnDomainNameInput interface {
	pulumi.Input

	ToAviatrixFqdnDomainNameOutput() AviatrixFqdnDomainNameOutput
	ToAviatrixFqdnDomainNameOutputWithContext(context.Context) AviatrixFqdnDomainNameOutput
}

type AviatrixFqdnDomainNameArgs struct {
	// What action should happen to matching requests. Possible values are: 'Base Policy', 'Allow' or 'Deny'. Defaults to 'Base Policy' if no value provided.
	// * For protocol "all", port must be set to "all".
	// * For protocol “icmp”, port must be set to “ping”.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// FQDN. Example: "facebook.com".
	Fqdn pulumi.StringInput `pulumi:"fqdn"`
	// Port. Example "25".
	Port pulumi.StringInput `pulumi:"port"`
	// Protocol. Valid values: "all", "tcp", "udp", "icmp".
	Proto pulumi.StringInput `pulumi:"proto"`
}

func (AviatrixFqdnDomainNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixFqdnDomainName)(nil)).Elem()
}

func (i AviatrixFqdnDomainNameArgs) ToAviatrixFqdnDomainNameOutput() AviatrixFqdnDomainNameOutput {
	return i.ToAviatrixFqdnDomainNameOutputWithContext(context.Background())
}

func (i AviatrixFqdnDomainNameArgs) ToAviatrixFqdnDomainNameOutputWithContext(ctx context.Context) AviatrixFqdnDomainNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFqdnDomainNameOutput)
}

// AviatrixFqdnDomainNameArrayInput is an input type that accepts AviatrixFqdnDomainNameArray and AviatrixFqdnDomainNameArrayOutput values.
// You can construct a concrete instance of `AviatrixFqdnDomainNameArrayInput` via:
//
//	AviatrixFqdnDomainNameArray{ AviatrixFqdnDomainNameArgs{...} }
type AviatrixFqdnDomainNameArrayInput interface {
	pulumi.Input

	ToAviatrixFqdnDomainNameArrayOutput() AviatrixFqdnDomainNameArrayOutput
	ToAviatrixFqdnDomainNameArrayOutputWithContext(context.Context) AviatrixFqdnDomainNameArrayOutput
}

type AviatrixFqdnDomainNameArray []AviatrixFqdnDomainNameInput

func (AviatrixFqdnDomainNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixFqdnDomainName)(nil)).Elem()
}

func (i AviatrixFqdnDomainNameArray) ToAviatrixFqdnDomainNameArrayOutput() AviatrixFqdnDomainNameArrayOutput {
	return i.ToAviatrixFqdnDomainNameArrayOutputWithContext(context.Background())
}

func (i AviatrixFqdnDomainNameArray) ToAviatrixFqdnDomainNameArrayOutputWithContext(ctx context.Context) AviatrixFqdnDomainNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFqdnDomainNameArrayOutput)
}

type AviatrixFqdnDomainNameOutput struct{ *pulumi.OutputState }

func (AviatrixFqdnDomainNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixFqdnDomainName)(nil)).Elem()
}

func (o AviatrixFqdnDomainNameOutput) ToAviatrixFqdnDomainNameOutput() AviatrixFqdnDomainNameOutput {
	return o
}

func (o AviatrixFqdnDomainNameOutput) ToAviatrixFqdnDomainNameOutputWithContext(ctx context.Context) AviatrixFqdnDomainNameOutput {
	return o
}

// What action should happen to matching requests. Possible values are: 'Base Policy', 'Allow' or 'Deny'. Defaults to 'Base Policy' if no value provided.
// * For protocol "all", port must be set to "all".
// * For protocol “icmp”, port must be set to “ping”.
func (o AviatrixFqdnDomainNameOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixFqdnDomainName) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// FQDN. Example: "facebook.com".
func (o AviatrixFqdnDomainNameOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixFqdnDomainName) string { return v.Fqdn }).(pulumi.StringOutput)
}

// Port. Example "25".
func (o AviatrixFqdnDomainNameOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixFqdnDomainName) string { return v.Port }).(pulumi.StringOutput)
}

// Protocol. Valid values: "all", "tcp", "udp", "icmp".
func (o AviatrixFqdnDomainNameOutput) Proto() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixFqdnDomainName) string { return v.Proto }).(pulumi.StringOutput)
}

type AviatrixFqdnDomainNameArrayOutput struct{ *pulumi.OutputState }

func (AviatrixFqdnDomainNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixFqdnDomainName)(nil)).Elem()
}

func (o AviatrixFqdnDomainNameArrayOutput) ToAviatrixFqdnDomainNameArrayOutput() AviatrixFqdnDomainNameArrayOutput {
	return o
}

func (o AviatrixFqdnDomainNameArrayOutput) ToAviatrixFqdnDomainNameArrayOutputWithContext(ctx context.Context) AviatrixFqdnDomainNameArrayOutput {
	return o
}

func (o AviatrixFqdnDomainNameArrayOutput) Index(i pulumi.IntInput) AviatrixFqdnDomainNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixFqdnDomainName {
		return vs[0].([]AviatrixFqdnDomainName)[vs[1].(int)]
	}).(AviatrixFqdnDomainNameOutput)
}

type AviatrixFqdnGwFilterTagList struct {
	// Name of the gateway to attach to the specific tag.
	GwName string `pulumi:"gwName"`
	// List of source IPs in the VPC qualified for a specific tag.
	SourceIpLists []string `pulumi:"sourceIpLists"`
}

// AviatrixFqdnGwFilterTagListInput is an input type that accepts AviatrixFqdnGwFilterTagListArgs and AviatrixFqdnGwFilterTagListOutput values.
// You can construct a concrete instance of `AviatrixFqdnGwFilterTagListInput` via:
//
//	AviatrixFqdnGwFilterTagListArgs{...}
type AviatrixFqdnGwFilterTagListInput interface {
	pulumi.Input

	ToAviatrixFqdnGwFilterTagListOutput() AviatrixFqdnGwFilterTagListOutput
	ToAviatrixFqdnGwFilterTagListOutputWithContext(context.Context) AviatrixFqdnGwFilterTagListOutput
}

type AviatrixFqdnGwFilterTagListArgs struct {
	// Name of the gateway to attach to the specific tag.
	GwName pulumi.StringInput `pulumi:"gwName"`
	// List of source IPs in the VPC qualified for a specific tag.
	SourceIpLists pulumi.StringArrayInput `pulumi:"sourceIpLists"`
}

func (AviatrixFqdnGwFilterTagListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixFqdnGwFilterTagList)(nil)).Elem()
}

func (i AviatrixFqdnGwFilterTagListArgs) ToAviatrixFqdnGwFilterTagListOutput() AviatrixFqdnGwFilterTagListOutput {
	return i.ToAviatrixFqdnGwFilterTagListOutputWithContext(context.Background())
}

func (i AviatrixFqdnGwFilterTagListArgs) ToAviatrixFqdnGwFilterTagListOutputWithContext(ctx context.Context) AviatrixFqdnGwFilterTagListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFqdnGwFilterTagListOutput)
}

// AviatrixFqdnGwFilterTagListArrayInput is an input type that accepts AviatrixFqdnGwFilterTagListArray and AviatrixFqdnGwFilterTagListArrayOutput values.
// You can construct a concrete instance of `AviatrixFqdnGwFilterTagListArrayInput` via:
//
//	AviatrixFqdnGwFilterTagListArray{ AviatrixFqdnGwFilterTagListArgs{...} }
type AviatrixFqdnGwFilterTagListArrayInput interface {
	pulumi.Input

	ToAviatrixFqdnGwFilterTagListArrayOutput() AviatrixFqdnGwFilterTagListArrayOutput
	ToAviatrixFqdnGwFilterTagListArrayOutputWithContext(context.Context) AviatrixFqdnGwFilterTagListArrayOutput
}

type AviatrixFqdnGwFilterTagListArray []AviatrixFqdnGwFilterTagListInput

func (AviatrixFqdnGwFilterTagListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixFqdnGwFilterTagList)(nil)).Elem()
}

func (i AviatrixFqdnGwFilterTagListArray) ToAviatrixFqdnGwFilterTagListArrayOutput() AviatrixFqdnGwFilterTagListArrayOutput {
	return i.ToAviatrixFqdnGwFilterTagListArrayOutputWithContext(context.Background())
}

func (i AviatrixFqdnGwFilterTagListArray) ToAviatrixFqdnGwFilterTagListArrayOutputWithContext(ctx context.Context) AviatrixFqdnGwFilterTagListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFqdnGwFilterTagListArrayOutput)
}

type AviatrixFqdnGwFilterTagListOutput struct{ *pulumi.OutputState }

func (AviatrixFqdnGwFilterTagListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixFqdnGwFilterTagList)(nil)).Elem()
}

func (o AviatrixFqdnGwFilterTagListOutput) ToAviatrixFqdnGwFilterTagListOutput() AviatrixFqdnGwFilterTagListOutput {
	return o
}

func (o AviatrixFqdnGwFilterTagListOutput) ToAviatrixFqdnGwFilterTagListOutputWithContext(ctx context.Context) AviatrixFqdnGwFilterTagListOutput {
	return o
}

// Name of the gateway to attach to the specific tag.
func (o AviatrixFqdnGwFilterTagListOutput) GwName() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixFqdnGwFilterTagList) string { return v.GwName }).(pulumi.StringOutput)
}

// List of source IPs in the VPC qualified for a specific tag.
func (o AviatrixFqdnGwFilterTagListOutput) SourceIpLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AviatrixFqdnGwFilterTagList) []string { return v.SourceIpLists }).(pulumi.StringArrayOutput)
}

type AviatrixFqdnGwFilterTagListArrayOutput struct{ *pulumi.OutputState }

func (AviatrixFqdnGwFilterTagListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixFqdnGwFilterTagList)(nil)).Elem()
}

func (o AviatrixFqdnGwFilterTagListArrayOutput) ToAviatrixFqdnGwFilterTagListArrayOutput() AviatrixFqdnGwFilterTagListArrayOutput {
	return o
}

func (o AviatrixFqdnGwFilterTagListArrayOutput) ToAviatrixFqdnGwFilterTagListArrayOutputWithContext(ctx context.Context) AviatrixFqdnGwFilterTagListArrayOutput {
	return o
}

func (o AviatrixFqdnGwFilterTagListArrayOutput) Index(i pulumi.IntInput) AviatrixFqdnGwFilterTagListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixFqdnGwFilterTagList {
		return vs[0].([]AviatrixFqdnGwFilterTagList)[vs[1].(int)]
	}).(AviatrixFqdnGwFilterTagListOutput)
}

type AviatrixGatewayDnatConnectionPolicy struct {
	// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.19.2+.
	ApplyRouteEntry *bool `pulumi:"applyRouteEntry"`
	// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
	Connection *string `pulumi:"connection"`
	// This is a rule field that specifies the translated destination IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.
	DnatIps *string `pulumi:"dnatIps"`
	// This is a rule field that specifies the translated destination port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.
	DnatPort *string `pulumi:"dnatPort"`
	// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
	DstCidr *string `pulumi:"dstCidr"`
	// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
	DstPort *string `pulumi:"dstPort"`
	// This field specifies which VPC private route table will not be programmed with the default route entry.
	ExcludeRtb *string `pulumi:"excludeRtb"`
	// This is a qualifier condition that specifies output interface where the rule applies. When not specified, this field is not used. Must be empty when `connection` is set.
	Interface *string `pulumi:"interface"`
	// This is a rule field that specifies a tag or mark of a TCP session when all qualifier conditions meet. When not specified, this field is not used.
	Mark *string `pulumi:"mark"`
	// This is a qualifier condition that specifies a destination port protocol where the rule applies. When not specified, this field is not used.
	Protocol *string `pulumi:"protocol"`
	// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
	SrcCidr *string `pulumi:"srcCidr"`
	// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
	SrcPort *string `pulumi:"srcPort"`
}

// AviatrixGatewayDnatConnectionPolicyInput is an input type that accepts AviatrixGatewayDnatConnectionPolicyArgs and AviatrixGatewayDnatConnectionPolicyOutput values.
// You can construct a concrete instance of `AviatrixGatewayDnatConnectionPolicyInput` via:
//
//	AviatrixGatewayDnatConnectionPolicyArgs{...}
type AviatrixGatewayDnatConnectionPolicyInput interface {
	pulumi.Input

	ToAviatrixGatewayDnatConnectionPolicyOutput() AviatrixGatewayDnatConnectionPolicyOutput
	ToAviatrixGatewayDnatConnectionPolicyOutputWithContext(context.Context) AviatrixGatewayDnatConnectionPolicyOutput
}

type AviatrixGatewayDnatConnectionPolicyArgs struct {
	// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.19.2+.
	ApplyRouteEntry pulumi.BoolPtrInput `pulumi:"applyRouteEntry"`
	// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
	Connection pulumi.StringPtrInput `pulumi:"connection"`
	// This is a rule field that specifies the translated destination IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.
	DnatIps pulumi.StringPtrInput `pulumi:"dnatIps"`
	// This is a rule field that specifies the translated destination port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.
	DnatPort pulumi.StringPtrInput `pulumi:"dnatPort"`
	// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
	DstCidr pulumi.StringPtrInput `pulumi:"dstCidr"`
	// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
	DstPort pulumi.StringPtrInput `pulumi:"dstPort"`
	// This field specifies which VPC private route table will not be programmed with the default route entry.
	ExcludeRtb pulumi.StringPtrInput `pulumi:"excludeRtb"`
	// This is a qualifier condition that specifies output interface where the rule applies. When not specified, this field is not used. Must be empty when `connection` is set.
	Interface pulumi.StringPtrInput `pulumi:"interface"`
	// This is a rule field that specifies a tag or mark of a TCP session when all qualifier conditions meet. When not specified, this field is not used.
	Mark pulumi.StringPtrInput `pulumi:"mark"`
	// This is a qualifier condition that specifies a destination port protocol where the rule applies. When not specified, this field is not used.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
	SrcCidr pulumi.StringPtrInput `pulumi:"srcCidr"`
	// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
	SrcPort pulumi.StringPtrInput `pulumi:"srcPort"`
}

func (AviatrixGatewayDnatConnectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixGatewayDnatConnectionPolicy)(nil)).Elem()
}

func (i AviatrixGatewayDnatConnectionPolicyArgs) ToAviatrixGatewayDnatConnectionPolicyOutput() AviatrixGatewayDnatConnectionPolicyOutput {
	return i.ToAviatrixGatewayDnatConnectionPolicyOutputWithContext(context.Background())
}

func (i AviatrixGatewayDnatConnectionPolicyArgs) ToAviatrixGatewayDnatConnectionPolicyOutputWithContext(ctx context.Context) AviatrixGatewayDnatConnectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewayDnatConnectionPolicyOutput)
}

// AviatrixGatewayDnatConnectionPolicyArrayInput is an input type that accepts AviatrixGatewayDnatConnectionPolicyArray and AviatrixGatewayDnatConnectionPolicyArrayOutput values.
// You can construct a concrete instance of `AviatrixGatewayDnatConnectionPolicyArrayInput` via:
//
//	AviatrixGatewayDnatConnectionPolicyArray{ AviatrixGatewayDnatConnectionPolicyArgs{...} }
type AviatrixGatewayDnatConnectionPolicyArrayInput interface {
	pulumi.Input

	ToAviatrixGatewayDnatConnectionPolicyArrayOutput() AviatrixGatewayDnatConnectionPolicyArrayOutput
	ToAviatrixGatewayDnatConnectionPolicyArrayOutputWithContext(context.Context) AviatrixGatewayDnatConnectionPolicyArrayOutput
}

type AviatrixGatewayDnatConnectionPolicyArray []AviatrixGatewayDnatConnectionPolicyInput

func (AviatrixGatewayDnatConnectionPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixGatewayDnatConnectionPolicy)(nil)).Elem()
}

func (i AviatrixGatewayDnatConnectionPolicyArray) ToAviatrixGatewayDnatConnectionPolicyArrayOutput() AviatrixGatewayDnatConnectionPolicyArrayOutput {
	return i.ToAviatrixGatewayDnatConnectionPolicyArrayOutputWithContext(context.Background())
}

func (i AviatrixGatewayDnatConnectionPolicyArray) ToAviatrixGatewayDnatConnectionPolicyArrayOutputWithContext(ctx context.Context) AviatrixGatewayDnatConnectionPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewayDnatConnectionPolicyArrayOutput)
}

type AviatrixGatewayDnatConnectionPolicyOutput struct{ *pulumi.OutputState }

func (AviatrixGatewayDnatConnectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixGatewayDnatConnectionPolicy)(nil)).Elem()
}

func (o AviatrixGatewayDnatConnectionPolicyOutput) ToAviatrixGatewayDnatConnectionPolicyOutput() AviatrixGatewayDnatConnectionPolicyOutput {
	return o
}

func (o AviatrixGatewayDnatConnectionPolicyOutput) ToAviatrixGatewayDnatConnectionPolicyOutputWithContext(ctx context.Context) AviatrixGatewayDnatConnectionPolicyOutput {
	return o
}

// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.19.2+.
func (o AviatrixGatewayDnatConnectionPolicyOutput) ApplyRouteEntry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatConnectionPolicy) *bool { return v.ApplyRouteEntry }).(pulumi.BoolPtrOutput)
}

// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
func (o AviatrixGatewayDnatConnectionPolicyOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatConnectionPolicy) *string { return v.Connection }).(pulumi.StringPtrOutput)
}

// This is a rule field that specifies the translated destination IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.
func (o AviatrixGatewayDnatConnectionPolicyOutput) DnatIps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatConnectionPolicy) *string { return v.DnatIps }).(pulumi.StringPtrOutput)
}

// This is a rule field that specifies the translated destination port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.
func (o AviatrixGatewayDnatConnectionPolicyOutput) DnatPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatConnectionPolicy) *string { return v.DnatPort }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewayDnatConnectionPolicyOutput) DstCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatConnectionPolicy) *string { return v.DstCidr }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewayDnatConnectionPolicyOutput) DstPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatConnectionPolicy) *string { return v.DstPort }).(pulumi.StringPtrOutput)
}

// This field specifies which VPC private route table will not be programmed with the default route entry.
func (o AviatrixGatewayDnatConnectionPolicyOutput) ExcludeRtb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatConnectionPolicy) *string { return v.ExcludeRtb }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies output interface where the rule applies. When not specified, this field is not used. Must be empty when `connection` is set.
func (o AviatrixGatewayDnatConnectionPolicyOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatConnectionPolicy) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

// This is a rule field that specifies a tag or mark of a TCP session when all qualifier conditions meet. When not specified, this field is not used.
func (o AviatrixGatewayDnatConnectionPolicyOutput) Mark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatConnectionPolicy) *string { return v.Mark }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a destination port protocol where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewayDnatConnectionPolicyOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatConnectionPolicy) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewayDnatConnectionPolicyOutput) SrcCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatConnectionPolicy) *string { return v.SrcCidr }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
func (o AviatrixGatewayDnatConnectionPolicyOutput) SrcPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatConnectionPolicy) *string { return v.SrcPort }).(pulumi.StringPtrOutput)
}

type AviatrixGatewayDnatConnectionPolicyArrayOutput struct{ *pulumi.OutputState }

func (AviatrixGatewayDnatConnectionPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixGatewayDnatConnectionPolicy)(nil)).Elem()
}

func (o AviatrixGatewayDnatConnectionPolicyArrayOutput) ToAviatrixGatewayDnatConnectionPolicyArrayOutput() AviatrixGatewayDnatConnectionPolicyArrayOutput {
	return o
}

func (o AviatrixGatewayDnatConnectionPolicyArrayOutput) ToAviatrixGatewayDnatConnectionPolicyArrayOutputWithContext(ctx context.Context) AviatrixGatewayDnatConnectionPolicyArrayOutput {
	return o
}

func (o AviatrixGatewayDnatConnectionPolicyArrayOutput) Index(i pulumi.IntInput) AviatrixGatewayDnatConnectionPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixGatewayDnatConnectionPolicy {
		return vs[0].([]AviatrixGatewayDnatConnectionPolicy)[vs[1].(int)]
	}).(AviatrixGatewayDnatConnectionPolicyOutput)
}

type AviatrixGatewayDnatDnatPolicy struct {
	// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.19.2+.
	ApplyRouteEntry *bool `pulumi:"applyRouteEntry"`
	// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
	Connection *string `pulumi:"connection"`
	// This is a rule field that specifies the translated destination IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.
	DnatIps *string `pulumi:"dnatIps"`
	// This is a rule field that specifies the translated destination port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.
	DnatPort *string `pulumi:"dnatPort"`
	// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
	DstCidr *string `pulumi:"dstCidr"`
	// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
	DstPort *string `pulumi:"dstPort"`
	// This field specifies which VPC private route table will not be programmed with the default route entry.
	ExcludeRtb *string `pulumi:"excludeRtb"`
	// This is a qualifier condition that specifies output interface where the rule applies. When not specified, this field is not used. Must be empty when `connection` is set.
	Interface *string `pulumi:"interface"`
	// This is a rule field that specifies a tag or mark of a TCP session when all qualifier conditions meet. When not specified, this field is not used.
	Mark *string `pulumi:"mark"`
	// This is a qualifier condition that specifies a destination port protocol where the rule applies. When not specified, this field is not used.
	Protocol *string `pulumi:"protocol"`
	// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
	SrcCidr *string `pulumi:"srcCidr"`
	// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
	SrcPort *string `pulumi:"srcPort"`
}

// AviatrixGatewayDnatDnatPolicyInput is an input type that accepts AviatrixGatewayDnatDnatPolicyArgs and AviatrixGatewayDnatDnatPolicyOutput values.
// You can construct a concrete instance of `AviatrixGatewayDnatDnatPolicyInput` via:
//
//	AviatrixGatewayDnatDnatPolicyArgs{...}
type AviatrixGatewayDnatDnatPolicyInput interface {
	pulumi.Input

	ToAviatrixGatewayDnatDnatPolicyOutput() AviatrixGatewayDnatDnatPolicyOutput
	ToAviatrixGatewayDnatDnatPolicyOutputWithContext(context.Context) AviatrixGatewayDnatDnatPolicyOutput
}

type AviatrixGatewayDnatDnatPolicyArgs struct {
	// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.19.2+.
	ApplyRouteEntry pulumi.BoolPtrInput `pulumi:"applyRouteEntry"`
	// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
	Connection pulumi.StringPtrInput `pulumi:"connection"`
	// This is a rule field that specifies the translated destination IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.
	DnatIps pulumi.StringPtrInput `pulumi:"dnatIps"`
	// This is a rule field that specifies the translated destination port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.
	DnatPort pulumi.StringPtrInput `pulumi:"dnatPort"`
	// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
	DstCidr pulumi.StringPtrInput `pulumi:"dstCidr"`
	// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
	DstPort pulumi.StringPtrInput `pulumi:"dstPort"`
	// This field specifies which VPC private route table will not be programmed with the default route entry.
	ExcludeRtb pulumi.StringPtrInput `pulumi:"excludeRtb"`
	// This is a qualifier condition that specifies output interface where the rule applies. When not specified, this field is not used. Must be empty when `connection` is set.
	Interface pulumi.StringPtrInput `pulumi:"interface"`
	// This is a rule field that specifies a tag or mark of a TCP session when all qualifier conditions meet. When not specified, this field is not used.
	Mark pulumi.StringPtrInput `pulumi:"mark"`
	// This is a qualifier condition that specifies a destination port protocol where the rule applies. When not specified, this field is not used.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
	SrcCidr pulumi.StringPtrInput `pulumi:"srcCidr"`
	// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
	SrcPort pulumi.StringPtrInput `pulumi:"srcPort"`
}

func (AviatrixGatewayDnatDnatPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixGatewayDnatDnatPolicy)(nil)).Elem()
}

func (i AviatrixGatewayDnatDnatPolicyArgs) ToAviatrixGatewayDnatDnatPolicyOutput() AviatrixGatewayDnatDnatPolicyOutput {
	return i.ToAviatrixGatewayDnatDnatPolicyOutputWithContext(context.Background())
}

func (i AviatrixGatewayDnatDnatPolicyArgs) ToAviatrixGatewayDnatDnatPolicyOutputWithContext(ctx context.Context) AviatrixGatewayDnatDnatPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewayDnatDnatPolicyOutput)
}

// AviatrixGatewayDnatDnatPolicyArrayInput is an input type that accepts AviatrixGatewayDnatDnatPolicyArray and AviatrixGatewayDnatDnatPolicyArrayOutput values.
// You can construct a concrete instance of `AviatrixGatewayDnatDnatPolicyArrayInput` via:
//
//	AviatrixGatewayDnatDnatPolicyArray{ AviatrixGatewayDnatDnatPolicyArgs{...} }
type AviatrixGatewayDnatDnatPolicyArrayInput interface {
	pulumi.Input

	ToAviatrixGatewayDnatDnatPolicyArrayOutput() AviatrixGatewayDnatDnatPolicyArrayOutput
	ToAviatrixGatewayDnatDnatPolicyArrayOutputWithContext(context.Context) AviatrixGatewayDnatDnatPolicyArrayOutput
}

type AviatrixGatewayDnatDnatPolicyArray []AviatrixGatewayDnatDnatPolicyInput

func (AviatrixGatewayDnatDnatPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixGatewayDnatDnatPolicy)(nil)).Elem()
}

func (i AviatrixGatewayDnatDnatPolicyArray) ToAviatrixGatewayDnatDnatPolicyArrayOutput() AviatrixGatewayDnatDnatPolicyArrayOutput {
	return i.ToAviatrixGatewayDnatDnatPolicyArrayOutputWithContext(context.Background())
}

func (i AviatrixGatewayDnatDnatPolicyArray) ToAviatrixGatewayDnatDnatPolicyArrayOutputWithContext(ctx context.Context) AviatrixGatewayDnatDnatPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewayDnatDnatPolicyArrayOutput)
}

type AviatrixGatewayDnatDnatPolicyOutput struct{ *pulumi.OutputState }

func (AviatrixGatewayDnatDnatPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixGatewayDnatDnatPolicy)(nil)).Elem()
}

func (o AviatrixGatewayDnatDnatPolicyOutput) ToAviatrixGatewayDnatDnatPolicyOutput() AviatrixGatewayDnatDnatPolicyOutput {
	return o
}

func (o AviatrixGatewayDnatDnatPolicyOutput) ToAviatrixGatewayDnatDnatPolicyOutputWithContext(ctx context.Context) AviatrixGatewayDnatDnatPolicyOutput {
	return o
}

// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.19.2+.
func (o AviatrixGatewayDnatDnatPolicyOutput) ApplyRouteEntry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatDnatPolicy) *bool { return v.ApplyRouteEntry }).(pulumi.BoolPtrOutput)
}

// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
func (o AviatrixGatewayDnatDnatPolicyOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatDnatPolicy) *string { return v.Connection }).(pulumi.StringPtrOutput)
}

// This is a rule field that specifies the translated destination IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.
func (o AviatrixGatewayDnatDnatPolicyOutput) DnatIps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatDnatPolicy) *string { return v.DnatIps }).(pulumi.StringPtrOutput)
}

// This is a rule field that specifies the translated destination port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.
func (o AviatrixGatewayDnatDnatPolicyOutput) DnatPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatDnatPolicy) *string { return v.DnatPort }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewayDnatDnatPolicyOutput) DstCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatDnatPolicy) *string { return v.DstCidr }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewayDnatDnatPolicyOutput) DstPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatDnatPolicy) *string { return v.DstPort }).(pulumi.StringPtrOutput)
}

// This field specifies which VPC private route table will not be programmed with the default route entry.
func (o AviatrixGatewayDnatDnatPolicyOutput) ExcludeRtb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatDnatPolicy) *string { return v.ExcludeRtb }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies output interface where the rule applies. When not specified, this field is not used. Must be empty when `connection` is set.
func (o AviatrixGatewayDnatDnatPolicyOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatDnatPolicy) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

// This is a rule field that specifies a tag or mark of a TCP session when all qualifier conditions meet. When not specified, this field is not used.
func (o AviatrixGatewayDnatDnatPolicyOutput) Mark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatDnatPolicy) *string { return v.Mark }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a destination port protocol where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewayDnatDnatPolicyOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatDnatPolicy) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewayDnatDnatPolicyOutput) SrcCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatDnatPolicy) *string { return v.SrcCidr }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
func (o AviatrixGatewayDnatDnatPolicyOutput) SrcPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatDnatPolicy) *string { return v.SrcPort }).(pulumi.StringPtrOutput)
}

type AviatrixGatewayDnatDnatPolicyArrayOutput struct{ *pulumi.OutputState }

func (AviatrixGatewayDnatDnatPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixGatewayDnatDnatPolicy)(nil)).Elem()
}

func (o AviatrixGatewayDnatDnatPolicyArrayOutput) ToAviatrixGatewayDnatDnatPolicyArrayOutput() AviatrixGatewayDnatDnatPolicyArrayOutput {
	return o
}

func (o AviatrixGatewayDnatDnatPolicyArrayOutput) ToAviatrixGatewayDnatDnatPolicyArrayOutputWithContext(ctx context.Context) AviatrixGatewayDnatDnatPolicyArrayOutput {
	return o
}

func (o AviatrixGatewayDnatDnatPolicyArrayOutput) Index(i pulumi.IntInput) AviatrixGatewayDnatDnatPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixGatewayDnatDnatPolicy {
		return vs[0].([]AviatrixGatewayDnatDnatPolicy)[vs[1].(int)]
	}).(AviatrixGatewayDnatDnatPolicyOutput)
}

type AviatrixGatewayDnatInterfacePolicy struct {
	// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.19.2+.
	ApplyRouteEntry *bool `pulumi:"applyRouteEntry"`
	// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
	Connection *string `pulumi:"connection"`
	// This is a rule field that specifies the translated destination IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.
	DnatIps *string `pulumi:"dnatIps"`
	// This is a rule field that specifies the translated destination port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.
	DnatPort *string `pulumi:"dnatPort"`
	// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
	DstCidr *string `pulumi:"dstCidr"`
	// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
	DstPort *string `pulumi:"dstPort"`
	// This field specifies which VPC private route table will not be programmed with the default route entry.
	ExcludeRtb *string `pulumi:"excludeRtb"`
	// This is a qualifier condition that specifies output interface where the rule applies. When not specified, this field is not used. Must be empty when `connection` is set.
	Interface *string `pulumi:"interface"`
	// This is a rule field that specifies a tag or mark of a TCP session when all qualifier conditions meet. When not specified, this field is not used.
	Mark *string `pulumi:"mark"`
	// This is a qualifier condition that specifies a destination port protocol where the rule applies. When not specified, this field is not used.
	Protocol *string `pulumi:"protocol"`
	// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
	SrcCidr *string `pulumi:"srcCidr"`
	// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
	SrcPort *string `pulumi:"srcPort"`
}

// AviatrixGatewayDnatInterfacePolicyInput is an input type that accepts AviatrixGatewayDnatInterfacePolicyArgs and AviatrixGatewayDnatInterfacePolicyOutput values.
// You can construct a concrete instance of `AviatrixGatewayDnatInterfacePolicyInput` via:
//
//	AviatrixGatewayDnatInterfacePolicyArgs{...}
type AviatrixGatewayDnatInterfacePolicyInput interface {
	pulumi.Input

	ToAviatrixGatewayDnatInterfacePolicyOutput() AviatrixGatewayDnatInterfacePolicyOutput
	ToAviatrixGatewayDnatInterfacePolicyOutputWithContext(context.Context) AviatrixGatewayDnatInterfacePolicyOutput
}

type AviatrixGatewayDnatInterfacePolicyArgs struct {
	// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.19.2+.
	ApplyRouteEntry pulumi.BoolPtrInput `pulumi:"applyRouteEntry"`
	// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
	Connection pulumi.StringPtrInput `pulumi:"connection"`
	// This is a rule field that specifies the translated destination IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.
	DnatIps pulumi.StringPtrInput `pulumi:"dnatIps"`
	// This is a rule field that specifies the translated destination port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.
	DnatPort pulumi.StringPtrInput `pulumi:"dnatPort"`
	// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
	DstCidr pulumi.StringPtrInput `pulumi:"dstCidr"`
	// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
	DstPort pulumi.StringPtrInput `pulumi:"dstPort"`
	// This field specifies which VPC private route table will not be programmed with the default route entry.
	ExcludeRtb pulumi.StringPtrInput `pulumi:"excludeRtb"`
	// This is a qualifier condition that specifies output interface where the rule applies. When not specified, this field is not used. Must be empty when `connection` is set.
	Interface pulumi.StringPtrInput `pulumi:"interface"`
	// This is a rule field that specifies a tag or mark of a TCP session when all qualifier conditions meet. When not specified, this field is not used.
	Mark pulumi.StringPtrInput `pulumi:"mark"`
	// This is a qualifier condition that specifies a destination port protocol where the rule applies. When not specified, this field is not used.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
	SrcCidr pulumi.StringPtrInput `pulumi:"srcCidr"`
	// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
	SrcPort pulumi.StringPtrInput `pulumi:"srcPort"`
}

func (AviatrixGatewayDnatInterfacePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixGatewayDnatInterfacePolicy)(nil)).Elem()
}

func (i AviatrixGatewayDnatInterfacePolicyArgs) ToAviatrixGatewayDnatInterfacePolicyOutput() AviatrixGatewayDnatInterfacePolicyOutput {
	return i.ToAviatrixGatewayDnatInterfacePolicyOutputWithContext(context.Background())
}

func (i AviatrixGatewayDnatInterfacePolicyArgs) ToAviatrixGatewayDnatInterfacePolicyOutputWithContext(ctx context.Context) AviatrixGatewayDnatInterfacePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewayDnatInterfacePolicyOutput)
}

// AviatrixGatewayDnatInterfacePolicyArrayInput is an input type that accepts AviatrixGatewayDnatInterfacePolicyArray and AviatrixGatewayDnatInterfacePolicyArrayOutput values.
// You can construct a concrete instance of `AviatrixGatewayDnatInterfacePolicyArrayInput` via:
//
//	AviatrixGatewayDnatInterfacePolicyArray{ AviatrixGatewayDnatInterfacePolicyArgs{...} }
type AviatrixGatewayDnatInterfacePolicyArrayInput interface {
	pulumi.Input

	ToAviatrixGatewayDnatInterfacePolicyArrayOutput() AviatrixGatewayDnatInterfacePolicyArrayOutput
	ToAviatrixGatewayDnatInterfacePolicyArrayOutputWithContext(context.Context) AviatrixGatewayDnatInterfacePolicyArrayOutput
}

type AviatrixGatewayDnatInterfacePolicyArray []AviatrixGatewayDnatInterfacePolicyInput

func (AviatrixGatewayDnatInterfacePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixGatewayDnatInterfacePolicy)(nil)).Elem()
}

func (i AviatrixGatewayDnatInterfacePolicyArray) ToAviatrixGatewayDnatInterfacePolicyArrayOutput() AviatrixGatewayDnatInterfacePolicyArrayOutput {
	return i.ToAviatrixGatewayDnatInterfacePolicyArrayOutputWithContext(context.Background())
}

func (i AviatrixGatewayDnatInterfacePolicyArray) ToAviatrixGatewayDnatInterfacePolicyArrayOutputWithContext(ctx context.Context) AviatrixGatewayDnatInterfacePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewayDnatInterfacePolicyArrayOutput)
}

type AviatrixGatewayDnatInterfacePolicyOutput struct{ *pulumi.OutputState }

func (AviatrixGatewayDnatInterfacePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixGatewayDnatInterfacePolicy)(nil)).Elem()
}

func (o AviatrixGatewayDnatInterfacePolicyOutput) ToAviatrixGatewayDnatInterfacePolicyOutput() AviatrixGatewayDnatInterfacePolicyOutput {
	return o
}

func (o AviatrixGatewayDnatInterfacePolicyOutput) ToAviatrixGatewayDnatInterfacePolicyOutputWithContext(ctx context.Context) AviatrixGatewayDnatInterfacePolicyOutput {
	return o
}

// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.19.2+.
func (o AviatrixGatewayDnatInterfacePolicyOutput) ApplyRouteEntry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatInterfacePolicy) *bool { return v.ApplyRouteEntry }).(pulumi.BoolPtrOutput)
}

// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
func (o AviatrixGatewayDnatInterfacePolicyOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatInterfacePolicy) *string { return v.Connection }).(pulumi.StringPtrOutput)
}

// This is a rule field that specifies the translated destination IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.
func (o AviatrixGatewayDnatInterfacePolicyOutput) DnatIps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatInterfacePolicy) *string { return v.DnatIps }).(pulumi.StringPtrOutput)
}

// This is a rule field that specifies the translated destination port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.
func (o AviatrixGatewayDnatInterfacePolicyOutput) DnatPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatInterfacePolicy) *string { return v.DnatPort }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewayDnatInterfacePolicyOutput) DstCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatInterfacePolicy) *string { return v.DstCidr }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewayDnatInterfacePolicyOutput) DstPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatInterfacePolicy) *string { return v.DstPort }).(pulumi.StringPtrOutput)
}

// This field specifies which VPC private route table will not be programmed with the default route entry.
func (o AviatrixGatewayDnatInterfacePolicyOutput) ExcludeRtb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatInterfacePolicy) *string { return v.ExcludeRtb }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies output interface where the rule applies. When not specified, this field is not used. Must be empty when `connection` is set.
func (o AviatrixGatewayDnatInterfacePolicyOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatInterfacePolicy) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

// This is a rule field that specifies a tag or mark of a TCP session when all qualifier conditions meet. When not specified, this field is not used.
func (o AviatrixGatewayDnatInterfacePolicyOutput) Mark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatInterfacePolicy) *string { return v.Mark }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a destination port protocol where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewayDnatInterfacePolicyOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatInterfacePolicy) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewayDnatInterfacePolicyOutput) SrcCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatInterfacePolicy) *string { return v.SrcCidr }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
func (o AviatrixGatewayDnatInterfacePolicyOutput) SrcPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewayDnatInterfacePolicy) *string { return v.SrcPort }).(pulumi.StringPtrOutput)
}

type AviatrixGatewayDnatInterfacePolicyArrayOutput struct{ *pulumi.OutputState }

func (AviatrixGatewayDnatInterfacePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixGatewayDnatInterfacePolicy)(nil)).Elem()
}

func (o AviatrixGatewayDnatInterfacePolicyArrayOutput) ToAviatrixGatewayDnatInterfacePolicyArrayOutput() AviatrixGatewayDnatInterfacePolicyArrayOutput {
	return o
}

func (o AviatrixGatewayDnatInterfacePolicyArrayOutput) ToAviatrixGatewayDnatInterfacePolicyArrayOutputWithContext(ctx context.Context) AviatrixGatewayDnatInterfacePolicyArrayOutput {
	return o
}

func (o AviatrixGatewayDnatInterfacePolicyArrayOutput) Index(i pulumi.IntInput) AviatrixGatewayDnatInterfacePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixGatewayDnatInterfacePolicy {
		return vs[0].([]AviatrixGatewayDnatInterfacePolicy)[vs[1].(int)]
	}).(AviatrixGatewayDnatInterfacePolicyOutput)
}

type AviatrixGatewaySnatConnectionPolicy struct {
	// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.21.0+.
	ApplyRouteEntry *bool `pulumi:"applyRouteEntry"`
	// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
	Connection *string `pulumi:"connection"`
	// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
	DstCidr *string `pulumi:"dstCidr"`
	// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
	DstPort *string `pulumi:"dstPort"`
	// This field specifies which VPC private route table will not be programmed with the default route entry.
	ExcludeRtb *string `pulumi:"excludeRtb"`
	// This is a qualifier condition that specifies output interface where the rule applies. When not specified, this field is not used. Must be empty when `connection` is set.
	Interface *string `pulumi:"interface"`
	// This is a qualifier condition that specifies a tag or mark of a TCP session where the rule applies. When not specified, this field is not used.
	Mark *string `pulumi:"mark"`
	// This is a qualifier condition that specifies a destination port protocol where the rule applies. Valid values: 'all', 'tcp', 'udp', 'icmp'. 'Default: 'all'.
	Protocol *string `pulumi:"protocol"`
	// This is a rule field that specifies the changed source IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
	SnatIps *string `pulumi:"snatIps"`
	// This is a rule field that specifies the changed source port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
	SnatPort *string `pulumi:"snatPort"`
	// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
	SrcCidr *string `pulumi:"srcCidr"`
	// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
	SrcPort *string `pulumi:"srcPort"`
}

// AviatrixGatewaySnatConnectionPolicyInput is an input type that accepts AviatrixGatewaySnatConnectionPolicyArgs and AviatrixGatewaySnatConnectionPolicyOutput values.
// You can construct a concrete instance of `AviatrixGatewaySnatConnectionPolicyInput` via:
//
//	AviatrixGatewaySnatConnectionPolicyArgs{...}
type AviatrixGatewaySnatConnectionPolicyInput interface {
	pulumi.Input

	ToAviatrixGatewaySnatConnectionPolicyOutput() AviatrixGatewaySnatConnectionPolicyOutput
	ToAviatrixGatewaySnatConnectionPolicyOutputWithContext(context.Context) AviatrixGatewaySnatConnectionPolicyOutput
}

type AviatrixGatewaySnatConnectionPolicyArgs struct {
	// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.21.0+.
	ApplyRouteEntry pulumi.BoolPtrInput `pulumi:"applyRouteEntry"`
	// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
	Connection pulumi.StringPtrInput `pulumi:"connection"`
	// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
	DstCidr pulumi.StringPtrInput `pulumi:"dstCidr"`
	// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
	DstPort pulumi.StringPtrInput `pulumi:"dstPort"`
	// This field specifies which VPC private route table will not be programmed with the default route entry.
	ExcludeRtb pulumi.StringPtrInput `pulumi:"excludeRtb"`
	// This is a qualifier condition that specifies output interface where the rule applies. When not specified, this field is not used. Must be empty when `connection` is set.
	Interface pulumi.StringPtrInput `pulumi:"interface"`
	// This is a qualifier condition that specifies a tag or mark of a TCP session where the rule applies. When not specified, this field is not used.
	Mark pulumi.StringPtrInput `pulumi:"mark"`
	// This is a qualifier condition that specifies a destination port protocol where the rule applies. Valid values: 'all', 'tcp', 'udp', 'icmp'. 'Default: 'all'.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// This is a rule field that specifies the changed source IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
	SnatIps pulumi.StringPtrInput `pulumi:"snatIps"`
	// This is a rule field that specifies the changed source port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
	SnatPort pulumi.StringPtrInput `pulumi:"snatPort"`
	// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
	SrcCidr pulumi.StringPtrInput `pulumi:"srcCidr"`
	// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
	SrcPort pulumi.StringPtrInput `pulumi:"srcPort"`
}

func (AviatrixGatewaySnatConnectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixGatewaySnatConnectionPolicy)(nil)).Elem()
}

func (i AviatrixGatewaySnatConnectionPolicyArgs) ToAviatrixGatewaySnatConnectionPolicyOutput() AviatrixGatewaySnatConnectionPolicyOutput {
	return i.ToAviatrixGatewaySnatConnectionPolicyOutputWithContext(context.Background())
}

func (i AviatrixGatewaySnatConnectionPolicyArgs) ToAviatrixGatewaySnatConnectionPolicyOutputWithContext(ctx context.Context) AviatrixGatewaySnatConnectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewaySnatConnectionPolicyOutput)
}

// AviatrixGatewaySnatConnectionPolicyArrayInput is an input type that accepts AviatrixGatewaySnatConnectionPolicyArray and AviatrixGatewaySnatConnectionPolicyArrayOutput values.
// You can construct a concrete instance of `AviatrixGatewaySnatConnectionPolicyArrayInput` via:
//
//	AviatrixGatewaySnatConnectionPolicyArray{ AviatrixGatewaySnatConnectionPolicyArgs{...} }
type AviatrixGatewaySnatConnectionPolicyArrayInput interface {
	pulumi.Input

	ToAviatrixGatewaySnatConnectionPolicyArrayOutput() AviatrixGatewaySnatConnectionPolicyArrayOutput
	ToAviatrixGatewaySnatConnectionPolicyArrayOutputWithContext(context.Context) AviatrixGatewaySnatConnectionPolicyArrayOutput
}

type AviatrixGatewaySnatConnectionPolicyArray []AviatrixGatewaySnatConnectionPolicyInput

func (AviatrixGatewaySnatConnectionPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixGatewaySnatConnectionPolicy)(nil)).Elem()
}

func (i AviatrixGatewaySnatConnectionPolicyArray) ToAviatrixGatewaySnatConnectionPolicyArrayOutput() AviatrixGatewaySnatConnectionPolicyArrayOutput {
	return i.ToAviatrixGatewaySnatConnectionPolicyArrayOutputWithContext(context.Background())
}

func (i AviatrixGatewaySnatConnectionPolicyArray) ToAviatrixGatewaySnatConnectionPolicyArrayOutputWithContext(ctx context.Context) AviatrixGatewaySnatConnectionPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewaySnatConnectionPolicyArrayOutput)
}

type AviatrixGatewaySnatConnectionPolicyOutput struct{ *pulumi.OutputState }

func (AviatrixGatewaySnatConnectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixGatewaySnatConnectionPolicy)(nil)).Elem()
}

func (o AviatrixGatewaySnatConnectionPolicyOutput) ToAviatrixGatewaySnatConnectionPolicyOutput() AviatrixGatewaySnatConnectionPolicyOutput {
	return o
}

func (o AviatrixGatewaySnatConnectionPolicyOutput) ToAviatrixGatewaySnatConnectionPolicyOutputWithContext(ctx context.Context) AviatrixGatewaySnatConnectionPolicyOutput {
	return o
}

// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.21.0+.
func (o AviatrixGatewaySnatConnectionPolicyOutput) ApplyRouteEntry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatConnectionPolicy) *bool { return v.ApplyRouteEntry }).(pulumi.BoolPtrOutput)
}

// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
func (o AviatrixGatewaySnatConnectionPolicyOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatConnectionPolicy) *string { return v.Connection }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewaySnatConnectionPolicyOutput) DstCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatConnectionPolicy) *string { return v.DstCidr }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewaySnatConnectionPolicyOutput) DstPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatConnectionPolicy) *string { return v.DstPort }).(pulumi.StringPtrOutput)
}

// This field specifies which VPC private route table will not be programmed with the default route entry.
func (o AviatrixGatewaySnatConnectionPolicyOutput) ExcludeRtb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatConnectionPolicy) *string { return v.ExcludeRtb }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies output interface where the rule applies. When not specified, this field is not used. Must be empty when `connection` is set.
func (o AviatrixGatewaySnatConnectionPolicyOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatConnectionPolicy) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a tag or mark of a TCP session where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewaySnatConnectionPolicyOutput) Mark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatConnectionPolicy) *string { return v.Mark }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a destination port protocol where the rule applies. Valid values: 'all', 'tcp', 'udp', 'icmp'. 'Default: 'all'.
func (o AviatrixGatewaySnatConnectionPolicyOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatConnectionPolicy) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// This is a rule field that specifies the changed source IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
func (o AviatrixGatewaySnatConnectionPolicyOutput) SnatIps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatConnectionPolicy) *string { return v.SnatIps }).(pulumi.StringPtrOutput)
}

// This is a rule field that specifies the changed source port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
func (o AviatrixGatewaySnatConnectionPolicyOutput) SnatPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatConnectionPolicy) *string { return v.SnatPort }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewaySnatConnectionPolicyOutput) SrcCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatConnectionPolicy) *string { return v.SrcCidr }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
func (o AviatrixGatewaySnatConnectionPolicyOutput) SrcPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatConnectionPolicy) *string { return v.SrcPort }).(pulumi.StringPtrOutput)
}

type AviatrixGatewaySnatConnectionPolicyArrayOutput struct{ *pulumi.OutputState }

func (AviatrixGatewaySnatConnectionPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixGatewaySnatConnectionPolicy)(nil)).Elem()
}

func (o AviatrixGatewaySnatConnectionPolicyArrayOutput) ToAviatrixGatewaySnatConnectionPolicyArrayOutput() AviatrixGatewaySnatConnectionPolicyArrayOutput {
	return o
}

func (o AviatrixGatewaySnatConnectionPolicyArrayOutput) ToAviatrixGatewaySnatConnectionPolicyArrayOutputWithContext(ctx context.Context) AviatrixGatewaySnatConnectionPolicyArrayOutput {
	return o
}

func (o AviatrixGatewaySnatConnectionPolicyArrayOutput) Index(i pulumi.IntInput) AviatrixGatewaySnatConnectionPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixGatewaySnatConnectionPolicy {
		return vs[0].([]AviatrixGatewaySnatConnectionPolicy)[vs[1].(int)]
	}).(AviatrixGatewaySnatConnectionPolicyOutput)
}

type AviatrixGatewaySnatInterfacePolicy struct {
	// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.21.0+.
	ApplyRouteEntry *bool `pulumi:"applyRouteEntry"`
	// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
	Connection *string `pulumi:"connection"`
	// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
	DstCidr *string `pulumi:"dstCidr"`
	// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
	DstPort *string `pulumi:"dstPort"`
	// This field specifies which VPC private route table will not be programmed with the default route entry.
	ExcludeRtb *string `pulumi:"excludeRtb"`
	// This is a qualifier condition that specifies output interface where the rule applies. When not specified, this field is not used. Must be empty when `connection` is set.
	Interface *string `pulumi:"interface"`
	// This is a qualifier condition that specifies a tag or mark of a TCP session where the rule applies. When not specified, this field is not used.
	Mark *string `pulumi:"mark"`
	// This is a qualifier condition that specifies a destination port protocol where the rule applies. Valid values: 'all', 'tcp', 'udp', 'icmp'. 'Default: 'all'.
	Protocol *string `pulumi:"protocol"`
	// This is a rule field that specifies the changed source IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
	SnatIps *string `pulumi:"snatIps"`
	// This is a rule field that specifies the changed source port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
	SnatPort *string `pulumi:"snatPort"`
	// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
	SrcCidr *string `pulumi:"srcCidr"`
	// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
	SrcPort *string `pulumi:"srcPort"`
}

// AviatrixGatewaySnatInterfacePolicyInput is an input type that accepts AviatrixGatewaySnatInterfacePolicyArgs and AviatrixGatewaySnatInterfacePolicyOutput values.
// You can construct a concrete instance of `AviatrixGatewaySnatInterfacePolicyInput` via:
//
//	AviatrixGatewaySnatInterfacePolicyArgs{...}
type AviatrixGatewaySnatInterfacePolicyInput interface {
	pulumi.Input

	ToAviatrixGatewaySnatInterfacePolicyOutput() AviatrixGatewaySnatInterfacePolicyOutput
	ToAviatrixGatewaySnatInterfacePolicyOutputWithContext(context.Context) AviatrixGatewaySnatInterfacePolicyOutput
}

type AviatrixGatewaySnatInterfacePolicyArgs struct {
	// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.21.0+.
	ApplyRouteEntry pulumi.BoolPtrInput `pulumi:"applyRouteEntry"`
	// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
	Connection pulumi.StringPtrInput `pulumi:"connection"`
	// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
	DstCidr pulumi.StringPtrInput `pulumi:"dstCidr"`
	// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
	DstPort pulumi.StringPtrInput `pulumi:"dstPort"`
	// This field specifies which VPC private route table will not be programmed with the default route entry.
	ExcludeRtb pulumi.StringPtrInput `pulumi:"excludeRtb"`
	// This is a qualifier condition that specifies output interface where the rule applies. When not specified, this field is not used. Must be empty when `connection` is set.
	Interface pulumi.StringPtrInput `pulumi:"interface"`
	// This is a qualifier condition that specifies a tag or mark of a TCP session where the rule applies. When not specified, this field is not used.
	Mark pulumi.StringPtrInput `pulumi:"mark"`
	// This is a qualifier condition that specifies a destination port protocol where the rule applies. Valid values: 'all', 'tcp', 'udp', 'icmp'. 'Default: 'all'.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// This is a rule field that specifies the changed source IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
	SnatIps pulumi.StringPtrInput `pulumi:"snatIps"`
	// This is a rule field that specifies the changed source port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
	SnatPort pulumi.StringPtrInput `pulumi:"snatPort"`
	// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
	SrcCidr pulumi.StringPtrInput `pulumi:"srcCidr"`
	// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
	SrcPort pulumi.StringPtrInput `pulumi:"srcPort"`
}

func (AviatrixGatewaySnatInterfacePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixGatewaySnatInterfacePolicy)(nil)).Elem()
}

func (i AviatrixGatewaySnatInterfacePolicyArgs) ToAviatrixGatewaySnatInterfacePolicyOutput() AviatrixGatewaySnatInterfacePolicyOutput {
	return i.ToAviatrixGatewaySnatInterfacePolicyOutputWithContext(context.Background())
}

func (i AviatrixGatewaySnatInterfacePolicyArgs) ToAviatrixGatewaySnatInterfacePolicyOutputWithContext(ctx context.Context) AviatrixGatewaySnatInterfacePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewaySnatInterfacePolicyOutput)
}

// AviatrixGatewaySnatInterfacePolicyArrayInput is an input type that accepts AviatrixGatewaySnatInterfacePolicyArray and AviatrixGatewaySnatInterfacePolicyArrayOutput values.
// You can construct a concrete instance of `AviatrixGatewaySnatInterfacePolicyArrayInput` via:
//
//	AviatrixGatewaySnatInterfacePolicyArray{ AviatrixGatewaySnatInterfacePolicyArgs{...} }
type AviatrixGatewaySnatInterfacePolicyArrayInput interface {
	pulumi.Input

	ToAviatrixGatewaySnatInterfacePolicyArrayOutput() AviatrixGatewaySnatInterfacePolicyArrayOutput
	ToAviatrixGatewaySnatInterfacePolicyArrayOutputWithContext(context.Context) AviatrixGatewaySnatInterfacePolicyArrayOutput
}

type AviatrixGatewaySnatInterfacePolicyArray []AviatrixGatewaySnatInterfacePolicyInput

func (AviatrixGatewaySnatInterfacePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixGatewaySnatInterfacePolicy)(nil)).Elem()
}

func (i AviatrixGatewaySnatInterfacePolicyArray) ToAviatrixGatewaySnatInterfacePolicyArrayOutput() AviatrixGatewaySnatInterfacePolicyArrayOutput {
	return i.ToAviatrixGatewaySnatInterfacePolicyArrayOutputWithContext(context.Background())
}

func (i AviatrixGatewaySnatInterfacePolicyArray) ToAviatrixGatewaySnatInterfacePolicyArrayOutputWithContext(ctx context.Context) AviatrixGatewaySnatInterfacePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewaySnatInterfacePolicyArrayOutput)
}

type AviatrixGatewaySnatInterfacePolicyOutput struct{ *pulumi.OutputState }

func (AviatrixGatewaySnatInterfacePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixGatewaySnatInterfacePolicy)(nil)).Elem()
}

func (o AviatrixGatewaySnatInterfacePolicyOutput) ToAviatrixGatewaySnatInterfacePolicyOutput() AviatrixGatewaySnatInterfacePolicyOutput {
	return o
}

func (o AviatrixGatewaySnatInterfacePolicyOutput) ToAviatrixGatewaySnatInterfacePolicyOutputWithContext(ctx context.Context) AviatrixGatewaySnatInterfacePolicyOutput {
	return o
}

// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.21.0+.
func (o AviatrixGatewaySnatInterfacePolicyOutput) ApplyRouteEntry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatInterfacePolicy) *bool { return v.ApplyRouteEntry }).(pulumi.BoolPtrOutput)
}

// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
func (o AviatrixGatewaySnatInterfacePolicyOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatInterfacePolicy) *string { return v.Connection }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewaySnatInterfacePolicyOutput) DstCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatInterfacePolicy) *string { return v.DstCidr }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewaySnatInterfacePolicyOutput) DstPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatInterfacePolicy) *string { return v.DstPort }).(pulumi.StringPtrOutput)
}

// This field specifies which VPC private route table will not be programmed with the default route entry.
func (o AviatrixGatewaySnatInterfacePolicyOutput) ExcludeRtb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatInterfacePolicy) *string { return v.ExcludeRtb }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies output interface where the rule applies. When not specified, this field is not used. Must be empty when `connection` is set.
func (o AviatrixGatewaySnatInterfacePolicyOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatInterfacePolicy) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a tag or mark of a TCP session where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewaySnatInterfacePolicyOutput) Mark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatInterfacePolicy) *string { return v.Mark }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a destination port protocol where the rule applies. Valid values: 'all', 'tcp', 'udp', 'icmp'. 'Default: 'all'.
func (o AviatrixGatewaySnatInterfacePolicyOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatInterfacePolicy) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// This is a rule field that specifies the changed source IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
func (o AviatrixGatewaySnatInterfacePolicyOutput) SnatIps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatInterfacePolicy) *string { return v.SnatIps }).(pulumi.StringPtrOutput)
}

// This is a rule field that specifies the changed source port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
func (o AviatrixGatewaySnatInterfacePolicyOutput) SnatPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatInterfacePolicy) *string { return v.SnatPort }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewaySnatInterfacePolicyOutput) SrcCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatInterfacePolicy) *string { return v.SrcCidr }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
func (o AviatrixGatewaySnatInterfacePolicyOutput) SrcPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatInterfacePolicy) *string { return v.SrcPort }).(pulumi.StringPtrOutput)
}

type AviatrixGatewaySnatInterfacePolicyArrayOutput struct{ *pulumi.OutputState }

func (AviatrixGatewaySnatInterfacePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixGatewaySnatInterfacePolicy)(nil)).Elem()
}

func (o AviatrixGatewaySnatInterfacePolicyArrayOutput) ToAviatrixGatewaySnatInterfacePolicyArrayOutput() AviatrixGatewaySnatInterfacePolicyArrayOutput {
	return o
}

func (o AviatrixGatewaySnatInterfacePolicyArrayOutput) ToAviatrixGatewaySnatInterfacePolicyArrayOutputWithContext(ctx context.Context) AviatrixGatewaySnatInterfacePolicyArrayOutput {
	return o
}

func (o AviatrixGatewaySnatInterfacePolicyArrayOutput) Index(i pulumi.IntInput) AviatrixGatewaySnatInterfacePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixGatewaySnatInterfacePolicy {
		return vs[0].([]AviatrixGatewaySnatInterfacePolicy)[vs[1].(int)]
	}).(AviatrixGatewaySnatInterfacePolicyOutput)
}

type AviatrixGatewaySnatSnatPolicy struct {
	// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.21.0+.
	ApplyRouteEntry *bool `pulumi:"applyRouteEntry"`
	// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
	Connection *string `pulumi:"connection"`
	// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
	DstCidr *string `pulumi:"dstCidr"`
	// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
	DstPort *string `pulumi:"dstPort"`
	// This field specifies which VPC private route table will not be programmed with the default route entry.
	ExcludeRtb *string `pulumi:"excludeRtb"`
	// This is a qualifier condition that specifies output interface where the rule applies. When not specified, this field is not used. Must be empty when `connection` is set.
	Interface *string `pulumi:"interface"`
	// This is a qualifier condition that specifies a tag or mark of a TCP session where the rule applies. When not specified, this field is not used.
	Mark *string `pulumi:"mark"`
	// This is a qualifier condition that specifies a destination port protocol where the rule applies. Valid values: 'all', 'tcp', 'udp', 'icmp'. 'Default: 'all'.
	Protocol *string `pulumi:"protocol"`
	// This is a rule field that specifies the changed source IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
	SnatIps *string `pulumi:"snatIps"`
	// This is a rule field that specifies the changed source port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
	SnatPort *string `pulumi:"snatPort"`
	// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
	SrcCidr *string `pulumi:"srcCidr"`
	// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
	SrcPort *string `pulumi:"srcPort"`
}

// AviatrixGatewaySnatSnatPolicyInput is an input type that accepts AviatrixGatewaySnatSnatPolicyArgs and AviatrixGatewaySnatSnatPolicyOutput values.
// You can construct a concrete instance of `AviatrixGatewaySnatSnatPolicyInput` via:
//
//	AviatrixGatewaySnatSnatPolicyArgs{...}
type AviatrixGatewaySnatSnatPolicyInput interface {
	pulumi.Input

	ToAviatrixGatewaySnatSnatPolicyOutput() AviatrixGatewaySnatSnatPolicyOutput
	ToAviatrixGatewaySnatSnatPolicyOutputWithContext(context.Context) AviatrixGatewaySnatSnatPolicyOutput
}

type AviatrixGatewaySnatSnatPolicyArgs struct {
	// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.21.0+.
	ApplyRouteEntry pulumi.BoolPtrInput `pulumi:"applyRouteEntry"`
	// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
	Connection pulumi.StringPtrInput `pulumi:"connection"`
	// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
	DstCidr pulumi.StringPtrInput `pulumi:"dstCidr"`
	// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
	DstPort pulumi.StringPtrInput `pulumi:"dstPort"`
	// This field specifies which VPC private route table will not be programmed with the default route entry.
	ExcludeRtb pulumi.StringPtrInput `pulumi:"excludeRtb"`
	// This is a qualifier condition that specifies output interface where the rule applies. When not specified, this field is not used. Must be empty when `connection` is set.
	Interface pulumi.StringPtrInput `pulumi:"interface"`
	// This is a qualifier condition that specifies a tag or mark of a TCP session where the rule applies. When not specified, this field is not used.
	Mark pulumi.StringPtrInput `pulumi:"mark"`
	// This is a qualifier condition that specifies a destination port protocol where the rule applies. Valid values: 'all', 'tcp', 'udp', 'icmp'. 'Default: 'all'.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// This is a rule field that specifies the changed source IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
	SnatIps pulumi.StringPtrInput `pulumi:"snatIps"`
	// This is a rule field that specifies the changed source port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
	SnatPort pulumi.StringPtrInput `pulumi:"snatPort"`
	// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
	SrcCidr pulumi.StringPtrInput `pulumi:"srcCidr"`
	// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
	SrcPort pulumi.StringPtrInput `pulumi:"srcPort"`
}

func (AviatrixGatewaySnatSnatPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixGatewaySnatSnatPolicy)(nil)).Elem()
}

func (i AviatrixGatewaySnatSnatPolicyArgs) ToAviatrixGatewaySnatSnatPolicyOutput() AviatrixGatewaySnatSnatPolicyOutput {
	return i.ToAviatrixGatewaySnatSnatPolicyOutputWithContext(context.Background())
}

func (i AviatrixGatewaySnatSnatPolicyArgs) ToAviatrixGatewaySnatSnatPolicyOutputWithContext(ctx context.Context) AviatrixGatewaySnatSnatPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewaySnatSnatPolicyOutput)
}

// AviatrixGatewaySnatSnatPolicyArrayInput is an input type that accepts AviatrixGatewaySnatSnatPolicyArray and AviatrixGatewaySnatSnatPolicyArrayOutput values.
// You can construct a concrete instance of `AviatrixGatewaySnatSnatPolicyArrayInput` via:
//
//	AviatrixGatewaySnatSnatPolicyArray{ AviatrixGatewaySnatSnatPolicyArgs{...} }
type AviatrixGatewaySnatSnatPolicyArrayInput interface {
	pulumi.Input

	ToAviatrixGatewaySnatSnatPolicyArrayOutput() AviatrixGatewaySnatSnatPolicyArrayOutput
	ToAviatrixGatewaySnatSnatPolicyArrayOutputWithContext(context.Context) AviatrixGatewaySnatSnatPolicyArrayOutput
}

type AviatrixGatewaySnatSnatPolicyArray []AviatrixGatewaySnatSnatPolicyInput

func (AviatrixGatewaySnatSnatPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixGatewaySnatSnatPolicy)(nil)).Elem()
}

func (i AviatrixGatewaySnatSnatPolicyArray) ToAviatrixGatewaySnatSnatPolicyArrayOutput() AviatrixGatewaySnatSnatPolicyArrayOutput {
	return i.ToAviatrixGatewaySnatSnatPolicyArrayOutputWithContext(context.Background())
}

func (i AviatrixGatewaySnatSnatPolicyArray) ToAviatrixGatewaySnatSnatPolicyArrayOutputWithContext(ctx context.Context) AviatrixGatewaySnatSnatPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewaySnatSnatPolicyArrayOutput)
}

type AviatrixGatewaySnatSnatPolicyOutput struct{ *pulumi.OutputState }

func (AviatrixGatewaySnatSnatPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixGatewaySnatSnatPolicy)(nil)).Elem()
}

func (o AviatrixGatewaySnatSnatPolicyOutput) ToAviatrixGatewaySnatSnatPolicyOutput() AviatrixGatewaySnatSnatPolicyOutput {
	return o
}

func (o AviatrixGatewaySnatSnatPolicyOutput) ToAviatrixGatewaySnatSnatPolicyOutputWithContext(ctx context.Context) AviatrixGatewaySnatSnatPolicyOutput {
	return o
}

// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.21.0+.
func (o AviatrixGatewaySnatSnatPolicyOutput) ApplyRouteEntry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatSnatPolicy) *bool { return v.ApplyRouteEntry }).(pulumi.BoolPtrOutput)
}

// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
func (o AviatrixGatewaySnatSnatPolicyOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatSnatPolicy) *string { return v.Connection }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewaySnatSnatPolicyOutput) DstCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatSnatPolicy) *string { return v.DstCidr }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewaySnatSnatPolicyOutput) DstPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatSnatPolicy) *string { return v.DstPort }).(pulumi.StringPtrOutput)
}

// This field specifies which VPC private route table will not be programmed with the default route entry.
func (o AviatrixGatewaySnatSnatPolicyOutput) ExcludeRtb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatSnatPolicy) *string { return v.ExcludeRtb }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies output interface where the rule applies. When not specified, this field is not used. Must be empty when `connection` is set.
func (o AviatrixGatewaySnatSnatPolicyOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatSnatPolicy) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a tag or mark of a TCP session where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewaySnatSnatPolicyOutput) Mark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatSnatPolicy) *string { return v.Mark }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a destination port protocol where the rule applies. Valid values: 'all', 'tcp', 'udp', 'icmp'. 'Default: 'all'.
func (o AviatrixGatewaySnatSnatPolicyOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatSnatPolicy) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// This is a rule field that specifies the changed source IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
func (o AviatrixGatewaySnatSnatPolicyOutput) SnatIps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatSnatPolicy) *string { return v.SnatIps }).(pulumi.StringPtrOutput)
}

// This is a rule field that specifies the changed source port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
func (o AviatrixGatewaySnatSnatPolicyOutput) SnatPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatSnatPolicy) *string { return v.SnatPort }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
func (o AviatrixGatewaySnatSnatPolicyOutput) SrcCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatSnatPolicy) *string { return v.SrcCidr }).(pulumi.StringPtrOutput)
}

// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
func (o AviatrixGatewaySnatSnatPolicyOutput) SrcPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixGatewaySnatSnatPolicy) *string { return v.SrcPort }).(pulumi.StringPtrOutput)
}

type AviatrixGatewaySnatSnatPolicyArrayOutput struct{ *pulumi.OutputState }

func (AviatrixGatewaySnatSnatPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixGatewaySnatSnatPolicy)(nil)).Elem()
}

func (o AviatrixGatewaySnatSnatPolicyArrayOutput) ToAviatrixGatewaySnatSnatPolicyArrayOutput() AviatrixGatewaySnatSnatPolicyArrayOutput {
	return o
}

func (o AviatrixGatewaySnatSnatPolicyArrayOutput) ToAviatrixGatewaySnatSnatPolicyArrayOutputWithContext(ctx context.Context) AviatrixGatewaySnatSnatPolicyArrayOutput {
	return o
}

func (o AviatrixGatewaySnatSnatPolicyArrayOutput) Index(i pulumi.IntInput) AviatrixGatewaySnatSnatPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixGatewaySnatSnatPolicy {
		return vs[0].([]AviatrixGatewaySnatSnatPolicy)[vs[1].(int)]
	}).(AviatrixGatewaySnatSnatPolicyOutput)
}

type AviatrixMicrosegPolicyListPolicy struct {
	// Action for the policy. Must be one of PERMIT or DENY.
	Action string `pulumi:"action"`
	// List of App Domain UUIDs for the destination for the policy.
	DstAppDomains []string `pulumi:"dstAppDomains"`
	// Whether to enable logging for packets that match the policy. Type: Boolean.
	Logging *bool `pulumi:"logging"`
	// Name of the policy.
	Name string `pulumi:"name"`
	// List of port ranges for the policy. Cannot be used when `protocol` is "ICMP".
	PortRanges []AviatrixMicrosegPolicyListPolicyPortRange `pulumi:"portRanges"`
	// Priority for the policy. Default: 0. Type: Integer.
	Priority *int `pulumi:"priority"`
	// Protocol for the policy. Must be one of TCP, UDP, ICMP or ANY.
	Protocol string `pulumi:"protocol"`
	// List of App Domain UUIDs for the source for the policy.
	SrcAppDomains []string `pulumi:"srcAppDomains"`
	// UUID for the Policy.
	Uuid *string `pulumi:"uuid"`
	// Whether to enforce the policy or only watch packets. If "true" packets are only watched. This allows you to observe if the traffic impacted by this rule causes any inadvertent issues (such as traffic being dropped). Type: Boolean.
	Watch *bool `pulumi:"watch"`
}

// AviatrixMicrosegPolicyListPolicyInput is an input type that accepts AviatrixMicrosegPolicyListPolicyArgs and AviatrixMicrosegPolicyListPolicyOutput values.
// You can construct a concrete instance of `AviatrixMicrosegPolicyListPolicyInput` via:
//
//	AviatrixMicrosegPolicyListPolicyArgs{...}
type AviatrixMicrosegPolicyListPolicyInput interface {
	pulumi.Input

	ToAviatrixMicrosegPolicyListPolicyOutput() AviatrixMicrosegPolicyListPolicyOutput
	ToAviatrixMicrosegPolicyListPolicyOutputWithContext(context.Context) AviatrixMicrosegPolicyListPolicyOutput
}

type AviatrixMicrosegPolicyListPolicyArgs struct {
	// Action for the policy. Must be one of PERMIT or DENY.
	Action pulumi.StringInput `pulumi:"action"`
	// List of App Domain UUIDs for the destination for the policy.
	DstAppDomains pulumi.StringArrayInput `pulumi:"dstAppDomains"`
	// Whether to enable logging for packets that match the policy. Type: Boolean.
	Logging pulumi.BoolPtrInput `pulumi:"logging"`
	// Name of the policy.
	Name pulumi.StringInput `pulumi:"name"`
	// List of port ranges for the policy. Cannot be used when `protocol` is "ICMP".
	PortRanges AviatrixMicrosegPolicyListPolicyPortRangeArrayInput `pulumi:"portRanges"`
	// Priority for the policy. Default: 0. Type: Integer.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Protocol for the policy. Must be one of TCP, UDP, ICMP or ANY.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// List of App Domain UUIDs for the source for the policy.
	SrcAppDomains pulumi.StringArrayInput `pulumi:"srcAppDomains"`
	// UUID for the Policy.
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
	// Whether to enforce the policy or only watch packets. If "true" packets are only watched. This allows you to observe if the traffic impacted by this rule causes any inadvertent issues (such as traffic being dropped). Type: Boolean.
	Watch pulumi.BoolPtrInput `pulumi:"watch"`
}

func (AviatrixMicrosegPolicyListPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixMicrosegPolicyListPolicy)(nil)).Elem()
}

func (i AviatrixMicrosegPolicyListPolicyArgs) ToAviatrixMicrosegPolicyListPolicyOutput() AviatrixMicrosegPolicyListPolicyOutput {
	return i.ToAviatrixMicrosegPolicyListPolicyOutputWithContext(context.Background())
}

func (i AviatrixMicrosegPolicyListPolicyArgs) ToAviatrixMicrosegPolicyListPolicyOutputWithContext(ctx context.Context) AviatrixMicrosegPolicyListPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixMicrosegPolicyListPolicyOutput)
}

// AviatrixMicrosegPolicyListPolicyArrayInput is an input type that accepts AviatrixMicrosegPolicyListPolicyArray and AviatrixMicrosegPolicyListPolicyArrayOutput values.
// You can construct a concrete instance of `AviatrixMicrosegPolicyListPolicyArrayInput` via:
//
//	AviatrixMicrosegPolicyListPolicyArray{ AviatrixMicrosegPolicyListPolicyArgs{...} }
type AviatrixMicrosegPolicyListPolicyArrayInput interface {
	pulumi.Input

	ToAviatrixMicrosegPolicyListPolicyArrayOutput() AviatrixMicrosegPolicyListPolicyArrayOutput
	ToAviatrixMicrosegPolicyListPolicyArrayOutputWithContext(context.Context) AviatrixMicrosegPolicyListPolicyArrayOutput
}

type AviatrixMicrosegPolicyListPolicyArray []AviatrixMicrosegPolicyListPolicyInput

func (AviatrixMicrosegPolicyListPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixMicrosegPolicyListPolicy)(nil)).Elem()
}

func (i AviatrixMicrosegPolicyListPolicyArray) ToAviatrixMicrosegPolicyListPolicyArrayOutput() AviatrixMicrosegPolicyListPolicyArrayOutput {
	return i.ToAviatrixMicrosegPolicyListPolicyArrayOutputWithContext(context.Background())
}

func (i AviatrixMicrosegPolicyListPolicyArray) ToAviatrixMicrosegPolicyListPolicyArrayOutputWithContext(ctx context.Context) AviatrixMicrosegPolicyListPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixMicrosegPolicyListPolicyArrayOutput)
}

type AviatrixMicrosegPolicyListPolicyOutput struct{ *pulumi.OutputState }

func (AviatrixMicrosegPolicyListPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixMicrosegPolicyListPolicy)(nil)).Elem()
}

func (o AviatrixMicrosegPolicyListPolicyOutput) ToAviatrixMicrosegPolicyListPolicyOutput() AviatrixMicrosegPolicyListPolicyOutput {
	return o
}

func (o AviatrixMicrosegPolicyListPolicyOutput) ToAviatrixMicrosegPolicyListPolicyOutputWithContext(ctx context.Context) AviatrixMicrosegPolicyListPolicyOutput {
	return o
}

// Action for the policy. Must be one of PERMIT or DENY.
func (o AviatrixMicrosegPolicyListPolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixMicrosegPolicyListPolicy) string { return v.Action }).(pulumi.StringOutput)
}

// List of App Domain UUIDs for the destination for the policy.
func (o AviatrixMicrosegPolicyListPolicyOutput) DstAppDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AviatrixMicrosegPolicyListPolicy) []string { return v.DstAppDomains }).(pulumi.StringArrayOutput)
}

// Whether to enable logging for packets that match the policy. Type: Boolean.
func (o AviatrixMicrosegPolicyListPolicyOutput) Logging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AviatrixMicrosegPolicyListPolicy) *bool { return v.Logging }).(pulumi.BoolPtrOutput)
}

// Name of the policy.
func (o AviatrixMicrosegPolicyListPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixMicrosegPolicyListPolicy) string { return v.Name }).(pulumi.StringOutput)
}

// List of port ranges for the policy. Cannot be used when `protocol` is "ICMP".
func (o AviatrixMicrosegPolicyListPolicyOutput) PortRanges() AviatrixMicrosegPolicyListPolicyPortRangeArrayOutput {
	return o.ApplyT(func(v AviatrixMicrosegPolicyListPolicy) []AviatrixMicrosegPolicyListPolicyPortRange {
		return v.PortRanges
	}).(AviatrixMicrosegPolicyListPolicyPortRangeArrayOutput)
}

// Priority for the policy. Default: 0. Type: Integer.
func (o AviatrixMicrosegPolicyListPolicyOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AviatrixMicrosegPolicyListPolicy) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Protocol for the policy. Must be one of TCP, UDP, ICMP or ANY.
func (o AviatrixMicrosegPolicyListPolicyOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixMicrosegPolicyListPolicy) string { return v.Protocol }).(pulumi.StringOutput)
}

// List of App Domain UUIDs for the source for the policy.
func (o AviatrixMicrosegPolicyListPolicyOutput) SrcAppDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AviatrixMicrosegPolicyListPolicy) []string { return v.SrcAppDomains }).(pulumi.StringArrayOutput)
}

// UUID for the Policy.
func (o AviatrixMicrosegPolicyListPolicyOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixMicrosegPolicyListPolicy) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

// Whether to enforce the policy or only watch packets. If "true" packets are only watched. This allows you to observe if the traffic impacted by this rule causes any inadvertent issues (such as traffic being dropped). Type: Boolean.
func (o AviatrixMicrosegPolicyListPolicyOutput) Watch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AviatrixMicrosegPolicyListPolicy) *bool { return v.Watch }).(pulumi.BoolPtrOutput)
}

type AviatrixMicrosegPolicyListPolicyArrayOutput struct{ *pulumi.OutputState }

func (AviatrixMicrosegPolicyListPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixMicrosegPolicyListPolicy)(nil)).Elem()
}

func (o AviatrixMicrosegPolicyListPolicyArrayOutput) ToAviatrixMicrosegPolicyListPolicyArrayOutput() AviatrixMicrosegPolicyListPolicyArrayOutput {
	return o
}

func (o AviatrixMicrosegPolicyListPolicyArrayOutput) ToAviatrixMicrosegPolicyListPolicyArrayOutputWithContext(ctx context.Context) AviatrixMicrosegPolicyListPolicyArrayOutput {
	return o
}

func (o AviatrixMicrosegPolicyListPolicyArrayOutput) Index(i pulumi.IntInput) AviatrixMicrosegPolicyListPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixMicrosegPolicyListPolicy {
		return vs[0].([]AviatrixMicrosegPolicyListPolicy)[vs[1].(int)]
	}).(AviatrixMicrosegPolicyListPolicyOutput)
}

type AviatrixMicrosegPolicyListPolicyPortRange struct {
	// Upper bound for the range of ports. When not set, `lo` is the only port that matches the policy.
	Hi *int `pulumi:"hi"`
	// Lower bound for the range of ports.
	Lo int `pulumi:"lo"`
}

// AviatrixMicrosegPolicyListPolicyPortRangeInput is an input type that accepts AviatrixMicrosegPolicyListPolicyPortRangeArgs and AviatrixMicrosegPolicyListPolicyPortRangeOutput values.
// You can construct a concrete instance of `AviatrixMicrosegPolicyListPolicyPortRangeInput` via:
//
//	AviatrixMicrosegPolicyListPolicyPortRangeArgs{...}
type AviatrixMicrosegPolicyListPolicyPortRangeInput interface {
	pulumi.Input

	ToAviatrixMicrosegPolicyListPolicyPortRangeOutput() AviatrixMicrosegPolicyListPolicyPortRangeOutput
	ToAviatrixMicrosegPolicyListPolicyPortRangeOutputWithContext(context.Context) AviatrixMicrosegPolicyListPolicyPortRangeOutput
}

type AviatrixMicrosegPolicyListPolicyPortRangeArgs struct {
	// Upper bound for the range of ports. When not set, `lo` is the only port that matches the policy.
	Hi pulumi.IntPtrInput `pulumi:"hi"`
	// Lower bound for the range of ports.
	Lo pulumi.IntInput `pulumi:"lo"`
}

func (AviatrixMicrosegPolicyListPolicyPortRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixMicrosegPolicyListPolicyPortRange)(nil)).Elem()
}

func (i AviatrixMicrosegPolicyListPolicyPortRangeArgs) ToAviatrixMicrosegPolicyListPolicyPortRangeOutput() AviatrixMicrosegPolicyListPolicyPortRangeOutput {
	return i.ToAviatrixMicrosegPolicyListPolicyPortRangeOutputWithContext(context.Background())
}

func (i AviatrixMicrosegPolicyListPolicyPortRangeArgs) ToAviatrixMicrosegPolicyListPolicyPortRangeOutputWithContext(ctx context.Context) AviatrixMicrosegPolicyListPolicyPortRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixMicrosegPolicyListPolicyPortRangeOutput)
}

// AviatrixMicrosegPolicyListPolicyPortRangeArrayInput is an input type that accepts AviatrixMicrosegPolicyListPolicyPortRangeArray and AviatrixMicrosegPolicyListPolicyPortRangeArrayOutput values.
// You can construct a concrete instance of `AviatrixMicrosegPolicyListPolicyPortRangeArrayInput` via:
//
//	AviatrixMicrosegPolicyListPolicyPortRangeArray{ AviatrixMicrosegPolicyListPolicyPortRangeArgs{...} }
type AviatrixMicrosegPolicyListPolicyPortRangeArrayInput interface {
	pulumi.Input

	ToAviatrixMicrosegPolicyListPolicyPortRangeArrayOutput() AviatrixMicrosegPolicyListPolicyPortRangeArrayOutput
	ToAviatrixMicrosegPolicyListPolicyPortRangeArrayOutputWithContext(context.Context) AviatrixMicrosegPolicyListPolicyPortRangeArrayOutput
}

type AviatrixMicrosegPolicyListPolicyPortRangeArray []AviatrixMicrosegPolicyListPolicyPortRangeInput

func (AviatrixMicrosegPolicyListPolicyPortRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixMicrosegPolicyListPolicyPortRange)(nil)).Elem()
}

func (i AviatrixMicrosegPolicyListPolicyPortRangeArray) ToAviatrixMicrosegPolicyListPolicyPortRangeArrayOutput() AviatrixMicrosegPolicyListPolicyPortRangeArrayOutput {
	return i.ToAviatrixMicrosegPolicyListPolicyPortRangeArrayOutputWithContext(context.Background())
}

func (i AviatrixMicrosegPolicyListPolicyPortRangeArray) ToAviatrixMicrosegPolicyListPolicyPortRangeArrayOutputWithContext(ctx context.Context) AviatrixMicrosegPolicyListPolicyPortRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixMicrosegPolicyListPolicyPortRangeArrayOutput)
}

type AviatrixMicrosegPolicyListPolicyPortRangeOutput struct{ *pulumi.OutputState }

func (AviatrixMicrosegPolicyListPolicyPortRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixMicrosegPolicyListPolicyPortRange)(nil)).Elem()
}

func (o AviatrixMicrosegPolicyListPolicyPortRangeOutput) ToAviatrixMicrosegPolicyListPolicyPortRangeOutput() AviatrixMicrosegPolicyListPolicyPortRangeOutput {
	return o
}

func (o AviatrixMicrosegPolicyListPolicyPortRangeOutput) ToAviatrixMicrosegPolicyListPolicyPortRangeOutputWithContext(ctx context.Context) AviatrixMicrosegPolicyListPolicyPortRangeOutput {
	return o
}

// Upper bound for the range of ports. When not set, `lo` is the only port that matches the policy.
func (o AviatrixMicrosegPolicyListPolicyPortRangeOutput) Hi() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AviatrixMicrosegPolicyListPolicyPortRange) *int { return v.Hi }).(pulumi.IntPtrOutput)
}

// Lower bound for the range of ports.
func (o AviatrixMicrosegPolicyListPolicyPortRangeOutput) Lo() pulumi.IntOutput {
	return o.ApplyT(func(v AviatrixMicrosegPolicyListPolicyPortRange) int { return v.Lo }).(pulumi.IntOutput)
}

type AviatrixMicrosegPolicyListPolicyPortRangeArrayOutput struct{ *pulumi.OutputState }

func (AviatrixMicrosegPolicyListPolicyPortRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixMicrosegPolicyListPolicyPortRange)(nil)).Elem()
}

func (o AviatrixMicrosegPolicyListPolicyPortRangeArrayOutput) ToAviatrixMicrosegPolicyListPolicyPortRangeArrayOutput() AviatrixMicrosegPolicyListPolicyPortRangeArrayOutput {
	return o
}

func (o AviatrixMicrosegPolicyListPolicyPortRangeArrayOutput) ToAviatrixMicrosegPolicyListPolicyPortRangeArrayOutputWithContext(ctx context.Context) AviatrixMicrosegPolicyListPolicyPortRangeArrayOutput {
	return o
}

func (o AviatrixMicrosegPolicyListPolicyPortRangeArrayOutput) Index(i pulumi.IntInput) AviatrixMicrosegPolicyListPolicyPortRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixMicrosegPolicyListPolicyPortRange {
		return vs[0].([]AviatrixMicrosegPolicyListPolicyPortRange)[vs[1].(int)]
	}).(AviatrixMicrosegPolicyListPolicyPortRangeOutput)
}

type AviatrixPrivateModeLbProxy struct {
	// Instance ID of the proxy.
	InstanceId string `pulumi:"instanceId"`
	// VPC ID of the proxy.
	VpcId string `pulumi:"vpcId"`
}

// AviatrixPrivateModeLbProxyInput is an input type that accepts AviatrixPrivateModeLbProxyArgs and AviatrixPrivateModeLbProxyOutput values.
// You can construct a concrete instance of `AviatrixPrivateModeLbProxyInput` via:
//
//	AviatrixPrivateModeLbProxyArgs{...}
type AviatrixPrivateModeLbProxyInput interface {
	pulumi.Input

	ToAviatrixPrivateModeLbProxyOutput() AviatrixPrivateModeLbProxyOutput
	ToAviatrixPrivateModeLbProxyOutputWithContext(context.Context) AviatrixPrivateModeLbProxyOutput
}

type AviatrixPrivateModeLbProxyArgs struct {
	// Instance ID of the proxy.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// VPC ID of the proxy.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (AviatrixPrivateModeLbProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixPrivateModeLbProxy)(nil)).Elem()
}

func (i AviatrixPrivateModeLbProxyArgs) ToAviatrixPrivateModeLbProxyOutput() AviatrixPrivateModeLbProxyOutput {
	return i.ToAviatrixPrivateModeLbProxyOutputWithContext(context.Background())
}

func (i AviatrixPrivateModeLbProxyArgs) ToAviatrixPrivateModeLbProxyOutputWithContext(ctx context.Context) AviatrixPrivateModeLbProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixPrivateModeLbProxyOutput)
}

// AviatrixPrivateModeLbProxyArrayInput is an input type that accepts AviatrixPrivateModeLbProxyArray and AviatrixPrivateModeLbProxyArrayOutput values.
// You can construct a concrete instance of `AviatrixPrivateModeLbProxyArrayInput` via:
//
//	AviatrixPrivateModeLbProxyArray{ AviatrixPrivateModeLbProxyArgs{...} }
type AviatrixPrivateModeLbProxyArrayInput interface {
	pulumi.Input

	ToAviatrixPrivateModeLbProxyArrayOutput() AviatrixPrivateModeLbProxyArrayOutput
	ToAviatrixPrivateModeLbProxyArrayOutputWithContext(context.Context) AviatrixPrivateModeLbProxyArrayOutput
}

type AviatrixPrivateModeLbProxyArray []AviatrixPrivateModeLbProxyInput

func (AviatrixPrivateModeLbProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixPrivateModeLbProxy)(nil)).Elem()
}

func (i AviatrixPrivateModeLbProxyArray) ToAviatrixPrivateModeLbProxyArrayOutput() AviatrixPrivateModeLbProxyArrayOutput {
	return i.ToAviatrixPrivateModeLbProxyArrayOutputWithContext(context.Background())
}

func (i AviatrixPrivateModeLbProxyArray) ToAviatrixPrivateModeLbProxyArrayOutputWithContext(ctx context.Context) AviatrixPrivateModeLbProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixPrivateModeLbProxyArrayOutput)
}

type AviatrixPrivateModeLbProxyOutput struct{ *pulumi.OutputState }

func (AviatrixPrivateModeLbProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixPrivateModeLbProxy)(nil)).Elem()
}

func (o AviatrixPrivateModeLbProxyOutput) ToAviatrixPrivateModeLbProxyOutput() AviatrixPrivateModeLbProxyOutput {
	return o
}

func (o AviatrixPrivateModeLbProxyOutput) ToAviatrixPrivateModeLbProxyOutputWithContext(ctx context.Context) AviatrixPrivateModeLbProxyOutput {
	return o
}

// Instance ID of the proxy.
func (o AviatrixPrivateModeLbProxyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixPrivateModeLbProxy) string { return v.InstanceId }).(pulumi.StringOutput)
}

// VPC ID of the proxy.
func (o AviatrixPrivateModeLbProxyOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixPrivateModeLbProxy) string { return v.VpcId }).(pulumi.StringOutput)
}

type AviatrixPrivateModeLbProxyArrayOutput struct{ *pulumi.OutputState }

func (AviatrixPrivateModeLbProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixPrivateModeLbProxy)(nil)).Elem()
}

func (o AviatrixPrivateModeLbProxyArrayOutput) ToAviatrixPrivateModeLbProxyArrayOutput() AviatrixPrivateModeLbProxyArrayOutput {
	return o
}

func (o AviatrixPrivateModeLbProxyArrayOutput) ToAviatrixPrivateModeLbProxyArrayOutputWithContext(ctx context.Context) AviatrixPrivateModeLbProxyArrayOutput {
	return o
}

func (o AviatrixPrivateModeLbProxyArrayOutput) Index(i pulumi.IntInput) AviatrixPrivateModeLbProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixPrivateModeLbProxy {
		return vs[0].([]AviatrixPrivateModeLbProxy)[vs[1].(int)]
	}).(AviatrixPrivateModeLbProxyOutput)
}

type AviatrixSite2CloudCaCertTagCaCertificate struct {
	// Content of cert certificate to create only one cert. One CA cert only per file.
	CertContent string `pulumi:"certContent"`
	// Common name of created cert.
	CommonName *string `pulumi:"commonName"`
	// Expiration time of created cert.
	ExpirationTime *string `pulumi:"expirationTime"`
	// Unique id of created cert.
	Id *string `pulumi:"id"`
	// Issuer name of created cert.
	IssuerName *string `pulumi:"issuerName"`
	// Unique serial of created cert.
	UniqueSerial *string `pulumi:"uniqueSerial"`
}

// AviatrixSite2CloudCaCertTagCaCertificateInput is an input type that accepts AviatrixSite2CloudCaCertTagCaCertificateArgs and AviatrixSite2CloudCaCertTagCaCertificateOutput values.
// You can construct a concrete instance of `AviatrixSite2CloudCaCertTagCaCertificateInput` via:
//
//	AviatrixSite2CloudCaCertTagCaCertificateArgs{...}
type AviatrixSite2CloudCaCertTagCaCertificateInput interface {
	pulumi.Input

	ToAviatrixSite2CloudCaCertTagCaCertificateOutput() AviatrixSite2CloudCaCertTagCaCertificateOutput
	ToAviatrixSite2CloudCaCertTagCaCertificateOutputWithContext(context.Context) AviatrixSite2CloudCaCertTagCaCertificateOutput
}

type AviatrixSite2CloudCaCertTagCaCertificateArgs struct {
	// Content of cert certificate to create only one cert. One CA cert only per file.
	CertContent pulumi.StringInput `pulumi:"certContent"`
	// Common name of created cert.
	CommonName pulumi.StringPtrInput `pulumi:"commonName"`
	// Expiration time of created cert.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
	// Unique id of created cert.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Issuer name of created cert.
	IssuerName pulumi.StringPtrInput `pulumi:"issuerName"`
	// Unique serial of created cert.
	UniqueSerial pulumi.StringPtrInput `pulumi:"uniqueSerial"`
}

func (AviatrixSite2CloudCaCertTagCaCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixSite2CloudCaCertTagCaCertificate)(nil)).Elem()
}

func (i AviatrixSite2CloudCaCertTagCaCertificateArgs) ToAviatrixSite2CloudCaCertTagCaCertificateOutput() AviatrixSite2CloudCaCertTagCaCertificateOutput {
	return i.ToAviatrixSite2CloudCaCertTagCaCertificateOutputWithContext(context.Background())
}

func (i AviatrixSite2CloudCaCertTagCaCertificateArgs) ToAviatrixSite2CloudCaCertTagCaCertificateOutputWithContext(ctx context.Context) AviatrixSite2CloudCaCertTagCaCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixSite2CloudCaCertTagCaCertificateOutput)
}

// AviatrixSite2CloudCaCertTagCaCertificateArrayInput is an input type that accepts AviatrixSite2CloudCaCertTagCaCertificateArray and AviatrixSite2CloudCaCertTagCaCertificateArrayOutput values.
// You can construct a concrete instance of `AviatrixSite2CloudCaCertTagCaCertificateArrayInput` via:
//
//	AviatrixSite2CloudCaCertTagCaCertificateArray{ AviatrixSite2CloudCaCertTagCaCertificateArgs{...} }
type AviatrixSite2CloudCaCertTagCaCertificateArrayInput interface {
	pulumi.Input

	ToAviatrixSite2CloudCaCertTagCaCertificateArrayOutput() AviatrixSite2CloudCaCertTagCaCertificateArrayOutput
	ToAviatrixSite2CloudCaCertTagCaCertificateArrayOutputWithContext(context.Context) AviatrixSite2CloudCaCertTagCaCertificateArrayOutput
}

type AviatrixSite2CloudCaCertTagCaCertificateArray []AviatrixSite2CloudCaCertTagCaCertificateInput

func (AviatrixSite2CloudCaCertTagCaCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixSite2CloudCaCertTagCaCertificate)(nil)).Elem()
}

func (i AviatrixSite2CloudCaCertTagCaCertificateArray) ToAviatrixSite2CloudCaCertTagCaCertificateArrayOutput() AviatrixSite2CloudCaCertTagCaCertificateArrayOutput {
	return i.ToAviatrixSite2CloudCaCertTagCaCertificateArrayOutputWithContext(context.Background())
}

func (i AviatrixSite2CloudCaCertTagCaCertificateArray) ToAviatrixSite2CloudCaCertTagCaCertificateArrayOutputWithContext(ctx context.Context) AviatrixSite2CloudCaCertTagCaCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixSite2CloudCaCertTagCaCertificateArrayOutput)
}

type AviatrixSite2CloudCaCertTagCaCertificateOutput struct{ *pulumi.OutputState }

func (AviatrixSite2CloudCaCertTagCaCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixSite2CloudCaCertTagCaCertificate)(nil)).Elem()
}

func (o AviatrixSite2CloudCaCertTagCaCertificateOutput) ToAviatrixSite2CloudCaCertTagCaCertificateOutput() AviatrixSite2CloudCaCertTagCaCertificateOutput {
	return o
}

func (o AviatrixSite2CloudCaCertTagCaCertificateOutput) ToAviatrixSite2CloudCaCertTagCaCertificateOutputWithContext(ctx context.Context) AviatrixSite2CloudCaCertTagCaCertificateOutput {
	return o
}

// Content of cert certificate to create only one cert. One CA cert only per file.
func (o AviatrixSite2CloudCaCertTagCaCertificateOutput) CertContent() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixSite2CloudCaCertTagCaCertificate) string { return v.CertContent }).(pulumi.StringOutput)
}

// Common name of created cert.
func (o AviatrixSite2CloudCaCertTagCaCertificateOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixSite2CloudCaCertTagCaCertificate) *string { return v.CommonName }).(pulumi.StringPtrOutput)
}

// Expiration time of created cert.
func (o AviatrixSite2CloudCaCertTagCaCertificateOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixSite2CloudCaCertTagCaCertificate) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// Unique id of created cert.
func (o AviatrixSite2CloudCaCertTagCaCertificateOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixSite2CloudCaCertTagCaCertificate) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Issuer name of created cert.
func (o AviatrixSite2CloudCaCertTagCaCertificateOutput) IssuerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixSite2CloudCaCertTagCaCertificate) *string { return v.IssuerName }).(pulumi.StringPtrOutput)
}

// Unique serial of created cert.
func (o AviatrixSite2CloudCaCertTagCaCertificateOutput) UniqueSerial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixSite2CloudCaCertTagCaCertificate) *string { return v.UniqueSerial }).(pulumi.StringPtrOutput)
}

type AviatrixSite2CloudCaCertTagCaCertificateArrayOutput struct{ *pulumi.OutputState }

func (AviatrixSite2CloudCaCertTagCaCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixSite2CloudCaCertTagCaCertificate)(nil)).Elem()
}

func (o AviatrixSite2CloudCaCertTagCaCertificateArrayOutput) ToAviatrixSite2CloudCaCertTagCaCertificateArrayOutput() AviatrixSite2CloudCaCertTagCaCertificateArrayOutput {
	return o
}

func (o AviatrixSite2CloudCaCertTagCaCertificateArrayOutput) ToAviatrixSite2CloudCaCertTagCaCertificateArrayOutputWithContext(ctx context.Context) AviatrixSite2CloudCaCertTagCaCertificateArrayOutput {
	return o
}

func (o AviatrixSite2CloudCaCertTagCaCertificateArrayOutput) Index(i pulumi.IntInput) AviatrixSite2CloudCaCertTagCaCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixSite2CloudCaCertTagCaCertificate {
		return vs[0].([]AviatrixSite2CloudCaCertTagCaCertificate)[vs[1].(int)]
	}).(AviatrixSite2CloudCaCertTagCaCertificateOutput)
}

type AviatrixTransitGatewayBgpLanInterface struct {
	// A VPC Network address range selected from one of the available network ranges.
	Subnet string `pulumi:"subnet"`
	// VPC-ID/VNet-Name of cloud provider.
	VpcId string `pulumi:"vpcId"`
}

// AviatrixTransitGatewayBgpLanInterfaceInput is an input type that accepts AviatrixTransitGatewayBgpLanInterfaceArgs and AviatrixTransitGatewayBgpLanInterfaceOutput values.
// You can construct a concrete instance of `AviatrixTransitGatewayBgpLanInterfaceInput` via:
//
//	AviatrixTransitGatewayBgpLanInterfaceArgs{...}
type AviatrixTransitGatewayBgpLanInterfaceInput interface {
	pulumi.Input

	ToAviatrixTransitGatewayBgpLanInterfaceOutput() AviatrixTransitGatewayBgpLanInterfaceOutput
	ToAviatrixTransitGatewayBgpLanInterfaceOutputWithContext(context.Context) AviatrixTransitGatewayBgpLanInterfaceOutput
}

type AviatrixTransitGatewayBgpLanInterfaceArgs struct {
	// A VPC Network address range selected from one of the available network ranges.
	Subnet pulumi.StringInput `pulumi:"subnet"`
	// VPC-ID/VNet-Name of cloud provider.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (AviatrixTransitGatewayBgpLanInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixTransitGatewayBgpLanInterface)(nil)).Elem()
}

func (i AviatrixTransitGatewayBgpLanInterfaceArgs) ToAviatrixTransitGatewayBgpLanInterfaceOutput() AviatrixTransitGatewayBgpLanInterfaceOutput {
	return i.ToAviatrixTransitGatewayBgpLanInterfaceOutputWithContext(context.Background())
}

func (i AviatrixTransitGatewayBgpLanInterfaceArgs) ToAviatrixTransitGatewayBgpLanInterfaceOutputWithContext(ctx context.Context) AviatrixTransitGatewayBgpLanInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixTransitGatewayBgpLanInterfaceOutput)
}

// AviatrixTransitGatewayBgpLanInterfaceArrayInput is an input type that accepts AviatrixTransitGatewayBgpLanInterfaceArray and AviatrixTransitGatewayBgpLanInterfaceArrayOutput values.
// You can construct a concrete instance of `AviatrixTransitGatewayBgpLanInterfaceArrayInput` via:
//
//	AviatrixTransitGatewayBgpLanInterfaceArray{ AviatrixTransitGatewayBgpLanInterfaceArgs{...} }
type AviatrixTransitGatewayBgpLanInterfaceArrayInput interface {
	pulumi.Input

	ToAviatrixTransitGatewayBgpLanInterfaceArrayOutput() AviatrixTransitGatewayBgpLanInterfaceArrayOutput
	ToAviatrixTransitGatewayBgpLanInterfaceArrayOutputWithContext(context.Context) AviatrixTransitGatewayBgpLanInterfaceArrayOutput
}

type AviatrixTransitGatewayBgpLanInterfaceArray []AviatrixTransitGatewayBgpLanInterfaceInput

func (AviatrixTransitGatewayBgpLanInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixTransitGatewayBgpLanInterface)(nil)).Elem()
}

func (i AviatrixTransitGatewayBgpLanInterfaceArray) ToAviatrixTransitGatewayBgpLanInterfaceArrayOutput() AviatrixTransitGatewayBgpLanInterfaceArrayOutput {
	return i.ToAviatrixTransitGatewayBgpLanInterfaceArrayOutputWithContext(context.Background())
}

func (i AviatrixTransitGatewayBgpLanInterfaceArray) ToAviatrixTransitGatewayBgpLanInterfaceArrayOutputWithContext(ctx context.Context) AviatrixTransitGatewayBgpLanInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixTransitGatewayBgpLanInterfaceArrayOutput)
}

type AviatrixTransitGatewayBgpLanInterfaceOutput struct{ *pulumi.OutputState }

func (AviatrixTransitGatewayBgpLanInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixTransitGatewayBgpLanInterface)(nil)).Elem()
}

func (o AviatrixTransitGatewayBgpLanInterfaceOutput) ToAviatrixTransitGatewayBgpLanInterfaceOutput() AviatrixTransitGatewayBgpLanInterfaceOutput {
	return o
}

func (o AviatrixTransitGatewayBgpLanInterfaceOutput) ToAviatrixTransitGatewayBgpLanInterfaceOutputWithContext(ctx context.Context) AviatrixTransitGatewayBgpLanInterfaceOutput {
	return o
}

// A VPC Network address range selected from one of the available network ranges.
func (o AviatrixTransitGatewayBgpLanInterfaceOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixTransitGatewayBgpLanInterface) string { return v.Subnet }).(pulumi.StringOutput)
}

// VPC-ID/VNet-Name of cloud provider.
func (o AviatrixTransitGatewayBgpLanInterfaceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixTransitGatewayBgpLanInterface) string { return v.VpcId }).(pulumi.StringOutput)
}

type AviatrixTransitGatewayBgpLanInterfaceArrayOutput struct{ *pulumi.OutputState }

func (AviatrixTransitGatewayBgpLanInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixTransitGatewayBgpLanInterface)(nil)).Elem()
}

func (o AviatrixTransitGatewayBgpLanInterfaceArrayOutput) ToAviatrixTransitGatewayBgpLanInterfaceArrayOutput() AviatrixTransitGatewayBgpLanInterfaceArrayOutput {
	return o
}

func (o AviatrixTransitGatewayBgpLanInterfaceArrayOutput) ToAviatrixTransitGatewayBgpLanInterfaceArrayOutputWithContext(ctx context.Context) AviatrixTransitGatewayBgpLanInterfaceArrayOutput {
	return o
}

func (o AviatrixTransitGatewayBgpLanInterfaceArrayOutput) Index(i pulumi.IntInput) AviatrixTransitGatewayBgpLanInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixTransitGatewayBgpLanInterface {
		return vs[0].([]AviatrixTransitGatewayBgpLanInterface)[vs[1].(int)]
	}).(AviatrixTransitGatewayBgpLanInterfaceOutput)
}

type AviatrixTransitGatewayHaBgpLanInterface struct {
	// A VPC Network address range selected from one of the available network ranges.
	Subnet string `pulumi:"subnet"`
	// VPC-ID/VNet-Name of cloud provider.
	VpcId string `pulumi:"vpcId"`
}

// AviatrixTransitGatewayHaBgpLanInterfaceInput is an input type that accepts AviatrixTransitGatewayHaBgpLanInterfaceArgs and AviatrixTransitGatewayHaBgpLanInterfaceOutput values.
// You can construct a concrete instance of `AviatrixTransitGatewayHaBgpLanInterfaceInput` via:
//
//	AviatrixTransitGatewayHaBgpLanInterfaceArgs{...}
type AviatrixTransitGatewayHaBgpLanInterfaceInput interface {
	pulumi.Input

	ToAviatrixTransitGatewayHaBgpLanInterfaceOutput() AviatrixTransitGatewayHaBgpLanInterfaceOutput
	ToAviatrixTransitGatewayHaBgpLanInterfaceOutputWithContext(context.Context) AviatrixTransitGatewayHaBgpLanInterfaceOutput
}

type AviatrixTransitGatewayHaBgpLanInterfaceArgs struct {
	// A VPC Network address range selected from one of the available network ranges.
	Subnet pulumi.StringInput `pulumi:"subnet"`
	// VPC-ID/VNet-Name of cloud provider.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (AviatrixTransitGatewayHaBgpLanInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixTransitGatewayHaBgpLanInterface)(nil)).Elem()
}

func (i AviatrixTransitGatewayHaBgpLanInterfaceArgs) ToAviatrixTransitGatewayHaBgpLanInterfaceOutput() AviatrixTransitGatewayHaBgpLanInterfaceOutput {
	return i.ToAviatrixTransitGatewayHaBgpLanInterfaceOutputWithContext(context.Background())
}

func (i AviatrixTransitGatewayHaBgpLanInterfaceArgs) ToAviatrixTransitGatewayHaBgpLanInterfaceOutputWithContext(ctx context.Context) AviatrixTransitGatewayHaBgpLanInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixTransitGatewayHaBgpLanInterfaceOutput)
}

// AviatrixTransitGatewayHaBgpLanInterfaceArrayInput is an input type that accepts AviatrixTransitGatewayHaBgpLanInterfaceArray and AviatrixTransitGatewayHaBgpLanInterfaceArrayOutput values.
// You can construct a concrete instance of `AviatrixTransitGatewayHaBgpLanInterfaceArrayInput` via:
//
//	AviatrixTransitGatewayHaBgpLanInterfaceArray{ AviatrixTransitGatewayHaBgpLanInterfaceArgs{...} }
type AviatrixTransitGatewayHaBgpLanInterfaceArrayInput interface {
	pulumi.Input

	ToAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput() AviatrixTransitGatewayHaBgpLanInterfaceArrayOutput
	ToAviatrixTransitGatewayHaBgpLanInterfaceArrayOutputWithContext(context.Context) AviatrixTransitGatewayHaBgpLanInterfaceArrayOutput
}

type AviatrixTransitGatewayHaBgpLanInterfaceArray []AviatrixTransitGatewayHaBgpLanInterfaceInput

func (AviatrixTransitGatewayHaBgpLanInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixTransitGatewayHaBgpLanInterface)(nil)).Elem()
}

func (i AviatrixTransitGatewayHaBgpLanInterfaceArray) ToAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput() AviatrixTransitGatewayHaBgpLanInterfaceArrayOutput {
	return i.ToAviatrixTransitGatewayHaBgpLanInterfaceArrayOutputWithContext(context.Background())
}

func (i AviatrixTransitGatewayHaBgpLanInterfaceArray) ToAviatrixTransitGatewayHaBgpLanInterfaceArrayOutputWithContext(ctx context.Context) AviatrixTransitGatewayHaBgpLanInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixTransitGatewayHaBgpLanInterfaceArrayOutput)
}

type AviatrixTransitGatewayHaBgpLanInterfaceOutput struct{ *pulumi.OutputState }

func (AviatrixTransitGatewayHaBgpLanInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixTransitGatewayHaBgpLanInterface)(nil)).Elem()
}

func (o AviatrixTransitGatewayHaBgpLanInterfaceOutput) ToAviatrixTransitGatewayHaBgpLanInterfaceOutput() AviatrixTransitGatewayHaBgpLanInterfaceOutput {
	return o
}

func (o AviatrixTransitGatewayHaBgpLanInterfaceOutput) ToAviatrixTransitGatewayHaBgpLanInterfaceOutputWithContext(ctx context.Context) AviatrixTransitGatewayHaBgpLanInterfaceOutput {
	return o
}

// A VPC Network address range selected from one of the available network ranges.
func (o AviatrixTransitGatewayHaBgpLanInterfaceOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixTransitGatewayHaBgpLanInterface) string { return v.Subnet }).(pulumi.StringOutput)
}

// VPC-ID/VNet-Name of cloud provider.
func (o AviatrixTransitGatewayHaBgpLanInterfaceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixTransitGatewayHaBgpLanInterface) string { return v.VpcId }).(pulumi.StringOutput)
}

type AviatrixTransitGatewayHaBgpLanInterfaceArrayOutput struct{ *pulumi.OutputState }

func (AviatrixTransitGatewayHaBgpLanInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixTransitGatewayHaBgpLanInterface)(nil)).Elem()
}

func (o AviatrixTransitGatewayHaBgpLanInterfaceArrayOutput) ToAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput() AviatrixTransitGatewayHaBgpLanInterfaceArrayOutput {
	return o
}

func (o AviatrixTransitGatewayHaBgpLanInterfaceArrayOutput) ToAviatrixTransitGatewayHaBgpLanInterfaceArrayOutputWithContext(ctx context.Context) AviatrixTransitGatewayHaBgpLanInterfaceArrayOutput {
	return o
}

func (o AviatrixTransitGatewayHaBgpLanInterfaceArrayOutput) Index(i pulumi.IntInput) AviatrixTransitGatewayHaBgpLanInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixTransitGatewayHaBgpLanInterface {
		return vs[0].([]AviatrixTransitGatewayHaBgpLanInterface)[vs[1].(int)]
	}).(AviatrixTransitGatewayHaBgpLanInterfaceOutput)
}

type AviatrixVpcPrivateSubnet struct {
	// CIDR block.
	Cidr *string `pulumi:"cidr"`
	// Name of this subnet.
	Name *string `pulumi:"name"`
	// ID of this subnet.
	SubnetId *string `pulumi:"subnetId"`
}

// AviatrixVpcPrivateSubnetInput is an input type that accepts AviatrixVpcPrivateSubnetArgs and AviatrixVpcPrivateSubnetOutput values.
// You can construct a concrete instance of `AviatrixVpcPrivateSubnetInput` via:
//
//	AviatrixVpcPrivateSubnetArgs{...}
type AviatrixVpcPrivateSubnetInput interface {
	pulumi.Input

	ToAviatrixVpcPrivateSubnetOutput() AviatrixVpcPrivateSubnetOutput
	ToAviatrixVpcPrivateSubnetOutputWithContext(context.Context) AviatrixVpcPrivateSubnetOutput
}

type AviatrixVpcPrivateSubnetArgs struct {
	// CIDR block.
	Cidr pulumi.StringPtrInput `pulumi:"cidr"`
	// Name of this subnet.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// ID of this subnet.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (AviatrixVpcPrivateSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixVpcPrivateSubnet)(nil)).Elem()
}

func (i AviatrixVpcPrivateSubnetArgs) ToAviatrixVpcPrivateSubnetOutput() AviatrixVpcPrivateSubnetOutput {
	return i.ToAviatrixVpcPrivateSubnetOutputWithContext(context.Background())
}

func (i AviatrixVpcPrivateSubnetArgs) ToAviatrixVpcPrivateSubnetOutputWithContext(ctx context.Context) AviatrixVpcPrivateSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixVpcPrivateSubnetOutput)
}

// AviatrixVpcPrivateSubnetArrayInput is an input type that accepts AviatrixVpcPrivateSubnetArray and AviatrixVpcPrivateSubnetArrayOutput values.
// You can construct a concrete instance of `AviatrixVpcPrivateSubnetArrayInput` via:
//
//	AviatrixVpcPrivateSubnetArray{ AviatrixVpcPrivateSubnetArgs{...} }
type AviatrixVpcPrivateSubnetArrayInput interface {
	pulumi.Input

	ToAviatrixVpcPrivateSubnetArrayOutput() AviatrixVpcPrivateSubnetArrayOutput
	ToAviatrixVpcPrivateSubnetArrayOutputWithContext(context.Context) AviatrixVpcPrivateSubnetArrayOutput
}

type AviatrixVpcPrivateSubnetArray []AviatrixVpcPrivateSubnetInput

func (AviatrixVpcPrivateSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixVpcPrivateSubnet)(nil)).Elem()
}

func (i AviatrixVpcPrivateSubnetArray) ToAviatrixVpcPrivateSubnetArrayOutput() AviatrixVpcPrivateSubnetArrayOutput {
	return i.ToAviatrixVpcPrivateSubnetArrayOutputWithContext(context.Background())
}

func (i AviatrixVpcPrivateSubnetArray) ToAviatrixVpcPrivateSubnetArrayOutputWithContext(ctx context.Context) AviatrixVpcPrivateSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixVpcPrivateSubnetArrayOutput)
}

type AviatrixVpcPrivateSubnetOutput struct{ *pulumi.OutputState }

func (AviatrixVpcPrivateSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixVpcPrivateSubnet)(nil)).Elem()
}

func (o AviatrixVpcPrivateSubnetOutput) ToAviatrixVpcPrivateSubnetOutput() AviatrixVpcPrivateSubnetOutput {
	return o
}

func (o AviatrixVpcPrivateSubnetOutput) ToAviatrixVpcPrivateSubnetOutputWithContext(ctx context.Context) AviatrixVpcPrivateSubnetOutput {
	return o
}

// CIDR block.
func (o AviatrixVpcPrivateSubnetOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixVpcPrivateSubnet) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

// Name of this subnet.
func (o AviatrixVpcPrivateSubnetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixVpcPrivateSubnet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// ID of this subnet.
func (o AviatrixVpcPrivateSubnetOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixVpcPrivateSubnet) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type AviatrixVpcPrivateSubnetArrayOutput struct{ *pulumi.OutputState }

func (AviatrixVpcPrivateSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixVpcPrivateSubnet)(nil)).Elem()
}

func (o AviatrixVpcPrivateSubnetArrayOutput) ToAviatrixVpcPrivateSubnetArrayOutput() AviatrixVpcPrivateSubnetArrayOutput {
	return o
}

func (o AviatrixVpcPrivateSubnetArrayOutput) ToAviatrixVpcPrivateSubnetArrayOutputWithContext(ctx context.Context) AviatrixVpcPrivateSubnetArrayOutput {
	return o
}

func (o AviatrixVpcPrivateSubnetArrayOutput) Index(i pulumi.IntInput) AviatrixVpcPrivateSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixVpcPrivateSubnet {
		return vs[0].([]AviatrixVpcPrivateSubnet)[vs[1].(int)]
	}).(AviatrixVpcPrivateSubnetOutput)
}

type AviatrixVpcPublicSubnet struct {
	// CIDR block.
	Cidr *string `pulumi:"cidr"`
	// Name of this subnet.
	Name *string `pulumi:"name"`
	// ID of this subnet.
	SubnetId *string `pulumi:"subnetId"`
}

// AviatrixVpcPublicSubnetInput is an input type that accepts AviatrixVpcPublicSubnetArgs and AviatrixVpcPublicSubnetOutput values.
// You can construct a concrete instance of `AviatrixVpcPublicSubnetInput` via:
//
//	AviatrixVpcPublicSubnetArgs{...}
type AviatrixVpcPublicSubnetInput interface {
	pulumi.Input

	ToAviatrixVpcPublicSubnetOutput() AviatrixVpcPublicSubnetOutput
	ToAviatrixVpcPublicSubnetOutputWithContext(context.Context) AviatrixVpcPublicSubnetOutput
}

type AviatrixVpcPublicSubnetArgs struct {
	// CIDR block.
	Cidr pulumi.StringPtrInput `pulumi:"cidr"`
	// Name of this subnet.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// ID of this subnet.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (AviatrixVpcPublicSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixVpcPublicSubnet)(nil)).Elem()
}

func (i AviatrixVpcPublicSubnetArgs) ToAviatrixVpcPublicSubnetOutput() AviatrixVpcPublicSubnetOutput {
	return i.ToAviatrixVpcPublicSubnetOutputWithContext(context.Background())
}

func (i AviatrixVpcPublicSubnetArgs) ToAviatrixVpcPublicSubnetOutputWithContext(ctx context.Context) AviatrixVpcPublicSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixVpcPublicSubnetOutput)
}

// AviatrixVpcPublicSubnetArrayInput is an input type that accepts AviatrixVpcPublicSubnetArray and AviatrixVpcPublicSubnetArrayOutput values.
// You can construct a concrete instance of `AviatrixVpcPublicSubnetArrayInput` via:
//
//	AviatrixVpcPublicSubnetArray{ AviatrixVpcPublicSubnetArgs{...} }
type AviatrixVpcPublicSubnetArrayInput interface {
	pulumi.Input

	ToAviatrixVpcPublicSubnetArrayOutput() AviatrixVpcPublicSubnetArrayOutput
	ToAviatrixVpcPublicSubnetArrayOutputWithContext(context.Context) AviatrixVpcPublicSubnetArrayOutput
}

type AviatrixVpcPublicSubnetArray []AviatrixVpcPublicSubnetInput

func (AviatrixVpcPublicSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixVpcPublicSubnet)(nil)).Elem()
}

func (i AviatrixVpcPublicSubnetArray) ToAviatrixVpcPublicSubnetArrayOutput() AviatrixVpcPublicSubnetArrayOutput {
	return i.ToAviatrixVpcPublicSubnetArrayOutputWithContext(context.Background())
}

func (i AviatrixVpcPublicSubnetArray) ToAviatrixVpcPublicSubnetArrayOutputWithContext(ctx context.Context) AviatrixVpcPublicSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixVpcPublicSubnetArrayOutput)
}

type AviatrixVpcPublicSubnetOutput struct{ *pulumi.OutputState }

func (AviatrixVpcPublicSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixVpcPublicSubnet)(nil)).Elem()
}

func (o AviatrixVpcPublicSubnetOutput) ToAviatrixVpcPublicSubnetOutput() AviatrixVpcPublicSubnetOutput {
	return o
}

func (o AviatrixVpcPublicSubnetOutput) ToAviatrixVpcPublicSubnetOutputWithContext(ctx context.Context) AviatrixVpcPublicSubnetOutput {
	return o
}

// CIDR block.
func (o AviatrixVpcPublicSubnetOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixVpcPublicSubnet) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

// Name of this subnet.
func (o AviatrixVpcPublicSubnetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixVpcPublicSubnet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// ID of this subnet.
func (o AviatrixVpcPublicSubnetOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixVpcPublicSubnet) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type AviatrixVpcPublicSubnetArrayOutput struct{ *pulumi.OutputState }

func (AviatrixVpcPublicSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixVpcPublicSubnet)(nil)).Elem()
}

func (o AviatrixVpcPublicSubnetArrayOutput) ToAviatrixVpcPublicSubnetArrayOutput() AviatrixVpcPublicSubnetArrayOutput {
	return o
}

func (o AviatrixVpcPublicSubnetArrayOutput) ToAviatrixVpcPublicSubnetArrayOutputWithContext(ctx context.Context) AviatrixVpcPublicSubnetArrayOutput {
	return o
}

func (o AviatrixVpcPublicSubnetArrayOutput) Index(i pulumi.IntInput) AviatrixVpcPublicSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixVpcPublicSubnet {
		return vs[0].([]AviatrixVpcPublicSubnet)[vs[1].(int)]
	}).(AviatrixVpcPublicSubnetOutput)
}

type AviatrixVpcSubnet struct {
	// CIDR block.
	Cidr *string `pulumi:"cidr"`
	// Name of this subnet.
	Name *string `pulumi:"name"`
	// Region of this subnet.
	Region *string `pulumi:"region"`
	// ID of this subnet.
	SubnetId *string `pulumi:"subnetId"`
}

// AviatrixVpcSubnetInput is an input type that accepts AviatrixVpcSubnetArgs and AviatrixVpcSubnetOutput values.
// You can construct a concrete instance of `AviatrixVpcSubnetInput` via:
//
//	AviatrixVpcSubnetArgs{...}
type AviatrixVpcSubnetInput interface {
	pulumi.Input

	ToAviatrixVpcSubnetOutput() AviatrixVpcSubnetOutput
	ToAviatrixVpcSubnetOutputWithContext(context.Context) AviatrixVpcSubnetOutput
}

type AviatrixVpcSubnetArgs struct {
	// CIDR block.
	Cidr pulumi.StringPtrInput `pulumi:"cidr"`
	// Name of this subnet.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Region of this subnet.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// ID of this subnet.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (AviatrixVpcSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixVpcSubnet)(nil)).Elem()
}

func (i AviatrixVpcSubnetArgs) ToAviatrixVpcSubnetOutput() AviatrixVpcSubnetOutput {
	return i.ToAviatrixVpcSubnetOutputWithContext(context.Background())
}

func (i AviatrixVpcSubnetArgs) ToAviatrixVpcSubnetOutputWithContext(ctx context.Context) AviatrixVpcSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixVpcSubnetOutput)
}

// AviatrixVpcSubnetArrayInput is an input type that accepts AviatrixVpcSubnetArray and AviatrixVpcSubnetArrayOutput values.
// You can construct a concrete instance of `AviatrixVpcSubnetArrayInput` via:
//
//	AviatrixVpcSubnetArray{ AviatrixVpcSubnetArgs{...} }
type AviatrixVpcSubnetArrayInput interface {
	pulumi.Input

	ToAviatrixVpcSubnetArrayOutput() AviatrixVpcSubnetArrayOutput
	ToAviatrixVpcSubnetArrayOutputWithContext(context.Context) AviatrixVpcSubnetArrayOutput
}

type AviatrixVpcSubnetArray []AviatrixVpcSubnetInput

func (AviatrixVpcSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixVpcSubnet)(nil)).Elem()
}

func (i AviatrixVpcSubnetArray) ToAviatrixVpcSubnetArrayOutput() AviatrixVpcSubnetArrayOutput {
	return i.ToAviatrixVpcSubnetArrayOutputWithContext(context.Background())
}

func (i AviatrixVpcSubnetArray) ToAviatrixVpcSubnetArrayOutputWithContext(ctx context.Context) AviatrixVpcSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixVpcSubnetArrayOutput)
}

type AviatrixVpcSubnetOutput struct{ *pulumi.OutputState }

func (AviatrixVpcSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixVpcSubnet)(nil)).Elem()
}

func (o AviatrixVpcSubnetOutput) ToAviatrixVpcSubnetOutput() AviatrixVpcSubnetOutput {
	return o
}

func (o AviatrixVpcSubnetOutput) ToAviatrixVpcSubnetOutputWithContext(ctx context.Context) AviatrixVpcSubnetOutput {
	return o
}

// CIDR block.
func (o AviatrixVpcSubnetOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixVpcSubnet) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

// Name of this subnet.
func (o AviatrixVpcSubnetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixVpcSubnet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Region of this subnet.
func (o AviatrixVpcSubnetOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixVpcSubnet) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// ID of this subnet.
func (o AviatrixVpcSubnetOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AviatrixVpcSubnet) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type AviatrixVpcSubnetArrayOutput struct{ *pulumi.OutputState }

func (AviatrixVpcSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixVpcSubnet)(nil)).Elem()
}

func (o AviatrixVpcSubnetArrayOutput) ToAviatrixVpcSubnetArrayOutput() AviatrixVpcSubnetArrayOutput {
	return o
}

func (o AviatrixVpcSubnetArrayOutput) ToAviatrixVpcSubnetArrayOutputWithContext(ctx context.Context) AviatrixVpcSubnetArrayOutput {
	return o
}

func (o AviatrixVpcSubnetArrayOutput) Index(i pulumi.IntInput) AviatrixVpcSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixVpcSubnet {
		return vs[0].([]AviatrixVpcSubnet)[vs[1].(int)]
	}).(AviatrixVpcSubnetOutput)
}

type AviatrixVpnProfilePolicy struct {
	// Should be the opposite of the base rule for correct behavior. Valid values for action: "allow", "deny".
	Action string `pulumi:"action"`
	// Port to be allowed or denied. Valid values for port: a single port or a range of port numbers e.g.: "25", "25:1024". For "all" and "icmp", port should only be "0:65535".
	Port string `pulumi:"port"`
	// Protocol to allow or deny. Valid values for protocol: "all", "tcp", "udp", "icmp", "sctp", "rdp", "dccp".
	Proto string `pulumi:"proto"`
	// CIDR to be allowed or denied. Valid values for target: IPv4 CIDRs. Example: "10.30.0.0/16".
	Target string `pulumi:"target"`
}

// AviatrixVpnProfilePolicyInput is an input type that accepts AviatrixVpnProfilePolicyArgs and AviatrixVpnProfilePolicyOutput values.
// You can construct a concrete instance of `AviatrixVpnProfilePolicyInput` via:
//
//	AviatrixVpnProfilePolicyArgs{...}
type AviatrixVpnProfilePolicyInput interface {
	pulumi.Input

	ToAviatrixVpnProfilePolicyOutput() AviatrixVpnProfilePolicyOutput
	ToAviatrixVpnProfilePolicyOutputWithContext(context.Context) AviatrixVpnProfilePolicyOutput
}

type AviatrixVpnProfilePolicyArgs struct {
	// Should be the opposite of the base rule for correct behavior. Valid values for action: "allow", "deny".
	Action pulumi.StringInput `pulumi:"action"`
	// Port to be allowed or denied. Valid values for port: a single port or a range of port numbers e.g.: "25", "25:1024". For "all" and "icmp", port should only be "0:65535".
	Port pulumi.StringInput `pulumi:"port"`
	// Protocol to allow or deny. Valid values for protocol: "all", "tcp", "udp", "icmp", "sctp", "rdp", "dccp".
	Proto pulumi.StringInput `pulumi:"proto"`
	// CIDR to be allowed or denied. Valid values for target: IPv4 CIDRs. Example: "10.30.0.0/16".
	Target pulumi.StringInput `pulumi:"target"`
}

func (AviatrixVpnProfilePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixVpnProfilePolicy)(nil)).Elem()
}

func (i AviatrixVpnProfilePolicyArgs) ToAviatrixVpnProfilePolicyOutput() AviatrixVpnProfilePolicyOutput {
	return i.ToAviatrixVpnProfilePolicyOutputWithContext(context.Background())
}

func (i AviatrixVpnProfilePolicyArgs) ToAviatrixVpnProfilePolicyOutputWithContext(ctx context.Context) AviatrixVpnProfilePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixVpnProfilePolicyOutput)
}

// AviatrixVpnProfilePolicyArrayInput is an input type that accepts AviatrixVpnProfilePolicyArray and AviatrixVpnProfilePolicyArrayOutput values.
// You can construct a concrete instance of `AviatrixVpnProfilePolicyArrayInput` via:
//
//	AviatrixVpnProfilePolicyArray{ AviatrixVpnProfilePolicyArgs{...} }
type AviatrixVpnProfilePolicyArrayInput interface {
	pulumi.Input

	ToAviatrixVpnProfilePolicyArrayOutput() AviatrixVpnProfilePolicyArrayOutput
	ToAviatrixVpnProfilePolicyArrayOutputWithContext(context.Context) AviatrixVpnProfilePolicyArrayOutput
}

type AviatrixVpnProfilePolicyArray []AviatrixVpnProfilePolicyInput

func (AviatrixVpnProfilePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixVpnProfilePolicy)(nil)).Elem()
}

func (i AviatrixVpnProfilePolicyArray) ToAviatrixVpnProfilePolicyArrayOutput() AviatrixVpnProfilePolicyArrayOutput {
	return i.ToAviatrixVpnProfilePolicyArrayOutputWithContext(context.Background())
}

func (i AviatrixVpnProfilePolicyArray) ToAviatrixVpnProfilePolicyArrayOutputWithContext(ctx context.Context) AviatrixVpnProfilePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixVpnProfilePolicyArrayOutput)
}

type AviatrixVpnProfilePolicyOutput struct{ *pulumi.OutputState }

func (AviatrixVpnProfilePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AviatrixVpnProfilePolicy)(nil)).Elem()
}

func (o AviatrixVpnProfilePolicyOutput) ToAviatrixVpnProfilePolicyOutput() AviatrixVpnProfilePolicyOutput {
	return o
}

func (o AviatrixVpnProfilePolicyOutput) ToAviatrixVpnProfilePolicyOutputWithContext(ctx context.Context) AviatrixVpnProfilePolicyOutput {
	return o
}

// Should be the opposite of the base rule for correct behavior. Valid values for action: "allow", "deny".
func (o AviatrixVpnProfilePolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixVpnProfilePolicy) string { return v.Action }).(pulumi.StringOutput)
}

// Port to be allowed or denied. Valid values for port: a single port or a range of port numbers e.g.: "25", "25:1024". For "all" and "icmp", port should only be "0:65535".
func (o AviatrixVpnProfilePolicyOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixVpnProfilePolicy) string { return v.Port }).(pulumi.StringOutput)
}

// Protocol to allow or deny. Valid values for protocol: "all", "tcp", "udp", "icmp", "sctp", "rdp", "dccp".
func (o AviatrixVpnProfilePolicyOutput) Proto() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixVpnProfilePolicy) string { return v.Proto }).(pulumi.StringOutput)
}

// CIDR to be allowed or denied. Valid values for target: IPv4 CIDRs. Example: "10.30.0.0/16".
func (o AviatrixVpnProfilePolicyOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v AviatrixVpnProfilePolicy) string { return v.Target }).(pulumi.StringOutput)
}

type AviatrixVpnProfilePolicyArrayOutput struct{ *pulumi.OutputState }

func (AviatrixVpnProfilePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AviatrixVpnProfilePolicy)(nil)).Elem()
}

func (o AviatrixVpnProfilePolicyArrayOutput) ToAviatrixVpnProfilePolicyArrayOutput() AviatrixVpnProfilePolicyArrayOutput {
	return o
}

func (o AviatrixVpnProfilePolicyArrayOutput) ToAviatrixVpnProfilePolicyArrayOutputWithContext(ctx context.Context) AviatrixVpnProfilePolicyArrayOutput {
	return o
}

func (o AviatrixVpnProfilePolicyArrayOutput) Index(i pulumi.IntInput) AviatrixVpnProfilePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AviatrixVpnProfilePolicy {
		return vs[0].([]AviatrixVpnProfilePolicy)[vs[1].(int)]
	}).(AviatrixVpnProfilePolicyOutput)
}

type ProviderIgnoreTags struct {
	KeyPrefixes []string `pulumi:"keyPrefixes"`
	Keys        []string `pulumi:"keys"`
}

// ProviderIgnoreTagsInput is an input type that accepts ProviderIgnoreTagsArgs and ProviderIgnoreTagsOutput values.
// You can construct a concrete instance of `ProviderIgnoreTagsInput` via:
//
//	ProviderIgnoreTagsArgs{...}
type ProviderIgnoreTagsInput interface {
	pulumi.Input

	ToProviderIgnoreTagsOutput() ProviderIgnoreTagsOutput
	ToProviderIgnoreTagsOutputWithContext(context.Context) ProviderIgnoreTagsOutput
}

type ProviderIgnoreTagsArgs struct {
	KeyPrefixes pulumi.StringArrayInput `pulumi:"keyPrefixes"`
	Keys        pulumi.StringArrayInput `pulumi:"keys"`
}

func (ProviderIgnoreTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderIgnoreTags)(nil)).Elem()
}

func (i ProviderIgnoreTagsArgs) ToProviderIgnoreTagsOutput() ProviderIgnoreTagsOutput {
	return i.ToProviderIgnoreTagsOutputWithContext(context.Background())
}

func (i ProviderIgnoreTagsArgs) ToProviderIgnoreTagsOutputWithContext(ctx context.Context) ProviderIgnoreTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderIgnoreTagsOutput)
}

func (i ProviderIgnoreTagsArgs) ToProviderIgnoreTagsPtrOutput() ProviderIgnoreTagsPtrOutput {
	return i.ToProviderIgnoreTagsPtrOutputWithContext(context.Background())
}

func (i ProviderIgnoreTagsArgs) ToProviderIgnoreTagsPtrOutputWithContext(ctx context.Context) ProviderIgnoreTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderIgnoreTagsOutput).ToProviderIgnoreTagsPtrOutputWithContext(ctx)
}

// ProviderIgnoreTagsPtrInput is an input type that accepts ProviderIgnoreTagsArgs, ProviderIgnoreTagsPtr and ProviderIgnoreTagsPtrOutput values.
// You can construct a concrete instance of `ProviderIgnoreTagsPtrInput` via:
//
//	        ProviderIgnoreTagsArgs{...}
//
//	or:
//
//	        nil
type ProviderIgnoreTagsPtrInput interface {
	pulumi.Input

	ToProviderIgnoreTagsPtrOutput() ProviderIgnoreTagsPtrOutput
	ToProviderIgnoreTagsPtrOutputWithContext(context.Context) ProviderIgnoreTagsPtrOutput
}

type providerIgnoreTagsPtrType ProviderIgnoreTagsArgs

func ProviderIgnoreTagsPtr(v *ProviderIgnoreTagsArgs) ProviderIgnoreTagsPtrInput {
	return (*providerIgnoreTagsPtrType)(v)
}

func (*providerIgnoreTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderIgnoreTags)(nil)).Elem()
}

func (i *providerIgnoreTagsPtrType) ToProviderIgnoreTagsPtrOutput() ProviderIgnoreTagsPtrOutput {
	return i.ToProviderIgnoreTagsPtrOutputWithContext(context.Background())
}

func (i *providerIgnoreTagsPtrType) ToProviderIgnoreTagsPtrOutputWithContext(ctx context.Context) ProviderIgnoreTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderIgnoreTagsPtrOutput)
}

type ProviderIgnoreTagsOutput struct{ *pulumi.OutputState }

func (ProviderIgnoreTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderIgnoreTags)(nil)).Elem()
}

func (o ProviderIgnoreTagsOutput) ToProviderIgnoreTagsOutput() ProviderIgnoreTagsOutput {
	return o
}

func (o ProviderIgnoreTagsOutput) ToProviderIgnoreTagsOutputWithContext(ctx context.Context) ProviderIgnoreTagsOutput {
	return o
}

func (o ProviderIgnoreTagsOutput) ToProviderIgnoreTagsPtrOutput() ProviderIgnoreTagsPtrOutput {
	return o.ToProviderIgnoreTagsPtrOutputWithContext(context.Background())
}

func (o ProviderIgnoreTagsOutput) ToProviderIgnoreTagsPtrOutputWithContext(ctx context.Context) ProviderIgnoreTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderIgnoreTags) *ProviderIgnoreTags {
		return &v
	}).(ProviderIgnoreTagsPtrOutput)
}

func (o ProviderIgnoreTagsOutput) KeyPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProviderIgnoreTags) []string { return v.KeyPrefixes }).(pulumi.StringArrayOutput)
}

func (o ProviderIgnoreTagsOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProviderIgnoreTags) []string { return v.Keys }).(pulumi.StringArrayOutput)
}

type ProviderIgnoreTagsPtrOutput struct{ *pulumi.OutputState }

func (ProviderIgnoreTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderIgnoreTags)(nil)).Elem()
}

func (o ProviderIgnoreTagsPtrOutput) ToProviderIgnoreTagsPtrOutput() ProviderIgnoreTagsPtrOutput {
	return o
}

func (o ProviderIgnoreTagsPtrOutput) ToProviderIgnoreTagsPtrOutputWithContext(ctx context.Context) ProviderIgnoreTagsPtrOutput {
	return o
}

func (o ProviderIgnoreTagsPtrOutput) Elem() ProviderIgnoreTagsOutput {
	return o.ApplyT(func(v *ProviderIgnoreTags) ProviderIgnoreTags {
		if v != nil {
			return *v
		}
		var ret ProviderIgnoreTags
		return ret
	}).(ProviderIgnoreTagsOutput)
}

func (o ProviderIgnoreTagsPtrOutput) KeyPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProviderIgnoreTags) []string {
		if v == nil {
			return nil
		}
		return v.KeyPrefixes
	}).(pulumi.StringArrayOutput)
}

func (o ProviderIgnoreTagsPtrOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProviderIgnoreTags) []string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringArrayOutput)
}

type GetAviatrixDeviceInterfacesWanInterface struct {
	// Name of the WAN primary interface.
	WanPrimaryInterface string `pulumi:"wanPrimaryInterface"`
	// The WAN Primary interface public IP.
	WanPrimaryInterfacePublicIp string `pulumi:"wanPrimaryInterfacePublicIp"`
}

// GetAviatrixDeviceInterfacesWanInterfaceInput is an input type that accepts GetAviatrixDeviceInterfacesWanInterfaceArgs and GetAviatrixDeviceInterfacesWanInterfaceOutput values.
// You can construct a concrete instance of `GetAviatrixDeviceInterfacesWanInterfaceInput` via:
//
//	GetAviatrixDeviceInterfacesWanInterfaceArgs{...}
type GetAviatrixDeviceInterfacesWanInterfaceInput interface {
	pulumi.Input

	ToGetAviatrixDeviceInterfacesWanInterfaceOutput() GetAviatrixDeviceInterfacesWanInterfaceOutput
	ToGetAviatrixDeviceInterfacesWanInterfaceOutputWithContext(context.Context) GetAviatrixDeviceInterfacesWanInterfaceOutput
}

type GetAviatrixDeviceInterfacesWanInterfaceArgs struct {
	// Name of the WAN primary interface.
	WanPrimaryInterface pulumi.StringInput `pulumi:"wanPrimaryInterface"`
	// The WAN Primary interface public IP.
	WanPrimaryInterfacePublicIp pulumi.StringInput `pulumi:"wanPrimaryInterfacePublicIp"`
}

func (GetAviatrixDeviceInterfacesWanInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixDeviceInterfacesWanInterface)(nil)).Elem()
}

func (i GetAviatrixDeviceInterfacesWanInterfaceArgs) ToGetAviatrixDeviceInterfacesWanInterfaceOutput() GetAviatrixDeviceInterfacesWanInterfaceOutput {
	return i.ToGetAviatrixDeviceInterfacesWanInterfaceOutputWithContext(context.Background())
}

func (i GetAviatrixDeviceInterfacesWanInterfaceArgs) ToGetAviatrixDeviceInterfacesWanInterfaceOutputWithContext(ctx context.Context) GetAviatrixDeviceInterfacesWanInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixDeviceInterfacesWanInterfaceOutput)
}

// GetAviatrixDeviceInterfacesWanInterfaceArrayInput is an input type that accepts GetAviatrixDeviceInterfacesWanInterfaceArray and GetAviatrixDeviceInterfacesWanInterfaceArrayOutput values.
// You can construct a concrete instance of `GetAviatrixDeviceInterfacesWanInterfaceArrayInput` via:
//
//	GetAviatrixDeviceInterfacesWanInterfaceArray{ GetAviatrixDeviceInterfacesWanInterfaceArgs{...} }
type GetAviatrixDeviceInterfacesWanInterfaceArrayInput interface {
	pulumi.Input

	ToGetAviatrixDeviceInterfacesWanInterfaceArrayOutput() GetAviatrixDeviceInterfacesWanInterfaceArrayOutput
	ToGetAviatrixDeviceInterfacesWanInterfaceArrayOutputWithContext(context.Context) GetAviatrixDeviceInterfacesWanInterfaceArrayOutput
}

type GetAviatrixDeviceInterfacesWanInterfaceArray []GetAviatrixDeviceInterfacesWanInterfaceInput

func (GetAviatrixDeviceInterfacesWanInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixDeviceInterfacesWanInterface)(nil)).Elem()
}

func (i GetAviatrixDeviceInterfacesWanInterfaceArray) ToGetAviatrixDeviceInterfacesWanInterfaceArrayOutput() GetAviatrixDeviceInterfacesWanInterfaceArrayOutput {
	return i.ToGetAviatrixDeviceInterfacesWanInterfaceArrayOutputWithContext(context.Background())
}

func (i GetAviatrixDeviceInterfacesWanInterfaceArray) ToGetAviatrixDeviceInterfacesWanInterfaceArrayOutputWithContext(ctx context.Context) GetAviatrixDeviceInterfacesWanInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixDeviceInterfacesWanInterfaceArrayOutput)
}

type GetAviatrixDeviceInterfacesWanInterfaceOutput struct{ *pulumi.OutputState }

func (GetAviatrixDeviceInterfacesWanInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixDeviceInterfacesWanInterface)(nil)).Elem()
}

func (o GetAviatrixDeviceInterfacesWanInterfaceOutput) ToGetAviatrixDeviceInterfacesWanInterfaceOutput() GetAviatrixDeviceInterfacesWanInterfaceOutput {
	return o
}

func (o GetAviatrixDeviceInterfacesWanInterfaceOutput) ToGetAviatrixDeviceInterfacesWanInterfaceOutputWithContext(ctx context.Context) GetAviatrixDeviceInterfacesWanInterfaceOutput {
	return o
}

// Name of the WAN primary interface.
func (o GetAviatrixDeviceInterfacesWanInterfaceOutput) WanPrimaryInterface() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixDeviceInterfacesWanInterface) string { return v.WanPrimaryInterface }).(pulumi.StringOutput)
}

// The WAN Primary interface public IP.
func (o GetAviatrixDeviceInterfacesWanInterfaceOutput) WanPrimaryInterfacePublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixDeviceInterfacesWanInterface) string { return v.WanPrimaryInterfacePublicIp }).(pulumi.StringOutput)
}

type GetAviatrixDeviceInterfacesWanInterfaceArrayOutput struct{ *pulumi.OutputState }

func (GetAviatrixDeviceInterfacesWanInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixDeviceInterfacesWanInterface)(nil)).Elem()
}

func (o GetAviatrixDeviceInterfacesWanInterfaceArrayOutput) ToGetAviatrixDeviceInterfacesWanInterfaceArrayOutput() GetAviatrixDeviceInterfacesWanInterfaceArrayOutput {
	return o
}

func (o GetAviatrixDeviceInterfacesWanInterfaceArrayOutput) ToGetAviatrixDeviceInterfacesWanInterfaceArrayOutputWithContext(ctx context.Context) GetAviatrixDeviceInterfacesWanInterfaceArrayOutput {
	return o
}

func (o GetAviatrixDeviceInterfacesWanInterfaceArrayOutput) Index(i pulumi.IntInput) GetAviatrixDeviceInterfacesWanInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAviatrixDeviceInterfacesWanInterface {
		return vs[0].([]GetAviatrixDeviceInterfacesWanInterface)[vs[1].(int)]
	}).(GetAviatrixDeviceInterfacesWanInterfaceOutput)
}

type GetAviatrixFirenetFirewallInstanceAssociation struct {
	Attached        bool   `pulumi:"attached"`
	EgressInterface string `pulumi:"egressInterface"`
	// Name of the primary FireNet gateway.
	FirenetGwName string `pulumi:"firenetGwName"`
	// Firewall instance name.
	// * `lanInterface`- Lan interface ID.
	FirewallName string `pulumi:"firewallName"`
	// ID of Firewall instance.
	InstanceId   string `pulumi:"instanceId"`
	LanInterface string `pulumi:"lanInterface"`
	// Management interface ID.
	// * `egressInterface`- Egress interface ID.
	// * `attached`- Switch to attach/detach firewall instance to/from fireNet.
	ManagementInterface string `pulumi:"managementInterface"`
	// Type of the firewall.
	VendorType string `pulumi:"vendorType"`
}

// GetAviatrixFirenetFirewallInstanceAssociationInput is an input type that accepts GetAviatrixFirenetFirewallInstanceAssociationArgs and GetAviatrixFirenetFirewallInstanceAssociationOutput values.
// You can construct a concrete instance of `GetAviatrixFirenetFirewallInstanceAssociationInput` via:
//
//	GetAviatrixFirenetFirewallInstanceAssociationArgs{...}
type GetAviatrixFirenetFirewallInstanceAssociationInput interface {
	pulumi.Input

	ToGetAviatrixFirenetFirewallInstanceAssociationOutput() GetAviatrixFirenetFirewallInstanceAssociationOutput
	ToGetAviatrixFirenetFirewallInstanceAssociationOutputWithContext(context.Context) GetAviatrixFirenetFirewallInstanceAssociationOutput
}

type GetAviatrixFirenetFirewallInstanceAssociationArgs struct {
	Attached        pulumi.BoolInput   `pulumi:"attached"`
	EgressInterface pulumi.StringInput `pulumi:"egressInterface"`
	// Name of the primary FireNet gateway.
	FirenetGwName pulumi.StringInput `pulumi:"firenetGwName"`
	// Firewall instance name.
	// * `lanInterface`- Lan interface ID.
	FirewallName pulumi.StringInput `pulumi:"firewallName"`
	// ID of Firewall instance.
	InstanceId   pulumi.StringInput `pulumi:"instanceId"`
	LanInterface pulumi.StringInput `pulumi:"lanInterface"`
	// Management interface ID.
	// * `egressInterface`- Egress interface ID.
	// * `attached`- Switch to attach/detach firewall instance to/from fireNet.
	ManagementInterface pulumi.StringInput `pulumi:"managementInterface"`
	// Type of the firewall.
	VendorType pulumi.StringInput `pulumi:"vendorType"`
}

func (GetAviatrixFirenetFirewallInstanceAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixFirenetFirewallInstanceAssociation)(nil)).Elem()
}

func (i GetAviatrixFirenetFirewallInstanceAssociationArgs) ToGetAviatrixFirenetFirewallInstanceAssociationOutput() GetAviatrixFirenetFirewallInstanceAssociationOutput {
	return i.ToGetAviatrixFirenetFirewallInstanceAssociationOutputWithContext(context.Background())
}

func (i GetAviatrixFirenetFirewallInstanceAssociationArgs) ToGetAviatrixFirenetFirewallInstanceAssociationOutputWithContext(ctx context.Context) GetAviatrixFirenetFirewallInstanceAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixFirenetFirewallInstanceAssociationOutput)
}

// GetAviatrixFirenetFirewallInstanceAssociationArrayInput is an input type that accepts GetAviatrixFirenetFirewallInstanceAssociationArray and GetAviatrixFirenetFirewallInstanceAssociationArrayOutput values.
// You can construct a concrete instance of `GetAviatrixFirenetFirewallInstanceAssociationArrayInput` via:
//
//	GetAviatrixFirenetFirewallInstanceAssociationArray{ GetAviatrixFirenetFirewallInstanceAssociationArgs{...} }
type GetAviatrixFirenetFirewallInstanceAssociationArrayInput interface {
	pulumi.Input

	ToGetAviatrixFirenetFirewallInstanceAssociationArrayOutput() GetAviatrixFirenetFirewallInstanceAssociationArrayOutput
	ToGetAviatrixFirenetFirewallInstanceAssociationArrayOutputWithContext(context.Context) GetAviatrixFirenetFirewallInstanceAssociationArrayOutput
}

type GetAviatrixFirenetFirewallInstanceAssociationArray []GetAviatrixFirenetFirewallInstanceAssociationInput

func (GetAviatrixFirenetFirewallInstanceAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixFirenetFirewallInstanceAssociation)(nil)).Elem()
}

func (i GetAviatrixFirenetFirewallInstanceAssociationArray) ToGetAviatrixFirenetFirewallInstanceAssociationArrayOutput() GetAviatrixFirenetFirewallInstanceAssociationArrayOutput {
	return i.ToGetAviatrixFirenetFirewallInstanceAssociationArrayOutputWithContext(context.Background())
}

func (i GetAviatrixFirenetFirewallInstanceAssociationArray) ToGetAviatrixFirenetFirewallInstanceAssociationArrayOutputWithContext(ctx context.Context) GetAviatrixFirenetFirewallInstanceAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixFirenetFirewallInstanceAssociationArrayOutput)
}

type GetAviatrixFirenetFirewallInstanceAssociationOutput struct{ *pulumi.OutputState }

func (GetAviatrixFirenetFirewallInstanceAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixFirenetFirewallInstanceAssociation)(nil)).Elem()
}

func (o GetAviatrixFirenetFirewallInstanceAssociationOutput) ToGetAviatrixFirenetFirewallInstanceAssociationOutput() GetAviatrixFirenetFirewallInstanceAssociationOutput {
	return o
}

func (o GetAviatrixFirenetFirewallInstanceAssociationOutput) ToGetAviatrixFirenetFirewallInstanceAssociationOutputWithContext(ctx context.Context) GetAviatrixFirenetFirewallInstanceAssociationOutput {
	return o
}

func (o GetAviatrixFirenetFirewallInstanceAssociationOutput) Attached() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixFirenetFirewallInstanceAssociation) bool { return v.Attached }).(pulumi.BoolOutput)
}

func (o GetAviatrixFirenetFirewallInstanceAssociationOutput) EgressInterface() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixFirenetFirewallInstanceAssociation) string { return v.EgressInterface }).(pulumi.StringOutput)
}

// Name of the primary FireNet gateway.
func (o GetAviatrixFirenetFirewallInstanceAssociationOutput) FirenetGwName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixFirenetFirewallInstanceAssociation) string { return v.FirenetGwName }).(pulumi.StringOutput)
}

// Firewall instance name.
// * `lanInterface`- Lan interface ID.
func (o GetAviatrixFirenetFirewallInstanceAssociationOutput) FirewallName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixFirenetFirewallInstanceAssociation) string { return v.FirewallName }).(pulumi.StringOutput)
}

// ID of Firewall instance.
func (o GetAviatrixFirenetFirewallInstanceAssociationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixFirenetFirewallInstanceAssociation) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o GetAviatrixFirenetFirewallInstanceAssociationOutput) LanInterface() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixFirenetFirewallInstanceAssociation) string { return v.LanInterface }).(pulumi.StringOutput)
}

// Management interface ID.
// * `egressInterface`- Egress interface ID.
// * `attached`- Switch to attach/detach firewall instance to/from fireNet.
func (o GetAviatrixFirenetFirewallInstanceAssociationOutput) ManagementInterface() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixFirenetFirewallInstanceAssociation) string { return v.ManagementInterface }).(pulumi.StringOutput)
}

// Type of the firewall.
func (o GetAviatrixFirenetFirewallInstanceAssociationOutput) VendorType() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixFirenetFirewallInstanceAssociation) string { return v.VendorType }).(pulumi.StringOutput)
}

type GetAviatrixFirenetFirewallInstanceAssociationArrayOutput struct{ *pulumi.OutputState }

func (GetAviatrixFirenetFirewallInstanceAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixFirenetFirewallInstanceAssociation)(nil)).Elem()
}

func (o GetAviatrixFirenetFirewallInstanceAssociationArrayOutput) ToGetAviatrixFirenetFirewallInstanceAssociationArrayOutput() GetAviatrixFirenetFirewallInstanceAssociationArrayOutput {
	return o
}

func (o GetAviatrixFirenetFirewallInstanceAssociationArrayOutput) ToGetAviatrixFirenetFirewallInstanceAssociationArrayOutputWithContext(ctx context.Context) GetAviatrixFirenetFirewallInstanceAssociationArrayOutput {
	return o
}

func (o GetAviatrixFirenetFirewallInstanceAssociationArrayOutput) Index(i pulumi.IntInput) GetAviatrixFirenetFirewallInstanceAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAviatrixFirenetFirewallInstanceAssociation {
		return vs[0].([]GetAviatrixFirenetFirewallInstanceAssociation)[vs[1].(int)]
	}).(GetAviatrixFirenetFirewallInstanceAssociationOutput)
}

type GetAviatrixFirewallInstanceImagesFirewallImage struct {
	// Name of the firewall image.
	FirewallImage string `pulumi:"firewallImage"`
	// List of firewall image versions.
	FirewallImageVersions []string `pulumi:"firewallImageVersions"`
	// List of firewall instance sizes.
	FirewallSizes []string `pulumi:"firewallSizes"`
}

// GetAviatrixFirewallInstanceImagesFirewallImageInput is an input type that accepts GetAviatrixFirewallInstanceImagesFirewallImageArgs and GetAviatrixFirewallInstanceImagesFirewallImageOutput values.
// You can construct a concrete instance of `GetAviatrixFirewallInstanceImagesFirewallImageInput` via:
//
//	GetAviatrixFirewallInstanceImagesFirewallImageArgs{...}
type GetAviatrixFirewallInstanceImagesFirewallImageInput interface {
	pulumi.Input

	ToGetAviatrixFirewallInstanceImagesFirewallImageOutput() GetAviatrixFirewallInstanceImagesFirewallImageOutput
	ToGetAviatrixFirewallInstanceImagesFirewallImageOutputWithContext(context.Context) GetAviatrixFirewallInstanceImagesFirewallImageOutput
}

type GetAviatrixFirewallInstanceImagesFirewallImageArgs struct {
	// Name of the firewall image.
	FirewallImage pulumi.StringInput `pulumi:"firewallImage"`
	// List of firewall image versions.
	FirewallImageVersions pulumi.StringArrayInput `pulumi:"firewallImageVersions"`
	// List of firewall instance sizes.
	FirewallSizes pulumi.StringArrayInput `pulumi:"firewallSizes"`
}

func (GetAviatrixFirewallInstanceImagesFirewallImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixFirewallInstanceImagesFirewallImage)(nil)).Elem()
}

func (i GetAviatrixFirewallInstanceImagesFirewallImageArgs) ToGetAviatrixFirewallInstanceImagesFirewallImageOutput() GetAviatrixFirewallInstanceImagesFirewallImageOutput {
	return i.ToGetAviatrixFirewallInstanceImagesFirewallImageOutputWithContext(context.Background())
}

func (i GetAviatrixFirewallInstanceImagesFirewallImageArgs) ToGetAviatrixFirewallInstanceImagesFirewallImageOutputWithContext(ctx context.Context) GetAviatrixFirewallInstanceImagesFirewallImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixFirewallInstanceImagesFirewallImageOutput)
}

// GetAviatrixFirewallInstanceImagesFirewallImageArrayInput is an input type that accepts GetAviatrixFirewallInstanceImagesFirewallImageArray and GetAviatrixFirewallInstanceImagesFirewallImageArrayOutput values.
// You can construct a concrete instance of `GetAviatrixFirewallInstanceImagesFirewallImageArrayInput` via:
//
//	GetAviatrixFirewallInstanceImagesFirewallImageArray{ GetAviatrixFirewallInstanceImagesFirewallImageArgs{...} }
type GetAviatrixFirewallInstanceImagesFirewallImageArrayInput interface {
	pulumi.Input

	ToGetAviatrixFirewallInstanceImagesFirewallImageArrayOutput() GetAviatrixFirewallInstanceImagesFirewallImageArrayOutput
	ToGetAviatrixFirewallInstanceImagesFirewallImageArrayOutputWithContext(context.Context) GetAviatrixFirewallInstanceImagesFirewallImageArrayOutput
}

type GetAviatrixFirewallInstanceImagesFirewallImageArray []GetAviatrixFirewallInstanceImagesFirewallImageInput

func (GetAviatrixFirewallInstanceImagesFirewallImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixFirewallInstanceImagesFirewallImage)(nil)).Elem()
}

func (i GetAviatrixFirewallInstanceImagesFirewallImageArray) ToGetAviatrixFirewallInstanceImagesFirewallImageArrayOutput() GetAviatrixFirewallInstanceImagesFirewallImageArrayOutput {
	return i.ToGetAviatrixFirewallInstanceImagesFirewallImageArrayOutputWithContext(context.Background())
}

func (i GetAviatrixFirewallInstanceImagesFirewallImageArray) ToGetAviatrixFirewallInstanceImagesFirewallImageArrayOutputWithContext(ctx context.Context) GetAviatrixFirewallInstanceImagesFirewallImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixFirewallInstanceImagesFirewallImageArrayOutput)
}

type GetAviatrixFirewallInstanceImagesFirewallImageOutput struct{ *pulumi.OutputState }

func (GetAviatrixFirewallInstanceImagesFirewallImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixFirewallInstanceImagesFirewallImage)(nil)).Elem()
}

func (o GetAviatrixFirewallInstanceImagesFirewallImageOutput) ToGetAviatrixFirewallInstanceImagesFirewallImageOutput() GetAviatrixFirewallInstanceImagesFirewallImageOutput {
	return o
}

func (o GetAviatrixFirewallInstanceImagesFirewallImageOutput) ToGetAviatrixFirewallInstanceImagesFirewallImageOutputWithContext(ctx context.Context) GetAviatrixFirewallInstanceImagesFirewallImageOutput {
	return o
}

// Name of the firewall image.
func (o GetAviatrixFirewallInstanceImagesFirewallImageOutput) FirewallImage() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixFirewallInstanceImagesFirewallImage) string { return v.FirewallImage }).(pulumi.StringOutput)
}

// List of firewall image versions.
func (o GetAviatrixFirewallInstanceImagesFirewallImageOutput) FirewallImageVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAviatrixFirewallInstanceImagesFirewallImage) []string { return v.FirewallImageVersions }).(pulumi.StringArrayOutput)
}

// List of firewall instance sizes.
func (o GetAviatrixFirewallInstanceImagesFirewallImageOutput) FirewallSizes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAviatrixFirewallInstanceImagesFirewallImage) []string { return v.FirewallSizes }).(pulumi.StringArrayOutput)
}

type GetAviatrixFirewallInstanceImagesFirewallImageArrayOutput struct{ *pulumi.OutputState }

func (GetAviatrixFirewallInstanceImagesFirewallImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixFirewallInstanceImagesFirewallImage)(nil)).Elem()
}

func (o GetAviatrixFirewallInstanceImagesFirewallImageArrayOutput) ToGetAviatrixFirewallInstanceImagesFirewallImageArrayOutput() GetAviatrixFirewallInstanceImagesFirewallImageArrayOutput {
	return o
}

func (o GetAviatrixFirewallInstanceImagesFirewallImageArrayOutput) ToGetAviatrixFirewallInstanceImagesFirewallImageArrayOutputWithContext(ctx context.Context) GetAviatrixFirewallInstanceImagesFirewallImageArrayOutput {
	return o
}

func (o GetAviatrixFirewallInstanceImagesFirewallImageArrayOutput) Index(i pulumi.IntInput) GetAviatrixFirewallInstanceImagesFirewallImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAviatrixFirewallInstanceImagesFirewallImage {
		return vs[0].([]GetAviatrixFirewallInstanceImagesFirewallImage)[vs[1].(int)]
	}).(GetAviatrixFirewallInstanceImagesFirewallImageOutput)
}

type GetAviatrixFirewallPolicyType struct {
	Action      string `pulumi:"action"`
	Description string `pulumi:"description"`
	// CIDRs separated by a comma or tag names such 'HR' or 'marketing' etc.
	DstIp string `pulumi:"dstIp"`
	// Indicates whether logging is enabled or not.
	// * `description`- Policy description.
	LogEnabled bool `pulumi:"logEnabled"`
	// A single port or a range of port numbers.
	// * `action`- `allow`, `deny` or `force-drop`(allow immediate packet dropping on established sessions).
	Port string `pulumi:"port"`
	// `all`, `tcp`, `udp`, `icmp`, `sctp`, `rdp` or `dccp`.
	Protocol string `pulumi:"protocol"`
	// CIDRs separated by a comma or tag names such 'HR' or 'marketing' etc.
	SrcIp string `pulumi:"srcIp"`
}

// GetAviatrixFirewallPolicyTypeInput is an input type that accepts GetAviatrixFirewallPolicyTypeArgs and GetAviatrixFirewallPolicyTypeOutput values.
// You can construct a concrete instance of `GetAviatrixFirewallPolicyTypeInput` via:
//
//	GetAviatrixFirewallPolicyTypeArgs{...}
type GetAviatrixFirewallPolicyTypeInput interface {
	pulumi.Input

	ToGetAviatrixFirewallPolicyTypeOutput() GetAviatrixFirewallPolicyTypeOutput
	ToGetAviatrixFirewallPolicyTypeOutputWithContext(context.Context) GetAviatrixFirewallPolicyTypeOutput
}

type GetAviatrixFirewallPolicyTypeArgs struct {
	Action      pulumi.StringInput `pulumi:"action"`
	Description pulumi.StringInput `pulumi:"description"`
	// CIDRs separated by a comma or tag names such 'HR' or 'marketing' etc.
	DstIp pulumi.StringInput `pulumi:"dstIp"`
	// Indicates whether logging is enabled or not.
	// * `description`- Policy description.
	LogEnabled pulumi.BoolInput `pulumi:"logEnabled"`
	// A single port or a range of port numbers.
	// * `action`- `allow`, `deny` or `force-drop`(allow immediate packet dropping on established sessions).
	Port pulumi.StringInput `pulumi:"port"`
	// `all`, `tcp`, `udp`, `icmp`, `sctp`, `rdp` or `dccp`.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// CIDRs separated by a comma or tag names such 'HR' or 'marketing' etc.
	SrcIp pulumi.StringInput `pulumi:"srcIp"`
}

func (GetAviatrixFirewallPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixFirewallPolicyType)(nil)).Elem()
}

func (i GetAviatrixFirewallPolicyTypeArgs) ToGetAviatrixFirewallPolicyTypeOutput() GetAviatrixFirewallPolicyTypeOutput {
	return i.ToGetAviatrixFirewallPolicyTypeOutputWithContext(context.Background())
}

func (i GetAviatrixFirewallPolicyTypeArgs) ToGetAviatrixFirewallPolicyTypeOutputWithContext(ctx context.Context) GetAviatrixFirewallPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixFirewallPolicyTypeOutput)
}

// GetAviatrixFirewallPolicyTypeArrayInput is an input type that accepts GetAviatrixFirewallPolicyTypeArray and GetAviatrixFirewallPolicyTypeArrayOutput values.
// You can construct a concrete instance of `GetAviatrixFirewallPolicyTypeArrayInput` via:
//
//	GetAviatrixFirewallPolicyTypeArray{ GetAviatrixFirewallPolicyTypeArgs{...} }
type GetAviatrixFirewallPolicyTypeArrayInput interface {
	pulumi.Input

	ToGetAviatrixFirewallPolicyTypeArrayOutput() GetAviatrixFirewallPolicyTypeArrayOutput
	ToGetAviatrixFirewallPolicyTypeArrayOutputWithContext(context.Context) GetAviatrixFirewallPolicyTypeArrayOutput
}

type GetAviatrixFirewallPolicyTypeArray []GetAviatrixFirewallPolicyTypeInput

func (GetAviatrixFirewallPolicyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixFirewallPolicyType)(nil)).Elem()
}

func (i GetAviatrixFirewallPolicyTypeArray) ToGetAviatrixFirewallPolicyTypeArrayOutput() GetAviatrixFirewallPolicyTypeArrayOutput {
	return i.ToGetAviatrixFirewallPolicyTypeArrayOutputWithContext(context.Background())
}

func (i GetAviatrixFirewallPolicyTypeArray) ToGetAviatrixFirewallPolicyTypeArrayOutputWithContext(ctx context.Context) GetAviatrixFirewallPolicyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixFirewallPolicyTypeArrayOutput)
}

type GetAviatrixFirewallPolicyTypeOutput struct{ *pulumi.OutputState }

func (GetAviatrixFirewallPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixFirewallPolicyType)(nil)).Elem()
}

func (o GetAviatrixFirewallPolicyTypeOutput) ToGetAviatrixFirewallPolicyTypeOutput() GetAviatrixFirewallPolicyTypeOutput {
	return o
}

func (o GetAviatrixFirewallPolicyTypeOutput) ToGetAviatrixFirewallPolicyTypeOutputWithContext(ctx context.Context) GetAviatrixFirewallPolicyTypeOutput {
	return o
}

func (o GetAviatrixFirewallPolicyTypeOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixFirewallPolicyType) string { return v.Action }).(pulumi.StringOutput)
}

func (o GetAviatrixFirewallPolicyTypeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixFirewallPolicyType) string { return v.Description }).(pulumi.StringOutput)
}

// CIDRs separated by a comma or tag names such 'HR' or 'marketing' etc.
func (o GetAviatrixFirewallPolicyTypeOutput) DstIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixFirewallPolicyType) string { return v.DstIp }).(pulumi.StringOutput)
}

// Indicates whether logging is enabled or not.
// * `description`- Policy description.
func (o GetAviatrixFirewallPolicyTypeOutput) LogEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixFirewallPolicyType) bool { return v.LogEnabled }).(pulumi.BoolOutput)
}

// A single port or a range of port numbers.
// * `action`- `allow`, `deny` or `force-drop`(allow immediate packet dropping on established sessions).
func (o GetAviatrixFirewallPolicyTypeOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixFirewallPolicyType) string { return v.Port }).(pulumi.StringOutput)
}

// `all`, `tcp`, `udp`, `icmp`, `sctp`, `rdp` or `dccp`.
func (o GetAviatrixFirewallPolicyTypeOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixFirewallPolicyType) string { return v.Protocol }).(pulumi.StringOutput)
}

// CIDRs separated by a comma or tag names such 'HR' or 'marketing' etc.
func (o GetAviatrixFirewallPolicyTypeOutput) SrcIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixFirewallPolicyType) string { return v.SrcIp }).(pulumi.StringOutput)
}

type GetAviatrixFirewallPolicyTypeArrayOutput struct{ *pulumi.OutputState }

func (GetAviatrixFirewallPolicyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixFirewallPolicyType)(nil)).Elem()
}

func (o GetAviatrixFirewallPolicyTypeArrayOutput) ToGetAviatrixFirewallPolicyTypeArrayOutput() GetAviatrixFirewallPolicyTypeArrayOutput {
	return o
}

func (o GetAviatrixFirewallPolicyTypeArrayOutput) ToGetAviatrixFirewallPolicyTypeArrayOutputWithContext(ctx context.Context) GetAviatrixFirewallPolicyTypeArrayOutput {
	return o
}

func (o GetAviatrixFirewallPolicyTypeArrayOutput) Index(i pulumi.IntInput) GetAviatrixFirewallPolicyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAviatrixFirewallPolicyType {
		return vs[0].([]GetAviatrixFirewallPolicyType)[vs[1].(int)]
	}).(GetAviatrixFirewallPolicyTypeOutput)
}

type GetAviatrixNetworkDomainsNetworkDomain struct {
	// Access Account name.
	Account string `pulumi:"account"`
	// Type of cloud service provider.
	CloudType string `pulumi:"cloudType"`
	// Egress inspection is enable or not.
	EgressInspection bool `pulumi:"egressInspection"`
	// Egress inspection name.
	EgressInspectionName string `pulumi:"egressInspectionName"`
	// Inspection policy name.
	InspectionPolicy string `pulumi:"inspectionPolicy"`
	// Firewall inspection for traffic within one Security Domain.
	IntraDomainInspection bool `pulumi:"intraDomainInspection"`
	// Intra domain inspection name.
	IntraDomainInspectionName string `pulumi:"intraDomainInspectionName"`
	// Network Domain name.
	Name string `pulumi:"name"`
	// Region of cloud provider.
	Region string `pulumi:"region"`
	// Route table's id.
	RouteTableId string `pulumi:"routeTableId"`
	// AWS TGW name.
	TgwName string `pulumi:"tgwName"`
	// Type of network domain.
	Type string `pulumi:"type"`
}

// GetAviatrixNetworkDomainsNetworkDomainInput is an input type that accepts GetAviatrixNetworkDomainsNetworkDomainArgs and GetAviatrixNetworkDomainsNetworkDomainOutput values.
// You can construct a concrete instance of `GetAviatrixNetworkDomainsNetworkDomainInput` via:
//
//	GetAviatrixNetworkDomainsNetworkDomainArgs{...}
type GetAviatrixNetworkDomainsNetworkDomainInput interface {
	pulumi.Input

	ToGetAviatrixNetworkDomainsNetworkDomainOutput() GetAviatrixNetworkDomainsNetworkDomainOutput
	ToGetAviatrixNetworkDomainsNetworkDomainOutputWithContext(context.Context) GetAviatrixNetworkDomainsNetworkDomainOutput
}

type GetAviatrixNetworkDomainsNetworkDomainArgs struct {
	// Access Account name.
	Account pulumi.StringInput `pulumi:"account"`
	// Type of cloud service provider.
	CloudType pulumi.StringInput `pulumi:"cloudType"`
	// Egress inspection is enable or not.
	EgressInspection pulumi.BoolInput `pulumi:"egressInspection"`
	// Egress inspection name.
	EgressInspectionName pulumi.StringInput `pulumi:"egressInspectionName"`
	// Inspection policy name.
	InspectionPolicy pulumi.StringInput `pulumi:"inspectionPolicy"`
	// Firewall inspection for traffic within one Security Domain.
	IntraDomainInspection pulumi.BoolInput `pulumi:"intraDomainInspection"`
	// Intra domain inspection name.
	IntraDomainInspectionName pulumi.StringInput `pulumi:"intraDomainInspectionName"`
	// Network Domain name.
	Name pulumi.StringInput `pulumi:"name"`
	// Region of cloud provider.
	Region pulumi.StringInput `pulumi:"region"`
	// Route table's id.
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
	// AWS TGW name.
	TgwName pulumi.StringInput `pulumi:"tgwName"`
	// Type of network domain.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetAviatrixNetworkDomainsNetworkDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixNetworkDomainsNetworkDomain)(nil)).Elem()
}

func (i GetAviatrixNetworkDomainsNetworkDomainArgs) ToGetAviatrixNetworkDomainsNetworkDomainOutput() GetAviatrixNetworkDomainsNetworkDomainOutput {
	return i.ToGetAviatrixNetworkDomainsNetworkDomainOutputWithContext(context.Background())
}

func (i GetAviatrixNetworkDomainsNetworkDomainArgs) ToGetAviatrixNetworkDomainsNetworkDomainOutputWithContext(ctx context.Context) GetAviatrixNetworkDomainsNetworkDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixNetworkDomainsNetworkDomainOutput)
}

// GetAviatrixNetworkDomainsNetworkDomainArrayInput is an input type that accepts GetAviatrixNetworkDomainsNetworkDomainArray and GetAviatrixNetworkDomainsNetworkDomainArrayOutput values.
// You can construct a concrete instance of `GetAviatrixNetworkDomainsNetworkDomainArrayInput` via:
//
//	GetAviatrixNetworkDomainsNetworkDomainArray{ GetAviatrixNetworkDomainsNetworkDomainArgs{...} }
type GetAviatrixNetworkDomainsNetworkDomainArrayInput interface {
	pulumi.Input

	ToGetAviatrixNetworkDomainsNetworkDomainArrayOutput() GetAviatrixNetworkDomainsNetworkDomainArrayOutput
	ToGetAviatrixNetworkDomainsNetworkDomainArrayOutputWithContext(context.Context) GetAviatrixNetworkDomainsNetworkDomainArrayOutput
}

type GetAviatrixNetworkDomainsNetworkDomainArray []GetAviatrixNetworkDomainsNetworkDomainInput

func (GetAviatrixNetworkDomainsNetworkDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixNetworkDomainsNetworkDomain)(nil)).Elem()
}

func (i GetAviatrixNetworkDomainsNetworkDomainArray) ToGetAviatrixNetworkDomainsNetworkDomainArrayOutput() GetAviatrixNetworkDomainsNetworkDomainArrayOutput {
	return i.ToGetAviatrixNetworkDomainsNetworkDomainArrayOutputWithContext(context.Background())
}

func (i GetAviatrixNetworkDomainsNetworkDomainArray) ToGetAviatrixNetworkDomainsNetworkDomainArrayOutputWithContext(ctx context.Context) GetAviatrixNetworkDomainsNetworkDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixNetworkDomainsNetworkDomainArrayOutput)
}

type GetAviatrixNetworkDomainsNetworkDomainOutput struct{ *pulumi.OutputState }

func (GetAviatrixNetworkDomainsNetworkDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixNetworkDomainsNetworkDomain)(nil)).Elem()
}

func (o GetAviatrixNetworkDomainsNetworkDomainOutput) ToGetAviatrixNetworkDomainsNetworkDomainOutput() GetAviatrixNetworkDomainsNetworkDomainOutput {
	return o
}

func (o GetAviatrixNetworkDomainsNetworkDomainOutput) ToGetAviatrixNetworkDomainsNetworkDomainOutputWithContext(ctx context.Context) GetAviatrixNetworkDomainsNetworkDomainOutput {
	return o
}

// Access Account name.
func (o GetAviatrixNetworkDomainsNetworkDomainOutput) Account() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixNetworkDomainsNetworkDomain) string { return v.Account }).(pulumi.StringOutput)
}

// Type of cloud service provider.
func (o GetAviatrixNetworkDomainsNetworkDomainOutput) CloudType() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixNetworkDomainsNetworkDomain) string { return v.CloudType }).(pulumi.StringOutput)
}

// Egress inspection is enable or not.
func (o GetAviatrixNetworkDomainsNetworkDomainOutput) EgressInspection() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixNetworkDomainsNetworkDomain) bool { return v.EgressInspection }).(pulumi.BoolOutput)
}

// Egress inspection name.
func (o GetAviatrixNetworkDomainsNetworkDomainOutput) EgressInspectionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixNetworkDomainsNetworkDomain) string { return v.EgressInspectionName }).(pulumi.StringOutput)
}

// Inspection policy name.
func (o GetAviatrixNetworkDomainsNetworkDomainOutput) InspectionPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixNetworkDomainsNetworkDomain) string { return v.InspectionPolicy }).(pulumi.StringOutput)
}

// Firewall inspection for traffic within one Security Domain.
func (o GetAviatrixNetworkDomainsNetworkDomainOutput) IntraDomainInspection() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixNetworkDomainsNetworkDomain) bool { return v.IntraDomainInspection }).(pulumi.BoolOutput)
}

// Intra domain inspection name.
func (o GetAviatrixNetworkDomainsNetworkDomainOutput) IntraDomainInspectionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixNetworkDomainsNetworkDomain) string { return v.IntraDomainInspectionName }).(pulumi.StringOutput)
}

// Network Domain name.
func (o GetAviatrixNetworkDomainsNetworkDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixNetworkDomainsNetworkDomain) string { return v.Name }).(pulumi.StringOutput)
}

// Region of cloud provider.
func (o GetAviatrixNetworkDomainsNetworkDomainOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixNetworkDomainsNetworkDomain) string { return v.Region }).(pulumi.StringOutput)
}

// Route table's id.
func (o GetAviatrixNetworkDomainsNetworkDomainOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixNetworkDomainsNetworkDomain) string { return v.RouteTableId }).(pulumi.StringOutput)
}

// AWS TGW name.
func (o GetAviatrixNetworkDomainsNetworkDomainOutput) TgwName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixNetworkDomainsNetworkDomain) string { return v.TgwName }).(pulumi.StringOutput)
}

// Type of network domain.
func (o GetAviatrixNetworkDomainsNetworkDomainOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixNetworkDomainsNetworkDomain) string { return v.Type }).(pulumi.StringOutput)
}

type GetAviatrixNetworkDomainsNetworkDomainArrayOutput struct{ *pulumi.OutputState }

func (GetAviatrixNetworkDomainsNetworkDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixNetworkDomainsNetworkDomain)(nil)).Elem()
}

func (o GetAviatrixNetworkDomainsNetworkDomainArrayOutput) ToGetAviatrixNetworkDomainsNetworkDomainArrayOutput() GetAviatrixNetworkDomainsNetworkDomainArrayOutput {
	return o
}

func (o GetAviatrixNetworkDomainsNetworkDomainArrayOutput) ToGetAviatrixNetworkDomainsNetworkDomainArrayOutputWithContext(ctx context.Context) GetAviatrixNetworkDomainsNetworkDomainArrayOutput {
	return o
}

func (o GetAviatrixNetworkDomainsNetworkDomainArrayOutput) Index(i pulumi.IntInput) GetAviatrixNetworkDomainsNetworkDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAviatrixNetworkDomainsNetworkDomain {
		return vs[0].([]GetAviatrixNetworkDomainsNetworkDomain)[vs[1].(int)]
	}).(GetAviatrixNetworkDomainsNetworkDomainOutput)
}

type GetAviatrixTransitGatewayBgpLanInterface struct {
	// Subnet Info.
	Subnet string `pulumi:"subnet"`
	// VPC-ID of GCP cloud provider.
	VpcId string `pulumi:"vpcId"`
}

// GetAviatrixTransitGatewayBgpLanInterfaceInput is an input type that accepts GetAviatrixTransitGatewayBgpLanInterfaceArgs and GetAviatrixTransitGatewayBgpLanInterfaceOutput values.
// You can construct a concrete instance of `GetAviatrixTransitGatewayBgpLanInterfaceInput` via:
//
//	GetAviatrixTransitGatewayBgpLanInterfaceArgs{...}
type GetAviatrixTransitGatewayBgpLanInterfaceInput interface {
	pulumi.Input

	ToGetAviatrixTransitGatewayBgpLanInterfaceOutput() GetAviatrixTransitGatewayBgpLanInterfaceOutput
	ToGetAviatrixTransitGatewayBgpLanInterfaceOutputWithContext(context.Context) GetAviatrixTransitGatewayBgpLanInterfaceOutput
}

type GetAviatrixTransitGatewayBgpLanInterfaceArgs struct {
	// Subnet Info.
	Subnet pulumi.StringInput `pulumi:"subnet"`
	// VPC-ID of GCP cloud provider.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetAviatrixTransitGatewayBgpLanInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixTransitGatewayBgpLanInterface)(nil)).Elem()
}

func (i GetAviatrixTransitGatewayBgpLanInterfaceArgs) ToGetAviatrixTransitGatewayBgpLanInterfaceOutput() GetAviatrixTransitGatewayBgpLanInterfaceOutput {
	return i.ToGetAviatrixTransitGatewayBgpLanInterfaceOutputWithContext(context.Background())
}

func (i GetAviatrixTransitGatewayBgpLanInterfaceArgs) ToGetAviatrixTransitGatewayBgpLanInterfaceOutputWithContext(ctx context.Context) GetAviatrixTransitGatewayBgpLanInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixTransitGatewayBgpLanInterfaceOutput)
}

// GetAviatrixTransitGatewayBgpLanInterfaceArrayInput is an input type that accepts GetAviatrixTransitGatewayBgpLanInterfaceArray and GetAviatrixTransitGatewayBgpLanInterfaceArrayOutput values.
// You can construct a concrete instance of `GetAviatrixTransitGatewayBgpLanInterfaceArrayInput` via:
//
//	GetAviatrixTransitGatewayBgpLanInterfaceArray{ GetAviatrixTransitGatewayBgpLanInterfaceArgs{...} }
type GetAviatrixTransitGatewayBgpLanInterfaceArrayInput interface {
	pulumi.Input

	ToGetAviatrixTransitGatewayBgpLanInterfaceArrayOutput() GetAviatrixTransitGatewayBgpLanInterfaceArrayOutput
	ToGetAviatrixTransitGatewayBgpLanInterfaceArrayOutputWithContext(context.Context) GetAviatrixTransitGatewayBgpLanInterfaceArrayOutput
}

type GetAviatrixTransitGatewayBgpLanInterfaceArray []GetAviatrixTransitGatewayBgpLanInterfaceInput

func (GetAviatrixTransitGatewayBgpLanInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixTransitGatewayBgpLanInterface)(nil)).Elem()
}

func (i GetAviatrixTransitGatewayBgpLanInterfaceArray) ToGetAviatrixTransitGatewayBgpLanInterfaceArrayOutput() GetAviatrixTransitGatewayBgpLanInterfaceArrayOutput {
	return i.ToGetAviatrixTransitGatewayBgpLanInterfaceArrayOutputWithContext(context.Background())
}

func (i GetAviatrixTransitGatewayBgpLanInterfaceArray) ToGetAviatrixTransitGatewayBgpLanInterfaceArrayOutputWithContext(ctx context.Context) GetAviatrixTransitGatewayBgpLanInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixTransitGatewayBgpLanInterfaceArrayOutput)
}

type GetAviatrixTransitGatewayBgpLanInterfaceOutput struct{ *pulumi.OutputState }

func (GetAviatrixTransitGatewayBgpLanInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixTransitGatewayBgpLanInterface)(nil)).Elem()
}

func (o GetAviatrixTransitGatewayBgpLanInterfaceOutput) ToGetAviatrixTransitGatewayBgpLanInterfaceOutput() GetAviatrixTransitGatewayBgpLanInterfaceOutput {
	return o
}

func (o GetAviatrixTransitGatewayBgpLanInterfaceOutput) ToGetAviatrixTransitGatewayBgpLanInterfaceOutputWithContext(ctx context.Context) GetAviatrixTransitGatewayBgpLanInterfaceOutput {
	return o
}

// Subnet Info.
func (o GetAviatrixTransitGatewayBgpLanInterfaceOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewayBgpLanInterface) string { return v.Subnet }).(pulumi.StringOutput)
}

// VPC-ID of GCP cloud provider.
func (o GetAviatrixTransitGatewayBgpLanInterfaceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewayBgpLanInterface) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetAviatrixTransitGatewayBgpLanInterfaceArrayOutput struct{ *pulumi.OutputState }

func (GetAviatrixTransitGatewayBgpLanInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixTransitGatewayBgpLanInterface)(nil)).Elem()
}

func (o GetAviatrixTransitGatewayBgpLanInterfaceArrayOutput) ToGetAviatrixTransitGatewayBgpLanInterfaceArrayOutput() GetAviatrixTransitGatewayBgpLanInterfaceArrayOutput {
	return o
}

func (o GetAviatrixTransitGatewayBgpLanInterfaceArrayOutput) ToGetAviatrixTransitGatewayBgpLanInterfaceArrayOutputWithContext(ctx context.Context) GetAviatrixTransitGatewayBgpLanInterfaceArrayOutput {
	return o
}

func (o GetAviatrixTransitGatewayBgpLanInterfaceArrayOutput) Index(i pulumi.IntInput) GetAviatrixTransitGatewayBgpLanInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAviatrixTransitGatewayBgpLanInterface {
		return vs[0].([]GetAviatrixTransitGatewayBgpLanInterface)[vs[1].(int)]
	}).(GetAviatrixTransitGatewayBgpLanInterfaceOutput)
}

type GetAviatrixTransitGatewayHaBgpLanInterface struct {
	// Subnet Info.
	Subnet string `pulumi:"subnet"`
	// VPC-ID of GCP cloud provider.
	VpcId string `pulumi:"vpcId"`
}

// GetAviatrixTransitGatewayHaBgpLanInterfaceInput is an input type that accepts GetAviatrixTransitGatewayHaBgpLanInterfaceArgs and GetAviatrixTransitGatewayHaBgpLanInterfaceOutput values.
// You can construct a concrete instance of `GetAviatrixTransitGatewayHaBgpLanInterfaceInput` via:
//
//	GetAviatrixTransitGatewayHaBgpLanInterfaceArgs{...}
type GetAviatrixTransitGatewayHaBgpLanInterfaceInput interface {
	pulumi.Input

	ToGetAviatrixTransitGatewayHaBgpLanInterfaceOutput() GetAviatrixTransitGatewayHaBgpLanInterfaceOutput
	ToGetAviatrixTransitGatewayHaBgpLanInterfaceOutputWithContext(context.Context) GetAviatrixTransitGatewayHaBgpLanInterfaceOutput
}

type GetAviatrixTransitGatewayHaBgpLanInterfaceArgs struct {
	// Subnet Info.
	Subnet pulumi.StringInput `pulumi:"subnet"`
	// VPC-ID of GCP cloud provider.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetAviatrixTransitGatewayHaBgpLanInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixTransitGatewayHaBgpLanInterface)(nil)).Elem()
}

func (i GetAviatrixTransitGatewayHaBgpLanInterfaceArgs) ToGetAviatrixTransitGatewayHaBgpLanInterfaceOutput() GetAviatrixTransitGatewayHaBgpLanInterfaceOutput {
	return i.ToGetAviatrixTransitGatewayHaBgpLanInterfaceOutputWithContext(context.Background())
}

func (i GetAviatrixTransitGatewayHaBgpLanInterfaceArgs) ToGetAviatrixTransitGatewayHaBgpLanInterfaceOutputWithContext(ctx context.Context) GetAviatrixTransitGatewayHaBgpLanInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixTransitGatewayHaBgpLanInterfaceOutput)
}

// GetAviatrixTransitGatewayHaBgpLanInterfaceArrayInput is an input type that accepts GetAviatrixTransitGatewayHaBgpLanInterfaceArray and GetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput values.
// You can construct a concrete instance of `GetAviatrixTransitGatewayHaBgpLanInterfaceArrayInput` via:
//
//	GetAviatrixTransitGatewayHaBgpLanInterfaceArray{ GetAviatrixTransitGatewayHaBgpLanInterfaceArgs{...} }
type GetAviatrixTransitGatewayHaBgpLanInterfaceArrayInput interface {
	pulumi.Input

	ToGetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput() GetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput
	ToGetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutputWithContext(context.Context) GetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput
}

type GetAviatrixTransitGatewayHaBgpLanInterfaceArray []GetAviatrixTransitGatewayHaBgpLanInterfaceInput

func (GetAviatrixTransitGatewayHaBgpLanInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixTransitGatewayHaBgpLanInterface)(nil)).Elem()
}

func (i GetAviatrixTransitGatewayHaBgpLanInterfaceArray) ToGetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput() GetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput {
	return i.ToGetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutputWithContext(context.Background())
}

func (i GetAviatrixTransitGatewayHaBgpLanInterfaceArray) ToGetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutputWithContext(ctx context.Context) GetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput)
}

type GetAviatrixTransitGatewayHaBgpLanInterfaceOutput struct{ *pulumi.OutputState }

func (GetAviatrixTransitGatewayHaBgpLanInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixTransitGatewayHaBgpLanInterface)(nil)).Elem()
}

func (o GetAviatrixTransitGatewayHaBgpLanInterfaceOutput) ToGetAviatrixTransitGatewayHaBgpLanInterfaceOutput() GetAviatrixTransitGatewayHaBgpLanInterfaceOutput {
	return o
}

func (o GetAviatrixTransitGatewayHaBgpLanInterfaceOutput) ToGetAviatrixTransitGatewayHaBgpLanInterfaceOutputWithContext(ctx context.Context) GetAviatrixTransitGatewayHaBgpLanInterfaceOutput {
	return o
}

// Subnet Info.
func (o GetAviatrixTransitGatewayHaBgpLanInterfaceOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewayHaBgpLanInterface) string { return v.Subnet }).(pulumi.StringOutput)
}

// VPC-ID of GCP cloud provider.
func (o GetAviatrixTransitGatewayHaBgpLanInterfaceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewayHaBgpLanInterface) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput struct{ *pulumi.OutputState }

func (GetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixTransitGatewayHaBgpLanInterface)(nil)).Elem()
}

func (o GetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput) ToGetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput() GetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput {
	return o
}

func (o GetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput) ToGetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutputWithContext(ctx context.Context) GetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput {
	return o
}

func (o GetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput) Index(i pulumi.IntInput) GetAviatrixTransitGatewayHaBgpLanInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAviatrixTransitGatewayHaBgpLanInterface {
		return vs[0].([]GetAviatrixTransitGatewayHaBgpLanInterface)[vs[1].(int)]
	}).(GetAviatrixTransitGatewayHaBgpLanInterfaceOutput)
}

type GetAviatrixTransitGatewaysGatewayList struct {
	// Aviatrix account name.
	AccountName string `pulumi:"accountName"`
	// When value is false, an idle address in Elastic IP pool is reused for this gateway. Otherwise, a new Elastic IP is allocated and used for this gateway.
	AllocateNewEip bool `pulumi:"allocateNewEip"`
	// Availability domain for OCI.
	AvailabilityDomain string `pulumi:"availabilityDomain"`
	// The name of the public IP address and its resource group in Azure to assign to this Transit Gateway.
	AzureEipNameResourceGroup string `pulumi:"azureEipNameResourceGroup"`
	// Enable Equal Cost Multi Path (ECMP) routing for the next hop.
	BgpEcmp bool `pulumi:"bgpEcmp"`
	// BGP Hold Time.
	BgpHoldTime int `pulumi:"bgpHoldTime"`
	// Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP Transit.
	BgpLanInterfaces []GetAviatrixTransitGatewaysGatewayListBgpLanInterface `pulumi:"bgpLanInterfaces"`
	// List of available BGP LAN interface IPs for transit external device connection creation. Only supports GCP. Available as of provider version R2.21.0+.
	BgpLanIpLists []string `pulumi:"bgpLanIpLists"`
	// BGP route polling time. Unit is in seconds.
	BgpPollingTime string `pulumi:"bgpPollingTime"`
	// Instance ID of the transit gateway.
	CloudInstanceId string `pulumi:"cloudInstanceId"`
	// Type of cloud service provider.
	// * `connectedTransit"` -  Status of Connected Transit of transit gateway.
	CloudType        int  `pulumi:"cloudType"`
	ConnectedTransit bool `pulumi:"connectedTransit"`
	// A list of comma separated CIDRs to be customized for the spoke VPC routes.
	CustomizedSpokeVpcRoutes string `pulumi:"customizedSpokeVpcRoutes"`
	// Enables Active-Standby Mode, available only with HA enabled.
	EnableActiveStandby bool `pulumi:"enableActiveStandby"`
	// Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.
	EnableActiveStandbyPreemptive bool `pulumi:"enableActiveStandbyPreemptive"`
	// Pre-allocate a network interface(eth4) for \"BGP over LAN\" functionality. Only valid for cloudType = 4 (GCP) and 8 (Azure). Available as of provider version R2.18+
	EnableBgpOverLan bool `pulumi:"enableBgpOverLan"`
	// Status of Encrypt Gateway EBS Volume of the transit gateway.
	EnableEncryptVolume bool `pulumi:"enableEncryptVolume"`
	// Enable firenet interfaces with AWS Gateway Load Balancer.
	EnableGatewayLoadBalancer bool `pulumi:"enableGatewayLoadBalancer"`
	// Sign of readiness for TGW connection.
	EnableHybridConnection bool `pulumi:"enableHybridConnection"`
	// Enable jumbo frame support for transit gateway.
	EnableJumboFrame bool `pulumi:"enableJumboFrame"`
	// Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for cloudType = 1 (AWS) or 256 (AWSGov).
	EnableMonitorGatewaySubnets bool `pulumi:"enableMonitorGatewaySubnets"`
	// Status of multi-tier transit mode on transit gateway.
	EnableMultiTierTransit bool `pulumi:"enableMultiTierTransit"`
	// Status of private OOB for the transit gateway.
	EnablePrivateOob bool `pulumi:"enablePrivateOob"`
	// Enable segmentation to allow association of transit gateway to security domains.
	EnableSegmentation bool `pulumi:"enableSegmentation"`
	// Enable spot instance. NOT supported for production deployment.
	EnableSpotInstance bool `pulumi:"enableSpotInstance"`
	// Enable summarize CIDR to TGW.
	EnableTransitSummarizeCidrToTgw bool `pulumi:"enableTransitSummarizeCidrToTgw"`
	// Status of Vpc Dns Server of the transit Gateway.
	EnableVpcDnsServer bool `pulumi:"enableVpcDnsServer"`
	// A list of comma separated CIDRs to be advertised to on-prem as "Excluded CIDR List".
	ExcludedAdvertisedSpokeRoutes string `pulumi:"excludedAdvertisedSpokeRoutes"`
	// Fault domain for OCI.
	FaultDomain string `pulumi:"faultDomain"`
	// A list of comma separated CIDRs to be filtered from the spoke VPC route table.
	FilteredSpokeVpcRoutes string `pulumi:"filteredSpokeVpcRoutes"`
	// Aviatrix transit gateway name.
	GwName string `pulumi:"gwName"`
	// Size of transit gateway instance.
	GwSize string `pulumi:"gwSize"`
	// Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP HA Transit.
	HaBgpLanInterfaces []GetAviatrixTransitGatewaysGatewayListHaBgpLanInterface `pulumi:"haBgpLanInterfaces"`
	// List of available BGP LAN interface IPs for transit external device HA connection creation. Only supports GCP. Available as of provider version R2.21.0+.
	HaBgpLanIpLists []string `pulumi:"haBgpLanIpLists"`
	// The image version of the gateway.
	ImageVersion string `pulumi:"imageVersion"`
	// Status of Insane Mode of the transit gateway.
	InsaneMode bool `pulumi:"insaneMode"`
	// AZ of subnet being created for Insane Mode transit gateway.
	InsaneModeAz string `pulumi:"insaneModeAz"`
	// LAN Private Subnet. Only used for GCP Transit FireNet.
	LanPrivateSubnet string `pulumi:"lanPrivateSubnet"`
	// LAN VPC ID. Only used for GCP Transit FireNet.
	LanVpcId string `pulumi:"lanVpcId"`
	// Set the learned CIDRs approval mode.
	LearnedCidrsApprovalMode string `pulumi:"learnedCidrsApprovalMode"`
	// Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.
	LocalAsNumber string `pulumi:"localAsNumber"`
	// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
	MonitorExcludeLists []string `pulumi:"monitorExcludeLists"`
	// OOB availability zone.
	OobAvailabilityZone string `pulumi:"oobAvailabilityZone"`
	// OOB management subnet.
	OobManagementSubnet string `pulumi:"oobManagementSubnet"`
	// List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.
	PrependAsPaths []string `pulumi:"prependAsPaths"`
	// Private IP address of the transit gateway created.
	PrivateIp string `pulumi:"privateIp"`
	// Public IP address of the Transit Gateway created.
	PublicIp string `pulumi:"publicIp"`
	// Security group used for the transit gateway.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// Status of Single AZ HA of transit gateway.
	SingleAzHa bool `pulumi:"singleAzHa"`
	// Status of Single IP Source Nat mode of the transit gateway.
	SingleIpSnat bool `pulumi:"singleIpSnat"`
	// The software version of the gateway.
	SoftwareVersion string `pulumi:"softwareVersion"`
	// Price for spot instance. NOT supported for production deployment.
	SpotPrice string `pulumi:"spotPrice"`
	// A VPC Network address range selected from one of the available network ranges.
	Subnet string `pulumi:"subnet"`
	// The IPSec tunnel down detection time for the transit gateway.
	TunnelDetectionTime int `pulumi:"tunnelDetectionTime"`
	// VPC-ID/VNet-Name of cloud provider.
	VpcId string `pulumi:"vpcId"`
	// Region of cloud provider.
	VpcReg string `pulumi:"vpcReg"`
	// Availability Zone. Only available for cloudType = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.
	Zone string `pulumi:"zone"`
}

// GetAviatrixTransitGatewaysGatewayListInput is an input type that accepts GetAviatrixTransitGatewaysGatewayListArgs and GetAviatrixTransitGatewaysGatewayListOutput values.
// You can construct a concrete instance of `GetAviatrixTransitGatewaysGatewayListInput` via:
//
//	GetAviatrixTransitGatewaysGatewayListArgs{...}
type GetAviatrixTransitGatewaysGatewayListInput interface {
	pulumi.Input

	ToGetAviatrixTransitGatewaysGatewayListOutput() GetAviatrixTransitGatewaysGatewayListOutput
	ToGetAviatrixTransitGatewaysGatewayListOutputWithContext(context.Context) GetAviatrixTransitGatewaysGatewayListOutput
}

type GetAviatrixTransitGatewaysGatewayListArgs struct {
	// Aviatrix account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// When value is false, an idle address in Elastic IP pool is reused for this gateway. Otherwise, a new Elastic IP is allocated and used for this gateway.
	AllocateNewEip pulumi.BoolInput `pulumi:"allocateNewEip"`
	// Availability domain for OCI.
	AvailabilityDomain pulumi.StringInput `pulumi:"availabilityDomain"`
	// The name of the public IP address and its resource group in Azure to assign to this Transit Gateway.
	AzureEipNameResourceGroup pulumi.StringInput `pulumi:"azureEipNameResourceGroup"`
	// Enable Equal Cost Multi Path (ECMP) routing for the next hop.
	BgpEcmp pulumi.BoolInput `pulumi:"bgpEcmp"`
	// BGP Hold Time.
	BgpHoldTime pulumi.IntInput `pulumi:"bgpHoldTime"`
	// Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP Transit.
	BgpLanInterfaces GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayInput `pulumi:"bgpLanInterfaces"`
	// List of available BGP LAN interface IPs for transit external device connection creation. Only supports GCP. Available as of provider version R2.21.0+.
	BgpLanIpLists pulumi.StringArrayInput `pulumi:"bgpLanIpLists"`
	// BGP route polling time. Unit is in seconds.
	BgpPollingTime pulumi.StringInput `pulumi:"bgpPollingTime"`
	// Instance ID of the transit gateway.
	CloudInstanceId pulumi.StringInput `pulumi:"cloudInstanceId"`
	// Type of cloud service provider.
	// * `connectedTransit"` -  Status of Connected Transit of transit gateway.
	CloudType        pulumi.IntInput  `pulumi:"cloudType"`
	ConnectedTransit pulumi.BoolInput `pulumi:"connectedTransit"`
	// A list of comma separated CIDRs to be customized for the spoke VPC routes.
	CustomizedSpokeVpcRoutes pulumi.StringInput `pulumi:"customizedSpokeVpcRoutes"`
	// Enables Active-Standby Mode, available only with HA enabled.
	EnableActiveStandby pulumi.BoolInput `pulumi:"enableActiveStandby"`
	// Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.
	EnableActiveStandbyPreemptive pulumi.BoolInput `pulumi:"enableActiveStandbyPreemptive"`
	// Pre-allocate a network interface(eth4) for \"BGP over LAN\" functionality. Only valid for cloudType = 4 (GCP) and 8 (Azure). Available as of provider version R2.18+
	EnableBgpOverLan pulumi.BoolInput `pulumi:"enableBgpOverLan"`
	// Status of Encrypt Gateway EBS Volume of the transit gateway.
	EnableEncryptVolume pulumi.BoolInput `pulumi:"enableEncryptVolume"`
	// Enable firenet interfaces with AWS Gateway Load Balancer.
	EnableGatewayLoadBalancer pulumi.BoolInput `pulumi:"enableGatewayLoadBalancer"`
	// Sign of readiness for TGW connection.
	EnableHybridConnection pulumi.BoolInput `pulumi:"enableHybridConnection"`
	// Enable jumbo frame support for transit gateway.
	EnableJumboFrame pulumi.BoolInput `pulumi:"enableJumboFrame"`
	// Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for cloudType = 1 (AWS) or 256 (AWSGov).
	EnableMonitorGatewaySubnets pulumi.BoolInput `pulumi:"enableMonitorGatewaySubnets"`
	// Status of multi-tier transit mode on transit gateway.
	EnableMultiTierTransit pulumi.BoolInput `pulumi:"enableMultiTierTransit"`
	// Status of private OOB for the transit gateway.
	EnablePrivateOob pulumi.BoolInput `pulumi:"enablePrivateOob"`
	// Enable segmentation to allow association of transit gateway to security domains.
	EnableSegmentation pulumi.BoolInput `pulumi:"enableSegmentation"`
	// Enable spot instance. NOT supported for production deployment.
	EnableSpotInstance pulumi.BoolInput `pulumi:"enableSpotInstance"`
	// Enable summarize CIDR to TGW.
	EnableTransitSummarizeCidrToTgw pulumi.BoolInput `pulumi:"enableTransitSummarizeCidrToTgw"`
	// Status of Vpc Dns Server of the transit Gateway.
	EnableVpcDnsServer pulumi.BoolInput `pulumi:"enableVpcDnsServer"`
	// A list of comma separated CIDRs to be advertised to on-prem as "Excluded CIDR List".
	ExcludedAdvertisedSpokeRoutes pulumi.StringInput `pulumi:"excludedAdvertisedSpokeRoutes"`
	// Fault domain for OCI.
	FaultDomain pulumi.StringInput `pulumi:"faultDomain"`
	// A list of comma separated CIDRs to be filtered from the spoke VPC route table.
	FilteredSpokeVpcRoutes pulumi.StringInput `pulumi:"filteredSpokeVpcRoutes"`
	// Aviatrix transit gateway name.
	GwName pulumi.StringInput `pulumi:"gwName"`
	// Size of transit gateway instance.
	GwSize pulumi.StringInput `pulumi:"gwSize"`
	// Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP HA Transit.
	HaBgpLanInterfaces GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayInput `pulumi:"haBgpLanInterfaces"`
	// List of available BGP LAN interface IPs for transit external device HA connection creation. Only supports GCP. Available as of provider version R2.21.0+.
	HaBgpLanIpLists pulumi.StringArrayInput `pulumi:"haBgpLanIpLists"`
	// The image version of the gateway.
	ImageVersion pulumi.StringInput `pulumi:"imageVersion"`
	// Status of Insane Mode of the transit gateway.
	InsaneMode pulumi.BoolInput `pulumi:"insaneMode"`
	// AZ of subnet being created for Insane Mode transit gateway.
	InsaneModeAz pulumi.StringInput `pulumi:"insaneModeAz"`
	// LAN Private Subnet. Only used for GCP Transit FireNet.
	LanPrivateSubnet pulumi.StringInput `pulumi:"lanPrivateSubnet"`
	// LAN VPC ID. Only used for GCP Transit FireNet.
	LanVpcId pulumi.StringInput `pulumi:"lanVpcId"`
	// Set the learned CIDRs approval mode.
	LearnedCidrsApprovalMode pulumi.StringInput `pulumi:"learnedCidrsApprovalMode"`
	// Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.
	LocalAsNumber pulumi.StringInput `pulumi:"localAsNumber"`
	// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
	MonitorExcludeLists pulumi.StringArrayInput `pulumi:"monitorExcludeLists"`
	// OOB availability zone.
	OobAvailabilityZone pulumi.StringInput `pulumi:"oobAvailabilityZone"`
	// OOB management subnet.
	OobManagementSubnet pulumi.StringInput `pulumi:"oobManagementSubnet"`
	// List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.
	PrependAsPaths pulumi.StringArrayInput `pulumi:"prependAsPaths"`
	// Private IP address of the transit gateway created.
	PrivateIp pulumi.StringInput `pulumi:"privateIp"`
	// Public IP address of the Transit Gateway created.
	PublicIp pulumi.StringInput `pulumi:"publicIp"`
	// Security group used for the transit gateway.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// Status of Single AZ HA of transit gateway.
	SingleAzHa pulumi.BoolInput `pulumi:"singleAzHa"`
	// Status of Single IP Source Nat mode of the transit gateway.
	SingleIpSnat pulumi.BoolInput `pulumi:"singleIpSnat"`
	// The software version of the gateway.
	SoftwareVersion pulumi.StringInput `pulumi:"softwareVersion"`
	// Price for spot instance. NOT supported for production deployment.
	SpotPrice pulumi.StringInput `pulumi:"spotPrice"`
	// A VPC Network address range selected from one of the available network ranges.
	Subnet pulumi.StringInput `pulumi:"subnet"`
	// The IPSec tunnel down detection time for the transit gateway.
	TunnelDetectionTime pulumi.IntInput `pulumi:"tunnelDetectionTime"`
	// VPC-ID/VNet-Name of cloud provider.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// Region of cloud provider.
	VpcReg pulumi.StringInput `pulumi:"vpcReg"`
	// Availability Zone. Only available for cloudType = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetAviatrixTransitGatewaysGatewayListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixTransitGatewaysGatewayList)(nil)).Elem()
}

func (i GetAviatrixTransitGatewaysGatewayListArgs) ToGetAviatrixTransitGatewaysGatewayListOutput() GetAviatrixTransitGatewaysGatewayListOutput {
	return i.ToGetAviatrixTransitGatewaysGatewayListOutputWithContext(context.Background())
}

func (i GetAviatrixTransitGatewaysGatewayListArgs) ToGetAviatrixTransitGatewaysGatewayListOutputWithContext(ctx context.Context) GetAviatrixTransitGatewaysGatewayListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixTransitGatewaysGatewayListOutput)
}

// GetAviatrixTransitGatewaysGatewayListArrayInput is an input type that accepts GetAviatrixTransitGatewaysGatewayListArray and GetAviatrixTransitGatewaysGatewayListArrayOutput values.
// You can construct a concrete instance of `GetAviatrixTransitGatewaysGatewayListArrayInput` via:
//
//	GetAviatrixTransitGatewaysGatewayListArray{ GetAviatrixTransitGatewaysGatewayListArgs{...} }
type GetAviatrixTransitGatewaysGatewayListArrayInput interface {
	pulumi.Input

	ToGetAviatrixTransitGatewaysGatewayListArrayOutput() GetAviatrixTransitGatewaysGatewayListArrayOutput
	ToGetAviatrixTransitGatewaysGatewayListArrayOutputWithContext(context.Context) GetAviatrixTransitGatewaysGatewayListArrayOutput
}

type GetAviatrixTransitGatewaysGatewayListArray []GetAviatrixTransitGatewaysGatewayListInput

func (GetAviatrixTransitGatewaysGatewayListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixTransitGatewaysGatewayList)(nil)).Elem()
}

func (i GetAviatrixTransitGatewaysGatewayListArray) ToGetAviatrixTransitGatewaysGatewayListArrayOutput() GetAviatrixTransitGatewaysGatewayListArrayOutput {
	return i.ToGetAviatrixTransitGatewaysGatewayListArrayOutputWithContext(context.Background())
}

func (i GetAviatrixTransitGatewaysGatewayListArray) ToGetAviatrixTransitGatewaysGatewayListArrayOutputWithContext(ctx context.Context) GetAviatrixTransitGatewaysGatewayListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixTransitGatewaysGatewayListArrayOutput)
}

type GetAviatrixTransitGatewaysGatewayListOutput struct{ *pulumi.OutputState }

func (GetAviatrixTransitGatewaysGatewayListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixTransitGatewaysGatewayList)(nil)).Elem()
}

func (o GetAviatrixTransitGatewaysGatewayListOutput) ToGetAviatrixTransitGatewaysGatewayListOutput() GetAviatrixTransitGatewaysGatewayListOutput {
	return o
}

func (o GetAviatrixTransitGatewaysGatewayListOutput) ToGetAviatrixTransitGatewaysGatewayListOutputWithContext(ctx context.Context) GetAviatrixTransitGatewaysGatewayListOutput {
	return o
}

// Aviatrix account name.
func (o GetAviatrixTransitGatewaysGatewayListOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.AccountName }).(pulumi.StringOutput)
}

// When value is false, an idle address in Elastic IP pool is reused for this gateway. Otherwise, a new Elastic IP is allocated and used for this gateway.
func (o GetAviatrixTransitGatewaysGatewayListOutput) AllocateNewEip() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.AllocateNewEip }).(pulumi.BoolOutput)
}

// Availability domain for OCI.
func (o GetAviatrixTransitGatewaysGatewayListOutput) AvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.AvailabilityDomain }).(pulumi.StringOutput)
}

// The name of the public IP address and its resource group in Azure to assign to this Transit Gateway.
func (o GetAviatrixTransitGatewaysGatewayListOutput) AzureEipNameResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.AzureEipNameResourceGroup }).(pulumi.StringOutput)
}

// Enable Equal Cost Multi Path (ECMP) routing for the next hop.
func (o GetAviatrixTransitGatewaysGatewayListOutput) BgpEcmp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.BgpEcmp }).(pulumi.BoolOutput)
}

// BGP Hold Time.
func (o GetAviatrixTransitGatewaysGatewayListOutput) BgpHoldTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) int { return v.BgpHoldTime }).(pulumi.IntOutput)
}

// Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP Transit.
func (o GetAviatrixTransitGatewaysGatewayListOutput) BgpLanInterfaces() GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) []GetAviatrixTransitGatewaysGatewayListBgpLanInterface {
		return v.BgpLanInterfaces
	}).(GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutput)
}

// List of available BGP LAN interface IPs for transit external device connection creation. Only supports GCP. Available as of provider version R2.21.0+.
func (o GetAviatrixTransitGatewaysGatewayListOutput) BgpLanIpLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) []string { return v.BgpLanIpLists }).(pulumi.StringArrayOutput)
}

// BGP route polling time. Unit is in seconds.
func (o GetAviatrixTransitGatewaysGatewayListOutput) BgpPollingTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.BgpPollingTime }).(pulumi.StringOutput)
}

// Instance ID of the transit gateway.
func (o GetAviatrixTransitGatewaysGatewayListOutput) CloudInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.CloudInstanceId }).(pulumi.StringOutput)
}

// Type of cloud service provider.
// * `connectedTransit"` -  Status of Connected Transit of transit gateway.
func (o GetAviatrixTransitGatewaysGatewayListOutput) CloudType() pulumi.IntOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) int { return v.CloudType }).(pulumi.IntOutput)
}

func (o GetAviatrixTransitGatewaysGatewayListOutput) ConnectedTransit() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.ConnectedTransit }).(pulumi.BoolOutput)
}

// A list of comma separated CIDRs to be customized for the spoke VPC routes.
func (o GetAviatrixTransitGatewaysGatewayListOutput) CustomizedSpokeVpcRoutes() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.CustomizedSpokeVpcRoutes }).(pulumi.StringOutput)
}

// Enables Active-Standby Mode, available only with HA enabled.
func (o GetAviatrixTransitGatewaysGatewayListOutput) EnableActiveStandby() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.EnableActiveStandby }).(pulumi.BoolOutput)
}

// Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.
func (o GetAviatrixTransitGatewaysGatewayListOutput) EnableActiveStandbyPreemptive() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.EnableActiveStandbyPreemptive }).(pulumi.BoolOutput)
}

// Pre-allocate a network interface(eth4) for \"BGP over LAN\" functionality. Only valid for cloudType = 4 (GCP) and 8 (Azure). Available as of provider version R2.18+
func (o GetAviatrixTransitGatewaysGatewayListOutput) EnableBgpOverLan() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.EnableBgpOverLan }).(pulumi.BoolOutput)
}

// Status of Encrypt Gateway EBS Volume of the transit gateway.
func (o GetAviatrixTransitGatewaysGatewayListOutput) EnableEncryptVolume() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.EnableEncryptVolume }).(pulumi.BoolOutput)
}

// Enable firenet interfaces with AWS Gateway Load Balancer.
func (o GetAviatrixTransitGatewaysGatewayListOutput) EnableGatewayLoadBalancer() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.EnableGatewayLoadBalancer }).(pulumi.BoolOutput)
}

// Sign of readiness for TGW connection.
func (o GetAviatrixTransitGatewaysGatewayListOutput) EnableHybridConnection() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.EnableHybridConnection }).(pulumi.BoolOutput)
}

// Enable jumbo frame support for transit gateway.
func (o GetAviatrixTransitGatewaysGatewayListOutput) EnableJumboFrame() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.EnableJumboFrame }).(pulumi.BoolOutput)
}

// Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for cloudType = 1 (AWS) or 256 (AWSGov).
func (o GetAviatrixTransitGatewaysGatewayListOutput) EnableMonitorGatewaySubnets() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.EnableMonitorGatewaySubnets }).(pulumi.BoolOutput)
}

// Status of multi-tier transit mode on transit gateway.
func (o GetAviatrixTransitGatewaysGatewayListOutput) EnableMultiTierTransit() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.EnableMultiTierTransit }).(pulumi.BoolOutput)
}

// Status of private OOB for the transit gateway.
func (o GetAviatrixTransitGatewaysGatewayListOutput) EnablePrivateOob() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.EnablePrivateOob }).(pulumi.BoolOutput)
}

// Enable segmentation to allow association of transit gateway to security domains.
func (o GetAviatrixTransitGatewaysGatewayListOutput) EnableSegmentation() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.EnableSegmentation }).(pulumi.BoolOutput)
}

// Enable spot instance. NOT supported for production deployment.
func (o GetAviatrixTransitGatewaysGatewayListOutput) EnableSpotInstance() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.EnableSpotInstance }).(pulumi.BoolOutput)
}

// Enable summarize CIDR to TGW.
func (o GetAviatrixTransitGatewaysGatewayListOutput) EnableTransitSummarizeCidrToTgw() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.EnableTransitSummarizeCidrToTgw }).(pulumi.BoolOutput)
}

// Status of Vpc Dns Server of the transit Gateway.
func (o GetAviatrixTransitGatewaysGatewayListOutput) EnableVpcDnsServer() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.EnableVpcDnsServer }).(pulumi.BoolOutput)
}

// A list of comma separated CIDRs to be advertised to on-prem as "Excluded CIDR List".
func (o GetAviatrixTransitGatewaysGatewayListOutput) ExcludedAdvertisedSpokeRoutes() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.ExcludedAdvertisedSpokeRoutes }).(pulumi.StringOutput)
}

// Fault domain for OCI.
func (o GetAviatrixTransitGatewaysGatewayListOutput) FaultDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.FaultDomain }).(pulumi.StringOutput)
}

// A list of comma separated CIDRs to be filtered from the spoke VPC route table.
func (o GetAviatrixTransitGatewaysGatewayListOutput) FilteredSpokeVpcRoutes() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.FilteredSpokeVpcRoutes }).(pulumi.StringOutput)
}

// Aviatrix transit gateway name.
func (o GetAviatrixTransitGatewaysGatewayListOutput) GwName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.GwName }).(pulumi.StringOutput)
}

// Size of transit gateway instance.
func (o GetAviatrixTransitGatewaysGatewayListOutput) GwSize() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.GwSize }).(pulumi.StringOutput)
}

// Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP HA Transit.
func (o GetAviatrixTransitGatewaysGatewayListOutput) HaBgpLanInterfaces() GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) []GetAviatrixTransitGatewaysGatewayListHaBgpLanInterface {
		return v.HaBgpLanInterfaces
	}).(GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutput)
}

// List of available BGP LAN interface IPs for transit external device HA connection creation. Only supports GCP. Available as of provider version R2.21.0+.
func (o GetAviatrixTransitGatewaysGatewayListOutput) HaBgpLanIpLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) []string { return v.HaBgpLanIpLists }).(pulumi.StringArrayOutput)
}

// The image version of the gateway.
func (o GetAviatrixTransitGatewaysGatewayListOutput) ImageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.ImageVersion }).(pulumi.StringOutput)
}

// Status of Insane Mode of the transit gateway.
func (o GetAviatrixTransitGatewaysGatewayListOutput) InsaneMode() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.InsaneMode }).(pulumi.BoolOutput)
}

// AZ of subnet being created for Insane Mode transit gateway.
func (o GetAviatrixTransitGatewaysGatewayListOutput) InsaneModeAz() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.InsaneModeAz }).(pulumi.StringOutput)
}

// LAN Private Subnet. Only used for GCP Transit FireNet.
func (o GetAviatrixTransitGatewaysGatewayListOutput) LanPrivateSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.LanPrivateSubnet }).(pulumi.StringOutput)
}

// LAN VPC ID. Only used for GCP Transit FireNet.
func (o GetAviatrixTransitGatewaysGatewayListOutput) LanVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.LanVpcId }).(pulumi.StringOutput)
}

// Set the learned CIDRs approval mode.
func (o GetAviatrixTransitGatewaysGatewayListOutput) LearnedCidrsApprovalMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.LearnedCidrsApprovalMode }).(pulumi.StringOutput)
}

// Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.
func (o GetAviatrixTransitGatewaysGatewayListOutput) LocalAsNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.LocalAsNumber }).(pulumi.StringOutput)
}

// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
func (o GetAviatrixTransitGatewaysGatewayListOutput) MonitorExcludeLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) []string { return v.MonitorExcludeLists }).(pulumi.StringArrayOutput)
}

// OOB availability zone.
func (o GetAviatrixTransitGatewaysGatewayListOutput) OobAvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.OobAvailabilityZone }).(pulumi.StringOutput)
}

// OOB management subnet.
func (o GetAviatrixTransitGatewaysGatewayListOutput) OobManagementSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.OobManagementSubnet }).(pulumi.StringOutput)
}

// List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.
func (o GetAviatrixTransitGatewaysGatewayListOutput) PrependAsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) []string { return v.PrependAsPaths }).(pulumi.StringArrayOutput)
}

// Private IP address of the transit gateway created.
func (o GetAviatrixTransitGatewaysGatewayListOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.PrivateIp }).(pulumi.StringOutput)
}

// Public IP address of the Transit Gateway created.
func (o GetAviatrixTransitGatewaysGatewayListOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.PublicIp }).(pulumi.StringOutput)
}

// Security group used for the transit gateway.
func (o GetAviatrixTransitGatewaysGatewayListOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// Status of Single AZ HA of transit gateway.
func (o GetAviatrixTransitGatewaysGatewayListOutput) SingleAzHa() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.SingleAzHa }).(pulumi.BoolOutput)
}

// Status of Single IP Source Nat mode of the transit gateway.
func (o GetAviatrixTransitGatewaysGatewayListOutput) SingleIpSnat() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) bool { return v.SingleIpSnat }).(pulumi.BoolOutput)
}

// The software version of the gateway.
func (o GetAviatrixTransitGatewaysGatewayListOutput) SoftwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.SoftwareVersion }).(pulumi.StringOutput)
}

// Price for spot instance. NOT supported for production deployment.
func (o GetAviatrixTransitGatewaysGatewayListOutput) SpotPrice() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.SpotPrice }).(pulumi.StringOutput)
}

// A VPC Network address range selected from one of the available network ranges.
func (o GetAviatrixTransitGatewaysGatewayListOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.Subnet }).(pulumi.StringOutput)
}

// The IPSec tunnel down detection time for the transit gateway.
func (o GetAviatrixTransitGatewaysGatewayListOutput) TunnelDetectionTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) int { return v.TunnelDetectionTime }).(pulumi.IntOutput)
}

// VPC-ID/VNet-Name of cloud provider.
func (o GetAviatrixTransitGatewaysGatewayListOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.VpcId }).(pulumi.StringOutput)
}

// Region of cloud provider.
func (o GetAviatrixTransitGatewaysGatewayListOutput) VpcReg() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.VpcReg }).(pulumi.StringOutput)
}

// Availability Zone. Only available for cloudType = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.
func (o GetAviatrixTransitGatewaysGatewayListOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayList) string { return v.Zone }).(pulumi.StringOutput)
}

type GetAviatrixTransitGatewaysGatewayListArrayOutput struct{ *pulumi.OutputState }

func (GetAviatrixTransitGatewaysGatewayListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixTransitGatewaysGatewayList)(nil)).Elem()
}

func (o GetAviatrixTransitGatewaysGatewayListArrayOutput) ToGetAviatrixTransitGatewaysGatewayListArrayOutput() GetAviatrixTransitGatewaysGatewayListArrayOutput {
	return o
}

func (o GetAviatrixTransitGatewaysGatewayListArrayOutput) ToGetAviatrixTransitGatewaysGatewayListArrayOutputWithContext(ctx context.Context) GetAviatrixTransitGatewaysGatewayListArrayOutput {
	return o
}

func (o GetAviatrixTransitGatewaysGatewayListArrayOutput) Index(i pulumi.IntInput) GetAviatrixTransitGatewaysGatewayListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAviatrixTransitGatewaysGatewayList {
		return vs[0].([]GetAviatrixTransitGatewaysGatewayList)[vs[1].(int)]
	}).(GetAviatrixTransitGatewaysGatewayListOutput)
}

type GetAviatrixTransitGatewaysGatewayListBgpLanInterface struct {
	// A VPC Network address range selected from one of the available network ranges.
	Subnet string `pulumi:"subnet"`
	// VPC-ID/VNet-Name of cloud provider.
	VpcId string `pulumi:"vpcId"`
}

// GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceInput is an input type that accepts GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArgs and GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput values.
// You can construct a concrete instance of `GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceInput` via:
//
//	GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArgs{...}
type GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceInput interface {
	pulumi.Input

	ToGetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput() GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput
	ToGetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutputWithContext(context.Context) GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput
}

type GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArgs struct {
	// A VPC Network address range selected from one of the available network ranges.
	Subnet pulumi.StringInput `pulumi:"subnet"`
	// VPC-ID/VNet-Name of cloud provider.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixTransitGatewaysGatewayListBgpLanInterface)(nil)).Elem()
}

func (i GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArgs) ToGetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput() GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput {
	return i.ToGetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutputWithContext(context.Background())
}

func (i GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArgs) ToGetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutputWithContext(ctx context.Context) GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput)
}

// GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayInput is an input type that accepts GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArray and GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutput values.
// You can construct a concrete instance of `GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayInput` via:
//
//	GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArray{ GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArgs{...} }
type GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayInput interface {
	pulumi.Input

	ToGetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutput() GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutput
	ToGetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutputWithContext(context.Context) GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutput
}

type GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArray []GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceInput

func (GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixTransitGatewaysGatewayListBgpLanInterface)(nil)).Elem()
}

func (i GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArray) ToGetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutput() GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutput {
	return i.ToGetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutputWithContext(context.Background())
}

func (i GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArray) ToGetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutputWithContext(ctx context.Context) GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutput)
}

type GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput struct{ *pulumi.OutputState }

func (GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixTransitGatewaysGatewayListBgpLanInterface)(nil)).Elem()
}

func (o GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput) ToGetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput() GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput {
	return o
}

func (o GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput) ToGetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutputWithContext(ctx context.Context) GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput {
	return o
}

// A VPC Network address range selected from one of the available network ranges.
func (o GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayListBgpLanInterface) string { return v.Subnet }).(pulumi.StringOutput)
}

// VPC-ID/VNet-Name of cloud provider.
func (o GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayListBgpLanInterface) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutput struct{ *pulumi.OutputState }

func (GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixTransitGatewaysGatewayListBgpLanInterface)(nil)).Elem()
}

func (o GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutput) ToGetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutput() GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutput {
	return o
}

func (o GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutput) ToGetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutputWithContext(ctx context.Context) GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutput {
	return o
}

func (o GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutput) Index(i pulumi.IntInput) GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAviatrixTransitGatewaysGatewayListBgpLanInterface {
		return vs[0].([]GetAviatrixTransitGatewaysGatewayListBgpLanInterface)[vs[1].(int)]
	}).(GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput)
}

type GetAviatrixTransitGatewaysGatewayListHaBgpLanInterface struct {
	// A VPC Network address range selected from one of the available network ranges.
	Subnet string `pulumi:"subnet"`
	// VPC-ID/VNet-Name of cloud provider.
	VpcId string `pulumi:"vpcId"`
}

// GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceInput is an input type that accepts GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArgs and GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput values.
// You can construct a concrete instance of `GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceInput` via:
//
//	GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArgs{...}
type GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceInput interface {
	pulumi.Input

	ToGetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput() GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput
	ToGetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutputWithContext(context.Context) GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput
}

type GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArgs struct {
	// A VPC Network address range selected from one of the available network ranges.
	Subnet pulumi.StringInput `pulumi:"subnet"`
	// VPC-ID/VNet-Name of cloud provider.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixTransitGatewaysGatewayListHaBgpLanInterface)(nil)).Elem()
}

func (i GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArgs) ToGetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput() GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput {
	return i.ToGetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutputWithContext(context.Background())
}

func (i GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArgs) ToGetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutputWithContext(ctx context.Context) GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput)
}

// GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayInput is an input type that accepts GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArray and GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutput values.
// You can construct a concrete instance of `GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayInput` via:
//
//	GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArray{ GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArgs{...} }
type GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayInput interface {
	pulumi.Input

	ToGetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutput() GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutput
	ToGetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutputWithContext(context.Context) GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutput
}

type GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArray []GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceInput

func (GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixTransitGatewaysGatewayListHaBgpLanInterface)(nil)).Elem()
}

func (i GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArray) ToGetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutput() GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutput {
	return i.ToGetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutputWithContext(context.Background())
}

func (i GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArray) ToGetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutputWithContext(ctx context.Context) GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutput)
}

type GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput struct{ *pulumi.OutputState }

func (GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixTransitGatewaysGatewayListHaBgpLanInterface)(nil)).Elem()
}

func (o GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput) ToGetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput() GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput {
	return o
}

func (o GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput) ToGetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutputWithContext(ctx context.Context) GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput {
	return o
}

// A VPC Network address range selected from one of the available network ranges.
func (o GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayListHaBgpLanInterface) string { return v.Subnet }).(pulumi.StringOutput)
}

// VPC-ID/VNet-Name of cloud provider.
func (o GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixTransitGatewaysGatewayListHaBgpLanInterface) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutput struct{ *pulumi.OutputState }

func (GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixTransitGatewaysGatewayListHaBgpLanInterface)(nil)).Elem()
}

func (o GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutput) ToGetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutput() GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutput {
	return o
}

func (o GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutput) ToGetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutputWithContext(ctx context.Context) GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutput {
	return o
}

func (o GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutput) Index(i pulumi.IntInput) GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAviatrixTransitGatewaysGatewayListHaBgpLanInterface {
		return vs[0].([]GetAviatrixTransitGatewaysGatewayListHaBgpLanInterface)[vs[1].(int)]
	}).(GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput)
}

type GetAviatrixVpcPrivateSubnet struct {
	// Private subnet CIDR.
	Cidr string `pulumi:"cidr"`
	// Name of the Aviatrix VPC.
	Name string `pulumi:"name"`
	// Private subnet ID.
	SubnetId string `pulumi:"subnetId"`
}

// GetAviatrixVpcPrivateSubnetInput is an input type that accepts GetAviatrixVpcPrivateSubnetArgs and GetAviatrixVpcPrivateSubnetOutput values.
// You can construct a concrete instance of `GetAviatrixVpcPrivateSubnetInput` via:
//
//	GetAviatrixVpcPrivateSubnetArgs{...}
type GetAviatrixVpcPrivateSubnetInput interface {
	pulumi.Input

	ToGetAviatrixVpcPrivateSubnetOutput() GetAviatrixVpcPrivateSubnetOutput
	ToGetAviatrixVpcPrivateSubnetOutputWithContext(context.Context) GetAviatrixVpcPrivateSubnetOutput
}

type GetAviatrixVpcPrivateSubnetArgs struct {
	// Private subnet CIDR.
	Cidr pulumi.StringInput `pulumi:"cidr"`
	// Name of the Aviatrix VPC.
	Name pulumi.StringInput `pulumi:"name"`
	// Private subnet ID.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (GetAviatrixVpcPrivateSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixVpcPrivateSubnet)(nil)).Elem()
}

func (i GetAviatrixVpcPrivateSubnetArgs) ToGetAviatrixVpcPrivateSubnetOutput() GetAviatrixVpcPrivateSubnetOutput {
	return i.ToGetAviatrixVpcPrivateSubnetOutputWithContext(context.Background())
}

func (i GetAviatrixVpcPrivateSubnetArgs) ToGetAviatrixVpcPrivateSubnetOutputWithContext(ctx context.Context) GetAviatrixVpcPrivateSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixVpcPrivateSubnetOutput)
}

// GetAviatrixVpcPrivateSubnetArrayInput is an input type that accepts GetAviatrixVpcPrivateSubnetArray and GetAviatrixVpcPrivateSubnetArrayOutput values.
// You can construct a concrete instance of `GetAviatrixVpcPrivateSubnetArrayInput` via:
//
//	GetAviatrixVpcPrivateSubnetArray{ GetAviatrixVpcPrivateSubnetArgs{...} }
type GetAviatrixVpcPrivateSubnetArrayInput interface {
	pulumi.Input

	ToGetAviatrixVpcPrivateSubnetArrayOutput() GetAviatrixVpcPrivateSubnetArrayOutput
	ToGetAviatrixVpcPrivateSubnetArrayOutputWithContext(context.Context) GetAviatrixVpcPrivateSubnetArrayOutput
}

type GetAviatrixVpcPrivateSubnetArray []GetAviatrixVpcPrivateSubnetInput

func (GetAviatrixVpcPrivateSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixVpcPrivateSubnet)(nil)).Elem()
}

func (i GetAviatrixVpcPrivateSubnetArray) ToGetAviatrixVpcPrivateSubnetArrayOutput() GetAviatrixVpcPrivateSubnetArrayOutput {
	return i.ToGetAviatrixVpcPrivateSubnetArrayOutputWithContext(context.Background())
}

func (i GetAviatrixVpcPrivateSubnetArray) ToGetAviatrixVpcPrivateSubnetArrayOutputWithContext(ctx context.Context) GetAviatrixVpcPrivateSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixVpcPrivateSubnetArrayOutput)
}

type GetAviatrixVpcPrivateSubnetOutput struct{ *pulumi.OutputState }

func (GetAviatrixVpcPrivateSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixVpcPrivateSubnet)(nil)).Elem()
}

func (o GetAviatrixVpcPrivateSubnetOutput) ToGetAviatrixVpcPrivateSubnetOutput() GetAviatrixVpcPrivateSubnetOutput {
	return o
}

func (o GetAviatrixVpcPrivateSubnetOutput) ToGetAviatrixVpcPrivateSubnetOutputWithContext(ctx context.Context) GetAviatrixVpcPrivateSubnetOutput {
	return o
}

// Private subnet CIDR.
func (o GetAviatrixVpcPrivateSubnetOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixVpcPrivateSubnet) string { return v.Cidr }).(pulumi.StringOutput)
}

// Name of the Aviatrix VPC.
func (o GetAviatrixVpcPrivateSubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixVpcPrivateSubnet) string { return v.Name }).(pulumi.StringOutput)
}

// Private subnet ID.
func (o GetAviatrixVpcPrivateSubnetOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixVpcPrivateSubnet) string { return v.SubnetId }).(pulumi.StringOutput)
}

type GetAviatrixVpcPrivateSubnetArrayOutput struct{ *pulumi.OutputState }

func (GetAviatrixVpcPrivateSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixVpcPrivateSubnet)(nil)).Elem()
}

func (o GetAviatrixVpcPrivateSubnetArrayOutput) ToGetAviatrixVpcPrivateSubnetArrayOutput() GetAviatrixVpcPrivateSubnetArrayOutput {
	return o
}

func (o GetAviatrixVpcPrivateSubnetArrayOutput) ToGetAviatrixVpcPrivateSubnetArrayOutputWithContext(ctx context.Context) GetAviatrixVpcPrivateSubnetArrayOutput {
	return o
}

func (o GetAviatrixVpcPrivateSubnetArrayOutput) Index(i pulumi.IntInput) GetAviatrixVpcPrivateSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAviatrixVpcPrivateSubnet {
		return vs[0].([]GetAviatrixVpcPrivateSubnet)[vs[1].(int)]
	}).(GetAviatrixVpcPrivateSubnetOutput)
}

type GetAviatrixVpcPublicSubnet struct {
	// Private subnet CIDR.
	Cidr string `pulumi:"cidr"`
	// Name of the Aviatrix VPC.
	Name string `pulumi:"name"`
	// Private subnet ID.
	SubnetId string `pulumi:"subnetId"`
}

// GetAviatrixVpcPublicSubnetInput is an input type that accepts GetAviatrixVpcPublicSubnetArgs and GetAviatrixVpcPublicSubnetOutput values.
// You can construct a concrete instance of `GetAviatrixVpcPublicSubnetInput` via:
//
//	GetAviatrixVpcPublicSubnetArgs{...}
type GetAviatrixVpcPublicSubnetInput interface {
	pulumi.Input

	ToGetAviatrixVpcPublicSubnetOutput() GetAviatrixVpcPublicSubnetOutput
	ToGetAviatrixVpcPublicSubnetOutputWithContext(context.Context) GetAviatrixVpcPublicSubnetOutput
}

type GetAviatrixVpcPublicSubnetArgs struct {
	// Private subnet CIDR.
	Cidr pulumi.StringInput `pulumi:"cidr"`
	// Name of the Aviatrix VPC.
	Name pulumi.StringInput `pulumi:"name"`
	// Private subnet ID.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (GetAviatrixVpcPublicSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixVpcPublicSubnet)(nil)).Elem()
}

func (i GetAviatrixVpcPublicSubnetArgs) ToGetAviatrixVpcPublicSubnetOutput() GetAviatrixVpcPublicSubnetOutput {
	return i.ToGetAviatrixVpcPublicSubnetOutputWithContext(context.Background())
}

func (i GetAviatrixVpcPublicSubnetArgs) ToGetAviatrixVpcPublicSubnetOutputWithContext(ctx context.Context) GetAviatrixVpcPublicSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixVpcPublicSubnetOutput)
}

// GetAviatrixVpcPublicSubnetArrayInput is an input type that accepts GetAviatrixVpcPublicSubnetArray and GetAviatrixVpcPublicSubnetArrayOutput values.
// You can construct a concrete instance of `GetAviatrixVpcPublicSubnetArrayInput` via:
//
//	GetAviatrixVpcPublicSubnetArray{ GetAviatrixVpcPublicSubnetArgs{...} }
type GetAviatrixVpcPublicSubnetArrayInput interface {
	pulumi.Input

	ToGetAviatrixVpcPublicSubnetArrayOutput() GetAviatrixVpcPublicSubnetArrayOutput
	ToGetAviatrixVpcPublicSubnetArrayOutputWithContext(context.Context) GetAviatrixVpcPublicSubnetArrayOutput
}

type GetAviatrixVpcPublicSubnetArray []GetAviatrixVpcPublicSubnetInput

func (GetAviatrixVpcPublicSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixVpcPublicSubnet)(nil)).Elem()
}

func (i GetAviatrixVpcPublicSubnetArray) ToGetAviatrixVpcPublicSubnetArrayOutput() GetAviatrixVpcPublicSubnetArrayOutput {
	return i.ToGetAviatrixVpcPublicSubnetArrayOutputWithContext(context.Background())
}

func (i GetAviatrixVpcPublicSubnetArray) ToGetAviatrixVpcPublicSubnetArrayOutputWithContext(ctx context.Context) GetAviatrixVpcPublicSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixVpcPublicSubnetArrayOutput)
}

type GetAviatrixVpcPublicSubnetOutput struct{ *pulumi.OutputState }

func (GetAviatrixVpcPublicSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixVpcPublicSubnet)(nil)).Elem()
}

func (o GetAviatrixVpcPublicSubnetOutput) ToGetAviatrixVpcPublicSubnetOutput() GetAviatrixVpcPublicSubnetOutput {
	return o
}

func (o GetAviatrixVpcPublicSubnetOutput) ToGetAviatrixVpcPublicSubnetOutputWithContext(ctx context.Context) GetAviatrixVpcPublicSubnetOutput {
	return o
}

// Private subnet CIDR.
func (o GetAviatrixVpcPublicSubnetOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixVpcPublicSubnet) string { return v.Cidr }).(pulumi.StringOutput)
}

// Name of the Aviatrix VPC.
func (o GetAviatrixVpcPublicSubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixVpcPublicSubnet) string { return v.Name }).(pulumi.StringOutput)
}

// Private subnet ID.
func (o GetAviatrixVpcPublicSubnetOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixVpcPublicSubnet) string { return v.SubnetId }).(pulumi.StringOutput)
}

type GetAviatrixVpcPublicSubnetArrayOutput struct{ *pulumi.OutputState }

func (GetAviatrixVpcPublicSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixVpcPublicSubnet)(nil)).Elem()
}

func (o GetAviatrixVpcPublicSubnetArrayOutput) ToGetAviatrixVpcPublicSubnetArrayOutput() GetAviatrixVpcPublicSubnetArrayOutput {
	return o
}

func (o GetAviatrixVpcPublicSubnetArrayOutput) ToGetAviatrixVpcPublicSubnetArrayOutputWithContext(ctx context.Context) GetAviatrixVpcPublicSubnetArrayOutput {
	return o
}

func (o GetAviatrixVpcPublicSubnetArrayOutput) Index(i pulumi.IntInput) GetAviatrixVpcPublicSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAviatrixVpcPublicSubnet {
		return vs[0].([]GetAviatrixVpcPublicSubnet)[vs[1].(int)]
	}).(GetAviatrixVpcPublicSubnetOutput)
}

type GetAviatrixVpcSubnet struct {
	// Private subnet CIDR.
	Cidr string `pulumi:"cidr"`
	// Name of the Aviatrix VPC.
	Name string `pulumi:"name"`
	// Private subnet ID.
	SubnetId string `pulumi:"subnetId"`
}

// GetAviatrixVpcSubnetInput is an input type that accepts GetAviatrixVpcSubnetArgs and GetAviatrixVpcSubnetOutput values.
// You can construct a concrete instance of `GetAviatrixVpcSubnetInput` via:
//
//	GetAviatrixVpcSubnetArgs{...}
type GetAviatrixVpcSubnetInput interface {
	pulumi.Input

	ToGetAviatrixVpcSubnetOutput() GetAviatrixVpcSubnetOutput
	ToGetAviatrixVpcSubnetOutputWithContext(context.Context) GetAviatrixVpcSubnetOutput
}

type GetAviatrixVpcSubnetArgs struct {
	// Private subnet CIDR.
	Cidr pulumi.StringInput `pulumi:"cidr"`
	// Name of the Aviatrix VPC.
	Name pulumi.StringInput `pulumi:"name"`
	// Private subnet ID.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (GetAviatrixVpcSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixVpcSubnet)(nil)).Elem()
}

func (i GetAviatrixVpcSubnetArgs) ToGetAviatrixVpcSubnetOutput() GetAviatrixVpcSubnetOutput {
	return i.ToGetAviatrixVpcSubnetOutputWithContext(context.Background())
}

func (i GetAviatrixVpcSubnetArgs) ToGetAviatrixVpcSubnetOutputWithContext(ctx context.Context) GetAviatrixVpcSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixVpcSubnetOutput)
}

// GetAviatrixVpcSubnetArrayInput is an input type that accepts GetAviatrixVpcSubnetArray and GetAviatrixVpcSubnetArrayOutput values.
// You can construct a concrete instance of `GetAviatrixVpcSubnetArrayInput` via:
//
//	GetAviatrixVpcSubnetArray{ GetAviatrixVpcSubnetArgs{...} }
type GetAviatrixVpcSubnetArrayInput interface {
	pulumi.Input

	ToGetAviatrixVpcSubnetArrayOutput() GetAviatrixVpcSubnetArrayOutput
	ToGetAviatrixVpcSubnetArrayOutputWithContext(context.Context) GetAviatrixVpcSubnetArrayOutput
}

type GetAviatrixVpcSubnetArray []GetAviatrixVpcSubnetInput

func (GetAviatrixVpcSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixVpcSubnet)(nil)).Elem()
}

func (i GetAviatrixVpcSubnetArray) ToGetAviatrixVpcSubnetArrayOutput() GetAviatrixVpcSubnetArrayOutput {
	return i.ToGetAviatrixVpcSubnetArrayOutputWithContext(context.Background())
}

func (i GetAviatrixVpcSubnetArray) ToGetAviatrixVpcSubnetArrayOutputWithContext(ctx context.Context) GetAviatrixVpcSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixVpcSubnetArrayOutput)
}

type GetAviatrixVpcSubnetOutput struct{ *pulumi.OutputState }

func (GetAviatrixVpcSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixVpcSubnet)(nil)).Elem()
}

func (o GetAviatrixVpcSubnetOutput) ToGetAviatrixVpcSubnetOutput() GetAviatrixVpcSubnetOutput {
	return o
}

func (o GetAviatrixVpcSubnetOutput) ToGetAviatrixVpcSubnetOutputWithContext(ctx context.Context) GetAviatrixVpcSubnetOutput {
	return o
}

// Private subnet CIDR.
func (o GetAviatrixVpcSubnetOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixVpcSubnet) string { return v.Cidr }).(pulumi.StringOutput)
}

// Name of the Aviatrix VPC.
func (o GetAviatrixVpcSubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixVpcSubnet) string { return v.Name }).(pulumi.StringOutput)
}

// Private subnet ID.
func (o GetAviatrixVpcSubnetOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixVpcSubnet) string { return v.SubnetId }).(pulumi.StringOutput)
}

type GetAviatrixVpcSubnetArrayOutput struct{ *pulumi.OutputState }

func (GetAviatrixVpcSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixVpcSubnet)(nil)).Elem()
}

func (o GetAviatrixVpcSubnetArrayOutput) ToGetAviatrixVpcSubnetArrayOutput() GetAviatrixVpcSubnetArrayOutput {
	return o
}

func (o GetAviatrixVpcSubnetArrayOutput) ToGetAviatrixVpcSubnetArrayOutputWithContext(ctx context.Context) GetAviatrixVpcSubnetArrayOutput {
	return o
}

func (o GetAviatrixVpcSubnetArrayOutput) Index(i pulumi.IntInput) GetAviatrixVpcSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAviatrixVpcSubnet {
		return vs[0].([]GetAviatrixVpcSubnet)[vs[1].(int)]
	}).(GetAviatrixVpcSubnetOutput)
}

type GetAviatrixVpcTrackerVpcList struct {
	// Filters VPC list by access account name.
	AccountName string `pulumi:"accountName"`
	// Filters VPC list by CIDR (AWS/Azure only).
	Cidr string `pulumi:"cidr"`
	// Filters VPC list by cloud provider id. For example, cloudType = 1 will give all AWS VPCs.
	CloudType int `pulumi:"cloudType"`
	// Number of running instances in the VPC.
	InstanceCount int `pulumi:"instanceCount"`
	// Subnet name.
	Name string `pulumi:"name"`
	// Filters VPC list by region (AWS/Azure only).
	Region string `pulumi:"region"`
	// List of subnets within this VPC (GCP only).
	Subnets []GetAviatrixVpcTrackerVpcListSubnet `pulumi:"subnets"`
	// VPC id.
	VpcId string `pulumi:"vpcId"`
}

// GetAviatrixVpcTrackerVpcListInput is an input type that accepts GetAviatrixVpcTrackerVpcListArgs and GetAviatrixVpcTrackerVpcListOutput values.
// You can construct a concrete instance of `GetAviatrixVpcTrackerVpcListInput` via:
//
//	GetAviatrixVpcTrackerVpcListArgs{...}
type GetAviatrixVpcTrackerVpcListInput interface {
	pulumi.Input

	ToGetAviatrixVpcTrackerVpcListOutput() GetAviatrixVpcTrackerVpcListOutput
	ToGetAviatrixVpcTrackerVpcListOutputWithContext(context.Context) GetAviatrixVpcTrackerVpcListOutput
}

type GetAviatrixVpcTrackerVpcListArgs struct {
	// Filters VPC list by access account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Filters VPC list by CIDR (AWS/Azure only).
	Cidr pulumi.StringInput `pulumi:"cidr"`
	// Filters VPC list by cloud provider id. For example, cloudType = 1 will give all AWS VPCs.
	CloudType pulumi.IntInput `pulumi:"cloudType"`
	// Number of running instances in the VPC.
	InstanceCount pulumi.IntInput `pulumi:"instanceCount"`
	// Subnet name.
	Name pulumi.StringInput `pulumi:"name"`
	// Filters VPC list by region (AWS/Azure only).
	Region pulumi.StringInput `pulumi:"region"`
	// List of subnets within this VPC (GCP only).
	Subnets GetAviatrixVpcTrackerVpcListSubnetArrayInput `pulumi:"subnets"`
	// VPC id.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetAviatrixVpcTrackerVpcListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixVpcTrackerVpcList)(nil)).Elem()
}

func (i GetAviatrixVpcTrackerVpcListArgs) ToGetAviatrixVpcTrackerVpcListOutput() GetAviatrixVpcTrackerVpcListOutput {
	return i.ToGetAviatrixVpcTrackerVpcListOutputWithContext(context.Background())
}

func (i GetAviatrixVpcTrackerVpcListArgs) ToGetAviatrixVpcTrackerVpcListOutputWithContext(ctx context.Context) GetAviatrixVpcTrackerVpcListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixVpcTrackerVpcListOutput)
}

// GetAviatrixVpcTrackerVpcListArrayInput is an input type that accepts GetAviatrixVpcTrackerVpcListArray and GetAviatrixVpcTrackerVpcListArrayOutput values.
// You can construct a concrete instance of `GetAviatrixVpcTrackerVpcListArrayInput` via:
//
//	GetAviatrixVpcTrackerVpcListArray{ GetAviatrixVpcTrackerVpcListArgs{...} }
type GetAviatrixVpcTrackerVpcListArrayInput interface {
	pulumi.Input

	ToGetAviatrixVpcTrackerVpcListArrayOutput() GetAviatrixVpcTrackerVpcListArrayOutput
	ToGetAviatrixVpcTrackerVpcListArrayOutputWithContext(context.Context) GetAviatrixVpcTrackerVpcListArrayOutput
}

type GetAviatrixVpcTrackerVpcListArray []GetAviatrixVpcTrackerVpcListInput

func (GetAviatrixVpcTrackerVpcListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixVpcTrackerVpcList)(nil)).Elem()
}

func (i GetAviatrixVpcTrackerVpcListArray) ToGetAviatrixVpcTrackerVpcListArrayOutput() GetAviatrixVpcTrackerVpcListArrayOutput {
	return i.ToGetAviatrixVpcTrackerVpcListArrayOutputWithContext(context.Background())
}

func (i GetAviatrixVpcTrackerVpcListArray) ToGetAviatrixVpcTrackerVpcListArrayOutputWithContext(ctx context.Context) GetAviatrixVpcTrackerVpcListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixVpcTrackerVpcListArrayOutput)
}

type GetAviatrixVpcTrackerVpcListOutput struct{ *pulumi.OutputState }

func (GetAviatrixVpcTrackerVpcListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixVpcTrackerVpcList)(nil)).Elem()
}

func (o GetAviatrixVpcTrackerVpcListOutput) ToGetAviatrixVpcTrackerVpcListOutput() GetAviatrixVpcTrackerVpcListOutput {
	return o
}

func (o GetAviatrixVpcTrackerVpcListOutput) ToGetAviatrixVpcTrackerVpcListOutputWithContext(ctx context.Context) GetAviatrixVpcTrackerVpcListOutput {
	return o
}

// Filters VPC list by access account name.
func (o GetAviatrixVpcTrackerVpcListOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixVpcTrackerVpcList) string { return v.AccountName }).(pulumi.StringOutput)
}

// Filters VPC list by CIDR (AWS/Azure only).
func (o GetAviatrixVpcTrackerVpcListOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixVpcTrackerVpcList) string { return v.Cidr }).(pulumi.StringOutput)
}

// Filters VPC list by cloud provider id. For example, cloudType = 1 will give all AWS VPCs.
func (o GetAviatrixVpcTrackerVpcListOutput) CloudType() pulumi.IntOutput {
	return o.ApplyT(func(v GetAviatrixVpcTrackerVpcList) int { return v.CloudType }).(pulumi.IntOutput)
}

// Number of running instances in the VPC.
func (o GetAviatrixVpcTrackerVpcListOutput) InstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetAviatrixVpcTrackerVpcList) int { return v.InstanceCount }).(pulumi.IntOutput)
}

// Subnet name.
func (o GetAviatrixVpcTrackerVpcListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixVpcTrackerVpcList) string { return v.Name }).(pulumi.StringOutput)
}

// Filters VPC list by region (AWS/Azure only).
func (o GetAviatrixVpcTrackerVpcListOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixVpcTrackerVpcList) string { return v.Region }).(pulumi.StringOutput)
}

// List of subnets within this VPC (GCP only).
func (o GetAviatrixVpcTrackerVpcListOutput) Subnets() GetAviatrixVpcTrackerVpcListSubnetArrayOutput {
	return o.ApplyT(func(v GetAviatrixVpcTrackerVpcList) []GetAviatrixVpcTrackerVpcListSubnet { return v.Subnets }).(GetAviatrixVpcTrackerVpcListSubnetArrayOutput)
}

// VPC id.
func (o GetAviatrixVpcTrackerVpcListOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixVpcTrackerVpcList) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetAviatrixVpcTrackerVpcListArrayOutput struct{ *pulumi.OutputState }

func (GetAviatrixVpcTrackerVpcListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixVpcTrackerVpcList)(nil)).Elem()
}

func (o GetAviatrixVpcTrackerVpcListArrayOutput) ToGetAviatrixVpcTrackerVpcListArrayOutput() GetAviatrixVpcTrackerVpcListArrayOutput {
	return o
}

func (o GetAviatrixVpcTrackerVpcListArrayOutput) ToGetAviatrixVpcTrackerVpcListArrayOutputWithContext(ctx context.Context) GetAviatrixVpcTrackerVpcListArrayOutput {
	return o
}

func (o GetAviatrixVpcTrackerVpcListArrayOutput) Index(i pulumi.IntInput) GetAviatrixVpcTrackerVpcListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAviatrixVpcTrackerVpcList {
		return vs[0].([]GetAviatrixVpcTrackerVpcList)[vs[1].(int)]
	}).(GetAviatrixVpcTrackerVpcListOutput)
}

type GetAviatrixVpcTrackerVpcListSubnet struct {
	// Filters VPC list by CIDR (AWS/Azure only).
	Cidr string `pulumi:"cidr"`
	// Subnet gateway ip.
	GwIp string `pulumi:"gwIp"`
	// Subnet name.
	Name string `pulumi:"name"`
	// Filters VPC list by region (AWS/Azure only).
	Region string `pulumi:"region"`
}

// GetAviatrixVpcTrackerVpcListSubnetInput is an input type that accepts GetAviatrixVpcTrackerVpcListSubnetArgs and GetAviatrixVpcTrackerVpcListSubnetOutput values.
// You can construct a concrete instance of `GetAviatrixVpcTrackerVpcListSubnetInput` via:
//
//	GetAviatrixVpcTrackerVpcListSubnetArgs{...}
type GetAviatrixVpcTrackerVpcListSubnetInput interface {
	pulumi.Input

	ToGetAviatrixVpcTrackerVpcListSubnetOutput() GetAviatrixVpcTrackerVpcListSubnetOutput
	ToGetAviatrixVpcTrackerVpcListSubnetOutputWithContext(context.Context) GetAviatrixVpcTrackerVpcListSubnetOutput
}

type GetAviatrixVpcTrackerVpcListSubnetArgs struct {
	// Filters VPC list by CIDR (AWS/Azure only).
	Cidr pulumi.StringInput `pulumi:"cidr"`
	// Subnet gateway ip.
	GwIp pulumi.StringInput `pulumi:"gwIp"`
	// Subnet name.
	Name pulumi.StringInput `pulumi:"name"`
	// Filters VPC list by region (AWS/Azure only).
	Region pulumi.StringInput `pulumi:"region"`
}

func (GetAviatrixVpcTrackerVpcListSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixVpcTrackerVpcListSubnet)(nil)).Elem()
}

func (i GetAviatrixVpcTrackerVpcListSubnetArgs) ToGetAviatrixVpcTrackerVpcListSubnetOutput() GetAviatrixVpcTrackerVpcListSubnetOutput {
	return i.ToGetAviatrixVpcTrackerVpcListSubnetOutputWithContext(context.Background())
}

func (i GetAviatrixVpcTrackerVpcListSubnetArgs) ToGetAviatrixVpcTrackerVpcListSubnetOutputWithContext(ctx context.Context) GetAviatrixVpcTrackerVpcListSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixVpcTrackerVpcListSubnetOutput)
}

// GetAviatrixVpcTrackerVpcListSubnetArrayInput is an input type that accepts GetAviatrixVpcTrackerVpcListSubnetArray and GetAviatrixVpcTrackerVpcListSubnetArrayOutput values.
// You can construct a concrete instance of `GetAviatrixVpcTrackerVpcListSubnetArrayInput` via:
//
//	GetAviatrixVpcTrackerVpcListSubnetArray{ GetAviatrixVpcTrackerVpcListSubnetArgs{...} }
type GetAviatrixVpcTrackerVpcListSubnetArrayInput interface {
	pulumi.Input

	ToGetAviatrixVpcTrackerVpcListSubnetArrayOutput() GetAviatrixVpcTrackerVpcListSubnetArrayOutput
	ToGetAviatrixVpcTrackerVpcListSubnetArrayOutputWithContext(context.Context) GetAviatrixVpcTrackerVpcListSubnetArrayOutput
}

type GetAviatrixVpcTrackerVpcListSubnetArray []GetAviatrixVpcTrackerVpcListSubnetInput

func (GetAviatrixVpcTrackerVpcListSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixVpcTrackerVpcListSubnet)(nil)).Elem()
}

func (i GetAviatrixVpcTrackerVpcListSubnetArray) ToGetAviatrixVpcTrackerVpcListSubnetArrayOutput() GetAviatrixVpcTrackerVpcListSubnetArrayOutput {
	return i.ToGetAviatrixVpcTrackerVpcListSubnetArrayOutputWithContext(context.Background())
}

func (i GetAviatrixVpcTrackerVpcListSubnetArray) ToGetAviatrixVpcTrackerVpcListSubnetArrayOutputWithContext(ctx context.Context) GetAviatrixVpcTrackerVpcListSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAviatrixVpcTrackerVpcListSubnetArrayOutput)
}

type GetAviatrixVpcTrackerVpcListSubnetOutput struct{ *pulumi.OutputState }

func (GetAviatrixVpcTrackerVpcListSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAviatrixVpcTrackerVpcListSubnet)(nil)).Elem()
}

func (o GetAviatrixVpcTrackerVpcListSubnetOutput) ToGetAviatrixVpcTrackerVpcListSubnetOutput() GetAviatrixVpcTrackerVpcListSubnetOutput {
	return o
}

func (o GetAviatrixVpcTrackerVpcListSubnetOutput) ToGetAviatrixVpcTrackerVpcListSubnetOutputWithContext(ctx context.Context) GetAviatrixVpcTrackerVpcListSubnetOutput {
	return o
}

// Filters VPC list by CIDR (AWS/Azure only).
func (o GetAviatrixVpcTrackerVpcListSubnetOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixVpcTrackerVpcListSubnet) string { return v.Cidr }).(pulumi.StringOutput)
}

// Subnet gateway ip.
func (o GetAviatrixVpcTrackerVpcListSubnetOutput) GwIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixVpcTrackerVpcListSubnet) string { return v.GwIp }).(pulumi.StringOutput)
}

// Subnet name.
func (o GetAviatrixVpcTrackerVpcListSubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixVpcTrackerVpcListSubnet) string { return v.Name }).(pulumi.StringOutput)
}

// Filters VPC list by region (AWS/Azure only).
func (o GetAviatrixVpcTrackerVpcListSubnetOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetAviatrixVpcTrackerVpcListSubnet) string { return v.Region }).(pulumi.StringOutput)
}

type GetAviatrixVpcTrackerVpcListSubnetArrayOutput struct{ *pulumi.OutputState }

func (GetAviatrixVpcTrackerVpcListSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAviatrixVpcTrackerVpcListSubnet)(nil)).Elem()
}

func (o GetAviatrixVpcTrackerVpcListSubnetArrayOutput) ToGetAviatrixVpcTrackerVpcListSubnetArrayOutput() GetAviatrixVpcTrackerVpcListSubnetArrayOutput {
	return o
}

func (o GetAviatrixVpcTrackerVpcListSubnetArrayOutput) ToGetAviatrixVpcTrackerVpcListSubnetArrayOutputWithContext(ctx context.Context) GetAviatrixVpcTrackerVpcListSubnetArrayOutput {
	return o
}

func (o GetAviatrixVpcTrackerVpcListSubnetArrayOutput) Index(i pulumi.IntInput) GetAviatrixVpcTrackerVpcListSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAviatrixVpcTrackerVpcListSubnet {
		return vs[0].([]GetAviatrixVpcTrackerVpcListSubnet)[vs[1].(int)]
	}).(GetAviatrixVpcTrackerVpcListSubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAppDomainSelectorInput)(nil)).Elem(), AviatrixAppDomainSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAppDomainSelectorPtrInput)(nil)).Elem(), AviatrixAppDomainSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAppDomainSelectorMatchExpressionInput)(nil)).Elem(), AviatrixAppDomainSelectorMatchExpressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAppDomainSelectorMatchExpressionArrayInput)(nil)).Elem(), AviatrixAppDomainSelectorMatchExpressionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAwsTgwSecurityDomainTypeInput)(nil)).Elem(), AviatrixAwsTgwSecurityDomainTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAwsTgwSecurityDomainTypeArrayInput)(nil)).Elem(), AviatrixAwsTgwSecurityDomainTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAwsTgwSecurityDomainAttachedVpcInput)(nil)).Elem(), AviatrixAwsTgwSecurityDomainAttachedVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAwsTgwSecurityDomainAttachedVpcArrayInput)(nil)).Elem(), AviatrixAwsTgwSecurityDomainAttachedVpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAwsTgwVpnConnVpnTunnelDataInput)(nil)).Elem(), AviatrixAwsTgwVpnConnVpnTunnelDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAwsTgwVpnConnVpnTunnelDataArrayInput)(nil)).Elem(), AviatrixAwsTgwVpnConnVpnTunnelDataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFirenetFirewallInstanceAssociationInput)(nil)).Elem(), AviatrixFirenetFirewallInstanceAssociationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFirenetFirewallInstanceAssociationArrayInput)(nil)).Elem(), AviatrixFirenetFirewallInstanceAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFirewallPolicyTypeInput)(nil)).Elem(), AviatrixFirewallPolicyTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFirewallPolicyTypeArrayInput)(nil)).Elem(), AviatrixFirewallPolicyTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFirewallTagCidrListInput)(nil)).Elem(), AviatrixFirewallTagCidrListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFirewallTagCidrListArrayInput)(nil)).Elem(), AviatrixFirewallTagCidrListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFqdnDomainNameInput)(nil)).Elem(), AviatrixFqdnDomainNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFqdnDomainNameArrayInput)(nil)).Elem(), AviatrixFqdnDomainNameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFqdnGwFilterTagListInput)(nil)).Elem(), AviatrixFqdnGwFilterTagListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFqdnGwFilterTagListArrayInput)(nil)).Elem(), AviatrixFqdnGwFilterTagListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewayDnatConnectionPolicyInput)(nil)).Elem(), AviatrixGatewayDnatConnectionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewayDnatConnectionPolicyArrayInput)(nil)).Elem(), AviatrixGatewayDnatConnectionPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewayDnatDnatPolicyInput)(nil)).Elem(), AviatrixGatewayDnatDnatPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewayDnatDnatPolicyArrayInput)(nil)).Elem(), AviatrixGatewayDnatDnatPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewayDnatInterfacePolicyInput)(nil)).Elem(), AviatrixGatewayDnatInterfacePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewayDnatInterfacePolicyArrayInput)(nil)).Elem(), AviatrixGatewayDnatInterfacePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewaySnatConnectionPolicyInput)(nil)).Elem(), AviatrixGatewaySnatConnectionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewaySnatConnectionPolicyArrayInput)(nil)).Elem(), AviatrixGatewaySnatConnectionPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewaySnatInterfacePolicyInput)(nil)).Elem(), AviatrixGatewaySnatInterfacePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewaySnatInterfacePolicyArrayInput)(nil)).Elem(), AviatrixGatewaySnatInterfacePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewaySnatSnatPolicyInput)(nil)).Elem(), AviatrixGatewaySnatSnatPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewaySnatSnatPolicyArrayInput)(nil)).Elem(), AviatrixGatewaySnatSnatPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixMicrosegPolicyListPolicyInput)(nil)).Elem(), AviatrixMicrosegPolicyListPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixMicrosegPolicyListPolicyArrayInput)(nil)).Elem(), AviatrixMicrosegPolicyListPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixMicrosegPolicyListPolicyPortRangeInput)(nil)).Elem(), AviatrixMicrosegPolicyListPolicyPortRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixMicrosegPolicyListPolicyPortRangeArrayInput)(nil)).Elem(), AviatrixMicrosegPolicyListPolicyPortRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixPrivateModeLbProxyInput)(nil)).Elem(), AviatrixPrivateModeLbProxyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixPrivateModeLbProxyArrayInput)(nil)).Elem(), AviatrixPrivateModeLbProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixSite2CloudCaCertTagCaCertificateInput)(nil)).Elem(), AviatrixSite2CloudCaCertTagCaCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixSite2CloudCaCertTagCaCertificateArrayInput)(nil)).Elem(), AviatrixSite2CloudCaCertTagCaCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixTransitGatewayBgpLanInterfaceInput)(nil)).Elem(), AviatrixTransitGatewayBgpLanInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixTransitGatewayBgpLanInterfaceArrayInput)(nil)).Elem(), AviatrixTransitGatewayBgpLanInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixTransitGatewayHaBgpLanInterfaceInput)(nil)).Elem(), AviatrixTransitGatewayHaBgpLanInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixTransitGatewayHaBgpLanInterfaceArrayInput)(nil)).Elem(), AviatrixTransitGatewayHaBgpLanInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixVpcPrivateSubnetInput)(nil)).Elem(), AviatrixVpcPrivateSubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixVpcPrivateSubnetArrayInput)(nil)).Elem(), AviatrixVpcPrivateSubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixVpcPublicSubnetInput)(nil)).Elem(), AviatrixVpcPublicSubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixVpcPublicSubnetArrayInput)(nil)).Elem(), AviatrixVpcPublicSubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixVpcSubnetInput)(nil)).Elem(), AviatrixVpcSubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixVpcSubnetArrayInput)(nil)).Elem(), AviatrixVpcSubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixVpnProfilePolicyInput)(nil)).Elem(), AviatrixVpnProfilePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixVpnProfilePolicyArrayInput)(nil)).Elem(), AviatrixVpnProfilePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderIgnoreTagsInput)(nil)).Elem(), ProviderIgnoreTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderIgnoreTagsPtrInput)(nil)).Elem(), ProviderIgnoreTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixDeviceInterfacesWanInterfaceInput)(nil)).Elem(), GetAviatrixDeviceInterfacesWanInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixDeviceInterfacesWanInterfaceArrayInput)(nil)).Elem(), GetAviatrixDeviceInterfacesWanInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixFirenetFirewallInstanceAssociationInput)(nil)).Elem(), GetAviatrixFirenetFirewallInstanceAssociationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixFirenetFirewallInstanceAssociationArrayInput)(nil)).Elem(), GetAviatrixFirenetFirewallInstanceAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixFirewallInstanceImagesFirewallImageInput)(nil)).Elem(), GetAviatrixFirewallInstanceImagesFirewallImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixFirewallInstanceImagesFirewallImageArrayInput)(nil)).Elem(), GetAviatrixFirewallInstanceImagesFirewallImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixFirewallPolicyTypeInput)(nil)).Elem(), GetAviatrixFirewallPolicyTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixFirewallPolicyTypeArrayInput)(nil)).Elem(), GetAviatrixFirewallPolicyTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixNetworkDomainsNetworkDomainInput)(nil)).Elem(), GetAviatrixNetworkDomainsNetworkDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixNetworkDomainsNetworkDomainArrayInput)(nil)).Elem(), GetAviatrixNetworkDomainsNetworkDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixTransitGatewayBgpLanInterfaceInput)(nil)).Elem(), GetAviatrixTransitGatewayBgpLanInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixTransitGatewayBgpLanInterfaceArrayInput)(nil)).Elem(), GetAviatrixTransitGatewayBgpLanInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixTransitGatewayHaBgpLanInterfaceInput)(nil)).Elem(), GetAviatrixTransitGatewayHaBgpLanInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixTransitGatewayHaBgpLanInterfaceArrayInput)(nil)).Elem(), GetAviatrixTransitGatewayHaBgpLanInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixTransitGatewaysGatewayListInput)(nil)).Elem(), GetAviatrixTransitGatewaysGatewayListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixTransitGatewaysGatewayListArrayInput)(nil)).Elem(), GetAviatrixTransitGatewaysGatewayListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceInput)(nil)).Elem(), GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayInput)(nil)).Elem(), GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceInput)(nil)).Elem(), GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayInput)(nil)).Elem(), GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixVpcPrivateSubnetInput)(nil)).Elem(), GetAviatrixVpcPrivateSubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixVpcPrivateSubnetArrayInput)(nil)).Elem(), GetAviatrixVpcPrivateSubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixVpcPublicSubnetInput)(nil)).Elem(), GetAviatrixVpcPublicSubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixVpcPublicSubnetArrayInput)(nil)).Elem(), GetAviatrixVpcPublicSubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixVpcSubnetInput)(nil)).Elem(), GetAviatrixVpcSubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixVpcSubnetArrayInput)(nil)).Elem(), GetAviatrixVpcSubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixVpcTrackerVpcListInput)(nil)).Elem(), GetAviatrixVpcTrackerVpcListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixVpcTrackerVpcListArrayInput)(nil)).Elem(), GetAviatrixVpcTrackerVpcListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixVpcTrackerVpcListSubnetInput)(nil)).Elem(), GetAviatrixVpcTrackerVpcListSubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAviatrixVpcTrackerVpcListSubnetArrayInput)(nil)).Elem(), GetAviatrixVpcTrackerVpcListSubnetArray{})
	pulumi.RegisterOutputType(AviatrixAppDomainSelectorOutput{})
	pulumi.RegisterOutputType(AviatrixAppDomainSelectorPtrOutput{})
	pulumi.RegisterOutputType(AviatrixAppDomainSelectorMatchExpressionOutput{})
	pulumi.RegisterOutputType(AviatrixAppDomainSelectorMatchExpressionArrayOutput{})
	pulumi.RegisterOutputType(AviatrixAwsTgwSecurityDomainTypeOutput{})
	pulumi.RegisterOutputType(AviatrixAwsTgwSecurityDomainTypeArrayOutput{})
	pulumi.RegisterOutputType(AviatrixAwsTgwSecurityDomainAttachedVpcOutput{})
	pulumi.RegisterOutputType(AviatrixAwsTgwSecurityDomainAttachedVpcArrayOutput{})
	pulumi.RegisterOutputType(AviatrixAwsTgwVpnConnVpnTunnelDataOutput{})
	pulumi.RegisterOutputType(AviatrixAwsTgwVpnConnVpnTunnelDataArrayOutput{})
	pulumi.RegisterOutputType(AviatrixFirenetFirewallInstanceAssociationOutput{})
	pulumi.RegisterOutputType(AviatrixFirenetFirewallInstanceAssociationArrayOutput{})
	pulumi.RegisterOutputType(AviatrixFirewallPolicyTypeOutput{})
	pulumi.RegisterOutputType(AviatrixFirewallPolicyTypeArrayOutput{})
	pulumi.RegisterOutputType(AviatrixFirewallTagCidrListOutput{})
	pulumi.RegisterOutputType(AviatrixFirewallTagCidrListArrayOutput{})
	pulumi.RegisterOutputType(AviatrixFqdnDomainNameOutput{})
	pulumi.RegisterOutputType(AviatrixFqdnDomainNameArrayOutput{})
	pulumi.RegisterOutputType(AviatrixFqdnGwFilterTagListOutput{})
	pulumi.RegisterOutputType(AviatrixFqdnGwFilterTagListArrayOutput{})
	pulumi.RegisterOutputType(AviatrixGatewayDnatConnectionPolicyOutput{})
	pulumi.RegisterOutputType(AviatrixGatewayDnatConnectionPolicyArrayOutput{})
	pulumi.RegisterOutputType(AviatrixGatewayDnatDnatPolicyOutput{})
	pulumi.RegisterOutputType(AviatrixGatewayDnatDnatPolicyArrayOutput{})
	pulumi.RegisterOutputType(AviatrixGatewayDnatInterfacePolicyOutput{})
	pulumi.RegisterOutputType(AviatrixGatewayDnatInterfacePolicyArrayOutput{})
	pulumi.RegisterOutputType(AviatrixGatewaySnatConnectionPolicyOutput{})
	pulumi.RegisterOutputType(AviatrixGatewaySnatConnectionPolicyArrayOutput{})
	pulumi.RegisterOutputType(AviatrixGatewaySnatInterfacePolicyOutput{})
	pulumi.RegisterOutputType(AviatrixGatewaySnatInterfacePolicyArrayOutput{})
	pulumi.RegisterOutputType(AviatrixGatewaySnatSnatPolicyOutput{})
	pulumi.RegisterOutputType(AviatrixGatewaySnatSnatPolicyArrayOutput{})
	pulumi.RegisterOutputType(AviatrixMicrosegPolicyListPolicyOutput{})
	pulumi.RegisterOutputType(AviatrixMicrosegPolicyListPolicyArrayOutput{})
	pulumi.RegisterOutputType(AviatrixMicrosegPolicyListPolicyPortRangeOutput{})
	pulumi.RegisterOutputType(AviatrixMicrosegPolicyListPolicyPortRangeArrayOutput{})
	pulumi.RegisterOutputType(AviatrixPrivateModeLbProxyOutput{})
	pulumi.RegisterOutputType(AviatrixPrivateModeLbProxyArrayOutput{})
	pulumi.RegisterOutputType(AviatrixSite2CloudCaCertTagCaCertificateOutput{})
	pulumi.RegisterOutputType(AviatrixSite2CloudCaCertTagCaCertificateArrayOutput{})
	pulumi.RegisterOutputType(AviatrixTransitGatewayBgpLanInterfaceOutput{})
	pulumi.RegisterOutputType(AviatrixTransitGatewayBgpLanInterfaceArrayOutput{})
	pulumi.RegisterOutputType(AviatrixTransitGatewayHaBgpLanInterfaceOutput{})
	pulumi.RegisterOutputType(AviatrixTransitGatewayHaBgpLanInterfaceArrayOutput{})
	pulumi.RegisterOutputType(AviatrixVpcPrivateSubnetOutput{})
	pulumi.RegisterOutputType(AviatrixVpcPrivateSubnetArrayOutput{})
	pulumi.RegisterOutputType(AviatrixVpcPublicSubnetOutput{})
	pulumi.RegisterOutputType(AviatrixVpcPublicSubnetArrayOutput{})
	pulumi.RegisterOutputType(AviatrixVpcSubnetOutput{})
	pulumi.RegisterOutputType(AviatrixVpcSubnetArrayOutput{})
	pulumi.RegisterOutputType(AviatrixVpnProfilePolicyOutput{})
	pulumi.RegisterOutputType(AviatrixVpnProfilePolicyArrayOutput{})
	pulumi.RegisterOutputType(ProviderIgnoreTagsOutput{})
	pulumi.RegisterOutputType(ProviderIgnoreTagsPtrOutput{})
	pulumi.RegisterOutputType(GetAviatrixDeviceInterfacesWanInterfaceOutput{})
	pulumi.RegisterOutputType(GetAviatrixDeviceInterfacesWanInterfaceArrayOutput{})
	pulumi.RegisterOutputType(GetAviatrixFirenetFirewallInstanceAssociationOutput{})
	pulumi.RegisterOutputType(GetAviatrixFirenetFirewallInstanceAssociationArrayOutput{})
	pulumi.RegisterOutputType(GetAviatrixFirewallInstanceImagesFirewallImageOutput{})
	pulumi.RegisterOutputType(GetAviatrixFirewallInstanceImagesFirewallImageArrayOutput{})
	pulumi.RegisterOutputType(GetAviatrixFirewallPolicyTypeOutput{})
	pulumi.RegisterOutputType(GetAviatrixFirewallPolicyTypeArrayOutput{})
	pulumi.RegisterOutputType(GetAviatrixNetworkDomainsNetworkDomainOutput{})
	pulumi.RegisterOutputType(GetAviatrixNetworkDomainsNetworkDomainArrayOutput{})
	pulumi.RegisterOutputType(GetAviatrixTransitGatewayBgpLanInterfaceOutput{})
	pulumi.RegisterOutputType(GetAviatrixTransitGatewayBgpLanInterfaceArrayOutput{})
	pulumi.RegisterOutputType(GetAviatrixTransitGatewayHaBgpLanInterfaceOutput{})
	pulumi.RegisterOutputType(GetAviatrixTransitGatewayHaBgpLanInterfaceArrayOutput{})
	pulumi.RegisterOutputType(GetAviatrixTransitGatewaysGatewayListOutput{})
	pulumi.RegisterOutputType(GetAviatrixTransitGatewaysGatewayListArrayOutput{})
	pulumi.RegisterOutputType(GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceOutput{})
	pulumi.RegisterOutputType(GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceArrayOutput{})
	pulumi.RegisterOutputType(GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceOutput{})
	pulumi.RegisterOutputType(GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceArrayOutput{})
	pulumi.RegisterOutputType(GetAviatrixVpcPrivateSubnetOutput{})
	pulumi.RegisterOutputType(GetAviatrixVpcPrivateSubnetArrayOutput{})
	pulumi.RegisterOutputType(GetAviatrixVpcPublicSubnetOutput{})
	pulumi.RegisterOutputType(GetAviatrixVpcPublicSubnetArrayOutput{})
	pulumi.RegisterOutputType(GetAviatrixVpcSubnetOutput{})
	pulumi.RegisterOutputType(GetAviatrixVpcSubnetArrayOutput{})
	pulumi.RegisterOutputType(GetAviatrixVpcTrackerVpcListOutput{})
	pulumi.RegisterOutputType(GetAviatrixVpcTrackerVpcListArrayOutput{})
	pulumi.RegisterOutputType(GetAviatrixVpcTrackerVpcListSubnetOutput{})
	pulumi.RegisterOutputType(GetAviatrixVpcTrackerVpcListSubnetArrayOutput{})
}
