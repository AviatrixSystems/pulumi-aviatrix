// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixVpnProfile struct {
	pulumi.CustomResourceState

	// Base policy rule of the profile to be added. Enter 'allow_all' or 'deny_all'.
	BaseRule             pulumi.StringPtrOutput `pulumi:"baseRule"`
	ManageUserAttachment pulumi.BoolPtrOutput   `pulumi:"manageUserAttachment"`
	// name for the VPN profile.
	Name pulumi.StringOutput `pulumi:"name"`
	// New security policy for the profile.
	Policies AviatrixVpnProfilePolicyArrayOutput `pulumi:"policies"`
	// List of VPN users to attach to this profile.
	Users pulumi.StringArrayOutput `pulumi:"users"`
}

// NewAviatrixVpnProfile registers a new resource with the given unique name, arguments, and options.
func NewAviatrixVpnProfile(ctx *pulumi.Context,
	name string, args *AviatrixVpnProfileArgs, opts ...pulumi.ResourceOption) (*AviatrixVpnProfile, error) {
	if args == nil {
		args = &AviatrixVpnProfileArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixVpnProfile
	err := ctx.RegisterResource("aviatrix:index/aviatrixVpnProfile:AviatrixVpnProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixVpnProfile gets an existing AviatrixVpnProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixVpnProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixVpnProfileState, opts ...pulumi.ResourceOption) (*AviatrixVpnProfile, error) {
	var resource AviatrixVpnProfile
	err := ctx.ReadResource("aviatrix:index/aviatrixVpnProfile:AviatrixVpnProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixVpnProfile resources.
type aviatrixVpnProfileState struct {
	// Base policy rule of the profile to be added. Enter 'allow_all' or 'deny_all'.
	BaseRule             *string `pulumi:"baseRule"`
	ManageUserAttachment *bool   `pulumi:"manageUserAttachment"`
	// name for the VPN profile.
	Name *string `pulumi:"name"`
	// New security policy for the profile.
	Policies []AviatrixVpnProfilePolicy `pulumi:"policies"`
	// List of VPN users to attach to this profile.
	Users []string `pulumi:"users"`
}

type AviatrixVpnProfileState struct {
	// Base policy rule of the profile to be added. Enter 'allow_all' or 'deny_all'.
	BaseRule             pulumi.StringPtrInput
	ManageUserAttachment pulumi.BoolPtrInput
	// name for the VPN profile.
	Name pulumi.StringPtrInput
	// New security policy for the profile.
	Policies AviatrixVpnProfilePolicyArrayInput
	// List of VPN users to attach to this profile.
	Users pulumi.StringArrayInput
}

func (AviatrixVpnProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixVpnProfileState)(nil)).Elem()
}

type aviatrixVpnProfileArgs struct {
	// Base policy rule of the profile to be added. Enter 'allow_all' or 'deny_all'.
	BaseRule             *string `pulumi:"baseRule"`
	ManageUserAttachment *bool   `pulumi:"manageUserAttachment"`
	// name for the VPN profile.
	Name *string `pulumi:"name"`
	// New security policy for the profile.
	Policies []AviatrixVpnProfilePolicy `pulumi:"policies"`
	// List of VPN users to attach to this profile.
	Users []string `pulumi:"users"`
}

// The set of arguments for constructing a AviatrixVpnProfile resource.
type AviatrixVpnProfileArgs struct {
	// Base policy rule of the profile to be added. Enter 'allow_all' or 'deny_all'.
	BaseRule             pulumi.StringPtrInput
	ManageUserAttachment pulumi.BoolPtrInput
	// name for the VPN profile.
	Name pulumi.StringPtrInput
	// New security policy for the profile.
	Policies AviatrixVpnProfilePolicyArrayInput
	// List of VPN users to attach to this profile.
	Users pulumi.StringArrayInput
}

func (AviatrixVpnProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixVpnProfileArgs)(nil)).Elem()
}

type AviatrixVpnProfileInput interface {
	pulumi.Input

	ToAviatrixVpnProfileOutput() AviatrixVpnProfileOutput
	ToAviatrixVpnProfileOutputWithContext(ctx context.Context) AviatrixVpnProfileOutput
}

func (*AviatrixVpnProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixVpnProfile)(nil)).Elem()
}

func (i *AviatrixVpnProfile) ToAviatrixVpnProfileOutput() AviatrixVpnProfileOutput {
	return i.ToAviatrixVpnProfileOutputWithContext(context.Background())
}

func (i *AviatrixVpnProfile) ToAviatrixVpnProfileOutputWithContext(ctx context.Context) AviatrixVpnProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixVpnProfileOutput)
}

// AviatrixVpnProfileArrayInput is an input type that accepts AviatrixVpnProfileArray and AviatrixVpnProfileArrayOutput values.
// You can construct a concrete instance of `AviatrixVpnProfileArrayInput` via:
//
//	AviatrixVpnProfileArray{ AviatrixVpnProfileArgs{...} }
type AviatrixVpnProfileArrayInput interface {
	pulumi.Input

	ToAviatrixVpnProfileArrayOutput() AviatrixVpnProfileArrayOutput
	ToAviatrixVpnProfileArrayOutputWithContext(context.Context) AviatrixVpnProfileArrayOutput
}

type AviatrixVpnProfileArray []AviatrixVpnProfileInput

func (AviatrixVpnProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixVpnProfile)(nil)).Elem()
}

func (i AviatrixVpnProfileArray) ToAviatrixVpnProfileArrayOutput() AviatrixVpnProfileArrayOutput {
	return i.ToAviatrixVpnProfileArrayOutputWithContext(context.Background())
}

func (i AviatrixVpnProfileArray) ToAviatrixVpnProfileArrayOutputWithContext(ctx context.Context) AviatrixVpnProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixVpnProfileArrayOutput)
}

// AviatrixVpnProfileMapInput is an input type that accepts AviatrixVpnProfileMap and AviatrixVpnProfileMapOutput values.
// You can construct a concrete instance of `AviatrixVpnProfileMapInput` via:
//
//	AviatrixVpnProfileMap{ "key": AviatrixVpnProfileArgs{...} }
type AviatrixVpnProfileMapInput interface {
	pulumi.Input

	ToAviatrixVpnProfileMapOutput() AviatrixVpnProfileMapOutput
	ToAviatrixVpnProfileMapOutputWithContext(context.Context) AviatrixVpnProfileMapOutput
}

type AviatrixVpnProfileMap map[string]AviatrixVpnProfileInput

func (AviatrixVpnProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixVpnProfile)(nil)).Elem()
}

func (i AviatrixVpnProfileMap) ToAviatrixVpnProfileMapOutput() AviatrixVpnProfileMapOutput {
	return i.ToAviatrixVpnProfileMapOutputWithContext(context.Background())
}

func (i AviatrixVpnProfileMap) ToAviatrixVpnProfileMapOutputWithContext(ctx context.Context) AviatrixVpnProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixVpnProfileMapOutput)
}

type AviatrixVpnProfileOutput struct{ *pulumi.OutputState }

func (AviatrixVpnProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixVpnProfile)(nil)).Elem()
}

func (o AviatrixVpnProfileOutput) ToAviatrixVpnProfileOutput() AviatrixVpnProfileOutput {
	return o
}

func (o AviatrixVpnProfileOutput) ToAviatrixVpnProfileOutputWithContext(ctx context.Context) AviatrixVpnProfileOutput {
	return o
}

// Base policy rule of the profile to be added. Enter 'allow_all' or 'deny_all'.
func (o AviatrixVpnProfileOutput) BaseRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixVpnProfile) pulumi.StringPtrOutput { return v.BaseRule }).(pulumi.StringPtrOutput)
}

func (o AviatrixVpnProfileOutput) ManageUserAttachment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixVpnProfile) pulumi.BoolPtrOutput { return v.ManageUserAttachment }).(pulumi.BoolPtrOutput)
}

// name for the VPN profile.
func (o AviatrixVpnProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixVpnProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// New security policy for the profile.
func (o AviatrixVpnProfileOutput) Policies() AviatrixVpnProfilePolicyArrayOutput {
	return o.ApplyT(func(v *AviatrixVpnProfile) AviatrixVpnProfilePolicyArrayOutput { return v.Policies }).(AviatrixVpnProfilePolicyArrayOutput)
}

// List of VPN users to attach to this profile.
func (o AviatrixVpnProfileOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixVpnProfile) pulumi.StringArrayOutput { return v.Users }).(pulumi.StringArrayOutput)
}

type AviatrixVpnProfileArrayOutput struct{ *pulumi.OutputState }

func (AviatrixVpnProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixVpnProfile)(nil)).Elem()
}

func (o AviatrixVpnProfileArrayOutput) ToAviatrixVpnProfileArrayOutput() AviatrixVpnProfileArrayOutput {
	return o
}

func (o AviatrixVpnProfileArrayOutput) ToAviatrixVpnProfileArrayOutputWithContext(ctx context.Context) AviatrixVpnProfileArrayOutput {
	return o
}

func (o AviatrixVpnProfileArrayOutput) Index(i pulumi.IntInput) AviatrixVpnProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixVpnProfile {
		return vs[0].([]*AviatrixVpnProfile)[vs[1].(int)]
	}).(AviatrixVpnProfileOutput)
}

type AviatrixVpnProfileMapOutput struct{ *pulumi.OutputState }

func (AviatrixVpnProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixVpnProfile)(nil)).Elem()
}

func (o AviatrixVpnProfileMapOutput) ToAviatrixVpnProfileMapOutput() AviatrixVpnProfileMapOutput {
	return o
}

func (o AviatrixVpnProfileMapOutput) ToAviatrixVpnProfileMapOutputWithContext(ctx context.Context) AviatrixVpnProfileMapOutput {
	return o
}

func (o AviatrixVpnProfileMapOutput) MapIndex(k pulumi.StringInput) AviatrixVpnProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixVpnProfile {
		return vs[0].(map[string]*AviatrixVpnProfile)[vs[1].(string)]
	}).(AviatrixVpnProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixVpnProfileInput)(nil)).Elem(), &AviatrixVpnProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixVpnProfileArrayInput)(nil)).Elem(), AviatrixVpnProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixVpnProfileMapInput)(nil)).Elem(), AviatrixVpnProfileMap{})
	pulumi.RegisterOutputType(AviatrixVpnProfileOutput{})
	pulumi.RegisterOutputType(AviatrixVpnProfileArrayOutput{})
	pulumi.RegisterOutputType(AviatrixVpnProfileMapOutput{})
}
