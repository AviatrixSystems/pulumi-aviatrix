// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aviatrix
{
    public static class GetAviatrixTransitGateway
    {
        public static Task<GetAviatrixTransitGatewayResult> InvokeAsync(GetAviatrixTransitGatewayArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAviatrixTransitGatewayResult>("aviatrix:index/getAviatrixTransitGateway:getAviatrixTransitGateway", args ?? new GetAviatrixTransitGatewayArgs(), options.WithDefaults());

        public static Output<GetAviatrixTransitGatewayResult> Invoke(GetAviatrixTransitGatewayInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAviatrixTransitGatewayResult>("aviatrix:index/getAviatrixTransitGateway:getAviatrixTransitGateway", args ?? new GetAviatrixTransitGatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAviatrixTransitGatewayArgs : global::Pulumi.InvokeArgs
    {
        [Input("gwName", required: true)]
        public string GwName { get; set; } = null!;

        public GetAviatrixTransitGatewayArgs()
        {
        }
        public static new GetAviatrixTransitGatewayArgs Empty => new GetAviatrixTransitGatewayArgs();
    }

    public sealed class GetAviatrixTransitGatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("gwName", required: true)]
        public Input<string> GwName { get; set; } = null!;

        public GetAviatrixTransitGatewayInvokeArgs()
        {
        }
        public static new GetAviatrixTransitGatewayInvokeArgs Empty => new GetAviatrixTransitGatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetAviatrixTransitGatewayResult
    {
        public readonly string AccountName;
        public readonly bool AllocateNewEip;
        public readonly ImmutableArray<string> ApprovedLearnedCidrs;
        public readonly string AvailabilityDomain;
        public readonly string AzureEipNameResourceGroup;
        public readonly bool BgpEcmp;
        public readonly int BgpHoldTime;
        public readonly ImmutableArray<Outputs.GetAviatrixTransitGatewayBgpLanInterfaceResult> BgpLanInterfaces;
        public readonly ImmutableArray<string> BgpLanIpLists;
        public readonly string BgpManualSpokeAdvertiseCidrs;
        public readonly string BgpPollingTime;
        public readonly string CloudInstanceId;
        public readonly int CloudType;
        public readonly bool ConnectedTransit;
        public readonly string CustomizedSpokeVpcRoutes;
        public readonly ImmutableArray<string> CustomizedTransitVpcRoutes;
        public readonly string Eip;
        public readonly bool EnableActiveStandby;
        public readonly bool EnableActiveStandbyPreemptive;
        public readonly bool EnableAdvertiseTransitCidr;
        public readonly bool EnableBgpOverLan;
        public readonly bool EnableEgressTransitFirenet;
        public readonly bool EnableEncryptVolume;
        public readonly bool EnableFirenet;
        public readonly bool EnableGatewayLoadBalancer;
        public readonly bool EnableHybridConnection;
        public readonly bool EnableJumboFrame;
        public readonly bool EnableLearnedCidrsApproval;
        public readonly bool EnableMonitorGatewaySubnets;
        public readonly bool EnableMultiTierTransit;
        public readonly bool EnablePrivateOob;
        public readonly bool EnableSegmentation;
        public readonly bool EnableSpotInstance;
        public readonly bool EnableTransitFirenet;
        public readonly bool EnableTransitSummarizeCidrToTgw;
        public readonly bool EnableVpcDnsServer;
        public readonly string ExcludedAdvertisedSpokeRoutes;
        public readonly string FaultDomain;
        public readonly string FilteredSpokeVpcRoutes;
        public readonly string GwName;
        public readonly string GwSize;
        public readonly string HaAvailabilityDomain;
        public readonly string HaAzureEipNameResourceGroup;
        public readonly ImmutableArray<Outputs.GetAviatrixTransitGatewayHaBgpLanInterfaceResult> HaBgpLanInterfaces;
        public readonly ImmutableArray<string> HaBgpLanIpLists;
        public readonly string HaCloudInstanceId;
        public readonly string HaEip;
        public readonly string HaFaultDomain;
        public readonly string HaGwName;
        public readonly string HaGwSize;
        public readonly string HaImageVersion;
        public readonly string HaInsaneModeAz;
        public readonly string HaLanInterfaceCidr;
        public readonly string HaOobAvailabilityZone;
        public readonly string HaOobManagementSubnet;
        public readonly string HaPrivateIp;
        public readonly string HaPublicIp;
        public readonly string HaSecurityGroupId;
        public readonly string HaSoftwareVersion;
        public readonly string HaSubnet;
        public readonly string HaZone;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ImageVersion;
        public readonly bool InsaneMode;
        public readonly string InsaneModeAz;
        public readonly string LanInterfaceCidr;
        public readonly string LanPrivateSubnet;
        public readonly string LanVpcId;
        public readonly string LearnedCidrsApprovalMode;
        public readonly string LocalAsNumber;
        public readonly ImmutableArray<string> MonitorExcludeLists;
        public readonly string OobAvailabilityZone;
        public readonly string OobManagementSubnet;
        public readonly ImmutableArray<string> PrependAsPaths;
        public readonly string PrivateIp;
        public readonly string PublicIp;
        public readonly string SecurityGroupId;
        public readonly bool SingleAzHa;
        public readonly bool SingleIpSnat;
        public readonly string SoftwareVersion;
        public readonly string SpotPrice;
        public readonly string Subnet;
        public readonly ImmutableArray<string> TagLists;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly int TunnelDetectionTime;
        public readonly string VpcId;
        public readonly string VpcReg;
        public readonly string Zone;

        [OutputConstructor]
        private GetAviatrixTransitGatewayResult(
            string accountName,

            bool allocateNewEip,

            ImmutableArray<string> approvedLearnedCidrs,

            string availabilityDomain,

            string azureEipNameResourceGroup,

            bool bgpEcmp,

            int bgpHoldTime,

            ImmutableArray<Outputs.GetAviatrixTransitGatewayBgpLanInterfaceResult> bgpLanInterfaces,

            ImmutableArray<string> bgpLanIpLists,

            string bgpManualSpokeAdvertiseCidrs,

            string bgpPollingTime,

            string cloudInstanceId,

            int cloudType,

            bool connectedTransit,

            string customizedSpokeVpcRoutes,

            ImmutableArray<string> customizedTransitVpcRoutes,

            string eip,

            bool enableActiveStandby,

            bool enableActiveStandbyPreemptive,

            bool enableAdvertiseTransitCidr,

            bool enableBgpOverLan,

            bool enableEgressTransitFirenet,

            bool enableEncryptVolume,

            bool enableFirenet,

            bool enableGatewayLoadBalancer,

            bool enableHybridConnection,

            bool enableJumboFrame,

            bool enableLearnedCidrsApproval,

            bool enableMonitorGatewaySubnets,

            bool enableMultiTierTransit,

            bool enablePrivateOob,

            bool enableSegmentation,

            bool enableSpotInstance,

            bool enableTransitFirenet,

            bool enableTransitSummarizeCidrToTgw,

            bool enableVpcDnsServer,

            string excludedAdvertisedSpokeRoutes,

            string faultDomain,

            string filteredSpokeVpcRoutes,

            string gwName,

            string gwSize,

            string haAvailabilityDomain,

            string haAzureEipNameResourceGroup,

            ImmutableArray<Outputs.GetAviatrixTransitGatewayHaBgpLanInterfaceResult> haBgpLanInterfaces,

            ImmutableArray<string> haBgpLanIpLists,

            string haCloudInstanceId,

            string haEip,

            string haFaultDomain,

            string haGwName,

            string haGwSize,

            string haImageVersion,

            string haInsaneModeAz,

            string haLanInterfaceCidr,

            string haOobAvailabilityZone,

            string haOobManagementSubnet,

            string haPrivateIp,

            string haPublicIp,

            string haSecurityGroupId,

            string haSoftwareVersion,

            string haSubnet,

            string haZone,

            string id,

            string imageVersion,

            bool insaneMode,

            string insaneModeAz,

            string lanInterfaceCidr,

            string lanPrivateSubnet,

            string lanVpcId,

            string learnedCidrsApprovalMode,

            string localAsNumber,

            ImmutableArray<string> monitorExcludeLists,

            string oobAvailabilityZone,

            string oobManagementSubnet,

            ImmutableArray<string> prependAsPaths,

            string privateIp,

            string publicIp,

            string securityGroupId,

            bool singleAzHa,

            bool singleIpSnat,

            string softwareVersion,

            string spotPrice,

            string subnet,

            ImmutableArray<string> tagLists,

            ImmutableDictionary<string, string> tags,

            int tunnelDetectionTime,

            string vpcId,

            string vpcReg,

            string zone)
        {
            AccountName = accountName;
            AllocateNewEip = allocateNewEip;
            ApprovedLearnedCidrs = approvedLearnedCidrs;
            AvailabilityDomain = availabilityDomain;
            AzureEipNameResourceGroup = azureEipNameResourceGroup;
            BgpEcmp = bgpEcmp;
            BgpHoldTime = bgpHoldTime;
            BgpLanInterfaces = bgpLanInterfaces;
            BgpLanIpLists = bgpLanIpLists;
            BgpManualSpokeAdvertiseCidrs = bgpManualSpokeAdvertiseCidrs;
            BgpPollingTime = bgpPollingTime;
            CloudInstanceId = cloudInstanceId;
            CloudType = cloudType;
            ConnectedTransit = connectedTransit;
            CustomizedSpokeVpcRoutes = customizedSpokeVpcRoutes;
            CustomizedTransitVpcRoutes = customizedTransitVpcRoutes;
            Eip = eip;
            EnableActiveStandby = enableActiveStandby;
            EnableActiveStandbyPreemptive = enableActiveStandbyPreemptive;
            EnableAdvertiseTransitCidr = enableAdvertiseTransitCidr;
            EnableBgpOverLan = enableBgpOverLan;
            EnableEgressTransitFirenet = enableEgressTransitFirenet;
            EnableEncryptVolume = enableEncryptVolume;
            EnableFirenet = enableFirenet;
            EnableGatewayLoadBalancer = enableGatewayLoadBalancer;
            EnableHybridConnection = enableHybridConnection;
            EnableJumboFrame = enableJumboFrame;
            EnableLearnedCidrsApproval = enableLearnedCidrsApproval;
            EnableMonitorGatewaySubnets = enableMonitorGatewaySubnets;
            EnableMultiTierTransit = enableMultiTierTransit;
            EnablePrivateOob = enablePrivateOob;
            EnableSegmentation = enableSegmentation;
            EnableSpotInstance = enableSpotInstance;
            EnableTransitFirenet = enableTransitFirenet;
            EnableTransitSummarizeCidrToTgw = enableTransitSummarizeCidrToTgw;
            EnableVpcDnsServer = enableVpcDnsServer;
            ExcludedAdvertisedSpokeRoutes = excludedAdvertisedSpokeRoutes;
            FaultDomain = faultDomain;
            FilteredSpokeVpcRoutes = filteredSpokeVpcRoutes;
            GwName = gwName;
            GwSize = gwSize;
            HaAvailabilityDomain = haAvailabilityDomain;
            HaAzureEipNameResourceGroup = haAzureEipNameResourceGroup;
            HaBgpLanInterfaces = haBgpLanInterfaces;
            HaBgpLanIpLists = haBgpLanIpLists;
            HaCloudInstanceId = haCloudInstanceId;
            HaEip = haEip;
            HaFaultDomain = haFaultDomain;
            HaGwName = haGwName;
            HaGwSize = haGwSize;
            HaImageVersion = haImageVersion;
            HaInsaneModeAz = haInsaneModeAz;
            HaLanInterfaceCidr = haLanInterfaceCidr;
            HaOobAvailabilityZone = haOobAvailabilityZone;
            HaOobManagementSubnet = haOobManagementSubnet;
            HaPrivateIp = haPrivateIp;
            HaPublicIp = haPublicIp;
            HaSecurityGroupId = haSecurityGroupId;
            HaSoftwareVersion = haSoftwareVersion;
            HaSubnet = haSubnet;
            HaZone = haZone;
            Id = id;
            ImageVersion = imageVersion;
            InsaneMode = insaneMode;
            InsaneModeAz = insaneModeAz;
            LanInterfaceCidr = lanInterfaceCidr;
            LanPrivateSubnet = lanPrivateSubnet;
            LanVpcId = lanVpcId;
            LearnedCidrsApprovalMode = learnedCidrsApprovalMode;
            LocalAsNumber = localAsNumber;
            MonitorExcludeLists = monitorExcludeLists;
            OobAvailabilityZone = oobAvailabilityZone;
            OobManagementSubnet = oobManagementSubnet;
            PrependAsPaths = prependAsPaths;
            PrivateIp = privateIp;
            PublicIp = publicIp;
            SecurityGroupId = securityGroupId;
            SingleAzHa = singleAzHa;
            SingleIpSnat = singleIpSnat;
            SoftwareVersion = softwareVersion;
            SpotPrice = spotPrice;
            Subnet = subnet;
            TagLists = tagLists;
            Tags = tags;
            TunnelDetectionTime = tunnelDetectionTime;
            VpcId = vpcId;
            VpcReg = vpcReg;
            Zone = zone;
        }
    }
}
