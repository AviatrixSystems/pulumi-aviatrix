// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **aviatrix_aws_tgw_peering** resource allows the creation and management of Aviatrix-created inter-region peerings between AWS TGWs.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/astipkovits/pulumi-aviatrix/sdk/go/aviatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aviatrix.NewAviatrixAwsTgwPeering(ctx, "test", &aviatrix.AviatrixAwsTgwPeeringArgs{
//				TgwName1: pulumi.String("tgw1"),
//				TgwName2: pulumi.String("tgw2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// **aws_tgw_peering** can be imported using the `tgw_name1` and `tgw_name2`, e.g.
//
// ```sh
//
//	$ pulumi import aviatrix:index/aviatrixAwsTgwPeering:AviatrixAwsTgwPeering test tgw_name1~tgw_name2
//
// ```
type AviatrixAwsTgwPeering struct {
	pulumi.CustomResourceState

	// This parameter represents name of the first AWS TGW to make a peer pair.
	TgwName1 pulumi.StringOutput `pulumi:"tgwName1"`
	// This parameter represents name of the second AWS TGW to make a peer pair.
	TgwName2 pulumi.StringOutput `pulumi:"tgwName2"`
}

// NewAviatrixAwsTgwPeering registers a new resource with the given unique name, arguments, and options.
func NewAviatrixAwsTgwPeering(ctx *pulumi.Context,
	name string, args *AviatrixAwsTgwPeeringArgs, opts ...pulumi.ResourceOption) (*AviatrixAwsTgwPeering, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TgwName1 == nil {
		return nil, errors.New("invalid value for required argument 'TgwName1'")
	}
	if args.TgwName2 == nil {
		return nil, errors.New("invalid value for required argument 'TgwName2'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixAwsTgwPeering
	err := ctx.RegisterResource("aviatrix:index/aviatrixAwsTgwPeering:AviatrixAwsTgwPeering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixAwsTgwPeering gets an existing AviatrixAwsTgwPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixAwsTgwPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixAwsTgwPeeringState, opts ...pulumi.ResourceOption) (*AviatrixAwsTgwPeering, error) {
	var resource AviatrixAwsTgwPeering
	err := ctx.ReadResource("aviatrix:index/aviatrixAwsTgwPeering:AviatrixAwsTgwPeering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixAwsTgwPeering resources.
type aviatrixAwsTgwPeeringState struct {
	// This parameter represents name of the first AWS TGW to make a peer pair.
	TgwName1 *string `pulumi:"tgwName1"`
	// This parameter represents name of the second AWS TGW to make a peer pair.
	TgwName2 *string `pulumi:"tgwName2"`
}

type AviatrixAwsTgwPeeringState struct {
	// This parameter represents name of the first AWS TGW to make a peer pair.
	TgwName1 pulumi.StringPtrInput
	// This parameter represents name of the second AWS TGW to make a peer pair.
	TgwName2 pulumi.StringPtrInput
}

func (AviatrixAwsTgwPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixAwsTgwPeeringState)(nil)).Elem()
}

type aviatrixAwsTgwPeeringArgs struct {
	// This parameter represents name of the first AWS TGW to make a peer pair.
	TgwName1 string `pulumi:"tgwName1"`
	// This parameter represents name of the second AWS TGW to make a peer pair.
	TgwName2 string `pulumi:"tgwName2"`
}

// The set of arguments for constructing a AviatrixAwsTgwPeering resource.
type AviatrixAwsTgwPeeringArgs struct {
	// This parameter represents name of the first AWS TGW to make a peer pair.
	TgwName1 pulumi.StringInput
	// This parameter represents name of the second AWS TGW to make a peer pair.
	TgwName2 pulumi.StringInput
}

func (AviatrixAwsTgwPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixAwsTgwPeeringArgs)(nil)).Elem()
}

type AviatrixAwsTgwPeeringInput interface {
	pulumi.Input

	ToAviatrixAwsTgwPeeringOutput() AviatrixAwsTgwPeeringOutput
	ToAviatrixAwsTgwPeeringOutputWithContext(ctx context.Context) AviatrixAwsTgwPeeringOutput
}

func (*AviatrixAwsTgwPeering) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixAwsTgwPeering)(nil)).Elem()
}

func (i *AviatrixAwsTgwPeering) ToAviatrixAwsTgwPeeringOutput() AviatrixAwsTgwPeeringOutput {
	return i.ToAviatrixAwsTgwPeeringOutputWithContext(context.Background())
}

func (i *AviatrixAwsTgwPeering) ToAviatrixAwsTgwPeeringOutputWithContext(ctx context.Context) AviatrixAwsTgwPeeringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAwsTgwPeeringOutput)
}

// AviatrixAwsTgwPeeringArrayInput is an input type that accepts AviatrixAwsTgwPeeringArray and AviatrixAwsTgwPeeringArrayOutput values.
// You can construct a concrete instance of `AviatrixAwsTgwPeeringArrayInput` via:
//
//	AviatrixAwsTgwPeeringArray{ AviatrixAwsTgwPeeringArgs{...} }
type AviatrixAwsTgwPeeringArrayInput interface {
	pulumi.Input

	ToAviatrixAwsTgwPeeringArrayOutput() AviatrixAwsTgwPeeringArrayOutput
	ToAviatrixAwsTgwPeeringArrayOutputWithContext(context.Context) AviatrixAwsTgwPeeringArrayOutput
}

type AviatrixAwsTgwPeeringArray []AviatrixAwsTgwPeeringInput

func (AviatrixAwsTgwPeeringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixAwsTgwPeering)(nil)).Elem()
}

func (i AviatrixAwsTgwPeeringArray) ToAviatrixAwsTgwPeeringArrayOutput() AviatrixAwsTgwPeeringArrayOutput {
	return i.ToAviatrixAwsTgwPeeringArrayOutputWithContext(context.Background())
}

func (i AviatrixAwsTgwPeeringArray) ToAviatrixAwsTgwPeeringArrayOutputWithContext(ctx context.Context) AviatrixAwsTgwPeeringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAwsTgwPeeringArrayOutput)
}

// AviatrixAwsTgwPeeringMapInput is an input type that accepts AviatrixAwsTgwPeeringMap and AviatrixAwsTgwPeeringMapOutput values.
// You can construct a concrete instance of `AviatrixAwsTgwPeeringMapInput` via:
//
//	AviatrixAwsTgwPeeringMap{ "key": AviatrixAwsTgwPeeringArgs{...} }
type AviatrixAwsTgwPeeringMapInput interface {
	pulumi.Input

	ToAviatrixAwsTgwPeeringMapOutput() AviatrixAwsTgwPeeringMapOutput
	ToAviatrixAwsTgwPeeringMapOutputWithContext(context.Context) AviatrixAwsTgwPeeringMapOutput
}

type AviatrixAwsTgwPeeringMap map[string]AviatrixAwsTgwPeeringInput

func (AviatrixAwsTgwPeeringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixAwsTgwPeering)(nil)).Elem()
}

func (i AviatrixAwsTgwPeeringMap) ToAviatrixAwsTgwPeeringMapOutput() AviatrixAwsTgwPeeringMapOutput {
	return i.ToAviatrixAwsTgwPeeringMapOutputWithContext(context.Background())
}

func (i AviatrixAwsTgwPeeringMap) ToAviatrixAwsTgwPeeringMapOutputWithContext(ctx context.Context) AviatrixAwsTgwPeeringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAwsTgwPeeringMapOutput)
}

type AviatrixAwsTgwPeeringOutput struct{ *pulumi.OutputState }

func (AviatrixAwsTgwPeeringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixAwsTgwPeering)(nil)).Elem()
}

func (o AviatrixAwsTgwPeeringOutput) ToAviatrixAwsTgwPeeringOutput() AviatrixAwsTgwPeeringOutput {
	return o
}

func (o AviatrixAwsTgwPeeringOutput) ToAviatrixAwsTgwPeeringOutputWithContext(ctx context.Context) AviatrixAwsTgwPeeringOutput {
	return o
}

// This parameter represents name of the first AWS TGW to make a peer pair.
func (o AviatrixAwsTgwPeeringOutput) TgwName1() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixAwsTgwPeering) pulumi.StringOutput { return v.TgwName1 }).(pulumi.StringOutput)
}

// This parameter represents name of the second AWS TGW to make a peer pair.
func (o AviatrixAwsTgwPeeringOutput) TgwName2() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixAwsTgwPeering) pulumi.StringOutput { return v.TgwName2 }).(pulumi.StringOutput)
}

type AviatrixAwsTgwPeeringArrayOutput struct{ *pulumi.OutputState }

func (AviatrixAwsTgwPeeringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixAwsTgwPeering)(nil)).Elem()
}

func (o AviatrixAwsTgwPeeringArrayOutput) ToAviatrixAwsTgwPeeringArrayOutput() AviatrixAwsTgwPeeringArrayOutput {
	return o
}

func (o AviatrixAwsTgwPeeringArrayOutput) ToAviatrixAwsTgwPeeringArrayOutputWithContext(ctx context.Context) AviatrixAwsTgwPeeringArrayOutput {
	return o
}

func (o AviatrixAwsTgwPeeringArrayOutput) Index(i pulumi.IntInput) AviatrixAwsTgwPeeringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixAwsTgwPeering {
		return vs[0].([]*AviatrixAwsTgwPeering)[vs[1].(int)]
	}).(AviatrixAwsTgwPeeringOutput)
}

type AviatrixAwsTgwPeeringMapOutput struct{ *pulumi.OutputState }

func (AviatrixAwsTgwPeeringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixAwsTgwPeering)(nil)).Elem()
}

func (o AviatrixAwsTgwPeeringMapOutput) ToAviatrixAwsTgwPeeringMapOutput() AviatrixAwsTgwPeeringMapOutput {
	return o
}

func (o AviatrixAwsTgwPeeringMapOutput) ToAviatrixAwsTgwPeeringMapOutputWithContext(ctx context.Context) AviatrixAwsTgwPeeringMapOutput {
	return o
}

func (o AviatrixAwsTgwPeeringMapOutput) MapIndex(k pulumi.StringInput) AviatrixAwsTgwPeeringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixAwsTgwPeering {
		return vs[0].(map[string]*AviatrixAwsTgwPeering)[vs[1].(string)]
	}).(AviatrixAwsTgwPeeringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAwsTgwPeeringInput)(nil)).Elem(), &AviatrixAwsTgwPeering{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAwsTgwPeeringArrayInput)(nil)).Elem(), AviatrixAwsTgwPeeringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAwsTgwPeeringMapInput)(nil)).Elem(), AviatrixAwsTgwPeeringMap{})
	pulumi.RegisterOutputType(AviatrixAwsTgwPeeringOutput{})
	pulumi.RegisterOutputType(AviatrixAwsTgwPeeringArrayOutput{})
	pulumi.RegisterOutputType(AviatrixAwsTgwPeeringMapOutput{})
}
