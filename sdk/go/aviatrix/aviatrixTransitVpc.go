// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixTransitVpc struct {
	pulumi.CustomResourceState

	// This parameter represents the name of a Cloud-Account in Aviatrix controller.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// Type of cloud service provider, requires an integer value. Use 1 for AWS.
	CloudType pulumi.IntOutput `pulumi:"cloudType"`
	// Specify Connected Transit status.
	ConnectedTransit pulumi.StringPtrOutput `pulumi:"connectedTransit"`
	// Specify whether to enable firenet interfaces or not.
	EnableFirenetInterfaces pulumi.BoolPtrOutput `pulumi:"enableFirenetInterfaces"`
	// Sign of readiness for TGW connection.
	EnableHybridConnection pulumi.BoolPtrOutput `pulumi:"enableHybridConnection"`
	// Enable NAT for this container.
	EnableNat pulumi.StringPtrOutput `pulumi:"enableNat"`
	// Name of the gateway which is going to be created.
	GwName pulumi.StringOutput `pulumi:"gwName"`
	// HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).
	HaGwSize pulumi.StringPtrOutput `pulumi:"haGwSize"`
	// AZ of subnet being created for Insane Mode Transit HA Gateway. Required if insane_mode is enabled and ha_subnet is set.
	HaInsaneModeAz pulumi.StringPtrOutput `pulumi:"haInsaneModeAz"`
	// HA Subnet.
	HaSubnet pulumi.StringPtrOutput `pulumi:"haSubnet"`
	// Enable Insane Mode for Transit. Valid values: true, false. If insane mode is enabled, gateway size has to at least be c5
	// size.
	InsaneMode pulumi.BoolPtrOutput `pulumi:"insaneMode"`
	// AZ of subnet being created for Insane Mode Transit Gateway. Required if insane_mode is enabled.
	InsaneModeAz pulumi.StringPtrOutput `pulumi:"insaneModeAz"`
	// Public Subnet Name.
	Subnet pulumi.StringOutput `pulumi:"subnet"`
	// Instance tag of cloud provider.
	TagLists pulumi.StringArrayOutput `pulumi:"tagLists"`
	// VPC-ID/VNet-Name of cloud provider.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// Region of cloud provider.
	VpcReg pulumi.StringOutput `pulumi:"vpcReg"`
	// Size of the gateway instance.
	VpcSize pulumi.StringOutput `pulumi:"vpcSize"`
}

// NewAviatrixTransitVpc registers a new resource with the given unique name, arguments, and options.
func NewAviatrixTransitVpc(ctx *pulumi.Context,
	name string, args *AviatrixTransitVpcArgs, opts ...pulumi.ResourceOption) (*AviatrixTransitVpc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.CloudType == nil {
		return nil, errors.New("invalid value for required argument 'CloudType'")
	}
	if args.GwName == nil {
		return nil, errors.New("invalid value for required argument 'GwName'")
	}
	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.VpcReg == nil {
		return nil, errors.New("invalid value for required argument 'VpcReg'")
	}
	if args.VpcSize == nil {
		return nil, errors.New("invalid value for required argument 'VpcSize'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixTransitVpc
	err := ctx.RegisterResource("aviatrix:index/aviatrixTransitVpc:AviatrixTransitVpc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixTransitVpc gets an existing AviatrixTransitVpc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixTransitVpc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixTransitVpcState, opts ...pulumi.ResourceOption) (*AviatrixTransitVpc, error) {
	var resource AviatrixTransitVpc
	err := ctx.ReadResource("aviatrix:index/aviatrixTransitVpc:AviatrixTransitVpc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixTransitVpc resources.
type aviatrixTransitVpcState struct {
	// This parameter represents the name of a Cloud-Account in Aviatrix controller.
	AccountName *string `pulumi:"accountName"`
	// Type of cloud service provider, requires an integer value. Use 1 for AWS.
	CloudType *int `pulumi:"cloudType"`
	// Specify Connected Transit status.
	ConnectedTransit *string `pulumi:"connectedTransit"`
	// Specify whether to enable firenet interfaces or not.
	EnableFirenetInterfaces *bool `pulumi:"enableFirenetInterfaces"`
	// Sign of readiness for TGW connection.
	EnableHybridConnection *bool `pulumi:"enableHybridConnection"`
	// Enable NAT for this container.
	EnableNat *string `pulumi:"enableNat"`
	// Name of the gateway which is going to be created.
	GwName *string `pulumi:"gwName"`
	// HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).
	HaGwSize *string `pulumi:"haGwSize"`
	// AZ of subnet being created for Insane Mode Transit HA Gateway. Required if insane_mode is enabled and ha_subnet is set.
	HaInsaneModeAz *string `pulumi:"haInsaneModeAz"`
	// HA Subnet.
	HaSubnet *string `pulumi:"haSubnet"`
	// Enable Insane Mode for Transit. Valid values: true, false. If insane mode is enabled, gateway size has to at least be c5
	// size.
	InsaneMode *bool `pulumi:"insaneMode"`
	// AZ of subnet being created for Insane Mode Transit Gateway. Required if insane_mode is enabled.
	InsaneModeAz *string `pulumi:"insaneModeAz"`
	// Public Subnet Name.
	Subnet *string `pulumi:"subnet"`
	// Instance tag of cloud provider.
	TagLists []string `pulumi:"tagLists"`
	// VPC-ID/VNet-Name of cloud provider.
	VpcId *string `pulumi:"vpcId"`
	// Region of cloud provider.
	VpcReg *string `pulumi:"vpcReg"`
	// Size of the gateway instance.
	VpcSize *string `pulumi:"vpcSize"`
}

type AviatrixTransitVpcState struct {
	// This parameter represents the name of a Cloud-Account in Aviatrix controller.
	AccountName pulumi.StringPtrInput
	// Type of cloud service provider, requires an integer value. Use 1 for AWS.
	CloudType pulumi.IntPtrInput
	// Specify Connected Transit status.
	ConnectedTransit pulumi.StringPtrInput
	// Specify whether to enable firenet interfaces or not.
	EnableFirenetInterfaces pulumi.BoolPtrInput
	// Sign of readiness for TGW connection.
	EnableHybridConnection pulumi.BoolPtrInput
	// Enable NAT for this container.
	EnableNat pulumi.StringPtrInput
	// Name of the gateway which is going to be created.
	GwName pulumi.StringPtrInput
	// HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).
	HaGwSize pulumi.StringPtrInput
	// AZ of subnet being created for Insane Mode Transit HA Gateway. Required if insane_mode is enabled and ha_subnet is set.
	HaInsaneModeAz pulumi.StringPtrInput
	// HA Subnet.
	HaSubnet pulumi.StringPtrInput
	// Enable Insane Mode for Transit. Valid values: true, false. If insane mode is enabled, gateway size has to at least be c5
	// size.
	InsaneMode pulumi.BoolPtrInput
	// AZ of subnet being created for Insane Mode Transit Gateway. Required if insane_mode is enabled.
	InsaneModeAz pulumi.StringPtrInput
	// Public Subnet Name.
	Subnet pulumi.StringPtrInput
	// Instance tag of cloud provider.
	TagLists pulumi.StringArrayInput
	// VPC-ID/VNet-Name of cloud provider.
	VpcId pulumi.StringPtrInput
	// Region of cloud provider.
	VpcReg pulumi.StringPtrInput
	// Size of the gateway instance.
	VpcSize pulumi.StringPtrInput
}

func (AviatrixTransitVpcState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixTransitVpcState)(nil)).Elem()
}

type aviatrixTransitVpcArgs struct {
	// This parameter represents the name of a Cloud-Account in Aviatrix controller.
	AccountName string `pulumi:"accountName"`
	// Type of cloud service provider, requires an integer value. Use 1 for AWS.
	CloudType int `pulumi:"cloudType"`
	// Specify Connected Transit status.
	ConnectedTransit *string `pulumi:"connectedTransit"`
	// Specify whether to enable firenet interfaces or not.
	EnableFirenetInterfaces *bool `pulumi:"enableFirenetInterfaces"`
	// Sign of readiness for TGW connection.
	EnableHybridConnection *bool `pulumi:"enableHybridConnection"`
	// Enable NAT for this container.
	EnableNat *string `pulumi:"enableNat"`
	// Name of the gateway which is going to be created.
	GwName string `pulumi:"gwName"`
	// HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).
	HaGwSize *string `pulumi:"haGwSize"`
	// AZ of subnet being created for Insane Mode Transit HA Gateway. Required if insane_mode is enabled and ha_subnet is set.
	HaInsaneModeAz *string `pulumi:"haInsaneModeAz"`
	// HA Subnet.
	HaSubnet *string `pulumi:"haSubnet"`
	// Enable Insane Mode for Transit. Valid values: true, false. If insane mode is enabled, gateway size has to at least be c5
	// size.
	InsaneMode *bool `pulumi:"insaneMode"`
	// AZ of subnet being created for Insane Mode Transit Gateway. Required if insane_mode is enabled.
	InsaneModeAz *string `pulumi:"insaneModeAz"`
	// Public Subnet Name.
	Subnet string `pulumi:"subnet"`
	// Instance tag of cloud provider.
	TagLists []string `pulumi:"tagLists"`
	// VPC-ID/VNet-Name of cloud provider.
	VpcId string `pulumi:"vpcId"`
	// Region of cloud provider.
	VpcReg string `pulumi:"vpcReg"`
	// Size of the gateway instance.
	VpcSize string `pulumi:"vpcSize"`
}

// The set of arguments for constructing a AviatrixTransitVpc resource.
type AviatrixTransitVpcArgs struct {
	// This parameter represents the name of a Cloud-Account in Aviatrix controller.
	AccountName pulumi.StringInput
	// Type of cloud service provider, requires an integer value. Use 1 for AWS.
	CloudType pulumi.IntInput
	// Specify Connected Transit status.
	ConnectedTransit pulumi.StringPtrInput
	// Specify whether to enable firenet interfaces or not.
	EnableFirenetInterfaces pulumi.BoolPtrInput
	// Sign of readiness for TGW connection.
	EnableHybridConnection pulumi.BoolPtrInput
	// Enable NAT for this container.
	EnableNat pulumi.StringPtrInput
	// Name of the gateway which is going to be created.
	GwName pulumi.StringInput
	// HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).
	HaGwSize pulumi.StringPtrInput
	// AZ of subnet being created for Insane Mode Transit HA Gateway. Required if insane_mode is enabled and ha_subnet is set.
	HaInsaneModeAz pulumi.StringPtrInput
	// HA Subnet.
	HaSubnet pulumi.StringPtrInput
	// Enable Insane Mode for Transit. Valid values: true, false. If insane mode is enabled, gateway size has to at least be c5
	// size.
	InsaneMode pulumi.BoolPtrInput
	// AZ of subnet being created for Insane Mode Transit Gateway. Required if insane_mode is enabled.
	InsaneModeAz pulumi.StringPtrInput
	// Public Subnet Name.
	Subnet pulumi.StringInput
	// Instance tag of cloud provider.
	TagLists pulumi.StringArrayInput
	// VPC-ID/VNet-Name of cloud provider.
	VpcId pulumi.StringInput
	// Region of cloud provider.
	VpcReg pulumi.StringInput
	// Size of the gateway instance.
	VpcSize pulumi.StringInput
}

func (AviatrixTransitVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixTransitVpcArgs)(nil)).Elem()
}

type AviatrixTransitVpcInput interface {
	pulumi.Input

	ToAviatrixTransitVpcOutput() AviatrixTransitVpcOutput
	ToAviatrixTransitVpcOutputWithContext(ctx context.Context) AviatrixTransitVpcOutput
}

func (*AviatrixTransitVpc) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixTransitVpc)(nil)).Elem()
}

func (i *AviatrixTransitVpc) ToAviatrixTransitVpcOutput() AviatrixTransitVpcOutput {
	return i.ToAviatrixTransitVpcOutputWithContext(context.Background())
}

func (i *AviatrixTransitVpc) ToAviatrixTransitVpcOutputWithContext(ctx context.Context) AviatrixTransitVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixTransitVpcOutput)
}

// AviatrixTransitVpcArrayInput is an input type that accepts AviatrixTransitVpcArray and AviatrixTransitVpcArrayOutput values.
// You can construct a concrete instance of `AviatrixTransitVpcArrayInput` via:
//
//	AviatrixTransitVpcArray{ AviatrixTransitVpcArgs{...} }
type AviatrixTransitVpcArrayInput interface {
	pulumi.Input

	ToAviatrixTransitVpcArrayOutput() AviatrixTransitVpcArrayOutput
	ToAviatrixTransitVpcArrayOutputWithContext(context.Context) AviatrixTransitVpcArrayOutput
}

type AviatrixTransitVpcArray []AviatrixTransitVpcInput

func (AviatrixTransitVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixTransitVpc)(nil)).Elem()
}

func (i AviatrixTransitVpcArray) ToAviatrixTransitVpcArrayOutput() AviatrixTransitVpcArrayOutput {
	return i.ToAviatrixTransitVpcArrayOutputWithContext(context.Background())
}

func (i AviatrixTransitVpcArray) ToAviatrixTransitVpcArrayOutputWithContext(ctx context.Context) AviatrixTransitVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixTransitVpcArrayOutput)
}

// AviatrixTransitVpcMapInput is an input type that accepts AviatrixTransitVpcMap and AviatrixTransitVpcMapOutput values.
// You can construct a concrete instance of `AviatrixTransitVpcMapInput` via:
//
//	AviatrixTransitVpcMap{ "key": AviatrixTransitVpcArgs{...} }
type AviatrixTransitVpcMapInput interface {
	pulumi.Input

	ToAviatrixTransitVpcMapOutput() AviatrixTransitVpcMapOutput
	ToAviatrixTransitVpcMapOutputWithContext(context.Context) AviatrixTransitVpcMapOutput
}

type AviatrixTransitVpcMap map[string]AviatrixTransitVpcInput

func (AviatrixTransitVpcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixTransitVpc)(nil)).Elem()
}

func (i AviatrixTransitVpcMap) ToAviatrixTransitVpcMapOutput() AviatrixTransitVpcMapOutput {
	return i.ToAviatrixTransitVpcMapOutputWithContext(context.Background())
}

func (i AviatrixTransitVpcMap) ToAviatrixTransitVpcMapOutputWithContext(ctx context.Context) AviatrixTransitVpcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixTransitVpcMapOutput)
}

type AviatrixTransitVpcOutput struct{ *pulumi.OutputState }

func (AviatrixTransitVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixTransitVpc)(nil)).Elem()
}

func (o AviatrixTransitVpcOutput) ToAviatrixTransitVpcOutput() AviatrixTransitVpcOutput {
	return o
}

func (o AviatrixTransitVpcOutput) ToAviatrixTransitVpcOutputWithContext(ctx context.Context) AviatrixTransitVpcOutput {
	return o
}

// This parameter represents the name of a Cloud-Account in Aviatrix controller.
func (o AviatrixTransitVpcOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitVpc) pulumi.StringOutput { return v.AccountName }).(pulumi.StringOutput)
}

// Type of cloud service provider, requires an integer value. Use 1 for AWS.
func (o AviatrixTransitVpcOutput) CloudType() pulumi.IntOutput {
	return o.ApplyT(func(v *AviatrixTransitVpc) pulumi.IntOutput { return v.CloudType }).(pulumi.IntOutput)
}

// Specify Connected Transit status.
func (o AviatrixTransitVpcOutput) ConnectedTransit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitVpc) pulumi.StringPtrOutput { return v.ConnectedTransit }).(pulumi.StringPtrOutput)
}

// Specify whether to enable firenet interfaces or not.
func (o AviatrixTransitVpcOutput) EnableFirenetInterfaces() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitVpc) pulumi.BoolPtrOutput { return v.EnableFirenetInterfaces }).(pulumi.BoolPtrOutput)
}

// Sign of readiness for TGW connection.
func (o AviatrixTransitVpcOutput) EnableHybridConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitVpc) pulumi.BoolPtrOutput { return v.EnableHybridConnection }).(pulumi.BoolPtrOutput)
}

// Enable NAT for this container.
func (o AviatrixTransitVpcOutput) EnableNat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitVpc) pulumi.StringPtrOutput { return v.EnableNat }).(pulumi.StringPtrOutput)
}

// Name of the gateway which is going to be created.
func (o AviatrixTransitVpcOutput) GwName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitVpc) pulumi.StringOutput { return v.GwName }).(pulumi.StringOutput)
}

// HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).
func (o AviatrixTransitVpcOutput) HaGwSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitVpc) pulumi.StringPtrOutput { return v.HaGwSize }).(pulumi.StringPtrOutput)
}

// AZ of subnet being created for Insane Mode Transit HA Gateway. Required if insane_mode is enabled and ha_subnet is set.
func (o AviatrixTransitVpcOutput) HaInsaneModeAz() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitVpc) pulumi.StringPtrOutput { return v.HaInsaneModeAz }).(pulumi.StringPtrOutput)
}

// HA Subnet.
func (o AviatrixTransitVpcOutput) HaSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitVpc) pulumi.StringPtrOutput { return v.HaSubnet }).(pulumi.StringPtrOutput)
}

// Enable Insane Mode for Transit. Valid values: true, false. If insane mode is enabled, gateway size has to at least be c5
// size.
func (o AviatrixTransitVpcOutput) InsaneMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitVpc) pulumi.BoolPtrOutput { return v.InsaneMode }).(pulumi.BoolPtrOutput)
}

// AZ of subnet being created for Insane Mode Transit Gateway. Required if insane_mode is enabled.
func (o AviatrixTransitVpcOutput) InsaneModeAz() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixTransitVpc) pulumi.StringPtrOutput { return v.InsaneModeAz }).(pulumi.StringPtrOutput)
}

// Public Subnet Name.
func (o AviatrixTransitVpcOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitVpc) pulumi.StringOutput { return v.Subnet }).(pulumi.StringOutput)
}

// Instance tag of cloud provider.
func (o AviatrixTransitVpcOutput) TagLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixTransitVpc) pulumi.StringArrayOutput { return v.TagLists }).(pulumi.StringArrayOutput)
}

// VPC-ID/VNet-Name of cloud provider.
func (o AviatrixTransitVpcOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitVpc) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// Region of cloud provider.
func (o AviatrixTransitVpcOutput) VpcReg() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitVpc) pulumi.StringOutput { return v.VpcReg }).(pulumi.StringOutput)
}

// Size of the gateway instance.
func (o AviatrixTransitVpcOutput) VpcSize() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixTransitVpc) pulumi.StringOutput { return v.VpcSize }).(pulumi.StringOutput)
}

type AviatrixTransitVpcArrayOutput struct{ *pulumi.OutputState }

func (AviatrixTransitVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixTransitVpc)(nil)).Elem()
}

func (o AviatrixTransitVpcArrayOutput) ToAviatrixTransitVpcArrayOutput() AviatrixTransitVpcArrayOutput {
	return o
}

func (o AviatrixTransitVpcArrayOutput) ToAviatrixTransitVpcArrayOutputWithContext(ctx context.Context) AviatrixTransitVpcArrayOutput {
	return o
}

func (o AviatrixTransitVpcArrayOutput) Index(i pulumi.IntInput) AviatrixTransitVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixTransitVpc {
		return vs[0].([]*AviatrixTransitVpc)[vs[1].(int)]
	}).(AviatrixTransitVpcOutput)
}

type AviatrixTransitVpcMapOutput struct{ *pulumi.OutputState }

func (AviatrixTransitVpcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixTransitVpc)(nil)).Elem()
}

func (o AviatrixTransitVpcMapOutput) ToAviatrixTransitVpcMapOutput() AviatrixTransitVpcMapOutput {
	return o
}

func (o AviatrixTransitVpcMapOutput) ToAviatrixTransitVpcMapOutputWithContext(ctx context.Context) AviatrixTransitVpcMapOutput {
	return o
}

func (o AviatrixTransitVpcMapOutput) MapIndex(k pulumi.StringInput) AviatrixTransitVpcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixTransitVpc {
		return vs[0].(map[string]*AviatrixTransitVpc)[vs[1].(string)]
	}).(AviatrixTransitVpcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixTransitVpcInput)(nil)).Elem(), &AviatrixTransitVpc{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixTransitVpcArrayInput)(nil)).Elem(), AviatrixTransitVpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixTransitVpcMapInput)(nil)).Elem(), AviatrixTransitVpcMap{})
	pulumi.RegisterOutputType(AviatrixTransitVpcOutput{})
	pulumi.RegisterOutputType(AviatrixTransitVpcArrayOutput{})
	pulumi.RegisterOutputType(AviatrixTransitVpcMapOutput{})
}
