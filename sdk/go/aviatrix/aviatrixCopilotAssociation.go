// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixCopilotAssociation struct {
	pulumi.CustomResourceState

	// CoPilot IP Address or Hostname.
	CopilotAddress pulumi.StringOutput `pulumi:"copilotAddress"`
}

// NewAviatrixCopilotAssociation registers a new resource with the given unique name, arguments, and options.
func NewAviatrixCopilotAssociation(ctx *pulumi.Context,
	name string, args *AviatrixCopilotAssociationArgs, opts ...pulumi.ResourceOption) (*AviatrixCopilotAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CopilotAddress == nil {
		return nil, errors.New("invalid value for required argument 'CopilotAddress'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixCopilotAssociation
	err := ctx.RegisterResource("aviatrix:index/aviatrixCopilotAssociation:AviatrixCopilotAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixCopilotAssociation gets an existing AviatrixCopilotAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixCopilotAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixCopilotAssociationState, opts ...pulumi.ResourceOption) (*AviatrixCopilotAssociation, error) {
	var resource AviatrixCopilotAssociation
	err := ctx.ReadResource("aviatrix:index/aviatrixCopilotAssociation:AviatrixCopilotAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixCopilotAssociation resources.
type aviatrixCopilotAssociationState struct {
	// CoPilot IP Address or Hostname.
	CopilotAddress *string `pulumi:"copilotAddress"`
}

type AviatrixCopilotAssociationState struct {
	// CoPilot IP Address or Hostname.
	CopilotAddress pulumi.StringPtrInput
}

func (AviatrixCopilotAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixCopilotAssociationState)(nil)).Elem()
}

type aviatrixCopilotAssociationArgs struct {
	// CoPilot IP Address or Hostname.
	CopilotAddress string `pulumi:"copilotAddress"`
}

// The set of arguments for constructing a AviatrixCopilotAssociation resource.
type AviatrixCopilotAssociationArgs struct {
	// CoPilot IP Address or Hostname.
	CopilotAddress pulumi.StringInput
}

func (AviatrixCopilotAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixCopilotAssociationArgs)(nil)).Elem()
}

type AviatrixCopilotAssociationInput interface {
	pulumi.Input

	ToAviatrixCopilotAssociationOutput() AviatrixCopilotAssociationOutput
	ToAviatrixCopilotAssociationOutputWithContext(ctx context.Context) AviatrixCopilotAssociationOutput
}

func (*AviatrixCopilotAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixCopilotAssociation)(nil)).Elem()
}

func (i *AviatrixCopilotAssociation) ToAviatrixCopilotAssociationOutput() AviatrixCopilotAssociationOutput {
	return i.ToAviatrixCopilotAssociationOutputWithContext(context.Background())
}

func (i *AviatrixCopilotAssociation) ToAviatrixCopilotAssociationOutputWithContext(ctx context.Context) AviatrixCopilotAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixCopilotAssociationOutput)
}

// AviatrixCopilotAssociationArrayInput is an input type that accepts AviatrixCopilotAssociationArray and AviatrixCopilotAssociationArrayOutput values.
// You can construct a concrete instance of `AviatrixCopilotAssociationArrayInput` via:
//
//	AviatrixCopilotAssociationArray{ AviatrixCopilotAssociationArgs{...} }
type AviatrixCopilotAssociationArrayInput interface {
	pulumi.Input

	ToAviatrixCopilotAssociationArrayOutput() AviatrixCopilotAssociationArrayOutput
	ToAviatrixCopilotAssociationArrayOutputWithContext(context.Context) AviatrixCopilotAssociationArrayOutput
}

type AviatrixCopilotAssociationArray []AviatrixCopilotAssociationInput

func (AviatrixCopilotAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixCopilotAssociation)(nil)).Elem()
}

func (i AviatrixCopilotAssociationArray) ToAviatrixCopilotAssociationArrayOutput() AviatrixCopilotAssociationArrayOutput {
	return i.ToAviatrixCopilotAssociationArrayOutputWithContext(context.Background())
}

func (i AviatrixCopilotAssociationArray) ToAviatrixCopilotAssociationArrayOutputWithContext(ctx context.Context) AviatrixCopilotAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixCopilotAssociationArrayOutput)
}

// AviatrixCopilotAssociationMapInput is an input type that accepts AviatrixCopilotAssociationMap and AviatrixCopilotAssociationMapOutput values.
// You can construct a concrete instance of `AviatrixCopilotAssociationMapInput` via:
//
//	AviatrixCopilotAssociationMap{ "key": AviatrixCopilotAssociationArgs{...} }
type AviatrixCopilotAssociationMapInput interface {
	pulumi.Input

	ToAviatrixCopilotAssociationMapOutput() AviatrixCopilotAssociationMapOutput
	ToAviatrixCopilotAssociationMapOutputWithContext(context.Context) AviatrixCopilotAssociationMapOutput
}

type AviatrixCopilotAssociationMap map[string]AviatrixCopilotAssociationInput

func (AviatrixCopilotAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixCopilotAssociation)(nil)).Elem()
}

func (i AviatrixCopilotAssociationMap) ToAviatrixCopilotAssociationMapOutput() AviatrixCopilotAssociationMapOutput {
	return i.ToAviatrixCopilotAssociationMapOutputWithContext(context.Background())
}

func (i AviatrixCopilotAssociationMap) ToAviatrixCopilotAssociationMapOutputWithContext(ctx context.Context) AviatrixCopilotAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixCopilotAssociationMapOutput)
}

type AviatrixCopilotAssociationOutput struct{ *pulumi.OutputState }

func (AviatrixCopilotAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixCopilotAssociation)(nil)).Elem()
}

func (o AviatrixCopilotAssociationOutput) ToAviatrixCopilotAssociationOutput() AviatrixCopilotAssociationOutput {
	return o
}

func (o AviatrixCopilotAssociationOutput) ToAviatrixCopilotAssociationOutputWithContext(ctx context.Context) AviatrixCopilotAssociationOutput {
	return o
}

// CoPilot IP Address or Hostname.
func (o AviatrixCopilotAssociationOutput) CopilotAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixCopilotAssociation) pulumi.StringOutput { return v.CopilotAddress }).(pulumi.StringOutput)
}

type AviatrixCopilotAssociationArrayOutput struct{ *pulumi.OutputState }

func (AviatrixCopilotAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixCopilotAssociation)(nil)).Elem()
}

func (o AviatrixCopilotAssociationArrayOutput) ToAviatrixCopilotAssociationArrayOutput() AviatrixCopilotAssociationArrayOutput {
	return o
}

func (o AviatrixCopilotAssociationArrayOutput) ToAviatrixCopilotAssociationArrayOutputWithContext(ctx context.Context) AviatrixCopilotAssociationArrayOutput {
	return o
}

func (o AviatrixCopilotAssociationArrayOutput) Index(i pulumi.IntInput) AviatrixCopilotAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixCopilotAssociation {
		return vs[0].([]*AviatrixCopilotAssociation)[vs[1].(int)]
	}).(AviatrixCopilotAssociationOutput)
}

type AviatrixCopilotAssociationMapOutput struct{ *pulumi.OutputState }

func (AviatrixCopilotAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixCopilotAssociation)(nil)).Elem()
}

func (o AviatrixCopilotAssociationMapOutput) ToAviatrixCopilotAssociationMapOutput() AviatrixCopilotAssociationMapOutput {
	return o
}

func (o AviatrixCopilotAssociationMapOutput) ToAviatrixCopilotAssociationMapOutputWithContext(ctx context.Context) AviatrixCopilotAssociationMapOutput {
	return o
}

func (o AviatrixCopilotAssociationMapOutput) MapIndex(k pulumi.StringInput) AviatrixCopilotAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixCopilotAssociation {
		return vs[0].(map[string]*AviatrixCopilotAssociation)[vs[1].(string)]
	}).(AviatrixCopilotAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixCopilotAssociationInput)(nil)).Elem(), &AviatrixCopilotAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixCopilotAssociationArrayInput)(nil)).Elem(), AviatrixCopilotAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixCopilotAssociationMapInput)(nil)).Elem(), AviatrixCopilotAssociationMap{})
	pulumi.RegisterOutputType(AviatrixCopilotAssociationOutput{})
	pulumi.RegisterOutputType(AviatrixCopilotAssociationArrayOutput{})
	pulumi.RegisterOutputType(AviatrixCopilotAssociationMapOutput{})
}
