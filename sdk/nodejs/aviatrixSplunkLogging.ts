// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The **aviatrix_splunk_logging** resource allows the enabling and disabling of splunk logging.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aviatrix from "@pulumi/aviatrix";
 *
 * // Enable splunk logging using server and port combination
 * const testSplunkLogging = new aviatrix.AviatrixSplunkLogging("test_splunk_logging", {
 *     port: 10,
 *     server: "1.2.3.4",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aviatrix from "@astipkovits/aviatrix";
 * import * as fs from "fs";
 *
 * // Enable splunk logging using configuration file
 * const testSplunkLogging = new aviatrix.AviatrixSplunkLogging("testSplunkLogging", {customOutputConfigFile: Buffer.from(fs.readFileSync("/path/to/configuration.spl"), 'binary').toString('base64')});
 * ```
 *
 * ## Import
 *
 * **splunk_logging** can be imported using `splunk_logging`, e.g.
 *
 * ```sh
 *  $ pulumi import aviatrix:index/aviatrixSplunkLogging:AviatrixSplunkLogging test splunk_logging
 * ```
 */
export class AviatrixSplunkLogging extends pulumi.CustomResource {
    /**
     * Get an existing AviatrixSplunkLogging resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AviatrixSplunkLoggingState, opts?: pulumi.CustomResourceOptions): AviatrixSplunkLogging {
        return new AviatrixSplunkLogging(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/aviatrixSplunkLogging:AviatrixSplunkLogging';

    /**
     * Returns true if the given object is an instance of AviatrixSplunkLogging.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AviatrixSplunkLogging {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AviatrixSplunkLogging.__pulumiType;
    }

    /**
     * Custom configuration.
     */
    public readonly customInputConfig!: pulumi.Output<string | undefined>;
    /**
     * Configuration file. Use the `filebase64` function to read from a file.
     */
    public readonly customOutputConfigFile!: pulumi.Output<string | undefined>;
    /**
     * List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].
     */
    public readonly excludedGateways!: pulumi.Output<string[] | undefined>;
    /**
     * Port number.
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * Server IP.
     */
    public readonly server!: pulumi.Output<string | undefined>;
    /**
     * The status of splunk logging.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a AviatrixSplunkLogging resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AviatrixSplunkLoggingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AviatrixSplunkLoggingArgs | AviatrixSplunkLoggingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AviatrixSplunkLoggingState | undefined;
            resourceInputs["customInputConfig"] = state ? state.customInputConfig : undefined;
            resourceInputs["customOutputConfigFile"] = state ? state.customOutputConfigFile : undefined;
            resourceInputs["excludedGateways"] = state ? state.excludedGateways : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as AviatrixSplunkLoggingArgs | undefined;
            resourceInputs["customInputConfig"] = args ? args.customInputConfig : undefined;
            resourceInputs["customOutputConfigFile"] = args ? args.customOutputConfigFile : undefined;
            resourceInputs["excludedGateways"] = args ? args.excludedGateways : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AviatrixSplunkLogging.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AviatrixSplunkLogging resources.
 */
export interface AviatrixSplunkLoggingState {
    /**
     * Custom configuration.
     */
    customInputConfig?: pulumi.Input<string>;
    /**
     * Configuration file. Use the `filebase64` function to read from a file.
     */
    customOutputConfigFile?: pulumi.Input<string>;
    /**
     * List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].
     */
    excludedGateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Port number.
     */
    port?: pulumi.Input<number>;
    /**
     * Server IP.
     */
    server?: pulumi.Input<string>;
    /**
     * The status of splunk logging.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AviatrixSplunkLogging resource.
 */
export interface AviatrixSplunkLoggingArgs {
    /**
     * Custom configuration.
     */
    customInputConfig?: pulumi.Input<string>;
    /**
     * Configuration file. Use the `filebase64` function to read from a file.
     */
    customOutputConfigFile?: pulumi.Input<string>;
    /**
     * List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].
     */
    excludedGateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Port number.
     */
    port?: pulumi.Input<number>;
    /**
     * Server IP.
     */
    server?: pulumi.Input<string>;
}
