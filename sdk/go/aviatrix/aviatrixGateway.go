// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixGateway struct {
	pulumi.CustomResourceState

	// Account name. This account will be used to launch Aviatrix gateway.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// A list of destination CIDR ranges that will also go through the VPN tunnel when Split Tunnel Mode is enabled.
	AdditionalCidrs pulumi.StringPtrOutput `pulumi:"additionalCidrs"`
	// A list of CIDR ranges separated by comma to configure when 'designated_gateway' feature is enabled.
	AdditionalCidrsDesignatedGateway pulumi.StringPtrOutput `pulumi:"additionalCidrsDesignatedGateway"`
	// When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and
	// use it for this gateway.
	AllocateNewEip pulumi.BoolPtrOutput `pulumi:"allocateNewEip"`
	// Availability domain for OCI.
	AvailabilityDomain pulumi.StringOutput `pulumi:"availabilityDomain"`
	// The name of the public IP address and its resource group in Azure to assign to this Gateway.
	AzureEipNameResourceGroup pulumi.StringOutput `pulumi:"azureEipNameResourceGroup"`
	// Instance ID of the gateway.
	CloudInstanceId pulumi.StringOutput `pulumi:"cloudInstanceId"`
	// Type of cloud service provider.
	CloudType pulumi.IntOutput `pulumi:"cloudType"`
	// Customer managed key ID.
	CustomerManagedKeys pulumi.StringPtrOutput `pulumi:"customerManagedKeys"`
	// API hostname for DUO auth mode.
	DuoApiHostname pulumi.StringPtrOutput `pulumi:"duoApiHostname"`
	// Integration key for DUO auth mode.
	DuoIntegrationKey pulumi.StringPtrOutput `pulumi:"duoIntegrationKey"`
	// Push mode for DUO auth.
	DuoPushMode pulumi.StringPtrOutput `pulumi:"duoPushMode"`
	// Secret key for DUO auth mode.
	DuoSecretKey pulumi.StringPtrOutput `pulumi:"duoSecretKey"`
	// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
	Eip pulumi.StringOutput `pulumi:"eip"`
	// ELB DNS Name.
	ElbDnsName pulumi.StringOutput `pulumi:"elbDnsName"`
	// A name for the ELB that is created.
	ElbName pulumi.StringOutput `pulumi:"elbName"`
	// Enable 'designated_gateway' feature for Gateway. Valid values: true, false.
	EnableDesignatedGateway pulumi.BoolPtrOutput `pulumi:"enableDesignatedGateway"`
	// Specify whether to enable ELB or not.
	EnableElb pulumi.BoolPtrOutput `pulumi:"enableElb"`
	// Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.
	EnableEncryptVolume pulumi.BoolPtrOutput `pulumi:"enableEncryptVolume"`
	// Enable jumbo frame support for Gateway. Valid values: true or false. Default value: true.
	EnableJumboFrame pulumi.BoolPtrOutput `pulumi:"enableJumboFrame"`
	// Specify whether to enable LDAP or not. Supported values: 'yes' and 'no'.
	EnableLdap pulumi.BoolPtrOutput `pulumi:"enableLdap"`
	// Enable monitor gateway subnets. Valid values: true, false. Default value: false.
	EnableMonitorGatewaySubnets pulumi.BoolPtrOutput `pulumi:"enableMonitorGatewaySubnets"`
	// Create a [Public Subnet Filtering gateway](https://docs.aviatrix.com/HowTos/public_subnet_filtering_faq.html).
	EnablePublicSubnetFiltering pulumi.BoolPtrOutput `pulumi:"enablePublicSubnetFiltering"`
	// Enable spot instance. NOT supported for production deployment.
	EnableSpotInstance pulumi.BoolPtrOutput `pulumi:"enableSpotInstance"`
	// Enable vpc_dns_server for Gateway. Valid values: true, false.
	EnableVpcDnsServer pulumi.BoolPtrOutput `pulumi:"enableVpcDnsServer"`
	// This field indicates whether to enable VPN NAT or not. Only supported for VPN gateway. Valid values: true, false.
	// Default value: true.
	EnableVpnNat pulumi.BoolPtrOutput `pulumi:"enableVpnNat"`
	// Fault domain for OCI.
	FaultDomain pulumi.StringOutput `pulumi:"faultDomain"`
	// FQDN gateway lan interface cidr.
	FqdnLanCidr pulumi.StringPtrOutput `pulumi:"fqdnLanCidr"`
	// FQDN gateway lan interface id.
	FqdnLanInterface pulumi.StringOutput `pulumi:"fqdnLanInterface"`
	// LAN VPC ID. Only used for GCP FQDN Gateway.
	FqdnLanVpcId pulumi.StringPtrOutput `pulumi:"fqdnLanVpcId"`
	// Aviatrix gateway unique name.
	GwName pulumi.StringOutput `pulumi:"gwName"`
	// Size of Gateway Instance.
	GwSize pulumi.StringOutput `pulumi:"gwSize"`
	// Typed value when modifying idle_timeout. If it's -1, this feature is disabled.
	IdleTimeout pulumi.IntPtrOutput `pulumi:"idleTimeout"`
	// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
	// to the specified version.
	ImageVersion pulumi.StringOutput `pulumi:"imageVersion"`
	// Enable Insane Mode for Gateway. Valid values: true, false.
	InsaneMode pulumi.BoolPtrOutput `pulumi:"insaneMode"`
	// AZ of subnet being created for Insane Mode Gateway. Required if insane_mode is set.
	InsaneModeAz pulumi.StringPtrOutput `pulumi:"insaneModeAz"`
	// LDAP base DN. Required: Yes if enable_ldap is 'yes'.
	LdapBaseDn pulumi.StringPtrOutput `pulumi:"ldapBaseDn"`
	// LDAP bind DN. Required: Yes if enable_ldap is 'yes'.
	LdapBindDn pulumi.StringPtrOutput `pulumi:"ldapBindDn"`
	// LDAP password. Required: Yes if enable_ldap is 'yes'.
	LdapPassword pulumi.StringPtrOutput `pulumi:"ldapPassword"`
	// LDAP server address. Required: Yes if enable_ldap is 'yes'.
	LdapServer pulumi.StringPtrOutput `pulumi:"ldapServer"`
	// LDAP user attribute. Required: Yes if enable_ldap is 'yes'.
	LdapUsernameAttribute pulumi.StringPtrOutput `pulumi:"ldapUsernameAttribute"`
	// Maximum connection of VPN access.
	MaxVpnConn pulumi.StringPtrOutput `pulumi:"maxVpnConn"`
	// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
	MonitorExcludeLists pulumi.StringArrayOutput `pulumi:"monitorExcludeLists"`
	// A list of DNS servers used to resolve domain names by a connected VPN user when Split Tunnel Mode is enabled.
	NameServers pulumi.StringPtrOutput `pulumi:"nameServers"`
	// Token for Okta auth mode.
	OktaToken pulumi.StringPtrOutput `pulumi:"oktaToken"`
	// URL for Okta auth mode.
	OktaUrl pulumi.StringPtrOutput `pulumi:"oktaUrl"`
	// Username suffix for Okta auth mode.
	OktaUsernameSuffix pulumi.StringPtrOutput `pulumi:"oktaUsernameSuffix"`
	// Two step authentication mode.
	OtpMode pulumi.StringPtrOutput `pulumi:"otpMode"`
	// Peering HA availability domain for OCI.
	PeeringHaAvailabilityDomain pulumi.StringOutput `pulumi:"peeringHaAvailabilityDomain"`
	// The name of the public IP address and its resource group in Azure to assign to the Peering HA Gateway.
	PeeringHaAzureEipNameResourceGroup pulumi.StringOutput `pulumi:"peeringHaAzureEipNameResourceGroup"`
	// Instance ID of the peering HA gateway.
	PeeringHaCloudInstanceId pulumi.StringOutput `pulumi:"peeringHaCloudInstanceId"`
	// Public IP address that you want assigned to the HA peering instance.
	PeeringHaEip pulumi.StringOutput `pulumi:"peeringHaEip"`
	// Peering HA fault domain for OCI.
	PeeringHaFaultDomain pulumi.StringOutput `pulumi:"peeringHaFaultDomain"`
	// Aviatrix gateway unique name of HA gateway.
	PeeringHaGwName pulumi.StringOutput `pulumi:"peeringHaGwName"`
	// Peering HA Gateway Size.
	PeeringHaGwSize pulumi.StringPtrOutput `pulumi:"peeringHaGwSize"`
	// peering_ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to
	// update the gateway to the specified version.
	PeeringHaImageVersion pulumi.StringOutput `pulumi:"peeringHaImageVersion"`
	// AZ of subnet being created for Insane Mode Peering HA Gateway. Required if insane_mode is set.
	PeeringHaInsaneModeAz pulumi.StringPtrOutput `pulumi:"peeringHaInsaneModeAz"`
	// Private IP address of HA gateway.
	PeeringHaPrivateIp pulumi.StringOutput `pulumi:"peeringHaPrivateIp"`
	// Peering HA security group used for the gateway.
	PeeringHaSecurityGroupId pulumi.StringOutput `pulumi:"peeringHaSecurityGroupId"`
	// peering_ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt
	// to update the gateway to the specified version. If left blank, the gateway software version will continue to be managed
	// through the aviatrix_controller_config resource.
	PeeringHaSoftwareVersion pulumi.StringOutput `pulumi:"peeringHaSoftwareVersion"`
	// Public Subnet Information while creating Peering HA Gateway, only subnet is accepted. Required to create peering ha
	// gateway if cloud_type = 1 or 8 (AWS or Azure). Optional if cloud_type = 4 (GCP)
	PeeringHaSubnet pulumi.StringPtrOutput `pulumi:"peeringHaSubnet"`
	// Zone information for creating Peering HA Gateway. Required to create peering ha gateway if cloud_type = 4 (GCP).
	// Optional for cloud_type = 8 (Azure).
	PeeringHaZone pulumi.StringPtrOutput `pulumi:"peeringHaZone"`
	// Private IP address of the Gateway created.
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// NS server used by the gateway.
	PublicDnsServer pulumi.StringOutput `pulumi:"publicDnsServer"`
	// Whether to enforce Guard Duty IP blocking. Required when `enable_public_subnet_filtering` attribute is true. Valid
	// values: true or false. Default value: true.
	PublicSubnetFilteringGuardDutyEnforced pulumi.BoolPtrOutput `pulumi:"publicSubnetFilteringGuardDutyEnforced"`
	// Route tables whose associated public subnets are protected for the HA PSF gateway. Required when
	// enable_public_subnet_filtering and peering_ha_subnet are set.
	PublicSubnetFilteringHaRouteTables pulumi.StringArrayOutput `pulumi:"publicSubnetFilteringHaRouteTables"`
	// Route tables whose associated public subnets are protected. Required when `enable_public_subnet_filtering` attribute is
	// true.
	PublicSubnetFilteringRouteTables pulumi.StringArrayOutput `pulumi:"publicSubnetFilteringRouteTables"`
	// Typed value when modifying renegotiation_interval. If it's -1, this feature is disabled.
	RenegotiationInterval pulumi.IntPtrOutput `pulumi:"renegotiationInterval"`
	// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
	RxQueueSize pulumi.StringPtrOutput `pulumi:"rxQueueSize"`
	// This field indicates whether to enable SAML or not.
	SamlEnabled pulumi.BoolPtrOutput `pulumi:"samlEnabled"`
	// A list of domain names that will use the NameServer when a specific name is not in the destination when Split Tunnel
	// Mode is enabled.
	SearchDomains pulumi.StringPtrOutput `pulumi:"searchDomains"`
	// Security group used for the gateway.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
	// Set to true if this feature is desired.
	SingleAzHa pulumi.BoolPtrOutput `pulumi:"singleAzHa"`
	// Enable Source NAT for this container.
	SingleIpSnat pulumi.BoolPtrOutput `pulumi:"singleIpSnat"`
	// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
	// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
	// aviatrix_controller_config resource.
	SoftwareVersion pulumi.StringOutput `pulumi:"softwareVersion"`
	// Specify split tunnel mode.
	SplitTunnel pulumi.BoolPtrOutput `pulumi:"splitTunnel"`
	// Price for spot instance. NOT supported for production deployment.
	SpotPrice pulumi.StringPtrOutput `pulumi:"spotPrice"`
	// A VPC Network address range selected from one of the available network ranges.
	Subnet pulumi.StringOutput `pulumi:"subnet"`
	// Instance tag of cloud provider.
	//
	// Deprecated: Use tags instead.
	TagLists pulumi.StringArrayOutput `pulumi:"tagLists"`
	// A map of tags to assign to the gateway.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The IPSec tunnel down detection time for the Gateway.
	TunnelDetectionTime pulumi.IntOutput `pulumi:"tunnelDetectionTime"`
	// ID of legacy VPC/Vnet to be connected.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// Region where this gateway will be launched.
	VpcReg pulumi.StringOutput `pulumi:"vpcReg"`
	// Enable user access through VPN to this container.
	VpnAccess pulumi.BoolPtrOutput `pulumi:"vpnAccess"`
	// VPN CIDR block for the container.
	VpnCidr pulumi.StringPtrOutput `pulumi:"vpnCidr"`
	// Elb protocol for VPN gateway with elb enabled. Only supports AWS provider. Valid values: 'TCP', 'UDP'. If not specified,
	// 'TCP'' will be used.
	VpnProtocol pulumi.StringOutput `pulumi:"vpnProtocol"`
	// Availability Zone. Only available for Azure and Public Subnet Filtering gateway
	Zone pulumi.StringPtrOutput `pulumi:"zone"`
}

// NewAviatrixGateway registers a new resource with the given unique name, arguments, and options.
func NewAviatrixGateway(ctx *pulumi.Context,
	name string, args *AviatrixGatewayArgs, opts ...pulumi.ResourceOption) (*AviatrixGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.CloudType == nil {
		return nil, errors.New("invalid value for required argument 'CloudType'")
	}
	if args.GwName == nil {
		return nil, errors.New("invalid value for required argument 'GwName'")
	}
	if args.GwSize == nil {
		return nil, errors.New("invalid value for required argument 'GwSize'")
	}
	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.VpcReg == nil {
		return nil, errors.New("invalid value for required argument 'VpcReg'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixGateway
	err := ctx.RegisterResource("aviatrix:index/aviatrixGateway:AviatrixGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixGateway gets an existing AviatrixGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixGatewayState, opts ...pulumi.ResourceOption) (*AviatrixGateway, error) {
	var resource AviatrixGateway
	err := ctx.ReadResource("aviatrix:index/aviatrixGateway:AviatrixGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixGateway resources.
type aviatrixGatewayState struct {
	// Account name. This account will be used to launch Aviatrix gateway.
	AccountName *string `pulumi:"accountName"`
	// A list of destination CIDR ranges that will also go through the VPN tunnel when Split Tunnel Mode is enabled.
	AdditionalCidrs *string `pulumi:"additionalCidrs"`
	// A list of CIDR ranges separated by comma to configure when 'designated_gateway' feature is enabled.
	AdditionalCidrsDesignatedGateway *string `pulumi:"additionalCidrsDesignatedGateway"`
	// When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and
	// use it for this gateway.
	AllocateNewEip *bool `pulumi:"allocateNewEip"`
	// Availability domain for OCI.
	AvailabilityDomain *string `pulumi:"availabilityDomain"`
	// The name of the public IP address and its resource group in Azure to assign to this Gateway.
	AzureEipNameResourceGroup *string `pulumi:"azureEipNameResourceGroup"`
	// Instance ID of the gateway.
	CloudInstanceId *string `pulumi:"cloudInstanceId"`
	// Type of cloud service provider.
	CloudType *int `pulumi:"cloudType"`
	// Customer managed key ID.
	CustomerManagedKeys *string `pulumi:"customerManagedKeys"`
	// API hostname for DUO auth mode.
	DuoApiHostname *string `pulumi:"duoApiHostname"`
	// Integration key for DUO auth mode.
	DuoIntegrationKey *string `pulumi:"duoIntegrationKey"`
	// Push mode for DUO auth.
	DuoPushMode *string `pulumi:"duoPushMode"`
	// Secret key for DUO auth mode.
	DuoSecretKey *string `pulumi:"duoSecretKey"`
	// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
	Eip *string `pulumi:"eip"`
	// ELB DNS Name.
	ElbDnsName *string `pulumi:"elbDnsName"`
	// A name for the ELB that is created.
	ElbName *string `pulumi:"elbName"`
	// Enable 'designated_gateway' feature for Gateway. Valid values: true, false.
	EnableDesignatedGateway *bool `pulumi:"enableDesignatedGateway"`
	// Specify whether to enable ELB or not.
	EnableElb *bool `pulumi:"enableElb"`
	// Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.
	EnableEncryptVolume *bool `pulumi:"enableEncryptVolume"`
	// Enable jumbo frame support for Gateway. Valid values: true or false. Default value: true.
	EnableJumboFrame *bool `pulumi:"enableJumboFrame"`
	// Specify whether to enable LDAP or not. Supported values: 'yes' and 'no'.
	EnableLdap *bool `pulumi:"enableLdap"`
	// Enable monitor gateway subnets. Valid values: true, false. Default value: false.
	EnableMonitorGatewaySubnets *bool `pulumi:"enableMonitorGatewaySubnets"`
	// Create a [Public Subnet Filtering gateway](https://docs.aviatrix.com/HowTos/public_subnet_filtering_faq.html).
	EnablePublicSubnetFiltering *bool `pulumi:"enablePublicSubnetFiltering"`
	// Enable spot instance. NOT supported for production deployment.
	EnableSpotInstance *bool `pulumi:"enableSpotInstance"`
	// Enable vpc_dns_server for Gateway. Valid values: true, false.
	EnableVpcDnsServer *bool `pulumi:"enableVpcDnsServer"`
	// This field indicates whether to enable VPN NAT or not. Only supported for VPN gateway. Valid values: true, false.
	// Default value: true.
	EnableVpnNat *bool `pulumi:"enableVpnNat"`
	// Fault domain for OCI.
	FaultDomain *string `pulumi:"faultDomain"`
	// FQDN gateway lan interface cidr.
	FqdnLanCidr *string `pulumi:"fqdnLanCidr"`
	// FQDN gateway lan interface id.
	FqdnLanInterface *string `pulumi:"fqdnLanInterface"`
	// LAN VPC ID. Only used for GCP FQDN Gateway.
	FqdnLanVpcId *string `pulumi:"fqdnLanVpcId"`
	// Aviatrix gateway unique name.
	GwName *string `pulumi:"gwName"`
	// Size of Gateway Instance.
	GwSize *string `pulumi:"gwSize"`
	// Typed value when modifying idle_timeout. If it's -1, this feature is disabled.
	IdleTimeout *int `pulumi:"idleTimeout"`
	// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
	// to the specified version.
	ImageVersion *string `pulumi:"imageVersion"`
	// Enable Insane Mode for Gateway. Valid values: true, false.
	InsaneMode *bool `pulumi:"insaneMode"`
	// AZ of subnet being created for Insane Mode Gateway. Required if insane_mode is set.
	InsaneModeAz *string `pulumi:"insaneModeAz"`
	// LDAP base DN. Required: Yes if enable_ldap is 'yes'.
	LdapBaseDn *string `pulumi:"ldapBaseDn"`
	// LDAP bind DN. Required: Yes if enable_ldap is 'yes'.
	LdapBindDn *string `pulumi:"ldapBindDn"`
	// LDAP password. Required: Yes if enable_ldap is 'yes'.
	LdapPassword *string `pulumi:"ldapPassword"`
	// LDAP server address. Required: Yes if enable_ldap is 'yes'.
	LdapServer *string `pulumi:"ldapServer"`
	// LDAP user attribute. Required: Yes if enable_ldap is 'yes'.
	LdapUsernameAttribute *string `pulumi:"ldapUsernameAttribute"`
	// Maximum connection of VPN access.
	MaxVpnConn *string `pulumi:"maxVpnConn"`
	// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
	MonitorExcludeLists []string `pulumi:"monitorExcludeLists"`
	// A list of DNS servers used to resolve domain names by a connected VPN user when Split Tunnel Mode is enabled.
	NameServers *string `pulumi:"nameServers"`
	// Token for Okta auth mode.
	OktaToken *string `pulumi:"oktaToken"`
	// URL for Okta auth mode.
	OktaUrl *string `pulumi:"oktaUrl"`
	// Username suffix for Okta auth mode.
	OktaUsernameSuffix *string `pulumi:"oktaUsernameSuffix"`
	// Two step authentication mode.
	OtpMode *string `pulumi:"otpMode"`
	// Peering HA availability domain for OCI.
	PeeringHaAvailabilityDomain *string `pulumi:"peeringHaAvailabilityDomain"`
	// The name of the public IP address and its resource group in Azure to assign to the Peering HA Gateway.
	PeeringHaAzureEipNameResourceGroup *string `pulumi:"peeringHaAzureEipNameResourceGroup"`
	// Instance ID of the peering HA gateway.
	PeeringHaCloudInstanceId *string `pulumi:"peeringHaCloudInstanceId"`
	// Public IP address that you want assigned to the HA peering instance.
	PeeringHaEip *string `pulumi:"peeringHaEip"`
	// Peering HA fault domain for OCI.
	PeeringHaFaultDomain *string `pulumi:"peeringHaFaultDomain"`
	// Aviatrix gateway unique name of HA gateway.
	PeeringHaGwName *string `pulumi:"peeringHaGwName"`
	// Peering HA Gateway Size.
	PeeringHaGwSize *string `pulumi:"peeringHaGwSize"`
	// peering_ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to
	// update the gateway to the specified version.
	PeeringHaImageVersion *string `pulumi:"peeringHaImageVersion"`
	// AZ of subnet being created for Insane Mode Peering HA Gateway. Required if insane_mode is set.
	PeeringHaInsaneModeAz *string `pulumi:"peeringHaInsaneModeAz"`
	// Private IP address of HA gateway.
	PeeringHaPrivateIp *string `pulumi:"peeringHaPrivateIp"`
	// Peering HA security group used for the gateway.
	PeeringHaSecurityGroupId *string `pulumi:"peeringHaSecurityGroupId"`
	// peering_ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt
	// to update the gateway to the specified version. If left blank, the gateway software version will continue to be managed
	// through the aviatrix_controller_config resource.
	PeeringHaSoftwareVersion *string `pulumi:"peeringHaSoftwareVersion"`
	// Public Subnet Information while creating Peering HA Gateway, only subnet is accepted. Required to create peering ha
	// gateway if cloud_type = 1 or 8 (AWS or Azure). Optional if cloud_type = 4 (GCP)
	PeeringHaSubnet *string `pulumi:"peeringHaSubnet"`
	// Zone information for creating Peering HA Gateway. Required to create peering ha gateway if cloud_type = 4 (GCP).
	// Optional for cloud_type = 8 (Azure).
	PeeringHaZone *string `pulumi:"peeringHaZone"`
	// Private IP address of the Gateway created.
	PrivateIp *string `pulumi:"privateIp"`
	// NS server used by the gateway.
	PublicDnsServer *string `pulumi:"publicDnsServer"`
	// Whether to enforce Guard Duty IP blocking. Required when `enable_public_subnet_filtering` attribute is true. Valid
	// values: true or false. Default value: true.
	PublicSubnetFilteringGuardDutyEnforced *bool `pulumi:"publicSubnetFilteringGuardDutyEnforced"`
	// Route tables whose associated public subnets are protected for the HA PSF gateway. Required when
	// enable_public_subnet_filtering and peering_ha_subnet are set.
	PublicSubnetFilteringHaRouteTables []string `pulumi:"publicSubnetFilteringHaRouteTables"`
	// Route tables whose associated public subnets are protected. Required when `enable_public_subnet_filtering` attribute is
	// true.
	PublicSubnetFilteringRouteTables []string `pulumi:"publicSubnetFilteringRouteTables"`
	// Typed value when modifying renegotiation_interval. If it's -1, this feature is disabled.
	RenegotiationInterval *int `pulumi:"renegotiationInterval"`
	// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
	RxQueueSize *string `pulumi:"rxQueueSize"`
	// This field indicates whether to enable SAML or not.
	SamlEnabled *bool `pulumi:"samlEnabled"`
	// A list of domain names that will use the NameServer when a specific name is not in the destination when Split Tunnel
	// Mode is enabled.
	SearchDomains *string `pulumi:"searchDomains"`
	// Security group used for the gateway.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// Set to true if this feature is desired.
	SingleAzHa *bool `pulumi:"singleAzHa"`
	// Enable Source NAT for this container.
	SingleIpSnat *bool `pulumi:"singleIpSnat"`
	// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
	// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
	// aviatrix_controller_config resource.
	SoftwareVersion *string `pulumi:"softwareVersion"`
	// Specify split tunnel mode.
	SplitTunnel *bool `pulumi:"splitTunnel"`
	// Price for spot instance. NOT supported for production deployment.
	SpotPrice *string `pulumi:"spotPrice"`
	// A VPC Network address range selected from one of the available network ranges.
	Subnet *string `pulumi:"subnet"`
	// Instance tag of cloud provider.
	//
	// Deprecated: Use tags instead.
	TagLists []string `pulumi:"tagLists"`
	// A map of tags to assign to the gateway.
	Tags map[string]string `pulumi:"tags"`
	// The IPSec tunnel down detection time for the Gateway.
	TunnelDetectionTime *int `pulumi:"tunnelDetectionTime"`
	// ID of legacy VPC/Vnet to be connected.
	VpcId *string `pulumi:"vpcId"`
	// Region where this gateway will be launched.
	VpcReg *string `pulumi:"vpcReg"`
	// Enable user access through VPN to this container.
	VpnAccess *bool `pulumi:"vpnAccess"`
	// VPN CIDR block for the container.
	VpnCidr *string `pulumi:"vpnCidr"`
	// Elb protocol for VPN gateway with elb enabled. Only supports AWS provider. Valid values: 'TCP', 'UDP'. If not specified,
	// 'TCP'' will be used.
	VpnProtocol *string `pulumi:"vpnProtocol"`
	// Availability Zone. Only available for Azure and Public Subnet Filtering gateway
	Zone *string `pulumi:"zone"`
}

type AviatrixGatewayState struct {
	// Account name. This account will be used to launch Aviatrix gateway.
	AccountName pulumi.StringPtrInput
	// A list of destination CIDR ranges that will also go through the VPN tunnel when Split Tunnel Mode is enabled.
	AdditionalCidrs pulumi.StringPtrInput
	// A list of CIDR ranges separated by comma to configure when 'designated_gateway' feature is enabled.
	AdditionalCidrsDesignatedGateway pulumi.StringPtrInput
	// When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and
	// use it for this gateway.
	AllocateNewEip pulumi.BoolPtrInput
	// Availability domain for OCI.
	AvailabilityDomain pulumi.StringPtrInput
	// The name of the public IP address and its resource group in Azure to assign to this Gateway.
	AzureEipNameResourceGroup pulumi.StringPtrInput
	// Instance ID of the gateway.
	CloudInstanceId pulumi.StringPtrInput
	// Type of cloud service provider.
	CloudType pulumi.IntPtrInput
	// Customer managed key ID.
	CustomerManagedKeys pulumi.StringPtrInput
	// API hostname for DUO auth mode.
	DuoApiHostname pulumi.StringPtrInput
	// Integration key for DUO auth mode.
	DuoIntegrationKey pulumi.StringPtrInput
	// Push mode for DUO auth.
	DuoPushMode pulumi.StringPtrInput
	// Secret key for DUO auth mode.
	DuoSecretKey pulumi.StringPtrInput
	// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
	Eip pulumi.StringPtrInput
	// ELB DNS Name.
	ElbDnsName pulumi.StringPtrInput
	// A name for the ELB that is created.
	ElbName pulumi.StringPtrInput
	// Enable 'designated_gateway' feature for Gateway. Valid values: true, false.
	EnableDesignatedGateway pulumi.BoolPtrInput
	// Specify whether to enable ELB or not.
	EnableElb pulumi.BoolPtrInput
	// Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.
	EnableEncryptVolume pulumi.BoolPtrInput
	// Enable jumbo frame support for Gateway. Valid values: true or false. Default value: true.
	EnableJumboFrame pulumi.BoolPtrInput
	// Specify whether to enable LDAP or not. Supported values: 'yes' and 'no'.
	EnableLdap pulumi.BoolPtrInput
	// Enable monitor gateway subnets. Valid values: true, false. Default value: false.
	EnableMonitorGatewaySubnets pulumi.BoolPtrInput
	// Create a [Public Subnet Filtering gateway](https://docs.aviatrix.com/HowTos/public_subnet_filtering_faq.html).
	EnablePublicSubnetFiltering pulumi.BoolPtrInput
	// Enable spot instance. NOT supported for production deployment.
	EnableSpotInstance pulumi.BoolPtrInput
	// Enable vpc_dns_server for Gateway. Valid values: true, false.
	EnableVpcDnsServer pulumi.BoolPtrInput
	// This field indicates whether to enable VPN NAT or not. Only supported for VPN gateway. Valid values: true, false.
	// Default value: true.
	EnableVpnNat pulumi.BoolPtrInput
	// Fault domain for OCI.
	FaultDomain pulumi.StringPtrInput
	// FQDN gateway lan interface cidr.
	FqdnLanCidr pulumi.StringPtrInput
	// FQDN gateway lan interface id.
	FqdnLanInterface pulumi.StringPtrInput
	// LAN VPC ID. Only used for GCP FQDN Gateway.
	FqdnLanVpcId pulumi.StringPtrInput
	// Aviatrix gateway unique name.
	GwName pulumi.StringPtrInput
	// Size of Gateway Instance.
	GwSize pulumi.StringPtrInput
	// Typed value when modifying idle_timeout. If it's -1, this feature is disabled.
	IdleTimeout pulumi.IntPtrInput
	// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
	// to the specified version.
	ImageVersion pulumi.StringPtrInput
	// Enable Insane Mode for Gateway. Valid values: true, false.
	InsaneMode pulumi.BoolPtrInput
	// AZ of subnet being created for Insane Mode Gateway. Required if insane_mode is set.
	InsaneModeAz pulumi.StringPtrInput
	// LDAP base DN. Required: Yes if enable_ldap is 'yes'.
	LdapBaseDn pulumi.StringPtrInput
	// LDAP bind DN. Required: Yes if enable_ldap is 'yes'.
	LdapBindDn pulumi.StringPtrInput
	// LDAP password. Required: Yes if enable_ldap is 'yes'.
	LdapPassword pulumi.StringPtrInput
	// LDAP server address. Required: Yes if enable_ldap is 'yes'.
	LdapServer pulumi.StringPtrInput
	// LDAP user attribute. Required: Yes if enable_ldap is 'yes'.
	LdapUsernameAttribute pulumi.StringPtrInput
	// Maximum connection of VPN access.
	MaxVpnConn pulumi.StringPtrInput
	// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
	MonitorExcludeLists pulumi.StringArrayInput
	// A list of DNS servers used to resolve domain names by a connected VPN user when Split Tunnel Mode is enabled.
	NameServers pulumi.StringPtrInput
	// Token for Okta auth mode.
	OktaToken pulumi.StringPtrInput
	// URL for Okta auth mode.
	OktaUrl pulumi.StringPtrInput
	// Username suffix for Okta auth mode.
	OktaUsernameSuffix pulumi.StringPtrInput
	// Two step authentication mode.
	OtpMode pulumi.StringPtrInput
	// Peering HA availability domain for OCI.
	PeeringHaAvailabilityDomain pulumi.StringPtrInput
	// The name of the public IP address and its resource group in Azure to assign to the Peering HA Gateway.
	PeeringHaAzureEipNameResourceGroup pulumi.StringPtrInput
	// Instance ID of the peering HA gateway.
	PeeringHaCloudInstanceId pulumi.StringPtrInput
	// Public IP address that you want assigned to the HA peering instance.
	PeeringHaEip pulumi.StringPtrInput
	// Peering HA fault domain for OCI.
	PeeringHaFaultDomain pulumi.StringPtrInput
	// Aviatrix gateway unique name of HA gateway.
	PeeringHaGwName pulumi.StringPtrInput
	// Peering HA Gateway Size.
	PeeringHaGwSize pulumi.StringPtrInput
	// peering_ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to
	// update the gateway to the specified version.
	PeeringHaImageVersion pulumi.StringPtrInput
	// AZ of subnet being created for Insane Mode Peering HA Gateway. Required if insane_mode is set.
	PeeringHaInsaneModeAz pulumi.StringPtrInput
	// Private IP address of HA gateway.
	PeeringHaPrivateIp pulumi.StringPtrInput
	// Peering HA security group used for the gateway.
	PeeringHaSecurityGroupId pulumi.StringPtrInput
	// peering_ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt
	// to update the gateway to the specified version. If left blank, the gateway software version will continue to be managed
	// through the aviatrix_controller_config resource.
	PeeringHaSoftwareVersion pulumi.StringPtrInput
	// Public Subnet Information while creating Peering HA Gateway, only subnet is accepted. Required to create peering ha
	// gateway if cloud_type = 1 or 8 (AWS or Azure). Optional if cloud_type = 4 (GCP)
	PeeringHaSubnet pulumi.StringPtrInput
	// Zone information for creating Peering HA Gateway. Required to create peering ha gateway if cloud_type = 4 (GCP).
	// Optional for cloud_type = 8 (Azure).
	PeeringHaZone pulumi.StringPtrInput
	// Private IP address of the Gateway created.
	PrivateIp pulumi.StringPtrInput
	// NS server used by the gateway.
	PublicDnsServer pulumi.StringPtrInput
	// Whether to enforce Guard Duty IP blocking. Required when `enable_public_subnet_filtering` attribute is true. Valid
	// values: true or false. Default value: true.
	PublicSubnetFilteringGuardDutyEnforced pulumi.BoolPtrInput
	// Route tables whose associated public subnets are protected for the HA PSF gateway. Required when
	// enable_public_subnet_filtering and peering_ha_subnet are set.
	PublicSubnetFilteringHaRouteTables pulumi.StringArrayInput
	// Route tables whose associated public subnets are protected. Required when `enable_public_subnet_filtering` attribute is
	// true.
	PublicSubnetFilteringRouteTables pulumi.StringArrayInput
	// Typed value when modifying renegotiation_interval. If it's -1, this feature is disabled.
	RenegotiationInterval pulumi.IntPtrInput
	// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
	RxQueueSize pulumi.StringPtrInput
	// This field indicates whether to enable SAML or not.
	SamlEnabled pulumi.BoolPtrInput
	// A list of domain names that will use the NameServer when a specific name is not in the destination when Split Tunnel
	// Mode is enabled.
	SearchDomains pulumi.StringPtrInput
	// Security group used for the gateway.
	SecurityGroupId pulumi.StringPtrInput
	// Set to true if this feature is desired.
	SingleAzHa pulumi.BoolPtrInput
	// Enable Source NAT for this container.
	SingleIpSnat pulumi.BoolPtrInput
	// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
	// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
	// aviatrix_controller_config resource.
	SoftwareVersion pulumi.StringPtrInput
	// Specify split tunnel mode.
	SplitTunnel pulumi.BoolPtrInput
	// Price for spot instance. NOT supported for production deployment.
	SpotPrice pulumi.StringPtrInput
	// A VPC Network address range selected from one of the available network ranges.
	Subnet pulumi.StringPtrInput
	// Instance tag of cloud provider.
	//
	// Deprecated: Use tags instead.
	TagLists pulumi.StringArrayInput
	// A map of tags to assign to the gateway.
	Tags pulumi.StringMapInput
	// The IPSec tunnel down detection time for the Gateway.
	TunnelDetectionTime pulumi.IntPtrInput
	// ID of legacy VPC/Vnet to be connected.
	VpcId pulumi.StringPtrInput
	// Region where this gateway will be launched.
	VpcReg pulumi.StringPtrInput
	// Enable user access through VPN to this container.
	VpnAccess pulumi.BoolPtrInput
	// VPN CIDR block for the container.
	VpnCidr pulumi.StringPtrInput
	// Elb protocol for VPN gateway with elb enabled. Only supports AWS provider. Valid values: 'TCP', 'UDP'. If not specified,
	// 'TCP'' will be used.
	VpnProtocol pulumi.StringPtrInput
	// Availability Zone. Only available for Azure and Public Subnet Filtering gateway
	Zone pulumi.StringPtrInput
}

func (AviatrixGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixGatewayState)(nil)).Elem()
}

type aviatrixGatewayArgs struct {
	// Account name. This account will be used to launch Aviatrix gateway.
	AccountName string `pulumi:"accountName"`
	// A list of destination CIDR ranges that will also go through the VPN tunnel when Split Tunnel Mode is enabled.
	AdditionalCidrs *string `pulumi:"additionalCidrs"`
	// A list of CIDR ranges separated by comma to configure when 'designated_gateway' feature is enabled.
	AdditionalCidrsDesignatedGateway *string `pulumi:"additionalCidrsDesignatedGateway"`
	// When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and
	// use it for this gateway.
	AllocateNewEip *bool `pulumi:"allocateNewEip"`
	// Availability domain for OCI.
	AvailabilityDomain *string `pulumi:"availabilityDomain"`
	// The name of the public IP address and its resource group in Azure to assign to this Gateway.
	AzureEipNameResourceGroup *string `pulumi:"azureEipNameResourceGroup"`
	// Type of cloud service provider.
	CloudType int `pulumi:"cloudType"`
	// Customer managed key ID.
	CustomerManagedKeys *string `pulumi:"customerManagedKeys"`
	// API hostname for DUO auth mode.
	DuoApiHostname *string `pulumi:"duoApiHostname"`
	// Integration key for DUO auth mode.
	DuoIntegrationKey *string `pulumi:"duoIntegrationKey"`
	// Push mode for DUO auth.
	DuoPushMode *string `pulumi:"duoPushMode"`
	// Secret key for DUO auth mode.
	DuoSecretKey *string `pulumi:"duoSecretKey"`
	// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
	Eip *string `pulumi:"eip"`
	// A name for the ELB that is created.
	ElbName *string `pulumi:"elbName"`
	// Enable 'designated_gateway' feature for Gateway. Valid values: true, false.
	EnableDesignatedGateway *bool `pulumi:"enableDesignatedGateway"`
	// Specify whether to enable ELB or not.
	EnableElb *bool `pulumi:"enableElb"`
	// Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.
	EnableEncryptVolume *bool `pulumi:"enableEncryptVolume"`
	// Enable jumbo frame support for Gateway. Valid values: true or false. Default value: true.
	EnableJumboFrame *bool `pulumi:"enableJumboFrame"`
	// Specify whether to enable LDAP or not. Supported values: 'yes' and 'no'.
	EnableLdap *bool `pulumi:"enableLdap"`
	// Enable monitor gateway subnets. Valid values: true, false. Default value: false.
	EnableMonitorGatewaySubnets *bool `pulumi:"enableMonitorGatewaySubnets"`
	// Create a [Public Subnet Filtering gateway](https://docs.aviatrix.com/HowTos/public_subnet_filtering_faq.html).
	EnablePublicSubnetFiltering *bool `pulumi:"enablePublicSubnetFiltering"`
	// Enable spot instance. NOT supported for production deployment.
	EnableSpotInstance *bool `pulumi:"enableSpotInstance"`
	// Enable vpc_dns_server for Gateway. Valid values: true, false.
	EnableVpcDnsServer *bool `pulumi:"enableVpcDnsServer"`
	// This field indicates whether to enable VPN NAT or not. Only supported for VPN gateway. Valid values: true, false.
	// Default value: true.
	EnableVpnNat *bool `pulumi:"enableVpnNat"`
	// Fault domain for OCI.
	FaultDomain *string `pulumi:"faultDomain"`
	// FQDN gateway lan interface cidr.
	FqdnLanCidr *string `pulumi:"fqdnLanCidr"`
	// LAN VPC ID. Only used for GCP FQDN Gateway.
	FqdnLanVpcId *string `pulumi:"fqdnLanVpcId"`
	// Aviatrix gateway unique name.
	GwName string `pulumi:"gwName"`
	// Size of Gateway Instance.
	GwSize string `pulumi:"gwSize"`
	// Typed value when modifying idle_timeout. If it's -1, this feature is disabled.
	IdleTimeout *int `pulumi:"idleTimeout"`
	// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
	// to the specified version.
	ImageVersion *string `pulumi:"imageVersion"`
	// Enable Insane Mode for Gateway. Valid values: true, false.
	InsaneMode *bool `pulumi:"insaneMode"`
	// AZ of subnet being created for Insane Mode Gateway. Required if insane_mode is set.
	InsaneModeAz *string `pulumi:"insaneModeAz"`
	// LDAP base DN. Required: Yes if enable_ldap is 'yes'.
	LdapBaseDn *string `pulumi:"ldapBaseDn"`
	// LDAP bind DN. Required: Yes if enable_ldap is 'yes'.
	LdapBindDn *string `pulumi:"ldapBindDn"`
	// LDAP password. Required: Yes if enable_ldap is 'yes'.
	LdapPassword *string `pulumi:"ldapPassword"`
	// LDAP server address. Required: Yes if enable_ldap is 'yes'.
	LdapServer *string `pulumi:"ldapServer"`
	// LDAP user attribute. Required: Yes if enable_ldap is 'yes'.
	LdapUsernameAttribute *string `pulumi:"ldapUsernameAttribute"`
	// Maximum connection of VPN access.
	MaxVpnConn *string `pulumi:"maxVpnConn"`
	// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
	MonitorExcludeLists []string `pulumi:"monitorExcludeLists"`
	// A list of DNS servers used to resolve domain names by a connected VPN user when Split Tunnel Mode is enabled.
	NameServers *string `pulumi:"nameServers"`
	// Token for Okta auth mode.
	OktaToken *string `pulumi:"oktaToken"`
	// URL for Okta auth mode.
	OktaUrl *string `pulumi:"oktaUrl"`
	// Username suffix for Okta auth mode.
	OktaUsernameSuffix *string `pulumi:"oktaUsernameSuffix"`
	// Two step authentication mode.
	OtpMode *string `pulumi:"otpMode"`
	// Peering HA availability domain for OCI.
	PeeringHaAvailabilityDomain *string `pulumi:"peeringHaAvailabilityDomain"`
	// The name of the public IP address and its resource group in Azure to assign to the Peering HA Gateway.
	PeeringHaAzureEipNameResourceGroup *string `pulumi:"peeringHaAzureEipNameResourceGroup"`
	// Public IP address that you want assigned to the HA peering instance.
	PeeringHaEip *string `pulumi:"peeringHaEip"`
	// Peering HA fault domain for OCI.
	PeeringHaFaultDomain *string `pulumi:"peeringHaFaultDomain"`
	// Peering HA Gateway Size.
	PeeringHaGwSize *string `pulumi:"peeringHaGwSize"`
	// peering_ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to
	// update the gateway to the specified version.
	PeeringHaImageVersion *string `pulumi:"peeringHaImageVersion"`
	// AZ of subnet being created for Insane Mode Peering HA Gateway. Required if insane_mode is set.
	PeeringHaInsaneModeAz *string `pulumi:"peeringHaInsaneModeAz"`
	// peering_ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt
	// to update the gateway to the specified version. If left blank, the gateway software version will continue to be managed
	// through the aviatrix_controller_config resource.
	PeeringHaSoftwareVersion *string `pulumi:"peeringHaSoftwareVersion"`
	// Public Subnet Information while creating Peering HA Gateway, only subnet is accepted. Required to create peering ha
	// gateway if cloud_type = 1 or 8 (AWS or Azure). Optional if cloud_type = 4 (GCP)
	PeeringHaSubnet *string `pulumi:"peeringHaSubnet"`
	// Zone information for creating Peering HA Gateway. Required to create peering ha gateway if cloud_type = 4 (GCP).
	// Optional for cloud_type = 8 (Azure).
	PeeringHaZone *string `pulumi:"peeringHaZone"`
	// Whether to enforce Guard Duty IP blocking. Required when `enable_public_subnet_filtering` attribute is true. Valid
	// values: true or false. Default value: true.
	PublicSubnetFilteringGuardDutyEnforced *bool `pulumi:"publicSubnetFilteringGuardDutyEnforced"`
	// Route tables whose associated public subnets are protected for the HA PSF gateway. Required when
	// enable_public_subnet_filtering and peering_ha_subnet are set.
	PublicSubnetFilteringHaRouteTables []string `pulumi:"publicSubnetFilteringHaRouteTables"`
	// Route tables whose associated public subnets are protected. Required when `enable_public_subnet_filtering` attribute is
	// true.
	PublicSubnetFilteringRouteTables []string `pulumi:"publicSubnetFilteringRouteTables"`
	// Typed value when modifying renegotiation_interval. If it's -1, this feature is disabled.
	RenegotiationInterval *int `pulumi:"renegotiationInterval"`
	// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
	RxQueueSize *string `pulumi:"rxQueueSize"`
	// This field indicates whether to enable SAML or not.
	SamlEnabled *bool `pulumi:"samlEnabled"`
	// A list of domain names that will use the NameServer when a specific name is not in the destination when Split Tunnel
	// Mode is enabled.
	SearchDomains *string `pulumi:"searchDomains"`
	// Set to true if this feature is desired.
	SingleAzHa *bool `pulumi:"singleAzHa"`
	// Enable Source NAT for this container.
	SingleIpSnat *bool `pulumi:"singleIpSnat"`
	// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
	// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
	// aviatrix_controller_config resource.
	SoftwareVersion *string `pulumi:"softwareVersion"`
	// Specify split tunnel mode.
	SplitTunnel *bool `pulumi:"splitTunnel"`
	// Price for spot instance. NOT supported for production deployment.
	SpotPrice *string `pulumi:"spotPrice"`
	// A VPC Network address range selected from one of the available network ranges.
	Subnet string `pulumi:"subnet"`
	// Instance tag of cloud provider.
	//
	// Deprecated: Use tags instead.
	TagLists []string `pulumi:"tagLists"`
	// A map of tags to assign to the gateway.
	Tags map[string]string `pulumi:"tags"`
	// The IPSec tunnel down detection time for the Gateway.
	TunnelDetectionTime *int `pulumi:"tunnelDetectionTime"`
	// ID of legacy VPC/Vnet to be connected.
	VpcId string `pulumi:"vpcId"`
	// Region where this gateway will be launched.
	VpcReg string `pulumi:"vpcReg"`
	// Enable user access through VPN to this container.
	VpnAccess *bool `pulumi:"vpnAccess"`
	// VPN CIDR block for the container.
	VpnCidr *string `pulumi:"vpnCidr"`
	// Elb protocol for VPN gateway with elb enabled. Only supports AWS provider. Valid values: 'TCP', 'UDP'. If not specified,
	// 'TCP'' will be used.
	VpnProtocol *string `pulumi:"vpnProtocol"`
	// Availability Zone. Only available for Azure and Public Subnet Filtering gateway
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a AviatrixGateway resource.
type AviatrixGatewayArgs struct {
	// Account name. This account will be used to launch Aviatrix gateway.
	AccountName pulumi.StringInput
	// A list of destination CIDR ranges that will also go through the VPN tunnel when Split Tunnel Mode is enabled.
	AdditionalCidrs pulumi.StringPtrInput
	// A list of CIDR ranges separated by comma to configure when 'designated_gateway' feature is enabled.
	AdditionalCidrsDesignatedGateway pulumi.StringPtrInput
	// When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and
	// use it for this gateway.
	AllocateNewEip pulumi.BoolPtrInput
	// Availability domain for OCI.
	AvailabilityDomain pulumi.StringPtrInput
	// The name of the public IP address and its resource group in Azure to assign to this Gateway.
	AzureEipNameResourceGroup pulumi.StringPtrInput
	// Type of cloud service provider.
	CloudType pulumi.IntInput
	// Customer managed key ID.
	CustomerManagedKeys pulumi.StringPtrInput
	// API hostname for DUO auth mode.
	DuoApiHostname pulumi.StringPtrInput
	// Integration key for DUO auth mode.
	DuoIntegrationKey pulumi.StringPtrInput
	// Push mode for DUO auth.
	DuoPushMode pulumi.StringPtrInput
	// Secret key for DUO auth mode.
	DuoSecretKey pulumi.StringPtrInput
	// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
	Eip pulumi.StringPtrInput
	// A name for the ELB that is created.
	ElbName pulumi.StringPtrInput
	// Enable 'designated_gateway' feature for Gateway. Valid values: true, false.
	EnableDesignatedGateway pulumi.BoolPtrInput
	// Specify whether to enable ELB or not.
	EnableElb pulumi.BoolPtrInput
	// Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.
	EnableEncryptVolume pulumi.BoolPtrInput
	// Enable jumbo frame support for Gateway. Valid values: true or false. Default value: true.
	EnableJumboFrame pulumi.BoolPtrInput
	// Specify whether to enable LDAP or not. Supported values: 'yes' and 'no'.
	EnableLdap pulumi.BoolPtrInput
	// Enable monitor gateway subnets. Valid values: true, false. Default value: false.
	EnableMonitorGatewaySubnets pulumi.BoolPtrInput
	// Create a [Public Subnet Filtering gateway](https://docs.aviatrix.com/HowTos/public_subnet_filtering_faq.html).
	EnablePublicSubnetFiltering pulumi.BoolPtrInput
	// Enable spot instance. NOT supported for production deployment.
	EnableSpotInstance pulumi.BoolPtrInput
	// Enable vpc_dns_server for Gateway. Valid values: true, false.
	EnableVpcDnsServer pulumi.BoolPtrInput
	// This field indicates whether to enable VPN NAT or not. Only supported for VPN gateway. Valid values: true, false.
	// Default value: true.
	EnableVpnNat pulumi.BoolPtrInput
	// Fault domain for OCI.
	FaultDomain pulumi.StringPtrInput
	// FQDN gateway lan interface cidr.
	FqdnLanCidr pulumi.StringPtrInput
	// LAN VPC ID. Only used for GCP FQDN Gateway.
	FqdnLanVpcId pulumi.StringPtrInput
	// Aviatrix gateway unique name.
	GwName pulumi.StringInput
	// Size of Gateway Instance.
	GwSize pulumi.StringInput
	// Typed value when modifying idle_timeout. If it's -1, this feature is disabled.
	IdleTimeout pulumi.IntPtrInput
	// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
	// to the specified version.
	ImageVersion pulumi.StringPtrInput
	// Enable Insane Mode for Gateway. Valid values: true, false.
	InsaneMode pulumi.BoolPtrInput
	// AZ of subnet being created for Insane Mode Gateway. Required if insane_mode is set.
	InsaneModeAz pulumi.StringPtrInput
	// LDAP base DN. Required: Yes if enable_ldap is 'yes'.
	LdapBaseDn pulumi.StringPtrInput
	// LDAP bind DN. Required: Yes if enable_ldap is 'yes'.
	LdapBindDn pulumi.StringPtrInput
	// LDAP password. Required: Yes if enable_ldap is 'yes'.
	LdapPassword pulumi.StringPtrInput
	// LDAP server address. Required: Yes if enable_ldap is 'yes'.
	LdapServer pulumi.StringPtrInput
	// LDAP user attribute. Required: Yes if enable_ldap is 'yes'.
	LdapUsernameAttribute pulumi.StringPtrInput
	// Maximum connection of VPN access.
	MaxVpnConn pulumi.StringPtrInput
	// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
	MonitorExcludeLists pulumi.StringArrayInput
	// A list of DNS servers used to resolve domain names by a connected VPN user when Split Tunnel Mode is enabled.
	NameServers pulumi.StringPtrInput
	// Token for Okta auth mode.
	OktaToken pulumi.StringPtrInput
	// URL for Okta auth mode.
	OktaUrl pulumi.StringPtrInput
	// Username suffix for Okta auth mode.
	OktaUsernameSuffix pulumi.StringPtrInput
	// Two step authentication mode.
	OtpMode pulumi.StringPtrInput
	// Peering HA availability domain for OCI.
	PeeringHaAvailabilityDomain pulumi.StringPtrInput
	// The name of the public IP address and its resource group in Azure to assign to the Peering HA Gateway.
	PeeringHaAzureEipNameResourceGroup pulumi.StringPtrInput
	// Public IP address that you want assigned to the HA peering instance.
	PeeringHaEip pulumi.StringPtrInput
	// Peering HA fault domain for OCI.
	PeeringHaFaultDomain pulumi.StringPtrInput
	// Peering HA Gateway Size.
	PeeringHaGwSize pulumi.StringPtrInput
	// peering_ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to
	// update the gateway to the specified version.
	PeeringHaImageVersion pulumi.StringPtrInput
	// AZ of subnet being created for Insane Mode Peering HA Gateway. Required if insane_mode is set.
	PeeringHaInsaneModeAz pulumi.StringPtrInput
	// peering_ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt
	// to update the gateway to the specified version. If left blank, the gateway software version will continue to be managed
	// through the aviatrix_controller_config resource.
	PeeringHaSoftwareVersion pulumi.StringPtrInput
	// Public Subnet Information while creating Peering HA Gateway, only subnet is accepted. Required to create peering ha
	// gateway if cloud_type = 1 or 8 (AWS or Azure). Optional if cloud_type = 4 (GCP)
	PeeringHaSubnet pulumi.StringPtrInput
	// Zone information for creating Peering HA Gateway. Required to create peering ha gateway if cloud_type = 4 (GCP).
	// Optional for cloud_type = 8 (Azure).
	PeeringHaZone pulumi.StringPtrInput
	// Whether to enforce Guard Duty IP blocking. Required when `enable_public_subnet_filtering` attribute is true. Valid
	// values: true or false. Default value: true.
	PublicSubnetFilteringGuardDutyEnforced pulumi.BoolPtrInput
	// Route tables whose associated public subnets are protected for the HA PSF gateway. Required when
	// enable_public_subnet_filtering and peering_ha_subnet are set.
	PublicSubnetFilteringHaRouteTables pulumi.StringArrayInput
	// Route tables whose associated public subnets are protected. Required when `enable_public_subnet_filtering` attribute is
	// true.
	PublicSubnetFilteringRouteTables pulumi.StringArrayInput
	// Typed value when modifying renegotiation_interval. If it's -1, this feature is disabled.
	RenegotiationInterval pulumi.IntPtrInput
	// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
	RxQueueSize pulumi.StringPtrInput
	// This field indicates whether to enable SAML or not.
	SamlEnabled pulumi.BoolPtrInput
	// A list of domain names that will use the NameServer when a specific name is not in the destination when Split Tunnel
	// Mode is enabled.
	SearchDomains pulumi.StringPtrInput
	// Set to true if this feature is desired.
	SingleAzHa pulumi.BoolPtrInput
	// Enable Source NAT for this container.
	SingleIpSnat pulumi.BoolPtrInput
	// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
	// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
	// aviatrix_controller_config resource.
	SoftwareVersion pulumi.StringPtrInput
	// Specify split tunnel mode.
	SplitTunnel pulumi.BoolPtrInput
	// Price for spot instance. NOT supported for production deployment.
	SpotPrice pulumi.StringPtrInput
	// A VPC Network address range selected from one of the available network ranges.
	Subnet pulumi.StringInput
	// Instance tag of cloud provider.
	//
	// Deprecated: Use tags instead.
	TagLists pulumi.StringArrayInput
	// A map of tags to assign to the gateway.
	Tags pulumi.StringMapInput
	// The IPSec tunnel down detection time for the Gateway.
	TunnelDetectionTime pulumi.IntPtrInput
	// ID of legacy VPC/Vnet to be connected.
	VpcId pulumi.StringInput
	// Region where this gateway will be launched.
	VpcReg pulumi.StringInput
	// Enable user access through VPN to this container.
	VpnAccess pulumi.BoolPtrInput
	// VPN CIDR block for the container.
	VpnCidr pulumi.StringPtrInput
	// Elb protocol for VPN gateway with elb enabled. Only supports AWS provider. Valid values: 'TCP', 'UDP'. If not specified,
	// 'TCP'' will be used.
	VpnProtocol pulumi.StringPtrInput
	// Availability Zone. Only available for Azure and Public Subnet Filtering gateway
	Zone pulumi.StringPtrInput
}

func (AviatrixGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixGatewayArgs)(nil)).Elem()
}

type AviatrixGatewayInput interface {
	pulumi.Input

	ToAviatrixGatewayOutput() AviatrixGatewayOutput
	ToAviatrixGatewayOutputWithContext(ctx context.Context) AviatrixGatewayOutput
}

func (*AviatrixGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixGateway)(nil)).Elem()
}

func (i *AviatrixGateway) ToAviatrixGatewayOutput() AviatrixGatewayOutput {
	return i.ToAviatrixGatewayOutputWithContext(context.Background())
}

func (i *AviatrixGateway) ToAviatrixGatewayOutputWithContext(ctx context.Context) AviatrixGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewayOutput)
}

// AviatrixGatewayArrayInput is an input type that accepts AviatrixGatewayArray and AviatrixGatewayArrayOutput values.
// You can construct a concrete instance of `AviatrixGatewayArrayInput` via:
//
//	AviatrixGatewayArray{ AviatrixGatewayArgs{...} }
type AviatrixGatewayArrayInput interface {
	pulumi.Input

	ToAviatrixGatewayArrayOutput() AviatrixGatewayArrayOutput
	ToAviatrixGatewayArrayOutputWithContext(context.Context) AviatrixGatewayArrayOutput
}

type AviatrixGatewayArray []AviatrixGatewayInput

func (AviatrixGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixGateway)(nil)).Elem()
}

func (i AviatrixGatewayArray) ToAviatrixGatewayArrayOutput() AviatrixGatewayArrayOutput {
	return i.ToAviatrixGatewayArrayOutputWithContext(context.Background())
}

func (i AviatrixGatewayArray) ToAviatrixGatewayArrayOutputWithContext(ctx context.Context) AviatrixGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewayArrayOutput)
}

// AviatrixGatewayMapInput is an input type that accepts AviatrixGatewayMap and AviatrixGatewayMapOutput values.
// You can construct a concrete instance of `AviatrixGatewayMapInput` via:
//
//	AviatrixGatewayMap{ "key": AviatrixGatewayArgs{...} }
type AviatrixGatewayMapInput interface {
	pulumi.Input

	ToAviatrixGatewayMapOutput() AviatrixGatewayMapOutput
	ToAviatrixGatewayMapOutputWithContext(context.Context) AviatrixGatewayMapOutput
}

type AviatrixGatewayMap map[string]AviatrixGatewayInput

func (AviatrixGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixGateway)(nil)).Elem()
}

func (i AviatrixGatewayMap) ToAviatrixGatewayMapOutput() AviatrixGatewayMapOutput {
	return i.ToAviatrixGatewayMapOutputWithContext(context.Background())
}

func (i AviatrixGatewayMap) ToAviatrixGatewayMapOutputWithContext(ctx context.Context) AviatrixGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewayMapOutput)
}

type AviatrixGatewayOutput struct{ *pulumi.OutputState }

func (AviatrixGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixGateway)(nil)).Elem()
}

func (o AviatrixGatewayOutput) ToAviatrixGatewayOutput() AviatrixGatewayOutput {
	return o
}

func (o AviatrixGatewayOutput) ToAviatrixGatewayOutputWithContext(ctx context.Context) AviatrixGatewayOutput {
	return o
}

// Account name. This account will be used to launch Aviatrix gateway.
func (o AviatrixGatewayOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.AccountName }).(pulumi.StringOutput)
}

// A list of destination CIDR ranges that will also go through the VPN tunnel when Split Tunnel Mode is enabled.
func (o AviatrixGatewayOutput) AdditionalCidrs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.AdditionalCidrs }).(pulumi.StringPtrOutput)
}

// A list of CIDR ranges separated by comma to configure when 'designated_gateway' feature is enabled.
func (o AviatrixGatewayOutput) AdditionalCidrsDesignatedGateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.AdditionalCidrsDesignatedGateway }).(pulumi.StringPtrOutput)
}

// When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and
// use it for this gateway.
func (o AviatrixGatewayOutput) AllocateNewEip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.BoolPtrOutput { return v.AllocateNewEip }).(pulumi.BoolPtrOutput)
}

// Availability domain for OCI.
func (o AviatrixGatewayOutput) AvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.AvailabilityDomain }).(pulumi.StringOutput)
}

// The name of the public IP address and its resource group in Azure to assign to this Gateway.
func (o AviatrixGatewayOutput) AzureEipNameResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.AzureEipNameResourceGroup }).(pulumi.StringOutput)
}

// Instance ID of the gateway.
func (o AviatrixGatewayOutput) CloudInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.CloudInstanceId }).(pulumi.StringOutput)
}

// Type of cloud service provider.
func (o AviatrixGatewayOutput) CloudType() pulumi.IntOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.IntOutput { return v.CloudType }).(pulumi.IntOutput)
}

// Customer managed key ID.
func (o AviatrixGatewayOutput) CustomerManagedKeys() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.CustomerManagedKeys }).(pulumi.StringPtrOutput)
}

// API hostname for DUO auth mode.
func (o AviatrixGatewayOutput) DuoApiHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.DuoApiHostname }).(pulumi.StringPtrOutput)
}

// Integration key for DUO auth mode.
func (o AviatrixGatewayOutput) DuoIntegrationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.DuoIntegrationKey }).(pulumi.StringPtrOutput)
}

// Push mode for DUO auth.
func (o AviatrixGatewayOutput) DuoPushMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.DuoPushMode }).(pulumi.StringPtrOutput)
}

// Secret key for DUO auth mode.
func (o AviatrixGatewayOutput) DuoSecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.DuoSecretKey }).(pulumi.StringPtrOutput)
}

// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
func (o AviatrixGatewayOutput) Eip() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.Eip }).(pulumi.StringOutput)
}

// ELB DNS Name.
func (o AviatrixGatewayOutput) ElbDnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.ElbDnsName }).(pulumi.StringOutput)
}

// A name for the ELB that is created.
func (o AviatrixGatewayOutput) ElbName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.ElbName }).(pulumi.StringOutput)
}

// Enable 'designated_gateway' feature for Gateway. Valid values: true, false.
func (o AviatrixGatewayOutput) EnableDesignatedGateway() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.BoolPtrOutput { return v.EnableDesignatedGateway }).(pulumi.BoolPtrOutput)
}

// Specify whether to enable ELB or not.
func (o AviatrixGatewayOutput) EnableElb() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.BoolPtrOutput { return v.EnableElb }).(pulumi.BoolPtrOutput)
}

// Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.
func (o AviatrixGatewayOutput) EnableEncryptVolume() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.BoolPtrOutput { return v.EnableEncryptVolume }).(pulumi.BoolPtrOutput)
}

// Enable jumbo frame support for Gateway. Valid values: true or false. Default value: true.
func (o AviatrixGatewayOutput) EnableJumboFrame() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.BoolPtrOutput { return v.EnableJumboFrame }).(pulumi.BoolPtrOutput)
}

// Specify whether to enable LDAP or not. Supported values: 'yes' and 'no'.
func (o AviatrixGatewayOutput) EnableLdap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.BoolPtrOutput { return v.EnableLdap }).(pulumi.BoolPtrOutput)
}

// Enable monitor gateway subnets. Valid values: true, false. Default value: false.
func (o AviatrixGatewayOutput) EnableMonitorGatewaySubnets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.BoolPtrOutput { return v.EnableMonitorGatewaySubnets }).(pulumi.BoolPtrOutput)
}

// Create a [Public Subnet Filtering gateway](https://docs.aviatrix.com/HowTos/public_subnet_filtering_faq.html).
func (o AviatrixGatewayOutput) EnablePublicSubnetFiltering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.BoolPtrOutput { return v.EnablePublicSubnetFiltering }).(pulumi.BoolPtrOutput)
}

// Enable spot instance. NOT supported for production deployment.
func (o AviatrixGatewayOutput) EnableSpotInstance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.BoolPtrOutput { return v.EnableSpotInstance }).(pulumi.BoolPtrOutput)
}

// Enable vpc_dns_server for Gateway. Valid values: true, false.
func (o AviatrixGatewayOutput) EnableVpcDnsServer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.BoolPtrOutput { return v.EnableVpcDnsServer }).(pulumi.BoolPtrOutput)
}

// This field indicates whether to enable VPN NAT or not. Only supported for VPN gateway. Valid values: true, false.
// Default value: true.
func (o AviatrixGatewayOutput) EnableVpnNat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.BoolPtrOutput { return v.EnableVpnNat }).(pulumi.BoolPtrOutput)
}

// Fault domain for OCI.
func (o AviatrixGatewayOutput) FaultDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.FaultDomain }).(pulumi.StringOutput)
}

// FQDN gateway lan interface cidr.
func (o AviatrixGatewayOutput) FqdnLanCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.FqdnLanCidr }).(pulumi.StringPtrOutput)
}

// FQDN gateway lan interface id.
func (o AviatrixGatewayOutput) FqdnLanInterface() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.FqdnLanInterface }).(pulumi.StringOutput)
}

// LAN VPC ID. Only used for GCP FQDN Gateway.
func (o AviatrixGatewayOutput) FqdnLanVpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.FqdnLanVpcId }).(pulumi.StringPtrOutput)
}

// Aviatrix gateway unique name.
func (o AviatrixGatewayOutput) GwName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.GwName }).(pulumi.StringOutput)
}

// Size of Gateway Instance.
func (o AviatrixGatewayOutput) GwSize() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.GwSize }).(pulumi.StringOutput)
}

// Typed value when modifying idle_timeout. If it's -1, this feature is disabled.
func (o AviatrixGatewayOutput) IdleTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.IntPtrOutput { return v.IdleTimeout }).(pulumi.IntPtrOutput)
}

// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
// to the specified version.
func (o AviatrixGatewayOutput) ImageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.ImageVersion }).(pulumi.StringOutput)
}

// Enable Insane Mode for Gateway. Valid values: true, false.
func (o AviatrixGatewayOutput) InsaneMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.BoolPtrOutput { return v.InsaneMode }).(pulumi.BoolPtrOutput)
}

// AZ of subnet being created for Insane Mode Gateway. Required if insane_mode is set.
func (o AviatrixGatewayOutput) InsaneModeAz() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.InsaneModeAz }).(pulumi.StringPtrOutput)
}

// LDAP base DN. Required: Yes if enable_ldap is 'yes'.
func (o AviatrixGatewayOutput) LdapBaseDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.LdapBaseDn }).(pulumi.StringPtrOutput)
}

// LDAP bind DN. Required: Yes if enable_ldap is 'yes'.
func (o AviatrixGatewayOutput) LdapBindDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.LdapBindDn }).(pulumi.StringPtrOutput)
}

// LDAP password. Required: Yes if enable_ldap is 'yes'.
func (o AviatrixGatewayOutput) LdapPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.LdapPassword }).(pulumi.StringPtrOutput)
}

// LDAP server address. Required: Yes if enable_ldap is 'yes'.
func (o AviatrixGatewayOutput) LdapServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.LdapServer }).(pulumi.StringPtrOutput)
}

// LDAP user attribute. Required: Yes if enable_ldap is 'yes'.
func (o AviatrixGatewayOutput) LdapUsernameAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.LdapUsernameAttribute }).(pulumi.StringPtrOutput)
}

// Maximum connection of VPN access.
func (o AviatrixGatewayOutput) MaxVpnConn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.MaxVpnConn }).(pulumi.StringPtrOutput)
}

// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
func (o AviatrixGatewayOutput) MonitorExcludeLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringArrayOutput { return v.MonitorExcludeLists }).(pulumi.StringArrayOutput)
}

// A list of DNS servers used to resolve domain names by a connected VPN user when Split Tunnel Mode is enabled.
func (o AviatrixGatewayOutput) NameServers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.NameServers }).(pulumi.StringPtrOutput)
}

// Token for Okta auth mode.
func (o AviatrixGatewayOutput) OktaToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.OktaToken }).(pulumi.StringPtrOutput)
}

// URL for Okta auth mode.
func (o AviatrixGatewayOutput) OktaUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.OktaUrl }).(pulumi.StringPtrOutput)
}

// Username suffix for Okta auth mode.
func (o AviatrixGatewayOutput) OktaUsernameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.OktaUsernameSuffix }).(pulumi.StringPtrOutput)
}

// Two step authentication mode.
func (o AviatrixGatewayOutput) OtpMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.OtpMode }).(pulumi.StringPtrOutput)
}

// Peering HA availability domain for OCI.
func (o AviatrixGatewayOutput) PeeringHaAvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.PeeringHaAvailabilityDomain }).(pulumi.StringOutput)
}

// The name of the public IP address and its resource group in Azure to assign to the Peering HA Gateway.
func (o AviatrixGatewayOutput) PeeringHaAzureEipNameResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.PeeringHaAzureEipNameResourceGroup }).(pulumi.StringOutput)
}

// Instance ID of the peering HA gateway.
func (o AviatrixGatewayOutput) PeeringHaCloudInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.PeeringHaCloudInstanceId }).(pulumi.StringOutput)
}

// Public IP address that you want assigned to the HA peering instance.
func (o AviatrixGatewayOutput) PeeringHaEip() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.PeeringHaEip }).(pulumi.StringOutput)
}

// Peering HA fault domain for OCI.
func (o AviatrixGatewayOutput) PeeringHaFaultDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.PeeringHaFaultDomain }).(pulumi.StringOutput)
}

// Aviatrix gateway unique name of HA gateway.
func (o AviatrixGatewayOutput) PeeringHaGwName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.PeeringHaGwName }).(pulumi.StringOutput)
}

// Peering HA Gateway Size.
func (o AviatrixGatewayOutput) PeeringHaGwSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.PeeringHaGwSize }).(pulumi.StringPtrOutput)
}

// peering_ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to
// update the gateway to the specified version.
func (o AviatrixGatewayOutput) PeeringHaImageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.PeeringHaImageVersion }).(pulumi.StringOutput)
}

// AZ of subnet being created for Insane Mode Peering HA Gateway. Required if insane_mode is set.
func (o AviatrixGatewayOutput) PeeringHaInsaneModeAz() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.PeeringHaInsaneModeAz }).(pulumi.StringPtrOutput)
}

// Private IP address of HA gateway.
func (o AviatrixGatewayOutput) PeeringHaPrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.PeeringHaPrivateIp }).(pulumi.StringOutput)
}

// Peering HA security group used for the gateway.
func (o AviatrixGatewayOutput) PeeringHaSecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.PeeringHaSecurityGroupId }).(pulumi.StringOutput)
}

// peering_ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt
// to update the gateway to the specified version. If left blank, the gateway software version will continue to be managed
// through the aviatrix_controller_config resource.
func (o AviatrixGatewayOutput) PeeringHaSoftwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.PeeringHaSoftwareVersion }).(pulumi.StringOutput)
}

// Public Subnet Information while creating Peering HA Gateway, only subnet is accepted. Required to create peering ha
// gateway if cloud_type = 1 or 8 (AWS or Azure). Optional if cloud_type = 4 (GCP)
func (o AviatrixGatewayOutput) PeeringHaSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.PeeringHaSubnet }).(pulumi.StringPtrOutput)
}

// Zone information for creating Peering HA Gateway. Required to create peering ha gateway if cloud_type = 4 (GCP).
// Optional for cloud_type = 8 (Azure).
func (o AviatrixGatewayOutput) PeeringHaZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.PeeringHaZone }).(pulumi.StringPtrOutput)
}

// Private IP address of the Gateway created.
func (o AviatrixGatewayOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

// NS server used by the gateway.
func (o AviatrixGatewayOutput) PublicDnsServer() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.PublicDnsServer }).(pulumi.StringOutput)
}

// Whether to enforce Guard Duty IP blocking. Required when `enable_public_subnet_filtering` attribute is true. Valid
// values: true or false. Default value: true.
func (o AviatrixGatewayOutput) PublicSubnetFilteringGuardDutyEnforced() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.BoolPtrOutput { return v.PublicSubnetFilteringGuardDutyEnforced }).(pulumi.BoolPtrOutput)
}

// Route tables whose associated public subnets are protected for the HA PSF gateway. Required when
// enable_public_subnet_filtering and peering_ha_subnet are set.
func (o AviatrixGatewayOutput) PublicSubnetFilteringHaRouteTables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringArrayOutput { return v.PublicSubnetFilteringHaRouteTables }).(pulumi.StringArrayOutput)
}

// Route tables whose associated public subnets are protected. Required when `enable_public_subnet_filtering` attribute is
// true.
func (o AviatrixGatewayOutput) PublicSubnetFilteringRouteTables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringArrayOutput { return v.PublicSubnetFilteringRouteTables }).(pulumi.StringArrayOutput)
}

// Typed value when modifying renegotiation_interval. If it's -1, this feature is disabled.
func (o AviatrixGatewayOutput) RenegotiationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.IntPtrOutput { return v.RenegotiationInterval }).(pulumi.IntPtrOutput)
}

// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
func (o AviatrixGatewayOutput) RxQueueSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.RxQueueSize }).(pulumi.StringPtrOutput)
}

// This field indicates whether to enable SAML or not.
func (o AviatrixGatewayOutput) SamlEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.BoolPtrOutput { return v.SamlEnabled }).(pulumi.BoolPtrOutput)
}

// A list of domain names that will use the NameServer when a specific name is not in the destination when Split Tunnel
// Mode is enabled.
func (o AviatrixGatewayOutput) SearchDomains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.SearchDomains }).(pulumi.StringPtrOutput)
}

// Security group used for the gateway.
func (o AviatrixGatewayOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// Set to true if this feature is desired.
func (o AviatrixGatewayOutput) SingleAzHa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.BoolPtrOutput { return v.SingleAzHa }).(pulumi.BoolPtrOutput)
}

// Enable Source NAT for this container.
func (o AviatrixGatewayOutput) SingleIpSnat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.BoolPtrOutput { return v.SingleIpSnat }).(pulumi.BoolPtrOutput)
}

// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
// aviatrix_controller_config resource.
func (o AviatrixGatewayOutput) SoftwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.SoftwareVersion }).(pulumi.StringOutput)
}

// Specify split tunnel mode.
func (o AviatrixGatewayOutput) SplitTunnel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.BoolPtrOutput { return v.SplitTunnel }).(pulumi.BoolPtrOutput)
}

// Price for spot instance. NOT supported for production deployment.
func (o AviatrixGatewayOutput) SpotPrice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.SpotPrice }).(pulumi.StringPtrOutput)
}

// A VPC Network address range selected from one of the available network ranges.
func (o AviatrixGatewayOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.Subnet }).(pulumi.StringOutput)
}

// Instance tag of cloud provider.
//
// Deprecated: Use tags instead.
func (o AviatrixGatewayOutput) TagLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringArrayOutput { return v.TagLists }).(pulumi.StringArrayOutput)
}

// A map of tags to assign to the gateway.
func (o AviatrixGatewayOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The IPSec tunnel down detection time for the Gateway.
func (o AviatrixGatewayOutput) TunnelDetectionTime() pulumi.IntOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.IntOutput { return v.TunnelDetectionTime }).(pulumi.IntOutput)
}

// ID of legacy VPC/Vnet to be connected.
func (o AviatrixGatewayOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// Region where this gateway will be launched.
func (o AviatrixGatewayOutput) VpcReg() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.VpcReg }).(pulumi.StringOutput)
}

// Enable user access through VPN to this container.
func (o AviatrixGatewayOutput) VpnAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.BoolPtrOutput { return v.VpnAccess }).(pulumi.BoolPtrOutput)
}

// VPN CIDR block for the container.
func (o AviatrixGatewayOutput) VpnCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.VpnCidr }).(pulumi.StringPtrOutput)
}

// Elb protocol for VPN gateway with elb enabled. Only supports AWS provider. Valid values: 'TCP', 'UDP'. If not specified,
// 'TCP” will be used.
func (o AviatrixGatewayOutput) VpnProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringOutput { return v.VpnProtocol }).(pulumi.StringOutput)
}

// Availability Zone. Only available for Azure and Public Subnet Filtering gateway
func (o AviatrixGatewayOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGateway) pulumi.StringPtrOutput { return v.Zone }).(pulumi.StringPtrOutput)
}

type AviatrixGatewayArrayOutput struct{ *pulumi.OutputState }

func (AviatrixGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixGateway)(nil)).Elem()
}

func (o AviatrixGatewayArrayOutput) ToAviatrixGatewayArrayOutput() AviatrixGatewayArrayOutput {
	return o
}

func (o AviatrixGatewayArrayOutput) ToAviatrixGatewayArrayOutputWithContext(ctx context.Context) AviatrixGatewayArrayOutput {
	return o
}

func (o AviatrixGatewayArrayOutput) Index(i pulumi.IntInput) AviatrixGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixGateway {
		return vs[0].([]*AviatrixGateway)[vs[1].(int)]
	}).(AviatrixGatewayOutput)
}

type AviatrixGatewayMapOutput struct{ *pulumi.OutputState }

func (AviatrixGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixGateway)(nil)).Elem()
}

func (o AviatrixGatewayMapOutput) ToAviatrixGatewayMapOutput() AviatrixGatewayMapOutput {
	return o
}

func (o AviatrixGatewayMapOutput) ToAviatrixGatewayMapOutputWithContext(ctx context.Context) AviatrixGatewayMapOutput {
	return o
}

func (o AviatrixGatewayMapOutput) MapIndex(k pulumi.StringInput) AviatrixGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixGateway {
		return vs[0].(map[string]*AviatrixGateway)[vs[1].(string)]
	}).(AviatrixGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewayInput)(nil)).Elem(), &AviatrixGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewayArrayInput)(nil)).Elem(), AviatrixGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewayMapInput)(nil)).Elem(), AviatrixGatewayMap{})
	pulumi.RegisterOutputType(AviatrixGatewayOutput{})
	pulumi.RegisterOutputType(AviatrixGatewayArrayOutput{})
	pulumi.RegisterOutputType(AviatrixGatewayMapOutput{})
}
