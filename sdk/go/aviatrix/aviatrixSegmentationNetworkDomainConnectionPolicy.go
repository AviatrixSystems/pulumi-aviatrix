// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixSegmentationNetworkDomainConnectionPolicy struct {
	pulumi.CustomResourceState

	// Name of network domain that will be connected to domain 2.
	DomainName1 pulumi.StringOutput `pulumi:"domainName1"`
	// Name of network domain that will be connected to domain 1.
	DomainName2 pulumi.StringOutput `pulumi:"domainName2"`
}

// NewAviatrixSegmentationNetworkDomainConnectionPolicy registers a new resource with the given unique name, arguments, and options.
func NewAviatrixSegmentationNetworkDomainConnectionPolicy(ctx *pulumi.Context,
	name string, args *AviatrixSegmentationNetworkDomainConnectionPolicyArgs, opts ...pulumi.ResourceOption) (*AviatrixSegmentationNetworkDomainConnectionPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName1 == nil {
		return nil, errors.New("invalid value for required argument 'DomainName1'")
	}
	if args.DomainName2 == nil {
		return nil, errors.New("invalid value for required argument 'DomainName2'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixSegmentationNetworkDomainConnectionPolicy
	err := ctx.RegisterResource("aviatrix:index/aviatrixSegmentationNetworkDomainConnectionPolicy:AviatrixSegmentationNetworkDomainConnectionPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixSegmentationNetworkDomainConnectionPolicy gets an existing AviatrixSegmentationNetworkDomainConnectionPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixSegmentationNetworkDomainConnectionPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixSegmentationNetworkDomainConnectionPolicyState, opts ...pulumi.ResourceOption) (*AviatrixSegmentationNetworkDomainConnectionPolicy, error) {
	var resource AviatrixSegmentationNetworkDomainConnectionPolicy
	err := ctx.ReadResource("aviatrix:index/aviatrixSegmentationNetworkDomainConnectionPolicy:AviatrixSegmentationNetworkDomainConnectionPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixSegmentationNetworkDomainConnectionPolicy resources.
type aviatrixSegmentationNetworkDomainConnectionPolicyState struct {
	// Name of network domain that will be connected to domain 2.
	DomainName1 *string `pulumi:"domainName1"`
	// Name of network domain that will be connected to domain 1.
	DomainName2 *string `pulumi:"domainName2"`
}

type AviatrixSegmentationNetworkDomainConnectionPolicyState struct {
	// Name of network domain that will be connected to domain 2.
	DomainName1 pulumi.StringPtrInput
	// Name of network domain that will be connected to domain 1.
	DomainName2 pulumi.StringPtrInput
}

func (AviatrixSegmentationNetworkDomainConnectionPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixSegmentationNetworkDomainConnectionPolicyState)(nil)).Elem()
}

type aviatrixSegmentationNetworkDomainConnectionPolicyArgs struct {
	// Name of network domain that will be connected to domain 2.
	DomainName1 string `pulumi:"domainName1"`
	// Name of network domain that will be connected to domain 1.
	DomainName2 string `pulumi:"domainName2"`
}

// The set of arguments for constructing a AviatrixSegmentationNetworkDomainConnectionPolicy resource.
type AviatrixSegmentationNetworkDomainConnectionPolicyArgs struct {
	// Name of network domain that will be connected to domain 2.
	DomainName1 pulumi.StringInput
	// Name of network domain that will be connected to domain 1.
	DomainName2 pulumi.StringInput
}

func (AviatrixSegmentationNetworkDomainConnectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixSegmentationNetworkDomainConnectionPolicyArgs)(nil)).Elem()
}

type AviatrixSegmentationNetworkDomainConnectionPolicyInput interface {
	pulumi.Input

	ToAviatrixSegmentationNetworkDomainConnectionPolicyOutput() AviatrixSegmentationNetworkDomainConnectionPolicyOutput
	ToAviatrixSegmentationNetworkDomainConnectionPolicyOutputWithContext(ctx context.Context) AviatrixSegmentationNetworkDomainConnectionPolicyOutput
}

func (*AviatrixSegmentationNetworkDomainConnectionPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixSegmentationNetworkDomainConnectionPolicy)(nil)).Elem()
}

func (i *AviatrixSegmentationNetworkDomainConnectionPolicy) ToAviatrixSegmentationNetworkDomainConnectionPolicyOutput() AviatrixSegmentationNetworkDomainConnectionPolicyOutput {
	return i.ToAviatrixSegmentationNetworkDomainConnectionPolicyOutputWithContext(context.Background())
}

func (i *AviatrixSegmentationNetworkDomainConnectionPolicy) ToAviatrixSegmentationNetworkDomainConnectionPolicyOutputWithContext(ctx context.Context) AviatrixSegmentationNetworkDomainConnectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixSegmentationNetworkDomainConnectionPolicyOutput)
}

// AviatrixSegmentationNetworkDomainConnectionPolicyArrayInput is an input type that accepts AviatrixSegmentationNetworkDomainConnectionPolicyArray and AviatrixSegmentationNetworkDomainConnectionPolicyArrayOutput values.
// You can construct a concrete instance of `AviatrixSegmentationNetworkDomainConnectionPolicyArrayInput` via:
//
//	AviatrixSegmentationNetworkDomainConnectionPolicyArray{ AviatrixSegmentationNetworkDomainConnectionPolicyArgs{...} }
type AviatrixSegmentationNetworkDomainConnectionPolicyArrayInput interface {
	pulumi.Input

	ToAviatrixSegmentationNetworkDomainConnectionPolicyArrayOutput() AviatrixSegmentationNetworkDomainConnectionPolicyArrayOutput
	ToAviatrixSegmentationNetworkDomainConnectionPolicyArrayOutputWithContext(context.Context) AviatrixSegmentationNetworkDomainConnectionPolicyArrayOutput
}

type AviatrixSegmentationNetworkDomainConnectionPolicyArray []AviatrixSegmentationNetworkDomainConnectionPolicyInput

func (AviatrixSegmentationNetworkDomainConnectionPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixSegmentationNetworkDomainConnectionPolicy)(nil)).Elem()
}

func (i AviatrixSegmentationNetworkDomainConnectionPolicyArray) ToAviatrixSegmentationNetworkDomainConnectionPolicyArrayOutput() AviatrixSegmentationNetworkDomainConnectionPolicyArrayOutput {
	return i.ToAviatrixSegmentationNetworkDomainConnectionPolicyArrayOutputWithContext(context.Background())
}

func (i AviatrixSegmentationNetworkDomainConnectionPolicyArray) ToAviatrixSegmentationNetworkDomainConnectionPolicyArrayOutputWithContext(ctx context.Context) AviatrixSegmentationNetworkDomainConnectionPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixSegmentationNetworkDomainConnectionPolicyArrayOutput)
}

// AviatrixSegmentationNetworkDomainConnectionPolicyMapInput is an input type that accepts AviatrixSegmentationNetworkDomainConnectionPolicyMap and AviatrixSegmentationNetworkDomainConnectionPolicyMapOutput values.
// You can construct a concrete instance of `AviatrixSegmentationNetworkDomainConnectionPolicyMapInput` via:
//
//	AviatrixSegmentationNetworkDomainConnectionPolicyMap{ "key": AviatrixSegmentationNetworkDomainConnectionPolicyArgs{...} }
type AviatrixSegmentationNetworkDomainConnectionPolicyMapInput interface {
	pulumi.Input

	ToAviatrixSegmentationNetworkDomainConnectionPolicyMapOutput() AviatrixSegmentationNetworkDomainConnectionPolicyMapOutput
	ToAviatrixSegmentationNetworkDomainConnectionPolicyMapOutputWithContext(context.Context) AviatrixSegmentationNetworkDomainConnectionPolicyMapOutput
}

type AviatrixSegmentationNetworkDomainConnectionPolicyMap map[string]AviatrixSegmentationNetworkDomainConnectionPolicyInput

func (AviatrixSegmentationNetworkDomainConnectionPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixSegmentationNetworkDomainConnectionPolicy)(nil)).Elem()
}

func (i AviatrixSegmentationNetworkDomainConnectionPolicyMap) ToAviatrixSegmentationNetworkDomainConnectionPolicyMapOutput() AviatrixSegmentationNetworkDomainConnectionPolicyMapOutput {
	return i.ToAviatrixSegmentationNetworkDomainConnectionPolicyMapOutputWithContext(context.Background())
}

func (i AviatrixSegmentationNetworkDomainConnectionPolicyMap) ToAviatrixSegmentationNetworkDomainConnectionPolicyMapOutputWithContext(ctx context.Context) AviatrixSegmentationNetworkDomainConnectionPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixSegmentationNetworkDomainConnectionPolicyMapOutput)
}

type AviatrixSegmentationNetworkDomainConnectionPolicyOutput struct{ *pulumi.OutputState }

func (AviatrixSegmentationNetworkDomainConnectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixSegmentationNetworkDomainConnectionPolicy)(nil)).Elem()
}

func (o AviatrixSegmentationNetworkDomainConnectionPolicyOutput) ToAviatrixSegmentationNetworkDomainConnectionPolicyOutput() AviatrixSegmentationNetworkDomainConnectionPolicyOutput {
	return o
}

func (o AviatrixSegmentationNetworkDomainConnectionPolicyOutput) ToAviatrixSegmentationNetworkDomainConnectionPolicyOutputWithContext(ctx context.Context) AviatrixSegmentationNetworkDomainConnectionPolicyOutput {
	return o
}

// Name of network domain that will be connected to domain 2.
func (o AviatrixSegmentationNetworkDomainConnectionPolicyOutput) DomainName1() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixSegmentationNetworkDomainConnectionPolicy) pulumi.StringOutput { return v.DomainName1 }).(pulumi.StringOutput)
}

// Name of network domain that will be connected to domain 1.
func (o AviatrixSegmentationNetworkDomainConnectionPolicyOutput) DomainName2() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixSegmentationNetworkDomainConnectionPolicy) pulumi.StringOutput { return v.DomainName2 }).(pulumi.StringOutput)
}

type AviatrixSegmentationNetworkDomainConnectionPolicyArrayOutput struct{ *pulumi.OutputState }

func (AviatrixSegmentationNetworkDomainConnectionPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixSegmentationNetworkDomainConnectionPolicy)(nil)).Elem()
}

func (o AviatrixSegmentationNetworkDomainConnectionPolicyArrayOutput) ToAviatrixSegmentationNetworkDomainConnectionPolicyArrayOutput() AviatrixSegmentationNetworkDomainConnectionPolicyArrayOutput {
	return o
}

func (o AviatrixSegmentationNetworkDomainConnectionPolicyArrayOutput) ToAviatrixSegmentationNetworkDomainConnectionPolicyArrayOutputWithContext(ctx context.Context) AviatrixSegmentationNetworkDomainConnectionPolicyArrayOutput {
	return o
}

func (o AviatrixSegmentationNetworkDomainConnectionPolicyArrayOutput) Index(i pulumi.IntInput) AviatrixSegmentationNetworkDomainConnectionPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixSegmentationNetworkDomainConnectionPolicy {
		return vs[0].([]*AviatrixSegmentationNetworkDomainConnectionPolicy)[vs[1].(int)]
	}).(AviatrixSegmentationNetworkDomainConnectionPolicyOutput)
}

type AviatrixSegmentationNetworkDomainConnectionPolicyMapOutput struct{ *pulumi.OutputState }

func (AviatrixSegmentationNetworkDomainConnectionPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixSegmentationNetworkDomainConnectionPolicy)(nil)).Elem()
}

func (o AviatrixSegmentationNetworkDomainConnectionPolicyMapOutput) ToAviatrixSegmentationNetworkDomainConnectionPolicyMapOutput() AviatrixSegmentationNetworkDomainConnectionPolicyMapOutput {
	return o
}

func (o AviatrixSegmentationNetworkDomainConnectionPolicyMapOutput) ToAviatrixSegmentationNetworkDomainConnectionPolicyMapOutputWithContext(ctx context.Context) AviatrixSegmentationNetworkDomainConnectionPolicyMapOutput {
	return o
}

func (o AviatrixSegmentationNetworkDomainConnectionPolicyMapOutput) MapIndex(k pulumi.StringInput) AviatrixSegmentationNetworkDomainConnectionPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixSegmentationNetworkDomainConnectionPolicy {
		return vs[0].(map[string]*AviatrixSegmentationNetworkDomainConnectionPolicy)[vs[1].(string)]
	}).(AviatrixSegmentationNetworkDomainConnectionPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixSegmentationNetworkDomainConnectionPolicyInput)(nil)).Elem(), &AviatrixSegmentationNetworkDomainConnectionPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixSegmentationNetworkDomainConnectionPolicyArrayInput)(nil)).Elem(), AviatrixSegmentationNetworkDomainConnectionPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixSegmentationNetworkDomainConnectionPolicyMapInput)(nil)).Elem(), AviatrixSegmentationNetworkDomainConnectionPolicyMap{})
	pulumi.RegisterOutputType(AviatrixSegmentationNetworkDomainConnectionPolicyOutput{})
	pulumi.RegisterOutputType(AviatrixSegmentationNetworkDomainConnectionPolicyArrayOutput{})
	pulumi.RegisterOutputType(AviatrixSegmentationNetworkDomainConnectionPolicyMapOutput{})
}
