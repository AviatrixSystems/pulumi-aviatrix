// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aviatrix
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aviatrix = Pulumi.Aviatrix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create an Aviatrix Spoke Transit Attachment
    ///     var testAttachment = new Aviatrix.AviatrixSpokeTransitAttachment("testAttachment", new()
    ///     {
    ///         RouteTables = new[]
    ///         {
    ///             "rtb-737d540c",
    ///             "rtb-626d045c",
    ///         },
    ///         SpokeGwName = "spoke-gw",
    ///         TransitGwName = "transit-gw",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// **spoke_transit_attachment** can be imported using the `spoke_gw_name` and `transit_gw_name`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aviatrix:index/aviatrixSpokeTransitAttachment:AviatrixSpokeTransitAttachment test spoke_gw_name~transit_gw_name
    /// ```
    /// </summary>
    [AviatrixResourceType("aviatrix:index/aviatrixSpokeTransitAttachment:AviatrixSpokeTransitAttachment")]
    public partial class AviatrixSpokeTransitAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates whether the maximum amount of HPE tunnels will be created. Only valid when transit and spoke gateways are each launched in Insane Mode and in the same cloud type. Default value: true. Available as of provider version R2.22.2+.
        /// </summary>
        [Output("enableMaxPerformance")]
        public Output<bool?> EnableMaxPerformance { get; private set; } = null!;

        /// <summary>
        /// Learned routes will be propagated to these route tables. Example: ["rtb-212ff547","rtb-04539787"].
        /// </summary>
        [Output("routeTables")]
        public Output<ImmutableArray<string>> RouteTables { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the spoke gateway is BGP enabled or not.
        /// </summary>
        [Output("spokeBgpEnabled")]
        public Output<bool> SpokeBgpEnabled { get; private set; } = null!;

        /// <summary>
        /// Name of the spoke gateway to attach to transit network.
        /// </summary>
        [Output("spokeGwName")]
        public Output<string> SpokeGwName { get; private set; } = null!;

        /// <summary>
        /// Connection based AS Path Prepend. Valid only for BGP connection. Can only use the gateway's own local AS number, repeated up to 25 times. Applies on spoke_gateway_name. Available as of provider version R2.23+.
        /// </summary>
        [Output("spokePrependAsPaths")]
        public Output<ImmutableArray<string>> SpokePrependAsPaths { get; private set; } = null!;

        /// <summary>
        /// Name of the transit gateway to attach the spoke gateway to.
        /// </summary>
        [Output("transitGwName")]
        public Output<string> TransitGwName { get; private set; } = null!;

        /// <summary>
        /// Connection based AS Path Prepend. Valid only for BGP connection. Can only use the gateway's own local AS number, repeated up to 25 times. Applies on transit_gateway_name. Available as of provider version R2.23+.
        /// </summary>
        [Output("transitPrependAsPaths")]
        public Output<ImmutableArray<string>> TransitPrependAsPaths { get; private set; } = null!;


        /// <summary>
        /// Create a AviatrixSpokeTransitAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AviatrixSpokeTransitAttachment(string name, AviatrixSpokeTransitAttachmentArgs args, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixSpokeTransitAttachment:AviatrixSpokeTransitAttachment", name, args ?? new AviatrixSpokeTransitAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AviatrixSpokeTransitAttachment(string name, Input<string> id, AviatrixSpokeTransitAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixSpokeTransitAttachment:AviatrixSpokeTransitAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/astipkovits",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AviatrixSpokeTransitAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AviatrixSpokeTransitAttachment Get(string name, Input<string> id, AviatrixSpokeTransitAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new AviatrixSpokeTransitAttachment(name, id, state, options);
        }
    }

    public sealed class AviatrixSpokeTransitAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether the maximum amount of HPE tunnels will be created. Only valid when transit and spoke gateways are each launched in Insane Mode and in the same cloud type. Default value: true. Available as of provider version R2.22.2+.
        /// </summary>
        [Input("enableMaxPerformance")]
        public Input<bool>? EnableMaxPerformance { get; set; }

        [Input("routeTables")]
        private InputList<string>? _routeTables;

        /// <summary>
        /// Learned routes will be propagated to these route tables. Example: ["rtb-212ff547","rtb-04539787"].
        /// </summary>
        public InputList<string> RouteTables
        {
            get => _routeTables ?? (_routeTables = new InputList<string>());
            set => _routeTables = value;
        }

        /// <summary>
        /// Name of the spoke gateway to attach to transit network.
        /// </summary>
        [Input("spokeGwName", required: true)]
        public Input<string> SpokeGwName { get; set; } = null!;

        [Input("spokePrependAsPaths")]
        private InputList<string>? _spokePrependAsPaths;

        /// <summary>
        /// Connection based AS Path Prepend. Valid only for BGP connection. Can only use the gateway's own local AS number, repeated up to 25 times. Applies on spoke_gateway_name. Available as of provider version R2.23+.
        /// </summary>
        public InputList<string> SpokePrependAsPaths
        {
            get => _spokePrependAsPaths ?? (_spokePrependAsPaths = new InputList<string>());
            set => _spokePrependAsPaths = value;
        }

        /// <summary>
        /// Name of the transit gateway to attach the spoke gateway to.
        /// </summary>
        [Input("transitGwName", required: true)]
        public Input<string> TransitGwName { get; set; } = null!;

        [Input("transitPrependAsPaths")]
        private InputList<string>? _transitPrependAsPaths;

        /// <summary>
        /// Connection based AS Path Prepend. Valid only for BGP connection. Can only use the gateway's own local AS number, repeated up to 25 times. Applies on transit_gateway_name. Available as of provider version R2.23+.
        /// </summary>
        public InputList<string> TransitPrependAsPaths
        {
            get => _transitPrependAsPaths ?? (_transitPrependAsPaths = new InputList<string>());
            set => _transitPrependAsPaths = value;
        }

        public AviatrixSpokeTransitAttachmentArgs()
        {
        }
        public static new AviatrixSpokeTransitAttachmentArgs Empty => new AviatrixSpokeTransitAttachmentArgs();
    }

    public sealed class AviatrixSpokeTransitAttachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether the maximum amount of HPE tunnels will be created. Only valid when transit and spoke gateways are each launched in Insane Mode and in the same cloud type. Default value: true. Available as of provider version R2.22.2+.
        /// </summary>
        [Input("enableMaxPerformance")]
        public Input<bool>? EnableMaxPerformance { get; set; }

        [Input("routeTables")]
        private InputList<string>? _routeTables;

        /// <summary>
        /// Learned routes will be propagated to these route tables. Example: ["rtb-212ff547","rtb-04539787"].
        /// </summary>
        public InputList<string> RouteTables
        {
            get => _routeTables ?? (_routeTables = new InputList<string>());
            set => _routeTables = value;
        }

        /// <summary>
        /// Indicates whether the spoke gateway is BGP enabled or not.
        /// </summary>
        [Input("spokeBgpEnabled")]
        public Input<bool>? SpokeBgpEnabled { get; set; }

        /// <summary>
        /// Name of the spoke gateway to attach to transit network.
        /// </summary>
        [Input("spokeGwName")]
        public Input<string>? SpokeGwName { get; set; }

        [Input("spokePrependAsPaths")]
        private InputList<string>? _spokePrependAsPaths;

        /// <summary>
        /// Connection based AS Path Prepend. Valid only for BGP connection. Can only use the gateway's own local AS number, repeated up to 25 times. Applies on spoke_gateway_name. Available as of provider version R2.23+.
        /// </summary>
        public InputList<string> SpokePrependAsPaths
        {
            get => _spokePrependAsPaths ?? (_spokePrependAsPaths = new InputList<string>());
            set => _spokePrependAsPaths = value;
        }

        /// <summary>
        /// Name of the transit gateway to attach the spoke gateway to.
        /// </summary>
        [Input("transitGwName")]
        public Input<string>? TransitGwName { get; set; }

        [Input("transitPrependAsPaths")]
        private InputList<string>? _transitPrependAsPaths;

        /// <summary>
        /// Connection based AS Path Prepend. Valid only for BGP connection. Can only use the gateway's own local AS number, repeated up to 25 times. Applies on transit_gateway_name. Available as of provider version R2.23+.
        /// </summary>
        public InputList<string> TransitPrependAsPaths
        {
            get => _transitPrependAsPaths ?? (_transitPrependAsPaths = new InputList<string>());
            set => _transitPrependAsPaths = value;
        }

        public AviatrixSpokeTransitAttachmentState()
        {
        }
        public static new AviatrixSpokeTransitAttachmentState Empty => new AviatrixSpokeTransitAttachmentState();
    }
}
