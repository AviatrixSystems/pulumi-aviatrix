// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aviatrix
{
    [AviatrixResourceType("aviatrix:index/aviatrixEdgeSpoke:AviatrixEdgeSpoke")]
    public partial class AviatrixEdgeSpoke : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Approved learned CIDRs for BGP Spoke Gateway.
        /// </summary>
        [Output("approvedLearnedCidrs")]
        public Output<ImmutableArray<string>> ApprovedLearnedCidrs { get; private set; } = null!;

        /// <summary>
        /// BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.
        /// </summary>
        [Output("bgpHoldTime")]
        public Output<int?> BgpHoldTime { get; private set; } = null!;

        /// <summary>
        /// BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.
        /// </summary>
        [Output("bgpPollingTime")]
        public Output<int?> BgpPollingTime { get; private set; } = null!;

        /// <summary>
        /// DNS server IP.
        /// </summary>
        [Output("dnsServerIp")]
        public Output<string?> DnsServerIp { get; private set; } = null!;

        /// <summary>
        /// Enables Edge Active-Standby Mode.
        /// </summary>
        [Output("enableEdgeActiveStandby")]
        public Output<bool?> EnableEdgeActiveStandby { get; private set; } = null!;

        /// <summary>
        /// Enables Preemptive Mode for Edge Active-Standby, available only with Active-Standby enabled.
        /// </summary>
        [Output("enableEdgeActiveStandbyPreemptive")]
        public Output<bool?> EnableEdgeActiveStandbyPreemptive { get; private set; } = null!;

        /// <summary>
        /// Enable Edge transitive routing.
        /// </summary>
        [Output("enableEdgeTransitiveRouting")]
        public Output<bool?> EnableEdgeTransitiveRouting { get; private set; } = null!;

        /// <summary>
        /// Enable jumbo frame.
        /// </summary>
        [Output("enableJumboFrame")]
        public Output<bool?> EnableJumboFrame { get; private set; } = null!;

        /// <summary>
        /// Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.
        /// </summary>
        [Output("enableLearnedCidrsApproval")]
        public Output<bool?> EnableLearnedCidrsApproval { get; private set; } = null!;

        /// <summary>
        /// Enable management over private network.
        /// </summary>
        [Output("enableManagementOverPrivateNetwork")]
        public Output<bool?> EnableManagementOverPrivateNetwork { get; private set; } = null!;

        /// <summary>
        /// Enable preserve as path when advertising manual summary CIDRs on BGP spoke gateway.
        /// </summary>
        [Output("enablePreserveAsPath")]
        public Output<bool?> EnablePreserveAsPath { get; private set; } = null!;

        /// <summary>
        /// Edge as a Spoke name.
        /// </summary>
        [Output("gwName")]
        public Output<string> GwName { get; private set; } = null!;

        /// <summary>
        /// LAN interface IP/prefix.
        /// </summary>
        [Output("lanInterfaceIpPrefix")]
        public Output<string> LanInterfaceIpPrefix { get; private set; } = null!;

        /// <summary>
        /// The latitude of the Edge as a Spoke.
        /// </summary>
        [Output("latitude")]
        public Output<string> Latitude { get; private set; } = null!;

        /// <summary>
        /// Local AS number.
        /// </summary>
        [Output("localAsNumber")]
        public Output<string> LocalAsNumber { get; private set; } = null!;

        /// <summary>
        /// The longitude of the Edge as a Spoke.
        /// </summary>
        [Output("longitude")]
        public Output<string> Longitude { get; private set; } = null!;

        /// <summary>
        /// Management default gateway IP.
        /// </summary>
        [Output("managementDefaultGatewayIp")]
        public Output<string?> ManagementDefaultGatewayIp { get; private set; } = null!;

        /// <summary>
        /// Management egress gateway IP/prefix.
        /// </summary>
        [Output("managementEgressIpPrefix")]
        public Output<string?> ManagementEgressIpPrefix { get; private set; } = null!;

        /// <summary>
        /// Management interface configuration. Valid values: 'DHCP' and 'Static'.
        /// </summary>
        [Output("managementInterfaceConfig")]
        public Output<string> ManagementInterfaceConfig { get; private set; } = null!;

        /// <summary>
        /// Management interface IP/prefix.
        /// </summary>
        [Output("managementInterfaceIpPrefix")]
        public Output<string?> ManagementInterfaceIpPrefix { get; private set; } = null!;

        /// <summary>
        /// List of AS numbers to prepend gateway BGP AS_Path field.
        /// </summary>
        [Output("prependAsPaths")]
        public Output<ImmutableArray<string>> PrependAsPaths { get; private set; } = null!;

        /// <summary>
        /// Ethernet interface RX queue size.
        /// </summary>
        [Output("rxQueueSize")]
        public Output<string?> RxQueueSize { get; private set; } = null!;

        /// <summary>
        /// Secondary DNS server IP.
        /// </summary>
        [Output("secondaryDnsServerIp")]
        public Output<string?> SecondaryDnsServerIp { get; private set; } = null!;

        /// <summary>
        /// Site ID.
        /// </summary>
        [Output("siteId")]
        public Output<string> SiteId { get; private set; } = null!;

        /// <summary>
        /// Intended CIDR list to be advertised to external BGP router.
        /// </summary>
        [Output("spokeBgpManualAdvertiseCidrs")]
        public Output<ImmutableArray<string>> SpokeBgpManualAdvertiseCidrs { get; private set; } = null!;

        /// <summary>
        /// State of Edge as a Spoke.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// WAN default gateway IP.
        /// </summary>
        [Output("wanDefaultGatewayIp")]
        public Output<string> WanDefaultGatewayIp { get; private set; } = null!;

        /// <summary>
        /// WAN interface IP/prefix.
        /// </summary>
        [Output("wanInterfaceIpPrefix")]
        public Output<string> WanInterfaceIpPrefix { get; private set; } = null!;

        /// <summary>
        /// WAN interface public IP.
        /// </summary>
        [Output("wanPublicIp")]
        public Output<string> WanPublicIp { get; private set; } = null!;

        /// <summary>
        /// The location where the Edge as a CaaG ZTP file will be stored.
        /// </summary>
        [Output("ztpFileDownloadPath")]
        public Output<string> ZtpFileDownloadPath { get; private set; } = null!;

        /// <summary>
        /// ZTP file type.
        /// </summary>
        [Output("ztpFileType")]
        public Output<string> ZtpFileType { get; private set; } = null!;


        /// <summary>
        /// Create a AviatrixEdgeSpoke resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AviatrixEdgeSpoke(string name, AviatrixEdgeSpokeArgs args, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixEdgeSpoke:AviatrixEdgeSpoke", name, args ?? new AviatrixEdgeSpokeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AviatrixEdgeSpoke(string name, Input<string> id, AviatrixEdgeSpokeState? state = null, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixEdgeSpoke:AviatrixEdgeSpoke", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/astipkovits",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AviatrixEdgeSpoke resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AviatrixEdgeSpoke Get(string name, Input<string> id, AviatrixEdgeSpokeState? state = null, CustomResourceOptions? options = null)
        {
            return new AviatrixEdgeSpoke(name, id, state, options);
        }
    }

    public sealed class AviatrixEdgeSpokeArgs : global::Pulumi.ResourceArgs
    {
        [Input("approvedLearnedCidrs")]
        private InputList<string>? _approvedLearnedCidrs;

        /// <summary>
        /// Approved learned CIDRs for BGP Spoke Gateway.
        /// </summary>
        public InputList<string> ApprovedLearnedCidrs
        {
            get => _approvedLearnedCidrs ?? (_approvedLearnedCidrs = new InputList<string>());
            set => _approvedLearnedCidrs = value;
        }

        /// <summary>
        /// BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.
        /// </summary>
        [Input("bgpHoldTime")]
        public Input<int>? BgpHoldTime { get; set; }

        /// <summary>
        /// BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.
        /// </summary>
        [Input("bgpPollingTime")]
        public Input<int>? BgpPollingTime { get; set; }

        /// <summary>
        /// DNS server IP.
        /// </summary>
        [Input("dnsServerIp")]
        public Input<string>? DnsServerIp { get; set; }

        /// <summary>
        /// Enables Edge Active-Standby Mode.
        /// </summary>
        [Input("enableEdgeActiveStandby")]
        public Input<bool>? EnableEdgeActiveStandby { get; set; }

        /// <summary>
        /// Enables Preemptive Mode for Edge Active-Standby, available only with Active-Standby enabled.
        /// </summary>
        [Input("enableEdgeActiveStandbyPreemptive")]
        public Input<bool>? EnableEdgeActiveStandbyPreemptive { get; set; }

        /// <summary>
        /// Enable Edge transitive routing.
        /// </summary>
        [Input("enableEdgeTransitiveRouting")]
        public Input<bool>? EnableEdgeTransitiveRouting { get; set; }

        /// <summary>
        /// Enable jumbo frame.
        /// </summary>
        [Input("enableJumboFrame")]
        public Input<bool>? EnableJumboFrame { get; set; }

        /// <summary>
        /// Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.
        /// </summary>
        [Input("enableLearnedCidrsApproval")]
        public Input<bool>? EnableLearnedCidrsApproval { get; set; }

        /// <summary>
        /// Enable management over private network.
        /// </summary>
        [Input("enableManagementOverPrivateNetwork")]
        public Input<bool>? EnableManagementOverPrivateNetwork { get; set; }

        /// <summary>
        /// Enable preserve as path when advertising manual summary CIDRs on BGP spoke gateway.
        /// </summary>
        [Input("enablePreserveAsPath")]
        public Input<bool>? EnablePreserveAsPath { get; set; }

        /// <summary>
        /// Edge as a Spoke name.
        /// </summary>
        [Input("gwName", required: true)]
        public Input<string> GwName { get; set; } = null!;

        /// <summary>
        /// LAN interface IP/prefix.
        /// </summary>
        [Input("lanInterfaceIpPrefix", required: true)]
        public Input<string> LanInterfaceIpPrefix { get; set; } = null!;

        /// <summary>
        /// The latitude of the Edge as a Spoke.
        /// </summary>
        [Input("latitude")]
        public Input<string>? Latitude { get; set; }

        /// <summary>
        /// Local AS number.
        /// </summary>
        [Input("localAsNumber")]
        public Input<string>? LocalAsNumber { get; set; }

        /// <summary>
        /// The longitude of the Edge as a Spoke.
        /// </summary>
        [Input("longitude")]
        public Input<string>? Longitude { get; set; }

        /// <summary>
        /// Management default gateway IP.
        /// </summary>
        [Input("managementDefaultGatewayIp")]
        public Input<string>? ManagementDefaultGatewayIp { get; set; }

        /// <summary>
        /// Management egress gateway IP/prefix.
        /// </summary>
        [Input("managementEgressIpPrefix")]
        public Input<string>? ManagementEgressIpPrefix { get; set; }

        /// <summary>
        /// Management interface configuration. Valid values: 'DHCP' and 'Static'.
        /// </summary>
        [Input("managementInterfaceConfig", required: true)]
        public Input<string> ManagementInterfaceConfig { get; set; } = null!;

        /// <summary>
        /// Management interface IP/prefix.
        /// </summary>
        [Input("managementInterfaceIpPrefix")]
        public Input<string>? ManagementInterfaceIpPrefix { get; set; }

        [Input("prependAsPaths")]
        private InputList<string>? _prependAsPaths;

        /// <summary>
        /// List of AS numbers to prepend gateway BGP AS_Path field.
        /// </summary>
        public InputList<string> PrependAsPaths
        {
            get => _prependAsPaths ?? (_prependAsPaths = new InputList<string>());
            set => _prependAsPaths = value;
        }

        /// <summary>
        /// Ethernet interface RX queue size.
        /// </summary>
        [Input("rxQueueSize")]
        public Input<string>? RxQueueSize { get; set; }

        /// <summary>
        /// Secondary DNS server IP.
        /// </summary>
        [Input("secondaryDnsServerIp")]
        public Input<string>? SecondaryDnsServerIp { get; set; }

        /// <summary>
        /// Site ID.
        /// </summary>
        [Input("siteId", required: true)]
        public Input<string> SiteId { get; set; } = null!;

        [Input("spokeBgpManualAdvertiseCidrs")]
        private InputList<string>? _spokeBgpManualAdvertiseCidrs;

        /// <summary>
        /// Intended CIDR list to be advertised to external BGP router.
        /// </summary>
        public InputList<string> SpokeBgpManualAdvertiseCidrs
        {
            get => _spokeBgpManualAdvertiseCidrs ?? (_spokeBgpManualAdvertiseCidrs = new InputList<string>());
            set => _spokeBgpManualAdvertiseCidrs = value;
        }

        /// <summary>
        /// WAN default gateway IP.
        /// </summary>
        [Input("wanDefaultGatewayIp", required: true)]
        public Input<string> WanDefaultGatewayIp { get; set; } = null!;

        /// <summary>
        /// WAN interface IP/prefix.
        /// </summary>
        [Input("wanInterfaceIpPrefix", required: true)]
        public Input<string> WanInterfaceIpPrefix { get; set; } = null!;

        /// <summary>
        /// WAN interface public IP.
        /// </summary>
        [Input("wanPublicIp")]
        public Input<string>? WanPublicIp { get; set; }

        /// <summary>
        /// The location where the Edge as a CaaG ZTP file will be stored.
        /// </summary>
        [Input("ztpFileDownloadPath", required: true)]
        public Input<string> ZtpFileDownloadPath { get; set; } = null!;

        /// <summary>
        /// ZTP file type.
        /// </summary>
        [Input("ztpFileType", required: true)]
        public Input<string> ZtpFileType { get; set; } = null!;

        public AviatrixEdgeSpokeArgs()
        {
        }
        public static new AviatrixEdgeSpokeArgs Empty => new AviatrixEdgeSpokeArgs();
    }

    public sealed class AviatrixEdgeSpokeState : global::Pulumi.ResourceArgs
    {
        [Input("approvedLearnedCidrs")]
        private InputList<string>? _approvedLearnedCidrs;

        /// <summary>
        /// Approved learned CIDRs for BGP Spoke Gateway.
        /// </summary>
        public InputList<string> ApprovedLearnedCidrs
        {
            get => _approvedLearnedCidrs ?? (_approvedLearnedCidrs = new InputList<string>());
            set => _approvedLearnedCidrs = value;
        }

        /// <summary>
        /// BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.
        /// </summary>
        [Input("bgpHoldTime")]
        public Input<int>? BgpHoldTime { get; set; }

        /// <summary>
        /// BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.
        /// </summary>
        [Input("bgpPollingTime")]
        public Input<int>? BgpPollingTime { get; set; }

        /// <summary>
        /// DNS server IP.
        /// </summary>
        [Input("dnsServerIp")]
        public Input<string>? DnsServerIp { get; set; }

        /// <summary>
        /// Enables Edge Active-Standby Mode.
        /// </summary>
        [Input("enableEdgeActiveStandby")]
        public Input<bool>? EnableEdgeActiveStandby { get; set; }

        /// <summary>
        /// Enables Preemptive Mode for Edge Active-Standby, available only with Active-Standby enabled.
        /// </summary>
        [Input("enableEdgeActiveStandbyPreemptive")]
        public Input<bool>? EnableEdgeActiveStandbyPreemptive { get; set; }

        /// <summary>
        /// Enable Edge transitive routing.
        /// </summary>
        [Input("enableEdgeTransitiveRouting")]
        public Input<bool>? EnableEdgeTransitiveRouting { get; set; }

        /// <summary>
        /// Enable jumbo frame.
        /// </summary>
        [Input("enableJumboFrame")]
        public Input<bool>? EnableJumboFrame { get; set; }

        /// <summary>
        /// Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.
        /// </summary>
        [Input("enableLearnedCidrsApproval")]
        public Input<bool>? EnableLearnedCidrsApproval { get; set; }

        /// <summary>
        /// Enable management over private network.
        /// </summary>
        [Input("enableManagementOverPrivateNetwork")]
        public Input<bool>? EnableManagementOverPrivateNetwork { get; set; }

        /// <summary>
        /// Enable preserve as path when advertising manual summary CIDRs on BGP spoke gateway.
        /// </summary>
        [Input("enablePreserveAsPath")]
        public Input<bool>? EnablePreserveAsPath { get; set; }

        /// <summary>
        /// Edge as a Spoke name.
        /// </summary>
        [Input("gwName")]
        public Input<string>? GwName { get; set; }

        /// <summary>
        /// LAN interface IP/prefix.
        /// </summary>
        [Input("lanInterfaceIpPrefix")]
        public Input<string>? LanInterfaceIpPrefix { get; set; }

        /// <summary>
        /// The latitude of the Edge as a Spoke.
        /// </summary>
        [Input("latitude")]
        public Input<string>? Latitude { get; set; }

        /// <summary>
        /// Local AS number.
        /// </summary>
        [Input("localAsNumber")]
        public Input<string>? LocalAsNumber { get; set; }

        /// <summary>
        /// The longitude of the Edge as a Spoke.
        /// </summary>
        [Input("longitude")]
        public Input<string>? Longitude { get; set; }

        /// <summary>
        /// Management default gateway IP.
        /// </summary>
        [Input("managementDefaultGatewayIp")]
        public Input<string>? ManagementDefaultGatewayIp { get; set; }

        /// <summary>
        /// Management egress gateway IP/prefix.
        /// </summary>
        [Input("managementEgressIpPrefix")]
        public Input<string>? ManagementEgressIpPrefix { get; set; }

        /// <summary>
        /// Management interface configuration. Valid values: 'DHCP' and 'Static'.
        /// </summary>
        [Input("managementInterfaceConfig")]
        public Input<string>? ManagementInterfaceConfig { get; set; }

        /// <summary>
        /// Management interface IP/prefix.
        /// </summary>
        [Input("managementInterfaceIpPrefix")]
        public Input<string>? ManagementInterfaceIpPrefix { get; set; }

        [Input("prependAsPaths")]
        private InputList<string>? _prependAsPaths;

        /// <summary>
        /// List of AS numbers to prepend gateway BGP AS_Path field.
        /// </summary>
        public InputList<string> PrependAsPaths
        {
            get => _prependAsPaths ?? (_prependAsPaths = new InputList<string>());
            set => _prependAsPaths = value;
        }

        /// <summary>
        /// Ethernet interface RX queue size.
        /// </summary>
        [Input("rxQueueSize")]
        public Input<string>? RxQueueSize { get; set; }

        /// <summary>
        /// Secondary DNS server IP.
        /// </summary>
        [Input("secondaryDnsServerIp")]
        public Input<string>? SecondaryDnsServerIp { get; set; }

        /// <summary>
        /// Site ID.
        /// </summary>
        [Input("siteId")]
        public Input<string>? SiteId { get; set; }

        [Input("spokeBgpManualAdvertiseCidrs")]
        private InputList<string>? _spokeBgpManualAdvertiseCidrs;

        /// <summary>
        /// Intended CIDR list to be advertised to external BGP router.
        /// </summary>
        public InputList<string> SpokeBgpManualAdvertiseCidrs
        {
            get => _spokeBgpManualAdvertiseCidrs ?? (_spokeBgpManualAdvertiseCidrs = new InputList<string>());
            set => _spokeBgpManualAdvertiseCidrs = value;
        }

        /// <summary>
        /// State of Edge as a Spoke.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// WAN default gateway IP.
        /// </summary>
        [Input("wanDefaultGatewayIp")]
        public Input<string>? WanDefaultGatewayIp { get; set; }

        /// <summary>
        /// WAN interface IP/prefix.
        /// </summary>
        [Input("wanInterfaceIpPrefix")]
        public Input<string>? WanInterfaceIpPrefix { get; set; }

        /// <summary>
        /// WAN interface public IP.
        /// </summary>
        [Input("wanPublicIp")]
        public Input<string>? WanPublicIp { get; set; }

        /// <summary>
        /// The location where the Edge as a CaaG ZTP file will be stored.
        /// </summary>
        [Input("ztpFileDownloadPath")]
        public Input<string>? ZtpFileDownloadPath { get; set; }

        /// <summary>
        /// ZTP file type.
        /// </summary>
        [Input("ztpFileType")]
        public Input<string>? ZtpFileType { get; set; }

        public AviatrixEdgeSpokeState()
        {
        }
        public static new AviatrixEdgeSpokeState Empty => new AviatrixEdgeSpokeState();
    }
}
