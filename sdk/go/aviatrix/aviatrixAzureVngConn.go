// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **aviatrix_azure_vng_conn** resource allows the creation and management of the connection between Aviatrix Transit Gateway and Azure VNG.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/astipkovits/pulumi-aviatrix/sdk/go/aviatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aviatrix.NewAviatrixAzureVngConn(ctx, "test", &aviatrix.AviatrixAzureVngConnArgs{
//				ConnectionName:     pulumi.String("connection"),
//				PrimaryGatewayName: pulumi.String("primary-gateway"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// **aviatrix_azure_vng_conn** can be imported using the `connection_name`, e.g.
//
// ```sh
//
//	$ pulumi import aviatrix:index/aviatrixAzureVngConn:AviatrixAzureVngConn test connection
//
// ```
type AviatrixAzureVngConn struct {
	pulumi.CustomResourceState

	// The status of the connection.
	Attached pulumi.BoolOutput `pulumi:"attached"`
	// Connection name.
	ConnectionName pulumi.StringOutput `pulumi:"connectionName"`
	// Primary Aviatrix transit gateway name.
	PrimaryGatewayName pulumi.StringOutput `pulumi:"primaryGatewayName"`
	// Name of Azure VNG.
	VngName pulumi.StringOutput `pulumi:"vngName"`
	// VPC ID.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewAviatrixAzureVngConn registers a new resource with the given unique name, arguments, and options.
func NewAviatrixAzureVngConn(ctx *pulumi.Context,
	name string, args *AviatrixAzureVngConnArgs, opts ...pulumi.ResourceOption) (*AviatrixAzureVngConn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionName == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionName'")
	}
	if args.PrimaryGatewayName == nil {
		return nil, errors.New("invalid value for required argument 'PrimaryGatewayName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixAzureVngConn
	err := ctx.RegisterResource("aviatrix:index/aviatrixAzureVngConn:AviatrixAzureVngConn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixAzureVngConn gets an existing AviatrixAzureVngConn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixAzureVngConn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixAzureVngConnState, opts ...pulumi.ResourceOption) (*AviatrixAzureVngConn, error) {
	var resource AviatrixAzureVngConn
	err := ctx.ReadResource("aviatrix:index/aviatrixAzureVngConn:AviatrixAzureVngConn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixAzureVngConn resources.
type aviatrixAzureVngConnState struct {
	// The status of the connection.
	Attached *bool `pulumi:"attached"`
	// Connection name.
	ConnectionName *string `pulumi:"connectionName"`
	// Primary Aviatrix transit gateway name.
	PrimaryGatewayName *string `pulumi:"primaryGatewayName"`
	// Name of Azure VNG.
	VngName *string `pulumi:"vngName"`
	// VPC ID.
	VpcId *string `pulumi:"vpcId"`
}

type AviatrixAzureVngConnState struct {
	// The status of the connection.
	Attached pulumi.BoolPtrInput
	// Connection name.
	ConnectionName pulumi.StringPtrInput
	// Primary Aviatrix transit gateway name.
	PrimaryGatewayName pulumi.StringPtrInput
	// Name of Azure VNG.
	VngName pulumi.StringPtrInput
	// VPC ID.
	VpcId pulumi.StringPtrInput
}

func (AviatrixAzureVngConnState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixAzureVngConnState)(nil)).Elem()
}

type aviatrixAzureVngConnArgs struct {
	// Connection name.
	ConnectionName string `pulumi:"connectionName"`
	// Primary Aviatrix transit gateway name.
	PrimaryGatewayName string `pulumi:"primaryGatewayName"`
}

// The set of arguments for constructing a AviatrixAzureVngConn resource.
type AviatrixAzureVngConnArgs struct {
	// Connection name.
	ConnectionName pulumi.StringInput
	// Primary Aviatrix transit gateway name.
	PrimaryGatewayName pulumi.StringInput
}

func (AviatrixAzureVngConnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixAzureVngConnArgs)(nil)).Elem()
}

type AviatrixAzureVngConnInput interface {
	pulumi.Input

	ToAviatrixAzureVngConnOutput() AviatrixAzureVngConnOutput
	ToAviatrixAzureVngConnOutputWithContext(ctx context.Context) AviatrixAzureVngConnOutput
}

func (*AviatrixAzureVngConn) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixAzureVngConn)(nil)).Elem()
}

func (i *AviatrixAzureVngConn) ToAviatrixAzureVngConnOutput() AviatrixAzureVngConnOutput {
	return i.ToAviatrixAzureVngConnOutputWithContext(context.Background())
}

func (i *AviatrixAzureVngConn) ToAviatrixAzureVngConnOutputWithContext(ctx context.Context) AviatrixAzureVngConnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAzureVngConnOutput)
}

// AviatrixAzureVngConnArrayInput is an input type that accepts AviatrixAzureVngConnArray and AviatrixAzureVngConnArrayOutput values.
// You can construct a concrete instance of `AviatrixAzureVngConnArrayInput` via:
//
//	AviatrixAzureVngConnArray{ AviatrixAzureVngConnArgs{...} }
type AviatrixAzureVngConnArrayInput interface {
	pulumi.Input

	ToAviatrixAzureVngConnArrayOutput() AviatrixAzureVngConnArrayOutput
	ToAviatrixAzureVngConnArrayOutputWithContext(context.Context) AviatrixAzureVngConnArrayOutput
}

type AviatrixAzureVngConnArray []AviatrixAzureVngConnInput

func (AviatrixAzureVngConnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixAzureVngConn)(nil)).Elem()
}

func (i AviatrixAzureVngConnArray) ToAviatrixAzureVngConnArrayOutput() AviatrixAzureVngConnArrayOutput {
	return i.ToAviatrixAzureVngConnArrayOutputWithContext(context.Background())
}

func (i AviatrixAzureVngConnArray) ToAviatrixAzureVngConnArrayOutputWithContext(ctx context.Context) AviatrixAzureVngConnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAzureVngConnArrayOutput)
}

// AviatrixAzureVngConnMapInput is an input type that accepts AviatrixAzureVngConnMap and AviatrixAzureVngConnMapOutput values.
// You can construct a concrete instance of `AviatrixAzureVngConnMapInput` via:
//
//	AviatrixAzureVngConnMap{ "key": AviatrixAzureVngConnArgs{...} }
type AviatrixAzureVngConnMapInput interface {
	pulumi.Input

	ToAviatrixAzureVngConnMapOutput() AviatrixAzureVngConnMapOutput
	ToAviatrixAzureVngConnMapOutputWithContext(context.Context) AviatrixAzureVngConnMapOutput
}

type AviatrixAzureVngConnMap map[string]AviatrixAzureVngConnInput

func (AviatrixAzureVngConnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixAzureVngConn)(nil)).Elem()
}

func (i AviatrixAzureVngConnMap) ToAviatrixAzureVngConnMapOutput() AviatrixAzureVngConnMapOutput {
	return i.ToAviatrixAzureVngConnMapOutputWithContext(context.Background())
}

func (i AviatrixAzureVngConnMap) ToAviatrixAzureVngConnMapOutputWithContext(ctx context.Context) AviatrixAzureVngConnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixAzureVngConnMapOutput)
}

type AviatrixAzureVngConnOutput struct{ *pulumi.OutputState }

func (AviatrixAzureVngConnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixAzureVngConn)(nil)).Elem()
}

func (o AviatrixAzureVngConnOutput) ToAviatrixAzureVngConnOutput() AviatrixAzureVngConnOutput {
	return o
}

func (o AviatrixAzureVngConnOutput) ToAviatrixAzureVngConnOutputWithContext(ctx context.Context) AviatrixAzureVngConnOutput {
	return o
}

// The status of the connection.
func (o AviatrixAzureVngConnOutput) Attached() pulumi.BoolOutput {
	return o.ApplyT(func(v *AviatrixAzureVngConn) pulumi.BoolOutput { return v.Attached }).(pulumi.BoolOutput)
}

// Connection name.
func (o AviatrixAzureVngConnOutput) ConnectionName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixAzureVngConn) pulumi.StringOutput { return v.ConnectionName }).(pulumi.StringOutput)
}

// Primary Aviatrix transit gateway name.
func (o AviatrixAzureVngConnOutput) PrimaryGatewayName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixAzureVngConn) pulumi.StringOutput { return v.PrimaryGatewayName }).(pulumi.StringOutput)
}

// Name of Azure VNG.
func (o AviatrixAzureVngConnOutput) VngName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixAzureVngConn) pulumi.StringOutput { return v.VngName }).(pulumi.StringOutput)
}

// VPC ID.
func (o AviatrixAzureVngConnOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixAzureVngConn) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type AviatrixAzureVngConnArrayOutput struct{ *pulumi.OutputState }

func (AviatrixAzureVngConnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixAzureVngConn)(nil)).Elem()
}

func (o AviatrixAzureVngConnArrayOutput) ToAviatrixAzureVngConnArrayOutput() AviatrixAzureVngConnArrayOutput {
	return o
}

func (o AviatrixAzureVngConnArrayOutput) ToAviatrixAzureVngConnArrayOutputWithContext(ctx context.Context) AviatrixAzureVngConnArrayOutput {
	return o
}

func (o AviatrixAzureVngConnArrayOutput) Index(i pulumi.IntInput) AviatrixAzureVngConnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixAzureVngConn {
		return vs[0].([]*AviatrixAzureVngConn)[vs[1].(int)]
	}).(AviatrixAzureVngConnOutput)
}

type AviatrixAzureVngConnMapOutput struct{ *pulumi.OutputState }

func (AviatrixAzureVngConnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixAzureVngConn)(nil)).Elem()
}

func (o AviatrixAzureVngConnMapOutput) ToAviatrixAzureVngConnMapOutput() AviatrixAzureVngConnMapOutput {
	return o
}

func (o AviatrixAzureVngConnMapOutput) ToAviatrixAzureVngConnMapOutputWithContext(ctx context.Context) AviatrixAzureVngConnMapOutput {
	return o
}

func (o AviatrixAzureVngConnMapOutput) MapIndex(k pulumi.StringInput) AviatrixAzureVngConnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixAzureVngConn {
		return vs[0].(map[string]*AviatrixAzureVngConn)[vs[1].(string)]
	}).(AviatrixAzureVngConnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAzureVngConnInput)(nil)).Elem(), &AviatrixAzureVngConn{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAzureVngConnArrayInput)(nil)).Elem(), AviatrixAzureVngConnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixAzureVngConnMapInput)(nil)).Elem(), AviatrixAzureVngConnMap{})
	pulumi.RegisterOutputType(AviatrixAzureVngConnOutput{})
	pulumi.RegisterOutputType(AviatrixAzureVngConnArrayOutput{})
	pulumi.RegisterOutputType(AviatrixAzureVngConnMapOutput{})
}
