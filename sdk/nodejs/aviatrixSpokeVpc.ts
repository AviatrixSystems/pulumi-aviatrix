// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AviatrixSpokeVpc extends pulumi.CustomResource {
    /**
     * Get an existing AviatrixSpokeVpc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AviatrixSpokeVpcState, opts?: pulumi.CustomResourceOptions): AviatrixSpokeVpc {
        return new AviatrixSpokeVpc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/aviatrixSpokeVpc:AviatrixSpokeVpc';

    /**
     * Returns true if the given object is an instance of AviatrixSpokeVpc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AviatrixSpokeVpc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AviatrixSpokeVpc.__pulumiType;
    }

    /**
     * This parameter represents the name of a Cloud-Account in Aviatrix controller.
     */
    public readonly accountName!: pulumi.Output<string>;
    /**
     * Cloud instance ID.
     */
    public /*out*/ readonly cloudInstanceId!: pulumi.Output<string>;
    /**
     * Type of cloud service provider.
     */
    public readonly cloudType!: pulumi.Output<number>;
    /**
     * Specify whether enabling NAT feature on the gateway or not.
     */
    public readonly enableNat!: pulumi.Output<string | undefined>;
    /**
     * Name of the gateway which is going to be created.
     */
    public readonly gwName!: pulumi.Output<string>;
    /**
     * HA Gateway Size.
     */
    public readonly haGwSize!: pulumi.Output<string | undefined>;
    /**
     * HA Subnet. Required if enabling HA for AWS/Azure.
     */
    public readonly haSubnet!: pulumi.Output<string | undefined>;
    /**
     * HA Zone. Required if enabling HA for GCP.
     */
    public readonly haZone!: pulumi.Output<string | undefined>;
    /**
     * Set to 'enabled' if this feature is desired.
     */
    public readonly singleAzHa!: pulumi.Output<string | undefined>;
    /**
     * Public Subnet Info.
     */
    public readonly subnet!: pulumi.Output<string>;
    /**
     * Instance tag of cloud provider.
     */
    public readonly tagLists!: pulumi.Output<string[] | undefined>;
    /**
     * Specify the transit Gateway.
     */
    public readonly transitGw!: pulumi.Output<string | undefined>;
    /**
     * VPC-ID/VNet-Name of cloud provider.
     */
    public readonly vpcId!: pulumi.Output<string>;
    /**
     * Region of cloud provider.
     */
    public readonly vpcReg!: pulumi.Output<string>;
    /**
     * Size of the gateway instance.
     */
    public readonly vpcSize!: pulumi.Output<string>;

    /**
     * Create a AviatrixSpokeVpc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AviatrixSpokeVpcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AviatrixSpokeVpcArgs | AviatrixSpokeVpcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AviatrixSpokeVpcState | undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["cloudInstanceId"] = state ? state.cloudInstanceId : undefined;
            resourceInputs["cloudType"] = state ? state.cloudType : undefined;
            resourceInputs["enableNat"] = state ? state.enableNat : undefined;
            resourceInputs["gwName"] = state ? state.gwName : undefined;
            resourceInputs["haGwSize"] = state ? state.haGwSize : undefined;
            resourceInputs["haSubnet"] = state ? state.haSubnet : undefined;
            resourceInputs["haZone"] = state ? state.haZone : undefined;
            resourceInputs["singleAzHa"] = state ? state.singleAzHa : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["tagLists"] = state ? state.tagLists : undefined;
            resourceInputs["transitGw"] = state ? state.transitGw : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vpcReg"] = state ? state.vpcReg : undefined;
            resourceInputs["vpcSize"] = state ? state.vpcSize : undefined;
        } else {
            const args = argsOrState as AviatrixSpokeVpcArgs | undefined;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.cloudType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudType'");
            }
            if ((!args || args.gwName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gwName'");
            }
            if ((!args || args.subnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnet'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if ((!args || args.vpcReg === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcReg'");
            }
            if ((!args || args.vpcSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcSize'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["cloudType"] = args ? args.cloudType : undefined;
            resourceInputs["enableNat"] = args ? args.enableNat : undefined;
            resourceInputs["gwName"] = args ? args.gwName : undefined;
            resourceInputs["haGwSize"] = args ? args.haGwSize : undefined;
            resourceInputs["haSubnet"] = args ? args.haSubnet : undefined;
            resourceInputs["haZone"] = args ? args.haZone : undefined;
            resourceInputs["singleAzHa"] = args ? args.singleAzHa : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["tagLists"] = args ? args.tagLists : undefined;
            resourceInputs["transitGw"] = args ? args.transitGw : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vpcReg"] = args ? args.vpcReg : undefined;
            resourceInputs["vpcSize"] = args ? args.vpcSize : undefined;
            resourceInputs["cloudInstanceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AviatrixSpokeVpc.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AviatrixSpokeVpc resources.
 */
export interface AviatrixSpokeVpcState {
    /**
     * This parameter represents the name of a Cloud-Account in Aviatrix controller.
     */
    accountName?: pulumi.Input<string>;
    /**
     * Cloud instance ID.
     */
    cloudInstanceId?: pulumi.Input<string>;
    /**
     * Type of cloud service provider.
     */
    cloudType?: pulumi.Input<number>;
    /**
     * Specify whether enabling NAT feature on the gateway or not.
     */
    enableNat?: pulumi.Input<string>;
    /**
     * Name of the gateway which is going to be created.
     */
    gwName?: pulumi.Input<string>;
    /**
     * HA Gateway Size.
     */
    haGwSize?: pulumi.Input<string>;
    /**
     * HA Subnet. Required if enabling HA for AWS/Azure.
     */
    haSubnet?: pulumi.Input<string>;
    /**
     * HA Zone. Required if enabling HA for GCP.
     */
    haZone?: pulumi.Input<string>;
    /**
     * Set to 'enabled' if this feature is desired.
     */
    singleAzHa?: pulumi.Input<string>;
    /**
     * Public Subnet Info.
     */
    subnet?: pulumi.Input<string>;
    /**
     * Instance tag of cloud provider.
     */
    tagLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify the transit Gateway.
     */
    transitGw?: pulumi.Input<string>;
    /**
     * VPC-ID/VNet-Name of cloud provider.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * Region of cloud provider.
     */
    vpcReg?: pulumi.Input<string>;
    /**
     * Size of the gateway instance.
     */
    vpcSize?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AviatrixSpokeVpc resource.
 */
export interface AviatrixSpokeVpcArgs {
    /**
     * This parameter represents the name of a Cloud-Account in Aviatrix controller.
     */
    accountName: pulumi.Input<string>;
    /**
     * Type of cloud service provider.
     */
    cloudType: pulumi.Input<number>;
    /**
     * Specify whether enabling NAT feature on the gateway or not.
     */
    enableNat?: pulumi.Input<string>;
    /**
     * Name of the gateway which is going to be created.
     */
    gwName: pulumi.Input<string>;
    /**
     * HA Gateway Size.
     */
    haGwSize?: pulumi.Input<string>;
    /**
     * HA Subnet. Required if enabling HA for AWS/Azure.
     */
    haSubnet?: pulumi.Input<string>;
    /**
     * HA Zone. Required if enabling HA for GCP.
     */
    haZone?: pulumi.Input<string>;
    /**
     * Set to 'enabled' if this feature is desired.
     */
    singleAzHa?: pulumi.Input<string>;
    /**
     * Public Subnet Info.
     */
    subnet: pulumi.Input<string>;
    /**
     * Instance tag of cloud provider.
     */
    tagLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify the transit Gateway.
     */
    transitGw?: pulumi.Input<string>;
    /**
     * VPC-ID/VNet-Name of cloud provider.
     */
    vpcId: pulumi.Input<string>;
    /**
     * Region of cloud provider.
     */
    vpcReg: pulumi.Input<string>;
    /**
     * Size of the gateway instance.
     */
    vpcSize: pulumi.Input<string>;
}
