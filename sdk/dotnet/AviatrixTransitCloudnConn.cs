// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aviatrix
{
    /// <summary>
    /// The **aviatrix_transit_cloudn_conn** resource creates and manages the connection between an Aviatrix Transit Gateway and an Aviatrix CloudN device. Available as of provider version R2.21.0+.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aviatrix = Pulumi.Aviatrix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create an Aviatrix Transit Gateway to CloudN Connection
    ///     var test = new Aviatrix.AviatrixTransitCloudnConn("test", new()
    ///     {
    ///         BgpLocalAsNum = "123",
    ///         CloudnAsNum = "345",
    ///         CloudnNeighborAsNum = "65005",
    ///         CloudnNeighborIp = "182.1.2.3",
    ///         CloudnRemoteIp = "172.12.13.14",
    ///         ConnectionName = "my_conn",
    ///         GwName = "transitGw",
    ///         VpcId = "vpc-abcd1234",
    ///     });
    /// 
    /// });
    /// ```
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aviatrix = Pulumi.Aviatrix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create an Aviatrix Transit Gateway to CloudN Connection with HA
    ///     var test = new Aviatrix.AviatrixTransitCloudnConn("test", new()
    ///     {
    ///         BackupCloudnAsNum = "123",
    ///         BackupCloudnIp = "1.2.3.6",
    ///         BackupCloudnNeighborAsNum = "345",
    ///         BackupCloudnNeighborIp = "1.2.3.7",
    ///         BgpLocalAsNum = "123",
    ///         CloudnAsNum = "345",
    ///         CloudnNeighborAsNum = "65005",
    ///         CloudnNeighborIp = "1.2.3.5",
    ///         CloudnRemoteIp = "1.2.3.4",
    ///         ConnectionName = "my_conn",
    ///         EnableHa = true,
    ///         GwName = "transitGw",
    ///         VpcId = "vpc-abcd1234",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// **transit_cloudn_conn** can be imported using the `connection_name` and `vpc_id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aviatrix:index/aviatrixTransitCloudnConn:AviatrixTransitCloudnConn test connection_name~vpc_id
    /// ```
    /// </summary>
    [AviatrixResourceType("aviatrix:index/aviatrixTransitCloudnConn:AviatrixTransitCloudnConn")]
    public partial class AviatrixTransitCloudnConn : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set of approved CIDRs. Requires `enable_learned_cidrs_approval` to be true. Type: Set(String).
        /// </summary>
        [Output("approvedCidrs")]
        public Output<ImmutableArray<string>> ApprovedCidrs { get; private set; } = null!;

        /// <summary>
        /// BGP AS Number of HA CloudN. Type: String.
        /// </summary>
        [Output("backupCloudnAsNum")]
        public Output<string?> BackupCloudnAsNum { get; private set; } = null!;

        /// <summary>
        /// IP Address of HA CloudN. Required when `enable_ha` is true. Type: String.
        /// </summary>
        [Output("backupCloudnIp")]
        public Output<string?> BackupCloudnIp { get; private set; } = null!;

        /// <summary>
        /// BGP AS Number of HA CloudN Neighbor. Type: String.
        /// </summary>
        [Output("backupCloudnNeighborAsNum")]
        public Output<string?> BackupCloudnNeighborAsNum { get; private set; } = null!;

        /// <summary>
        /// IP Address of HA CloudN Neighbor. Type: String.
        /// </summary>
        [Output("backupCloudnNeighborIp")]
        public Output<string?> BackupCloudnNeighborIp { get; private set; } = null!;

        /// <summary>
        /// Flag to enable direct connect over private network to HA CloudN. Type: Boolean.
        /// </summary>
        [Output("backupDirectConnect")]
        public Output<bool?> BackupDirectConnect { get; private set; } = null!;

        /// <summary>
        /// Flag to enable insane mode connection to HA CloudN. Type: Boolean.
        /// </summary>
        [Output("backupInsaneMode")]
        public Output<bool?> BackupInsaneMode { get; private set; } = null!;

        /// <summary>
        /// BGP AS Number of the Transit Gateway. Type: String.
        /// </summary>
        [Output("bgpLocalAsNum")]
        public Output<string> BgpLocalAsNum { get; private set; } = null!;

        /// <summary>
        /// BGP AS Number of the Aviatrix CloudN. Type: String.
        /// </summary>
        [Output("cloudnAsNum")]
        public Output<string> CloudnAsNum { get; private set; } = null!;

        /// <summary>
        /// BGP AS Number of the Aviatrix CloudN neighbor. Type: String.
        /// </summary>
        [Output("cloudnNeighborAsNum")]
        public Output<string> CloudnNeighborAsNum { get; private set; } = null!;

        /// <summary>
        /// IP Address of Aviatrix CloudN neighbor. Type: String.
        /// </summary>
        [Output("cloudnNeighborIp")]
        public Output<string> CloudnNeighborIp { get; private set; } = null!;

        /// <summary>
        /// IP Address of Aviatrix CloudN. Type: String.
        /// </summary>
        [Output("cloudnRemoteIp")]
        public Output<string> CloudnRemoteIp { get; private set; } = null!;

        /// <summary>
        /// Name of the Transit Gateway to CloudN Connection. Type: String.
        /// </summary>
        [Output("connectionName")]
        public Output<string> ConnectionName { get; private set; } = null!;

        /// <summary>
        /// Enable direct connect over private network. Type: Boolean. Default: true.
        /// </summary>
        [Output("directConnect")]
        public Output<bool?> DirectConnect { get; private set; } = null!;

        /// <summary>
        /// Enable connection to HA CloudN. Type: Boolean.
        /// </summary>
        [Output("enableHa")]
        public Output<bool?> EnableHa { get; private set; } = null!;

        /// <summary>
        /// Enable encrypted transit approval for connection. Type: Boolean.
        /// </summary>
        [Output("enableLearnedCidrsApproval")]
        public Output<bool?> EnableLearnedCidrsApproval { get; private set; } = null!;

        /// <summary>
        /// Flag to enable load balancing between CloudN and HA CloudN. Type: Boolean.
        /// </summary>
        [Output("enableLoadBalancing")]
        public Output<bool?> EnableLoadBalancing { get; private set; } = null!;

        /// <summary>
        /// Name of the Transit Gateway. Type: String.
        /// </summary>
        [Output("gwName")]
        public Output<string> GwName { get; private set; } = null!;

        /// <summary>
        /// Enable insane mode connection. Type: Boolean.
        /// </summary>
        [Output("insaneMode")]
        public Output<bool?> InsaneMode { get; private set; } = null!;

        /// <summary>
        /// VPC ID of the Aviatrix Transit Gateway. Type: String.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a AviatrixTransitCloudnConn resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AviatrixTransitCloudnConn(string name, AviatrixTransitCloudnConnArgs args, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixTransitCloudnConn:AviatrixTransitCloudnConn", name, args ?? new AviatrixTransitCloudnConnArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AviatrixTransitCloudnConn(string name, Input<string> id, AviatrixTransitCloudnConnState? state = null, CustomResourceOptions? options = null)
            : base("aviatrix:index/aviatrixTransitCloudnConn:AviatrixTransitCloudnConn", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/astipkovits",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AviatrixTransitCloudnConn resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AviatrixTransitCloudnConn Get(string name, Input<string> id, AviatrixTransitCloudnConnState? state = null, CustomResourceOptions? options = null)
        {
            return new AviatrixTransitCloudnConn(name, id, state, options);
        }
    }

    public sealed class AviatrixTransitCloudnConnArgs : global::Pulumi.ResourceArgs
    {
        [Input("approvedCidrs")]
        private InputList<string>? _approvedCidrs;

        /// <summary>
        /// Set of approved CIDRs. Requires `enable_learned_cidrs_approval` to be true. Type: Set(String).
        /// </summary>
        public InputList<string> ApprovedCidrs
        {
            get => _approvedCidrs ?? (_approvedCidrs = new InputList<string>());
            set => _approvedCidrs = value;
        }

        /// <summary>
        /// BGP AS Number of HA CloudN. Type: String.
        /// </summary>
        [Input("backupCloudnAsNum")]
        public Input<string>? BackupCloudnAsNum { get; set; }

        /// <summary>
        /// IP Address of HA CloudN. Required when `enable_ha` is true. Type: String.
        /// </summary>
        [Input("backupCloudnIp")]
        public Input<string>? BackupCloudnIp { get; set; }

        /// <summary>
        /// BGP AS Number of HA CloudN Neighbor. Type: String.
        /// </summary>
        [Input("backupCloudnNeighborAsNum")]
        public Input<string>? BackupCloudnNeighborAsNum { get; set; }

        /// <summary>
        /// IP Address of HA CloudN Neighbor. Type: String.
        /// </summary>
        [Input("backupCloudnNeighborIp")]
        public Input<string>? BackupCloudnNeighborIp { get; set; }

        /// <summary>
        /// Flag to enable direct connect over private network to HA CloudN. Type: Boolean.
        /// </summary>
        [Input("backupDirectConnect")]
        public Input<bool>? BackupDirectConnect { get; set; }

        /// <summary>
        /// Flag to enable insane mode connection to HA CloudN. Type: Boolean.
        /// </summary>
        [Input("backupInsaneMode")]
        public Input<bool>? BackupInsaneMode { get; set; }

        /// <summary>
        /// BGP AS Number of the Transit Gateway. Type: String.
        /// </summary>
        [Input("bgpLocalAsNum", required: true)]
        public Input<string> BgpLocalAsNum { get; set; } = null!;

        /// <summary>
        /// BGP AS Number of the Aviatrix CloudN. Type: String.
        /// </summary>
        [Input("cloudnAsNum", required: true)]
        public Input<string> CloudnAsNum { get; set; } = null!;

        /// <summary>
        /// BGP AS Number of the Aviatrix CloudN neighbor. Type: String.
        /// </summary>
        [Input("cloudnNeighborAsNum", required: true)]
        public Input<string> CloudnNeighborAsNum { get; set; } = null!;

        /// <summary>
        /// IP Address of Aviatrix CloudN neighbor. Type: String.
        /// </summary>
        [Input("cloudnNeighborIp", required: true)]
        public Input<string> CloudnNeighborIp { get; set; } = null!;

        /// <summary>
        /// IP Address of Aviatrix CloudN. Type: String.
        /// </summary>
        [Input("cloudnRemoteIp", required: true)]
        public Input<string> CloudnRemoteIp { get; set; } = null!;

        /// <summary>
        /// Name of the Transit Gateway to CloudN Connection. Type: String.
        /// </summary>
        [Input("connectionName", required: true)]
        public Input<string> ConnectionName { get; set; } = null!;

        /// <summary>
        /// Enable direct connect over private network. Type: Boolean. Default: true.
        /// </summary>
        [Input("directConnect")]
        public Input<bool>? DirectConnect { get; set; }

        /// <summary>
        /// Enable connection to HA CloudN. Type: Boolean.
        /// </summary>
        [Input("enableHa")]
        public Input<bool>? EnableHa { get; set; }

        /// <summary>
        /// Enable encrypted transit approval for connection. Type: Boolean.
        /// </summary>
        [Input("enableLearnedCidrsApproval")]
        public Input<bool>? EnableLearnedCidrsApproval { get; set; }

        /// <summary>
        /// Flag to enable load balancing between CloudN and HA CloudN. Type: Boolean.
        /// </summary>
        [Input("enableLoadBalancing")]
        public Input<bool>? EnableLoadBalancing { get; set; }

        /// <summary>
        /// Name of the Transit Gateway. Type: String.
        /// </summary>
        [Input("gwName", required: true)]
        public Input<string> GwName { get; set; } = null!;

        /// <summary>
        /// Enable insane mode connection. Type: Boolean.
        /// </summary>
        [Input("insaneMode")]
        public Input<bool>? InsaneMode { get; set; }

        /// <summary>
        /// VPC ID of the Aviatrix Transit Gateway. Type: String.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public AviatrixTransitCloudnConnArgs()
        {
        }
        public static new AviatrixTransitCloudnConnArgs Empty => new AviatrixTransitCloudnConnArgs();
    }

    public sealed class AviatrixTransitCloudnConnState : global::Pulumi.ResourceArgs
    {
        [Input("approvedCidrs")]
        private InputList<string>? _approvedCidrs;

        /// <summary>
        /// Set of approved CIDRs. Requires `enable_learned_cidrs_approval` to be true. Type: Set(String).
        /// </summary>
        public InputList<string> ApprovedCidrs
        {
            get => _approvedCidrs ?? (_approvedCidrs = new InputList<string>());
            set => _approvedCidrs = value;
        }

        /// <summary>
        /// BGP AS Number of HA CloudN. Type: String.
        /// </summary>
        [Input("backupCloudnAsNum")]
        public Input<string>? BackupCloudnAsNum { get; set; }

        /// <summary>
        /// IP Address of HA CloudN. Required when `enable_ha` is true. Type: String.
        /// </summary>
        [Input("backupCloudnIp")]
        public Input<string>? BackupCloudnIp { get; set; }

        /// <summary>
        /// BGP AS Number of HA CloudN Neighbor. Type: String.
        /// </summary>
        [Input("backupCloudnNeighborAsNum")]
        public Input<string>? BackupCloudnNeighborAsNum { get; set; }

        /// <summary>
        /// IP Address of HA CloudN Neighbor. Type: String.
        /// </summary>
        [Input("backupCloudnNeighborIp")]
        public Input<string>? BackupCloudnNeighborIp { get; set; }

        /// <summary>
        /// Flag to enable direct connect over private network to HA CloudN. Type: Boolean.
        /// </summary>
        [Input("backupDirectConnect")]
        public Input<bool>? BackupDirectConnect { get; set; }

        /// <summary>
        /// Flag to enable insane mode connection to HA CloudN. Type: Boolean.
        /// </summary>
        [Input("backupInsaneMode")]
        public Input<bool>? BackupInsaneMode { get; set; }

        /// <summary>
        /// BGP AS Number of the Transit Gateway. Type: String.
        /// </summary>
        [Input("bgpLocalAsNum")]
        public Input<string>? BgpLocalAsNum { get; set; }

        /// <summary>
        /// BGP AS Number of the Aviatrix CloudN. Type: String.
        /// </summary>
        [Input("cloudnAsNum")]
        public Input<string>? CloudnAsNum { get; set; }

        /// <summary>
        /// BGP AS Number of the Aviatrix CloudN neighbor. Type: String.
        /// </summary>
        [Input("cloudnNeighborAsNum")]
        public Input<string>? CloudnNeighborAsNum { get; set; }

        /// <summary>
        /// IP Address of Aviatrix CloudN neighbor. Type: String.
        /// </summary>
        [Input("cloudnNeighborIp")]
        public Input<string>? CloudnNeighborIp { get; set; }

        /// <summary>
        /// IP Address of Aviatrix CloudN. Type: String.
        /// </summary>
        [Input("cloudnRemoteIp")]
        public Input<string>? CloudnRemoteIp { get; set; }

        /// <summary>
        /// Name of the Transit Gateway to CloudN Connection. Type: String.
        /// </summary>
        [Input("connectionName")]
        public Input<string>? ConnectionName { get; set; }

        /// <summary>
        /// Enable direct connect over private network. Type: Boolean. Default: true.
        /// </summary>
        [Input("directConnect")]
        public Input<bool>? DirectConnect { get; set; }

        /// <summary>
        /// Enable connection to HA CloudN. Type: Boolean.
        /// </summary>
        [Input("enableHa")]
        public Input<bool>? EnableHa { get; set; }

        /// <summary>
        /// Enable encrypted transit approval for connection. Type: Boolean.
        /// </summary>
        [Input("enableLearnedCidrsApproval")]
        public Input<bool>? EnableLearnedCidrsApproval { get; set; }

        /// <summary>
        /// Flag to enable load balancing between CloudN and HA CloudN. Type: Boolean.
        /// </summary>
        [Input("enableLoadBalancing")]
        public Input<bool>? EnableLoadBalancing { get; set; }

        /// <summary>
        /// Name of the Transit Gateway. Type: String.
        /// </summary>
        [Input("gwName")]
        public Input<string>? GwName { get; set; }

        /// <summary>
        /// Enable insane mode connection. Type: Boolean.
        /// </summary>
        [Input("insaneMode")]
        public Input<bool>? InsaneMode { get; set; }

        /// <summary>
        /// VPC ID of the Aviatrix Transit Gateway. Type: String.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public AviatrixTransitCloudnConnState()
        {
        }
        public static new AviatrixTransitCloudnConnState Empty => new AviatrixTransitCloudnConnState();
    }
}
