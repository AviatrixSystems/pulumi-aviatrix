// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixGatewaySnat struct {
	pulumi.CustomResourceState

	// Computed attribute to store the previous connection policy.
	ConnectionPolicies AviatrixGatewaySnatConnectionPolicyArrayOutput `pulumi:"connectionPolicies"`
	// Name of the gateway.
	GwName pulumi.StringOutput `pulumi:"gwName"`
	// Computed attribute to store the previous interface policy.
	InterfacePolicies AviatrixGatewaySnatInterfacePolicyArrayOutput `pulumi:"interfacePolicies"`
	// Nat mode. Currently only supports 'customized_snat'.
	SnatMode pulumi.StringPtrOutput `pulumi:"snatMode"`
	// Policy rules applied for 'snat_mode'' of 'customized_snat'.'
	SnatPolicies AviatrixGatewaySnatSnatPolicyArrayOutput `pulumi:"snatPolicies"`
	// Whether to sync the policies to the HA gateway.
	SyncToHa pulumi.BoolPtrOutput `pulumi:"syncToHa"`
}

// NewAviatrixGatewaySnat registers a new resource with the given unique name, arguments, and options.
func NewAviatrixGatewaySnat(ctx *pulumi.Context,
	name string, args *AviatrixGatewaySnatArgs, opts ...pulumi.ResourceOption) (*AviatrixGatewaySnat, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GwName == nil {
		return nil, errors.New("invalid value for required argument 'GwName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixGatewaySnat
	err := ctx.RegisterResource("aviatrix:index/aviatrixGatewaySnat:AviatrixGatewaySnat", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixGatewaySnat gets an existing AviatrixGatewaySnat resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixGatewaySnat(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixGatewaySnatState, opts ...pulumi.ResourceOption) (*AviatrixGatewaySnat, error) {
	var resource AviatrixGatewaySnat
	err := ctx.ReadResource("aviatrix:index/aviatrixGatewaySnat:AviatrixGatewaySnat", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixGatewaySnat resources.
type aviatrixGatewaySnatState struct {
	// Computed attribute to store the previous connection policy.
	ConnectionPolicies []AviatrixGatewaySnatConnectionPolicy `pulumi:"connectionPolicies"`
	// Name of the gateway.
	GwName *string `pulumi:"gwName"`
	// Computed attribute to store the previous interface policy.
	InterfacePolicies []AviatrixGatewaySnatInterfacePolicy `pulumi:"interfacePolicies"`
	// Nat mode. Currently only supports 'customized_snat'.
	SnatMode *string `pulumi:"snatMode"`
	// Policy rules applied for 'snat_mode'' of 'customized_snat'.'
	SnatPolicies []AviatrixGatewaySnatSnatPolicy `pulumi:"snatPolicies"`
	// Whether to sync the policies to the HA gateway.
	SyncToHa *bool `pulumi:"syncToHa"`
}

type AviatrixGatewaySnatState struct {
	// Computed attribute to store the previous connection policy.
	ConnectionPolicies AviatrixGatewaySnatConnectionPolicyArrayInput
	// Name of the gateway.
	GwName pulumi.StringPtrInput
	// Computed attribute to store the previous interface policy.
	InterfacePolicies AviatrixGatewaySnatInterfacePolicyArrayInput
	// Nat mode. Currently only supports 'customized_snat'.
	SnatMode pulumi.StringPtrInput
	// Policy rules applied for 'snat_mode'' of 'customized_snat'.'
	SnatPolicies AviatrixGatewaySnatSnatPolicyArrayInput
	// Whether to sync the policies to the HA gateway.
	SyncToHa pulumi.BoolPtrInput
}

func (AviatrixGatewaySnatState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixGatewaySnatState)(nil)).Elem()
}

type aviatrixGatewaySnatArgs struct {
	// Name of the gateway.
	GwName string `pulumi:"gwName"`
	// Nat mode. Currently only supports 'customized_snat'.
	SnatMode *string `pulumi:"snatMode"`
	// Policy rules applied for 'snat_mode'' of 'customized_snat'.'
	SnatPolicies []AviatrixGatewaySnatSnatPolicy `pulumi:"snatPolicies"`
	// Whether to sync the policies to the HA gateway.
	SyncToHa *bool `pulumi:"syncToHa"`
}

// The set of arguments for constructing a AviatrixGatewaySnat resource.
type AviatrixGatewaySnatArgs struct {
	// Name of the gateway.
	GwName pulumi.StringInput
	// Nat mode. Currently only supports 'customized_snat'.
	SnatMode pulumi.StringPtrInput
	// Policy rules applied for 'snat_mode'' of 'customized_snat'.'
	SnatPolicies AviatrixGatewaySnatSnatPolicyArrayInput
	// Whether to sync the policies to the HA gateway.
	SyncToHa pulumi.BoolPtrInput
}

func (AviatrixGatewaySnatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixGatewaySnatArgs)(nil)).Elem()
}

type AviatrixGatewaySnatInput interface {
	pulumi.Input

	ToAviatrixGatewaySnatOutput() AviatrixGatewaySnatOutput
	ToAviatrixGatewaySnatOutputWithContext(ctx context.Context) AviatrixGatewaySnatOutput
}

func (*AviatrixGatewaySnat) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixGatewaySnat)(nil)).Elem()
}

func (i *AviatrixGatewaySnat) ToAviatrixGatewaySnatOutput() AviatrixGatewaySnatOutput {
	return i.ToAviatrixGatewaySnatOutputWithContext(context.Background())
}

func (i *AviatrixGatewaySnat) ToAviatrixGatewaySnatOutputWithContext(ctx context.Context) AviatrixGatewaySnatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewaySnatOutput)
}

// AviatrixGatewaySnatArrayInput is an input type that accepts AviatrixGatewaySnatArray and AviatrixGatewaySnatArrayOutput values.
// You can construct a concrete instance of `AviatrixGatewaySnatArrayInput` via:
//
//	AviatrixGatewaySnatArray{ AviatrixGatewaySnatArgs{...} }
type AviatrixGatewaySnatArrayInput interface {
	pulumi.Input

	ToAviatrixGatewaySnatArrayOutput() AviatrixGatewaySnatArrayOutput
	ToAviatrixGatewaySnatArrayOutputWithContext(context.Context) AviatrixGatewaySnatArrayOutput
}

type AviatrixGatewaySnatArray []AviatrixGatewaySnatInput

func (AviatrixGatewaySnatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixGatewaySnat)(nil)).Elem()
}

func (i AviatrixGatewaySnatArray) ToAviatrixGatewaySnatArrayOutput() AviatrixGatewaySnatArrayOutput {
	return i.ToAviatrixGatewaySnatArrayOutputWithContext(context.Background())
}

func (i AviatrixGatewaySnatArray) ToAviatrixGatewaySnatArrayOutputWithContext(ctx context.Context) AviatrixGatewaySnatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewaySnatArrayOutput)
}

// AviatrixGatewaySnatMapInput is an input type that accepts AviatrixGatewaySnatMap and AviatrixGatewaySnatMapOutput values.
// You can construct a concrete instance of `AviatrixGatewaySnatMapInput` via:
//
//	AviatrixGatewaySnatMap{ "key": AviatrixGatewaySnatArgs{...} }
type AviatrixGatewaySnatMapInput interface {
	pulumi.Input

	ToAviatrixGatewaySnatMapOutput() AviatrixGatewaySnatMapOutput
	ToAviatrixGatewaySnatMapOutputWithContext(context.Context) AviatrixGatewaySnatMapOutput
}

type AviatrixGatewaySnatMap map[string]AviatrixGatewaySnatInput

func (AviatrixGatewaySnatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixGatewaySnat)(nil)).Elem()
}

func (i AviatrixGatewaySnatMap) ToAviatrixGatewaySnatMapOutput() AviatrixGatewaySnatMapOutput {
	return i.ToAviatrixGatewaySnatMapOutputWithContext(context.Background())
}

func (i AviatrixGatewaySnatMap) ToAviatrixGatewaySnatMapOutputWithContext(ctx context.Context) AviatrixGatewaySnatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixGatewaySnatMapOutput)
}

type AviatrixGatewaySnatOutput struct{ *pulumi.OutputState }

func (AviatrixGatewaySnatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixGatewaySnat)(nil)).Elem()
}

func (o AviatrixGatewaySnatOutput) ToAviatrixGatewaySnatOutput() AviatrixGatewaySnatOutput {
	return o
}

func (o AviatrixGatewaySnatOutput) ToAviatrixGatewaySnatOutputWithContext(ctx context.Context) AviatrixGatewaySnatOutput {
	return o
}

// Computed attribute to store the previous connection policy.
func (o AviatrixGatewaySnatOutput) ConnectionPolicies() AviatrixGatewaySnatConnectionPolicyArrayOutput {
	return o.ApplyT(func(v *AviatrixGatewaySnat) AviatrixGatewaySnatConnectionPolicyArrayOutput {
		return v.ConnectionPolicies
	}).(AviatrixGatewaySnatConnectionPolicyArrayOutput)
}

// Name of the gateway.
func (o AviatrixGatewaySnatOutput) GwName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixGatewaySnat) pulumi.StringOutput { return v.GwName }).(pulumi.StringOutput)
}

// Computed attribute to store the previous interface policy.
func (o AviatrixGatewaySnatOutput) InterfacePolicies() AviatrixGatewaySnatInterfacePolicyArrayOutput {
	return o.ApplyT(func(v *AviatrixGatewaySnat) AviatrixGatewaySnatInterfacePolicyArrayOutput { return v.InterfacePolicies }).(AviatrixGatewaySnatInterfacePolicyArrayOutput)
}

// Nat mode. Currently only supports 'customized_snat'.
func (o AviatrixGatewaySnatOutput) SnatMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixGatewaySnat) pulumi.StringPtrOutput { return v.SnatMode }).(pulumi.StringPtrOutput)
}

// Policy rules applied for 'snat_mode‚Äù of 'customized_snat'.'
func (o AviatrixGatewaySnatOutput) SnatPolicies() AviatrixGatewaySnatSnatPolicyArrayOutput {
	return o.ApplyT(func(v *AviatrixGatewaySnat) AviatrixGatewaySnatSnatPolicyArrayOutput { return v.SnatPolicies }).(AviatrixGatewaySnatSnatPolicyArrayOutput)
}

// Whether to sync the policies to the HA gateway.
func (o AviatrixGatewaySnatOutput) SyncToHa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixGatewaySnat) pulumi.BoolPtrOutput { return v.SyncToHa }).(pulumi.BoolPtrOutput)
}

type AviatrixGatewaySnatArrayOutput struct{ *pulumi.OutputState }

func (AviatrixGatewaySnatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixGatewaySnat)(nil)).Elem()
}

func (o AviatrixGatewaySnatArrayOutput) ToAviatrixGatewaySnatArrayOutput() AviatrixGatewaySnatArrayOutput {
	return o
}

func (o AviatrixGatewaySnatArrayOutput) ToAviatrixGatewaySnatArrayOutputWithContext(ctx context.Context) AviatrixGatewaySnatArrayOutput {
	return o
}

func (o AviatrixGatewaySnatArrayOutput) Index(i pulumi.IntInput) AviatrixGatewaySnatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixGatewaySnat {
		return vs[0].([]*AviatrixGatewaySnat)[vs[1].(int)]
	}).(AviatrixGatewaySnatOutput)
}

type AviatrixGatewaySnatMapOutput struct{ *pulumi.OutputState }

func (AviatrixGatewaySnatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixGatewaySnat)(nil)).Elem()
}

func (o AviatrixGatewaySnatMapOutput) ToAviatrixGatewaySnatMapOutput() AviatrixGatewaySnatMapOutput {
	return o
}

func (o AviatrixGatewaySnatMapOutput) ToAviatrixGatewaySnatMapOutputWithContext(ctx context.Context) AviatrixGatewaySnatMapOutput {
	return o
}

func (o AviatrixGatewaySnatMapOutput) MapIndex(k pulumi.StringInput) AviatrixGatewaySnatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixGatewaySnat {
		return vs[0].(map[string]*AviatrixGatewaySnat)[vs[1].(string)]
	}).(AviatrixGatewaySnatOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewaySnatInput)(nil)).Elem(), &AviatrixGatewaySnat{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewaySnatArrayInput)(nil)).Elem(), AviatrixGatewaySnatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixGatewaySnatMapInput)(nil)).Elem(), AviatrixGatewaySnatMap{})
	pulumi.RegisterOutputType(AviatrixGatewaySnatOutput{})
	pulumi.RegisterOutputType(AviatrixGatewaySnatArrayOutput{})
	pulumi.RegisterOutputType(AviatrixGatewaySnatMapOutput{})
}
