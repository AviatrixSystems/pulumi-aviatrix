// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AviatrixFqdnPassThrough struct {
	pulumi.CustomResourceState

	// Gateway to apply FQDN pass-through rules to.
	GwName pulumi.StringOutput `pulumi:"gwName"`
	// CIDRs to allow originating requests to ignore FQDN filtering rules.
	PassThroughCidrs pulumi.StringArrayOutput `pulumi:"passThroughCidrs"`
}

// NewAviatrixFqdnPassThrough registers a new resource with the given unique name, arguments, and options.
func NewAviatrixFqdnPassThrough(ctx *pulumi.Context,
	name string, args *AviatrixFqdnPassThroughArgs, opts ...pulumi.ResourceOption) (*AviatrixFqdnPassThrough, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GwName == nil {
		return nil, errors.New("invalid value for required argument 'GwName'")
	}
	if args.PassThroughCidrs == nil {
		return nil, errors.New("invalid value for required argument 'PassThroughCidrs'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixFqdnPassThrough
	err := ctx.RegisterResource("aviatrix:index/aviatrixFqdnPassThrough:AviatrixFqdnPassThrough", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixFqdnPassThrough gets an existing AviatrixFqdnPassThrough resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixFqdnPassThrough(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixFqdnPassThroughState, opts ...pulumi.ResourceOption) (*AviatrixFqdnPassThrough, error) {
	var resource AviatrixFqdnPassThrough
	err := ctx.ReadResource("aviatrix:index/aviatrixFqdnPassThrough:AviatrixFqdnPassThrough", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixFqdnPassThrough resources.
type aviatrixFqdnPassThroughState struct {
	// Gateway to apply FQDN pass-through rules to.
	GwName *string `pulumi:"gwName"`
	// CIDRs to allow originating requests to ignore FQDN filtering rules.
	PassThroughCidrs []string `pulumi:"passThroughCidrs"`
}

type AviatrixFqdnPassThroughState struct {
	// Gateway to apply FQDN pass-through rules to.
	GwName pulumi.StringPtrInput
	// CIDRs to allow originating requests to ignore FQDN filtering rules.
	PassThroughCidrs pulumi.StringArrayInput
}

func (AviatrixFqdnPassThroughState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixFqdnPassThroughState)(nil)).Elem()
}

type aviatrixFqdnPassThroughArgs struct {
	// Gateway to apply FQDN pass-through rules to.
	GwName string `pulumi:"gwName"`
	// CIDRs to allow originating requests to ignore FQDN filtering rules.
	PassThroughCidrs []string `pulumi:"passThroughCidrs"`
}

// The set of arguments for constructing a AviatrixFqdnPassThrough resource.
type AviatrixFqdnPassThroughArgs struct {
	// Gateway to apply FQDN pass-through rules to.
	GwName pulumi.StringInput
	// CIDRs to allow originating requests to ignore FQDN filtering rules.
	PassThroughCidrs pulumi.StringArrayInput
}

func (AviatrixFqdnPassThroughArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixFqdnPassThroughArgs)(nil)).Elem()
}

type AviatrixFqdnPassThroughInput interface {
	pulumi.Input

	ToAviatrixFqdnPassThroughOutput() AviatrixFqdnPassThroughOutput
	ToAviatrixFqdnPassThroughOutputWithContext(ctx context.Context) AviatrixFqdnPassThroughOutput
}

func (*AviatrixFqdnPassThrough) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixFqdnPassThrough)(nil)).Elem()
}

func (i *AviatrixFqdnPassThrough) ToAviatrixFqdnPassThroughOutput() AviatrixFqdnPassThroughOutput {
	return i.ToAviatrixFqdnPassThroughOutputWithContext(context.Background())
}

func (i *AviatrixFqdnPassThrough) ToAviatrixFqdnPassThroughOutputWithContext(ctx context.Context) AviatrixFqdnPassThroughOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFqdnPassThroughOutput)
}

// AviatrixFqdnPassThroughArrayInput is an input type that accepts AviatrixFqdnPassThroughArray and AviatrixFqdnPassThroughArrayOutput values.
// You can construct a concrete instance of `AviatrixFqdnPassThroughArrayInput` via:
//
//	AviatrixFqdnPassThroughArray{ AviatrixFqdnPassThroughArgs{...} }
type AviatrixFqdnPassThroughArrayInput interface {
	pulumi.Input

	ToAviatrixFqdnPassThroughArrayOutput() AviatrixFqdnPassThroughArrayOutput
	ToAviatrixFqdnPassThroughArrayOutputWithContext(context.Context) AviatrixFqdnPassThroughArrayOutput
}

type AviatrixFqdnPassThroughArray []AviatrixFqdnPassThroughInput

func (AviatrixFqdnPassThroughArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixFqdnPassThrough)(nil)).Elem()
}

func (i AviatrixFqdnPassThroughArray) ToAviatrixFqdnPassThroughArrayOutput() AviatrixFqdnPassThroughArrayOutput {
	return i.ToAviatrixFqdnPassThroughArrayOutputWithContext(context.Background())
}

func (i AviatrixFqdnPassThroughArray) ToAviatrixFqdnPassThroughArrayOutputWithContext(ctx context.Context) AviatrixFqdnPassThroughArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFqdnPassThroughArrayOutput)
}

// AviatrixFqdnPassThroughMapInput is an input type that accepts AviatrixFqdnPassThroughMap and AviatrixFqdnPassThroughMapOutput values.
// You can construct a concrete instance of `AviatrixFqdnPassThroughMapInput` via:
//
//	AviatrixFqdnPassThroughMap{ "key": AviatrixFqdnPassThroughArgs{...} }
type AviatrixFqdnPassThroughMapInput interface {
	pulumi.Input

	ToAviatrixFqdnPassThroughMapOutput() AviatrixFqdnPassThroughMapOutput
	ToAviatrixFqdnPassThroughMapOutputWithContext(context.Context) AviatrixFqdnPassThroughMapOutput
}

type AviatrixFqdnPassThroughMap map[string]AviatrixFqdnPassThroughInput

func (AviatrixFqdnPassThroughMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixFqdnPassThrough)(nil)).Elem()
}

func (i AviatrixFqdnPassThroughMap) ToAviatrixFqdnPassThroughMapOutput() AviatrixFqdnPassThroughMapOutput {
	return i.ToAviatrixFqdnPassThroughMapOutputWithContext(context.Background())
}

func (i AviatrixFqdnPassThroughMap) ToAviatrixFqdnPassThroughMapOutputWithContext(ctx context.Context) AviatrixFqdnPassThroughMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixFqdnPassThroughMapOutput)
}

type AviatrixFqdnPassThroughOutput struct{ *pulumi.OutputState }

func (AviatrixFqdnPassThroughOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixFqdnPassThrough)(nil)).Elem()
}

func (o AviatrixFqdnPassThroughOutput) ToAviatrixFqdnPassThroughOutput() AviatrixFqdnPassThroughOutput {
	return o
}

func (o AviatrixFqdnPassThroughOutput) ToAviatrixFqdnPassThroughOutputWithContext(ctx context.Context) AviatrixFqdnPassThroughOutput {
	return o
}

// Gateway to apply FQDN pass-through rules to.
func (o AviatrixFqdnPassThroughOutput) GwName() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixFqdnPassThrough) pulumi.StringOutput { return v.GwName }).(pulumi.StringOutput)
}

// CIDRs to allow originating requests to ignore FQDN filtering rules.
func (o AviatrixFqdnPassThroughOutput) PassThroughCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixFqdnPassThrough) pulumi.StringArrayOutput { return v.PassThroughCidrs }).(pulumi.StringArrayOutput)
}

type AviatrixFqdnPassThroughArrayOutput struct{ *pulumi.OutputState }

func (AviatrixFqdnPassThroughArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixFqdnPassThrough)(nil)).Elem()
}

func (o AviatrixFqdnPassThroughArrayOutput) ToAviatrixFqdnPassThroughArrayOutput() AviatrixFqdnPassThroughArrayOutput {
	return o
}

func (o AviatrixFqdnPassThroughArrayOutput) ToAviatrixFqdnPassThroughArrayOutputWithContext(ctx context.Context) AviatrixFqdnPassThroughArrayOutput {
	return o
}

func (o AviatrixFqdnPassThroughArrayOutput) Index(i pulumi.IntInput) AviatrixFqdnPassThroughOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixFqdnPassThrough {
		return vs[0].([]*AviatrixFqdnPassThrough)[vs[1].(int)]
	}).(AviatrixFqdnPassThroughOutput)
}

type AviatrixFqdnPassThroughMapOutput struct{ *pulumi.OutputState }

func (AviatrixFqdnPassThroughMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixFqdnPassThrough)(nil)).Elem()
}

func (o AviatrixFqdnPassThroughMapOutput) ToAviatrixFqdnPassThroughMapOutput() AviatrixFqdnPassThroughMapOutput {
	return o
}

func (o AviatrixFqdnPassThroughMapOutput) ToAviatrixFqdnPassThroughMapOutputWithContext(ctx context.Context) AviatrixFqdnPassThroughMapOutput {
	return o
}

func (o AviatrixFqdnPassThroughMapOutput) MapIndex(k pulumi.StringInput) AviatrixFqdnPassThroughOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixFqdnPassThrough {
		return vs[0].(map[string]*AviatrixFqdnPassThrough)[vs[1].(string)]
	}).(AviatrixFqdnPassThroughOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFqdnPassThroughInput)(nil)).Elem(), &AviatrixFqdnPassThrough{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFqdnPassThroughArrayInput)(nil)).Elem(), AviatrixFqdnPassThroughArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixFqdnPassThroughMapInput)(nil)).Elem(), AviatrixFqdnPassThroughMap{})
	pulumi.RegisterOutputType(AviatrixFqdnPassThroughOutput{})
	pulumi.RegisterOutputType(AviatrixFqdnPassThroughArrayOutput{})
	pulumi.RegisterOutputType(AviatrixFqdnPassThroughMapOutput{})
}
