// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aviatrix
{
    public static class GetAviatrixSpokeGateway
    {
        public static Task<GetAviatrixSpokeGatewayResult> InvokeAsync(GetAviatrixSpokeGatewayArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAviatrixSpokeGatewayResult>("aviatrix:index/getAviatrixSpokeGateway:getAviatrixSpokeGateway", args ?? new GetAviatrixSpokeGatewayArgs(), options.WithDefaults());

        public static Output<GetAviatrixSpokeGatewayResult> Invoke(GetAviatrixSpokeGatewayInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAviatrixSpokeGatewayResult>("aviatrix:index/getAviatrixSpokeGateway:getAviatrixSpokeGateway", args ?? new GetAviatrixSpokeGatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAviatrixSpokeGatewayArgs : global::Pulumi.InvokeArgs
    {
        [Input("gwName", required: true)]
        public string GwName { get; set; } = null!;

        public GetAviatrixSpokeGatewayArgs()
        {
        }
        public static new GetAviatrixSpokeGatewayArgs Empty => new GetAviatrixSpokeGatewayArgs();
    }

    public sealed class GetAviatrixSpokeGatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("gwName", required: true)]
        public Input<string> GwName { get; set; } = null!;

        public GetAviatrixSpokeGatewayInvokeArgs()
        {
        }
        public static new GetAviatrixSpokeGatewayInvokeArgs Empty => new GetAviatrixSpokeGatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetAviatrixSpokeGatewayResult
    {
        public readonly string AccountName;
        public readonly bool AllocateNewEip;
        public readonly ImmutableArray<string> ApprovedLearnedCidrs;
        public readonly string AvailabilityDomain;
        public readonly string AzureEipNameResourceGroup;
        public readonly bool BgpEcmp;
        public readonly int BgpHoldTime;
        public readonly int BgpPollingTime;
        public readonly string CloudInstanceId;
        public readonly int CloudType;
        public readonly string CustomizedSpokeVpcRoutes;
        public readonly bool DisableRoutePropagation;
        public readonly string Eip;
        public readonly bool EnableActiveStandby;
        public readonly bool EnableActiveStandbyPreemptive;
        public readonly bool EnableAutoAdvertiseS2cCidrs;
        public readonly bool EnableBgp;
        public readonly bool EnableEncryptVolume;
        public readonly bool EnableJumboFrame;
        public readonly bool EnableLearnedCidrsApproval;
        public readonly bool EnableMonitorGatewaySubnets;
        public readonly bool EnablePrivateOob;
        public readonly bool EnablePrivateVpcDefaultRoute;
        public readonly bool EnableSkipPublicRouteTableUpdate;
        public readonly bool EnableSpotInstance;
        public readonly bool EnableVpcDnsServer;
        public readonly string FaultDomain;
        public readonly string FilteredSpokeVpcRoutes;
        public readonly string GwName;
        public readonly string GwSize;
        public readonly string HaAvailabilityDomain;
        public readonly string HaAzureEipNameResourceGroup;
        public readonly string HaCloudInstanceId;
        public readonly string HaEip;
        public readonly string HaFaultDomain;
        public readonly string HaGwName;
        public readonly string HaGwSize;
        public readonly string HaImageVersion;
        public readonly string HaInsaneModeAz;
        public readonly string HaOobAvailabilityZone;
        public readonly string HaOobManagementSubnet;
        public readonly string HaPrivateIp;
        public readonly string HaPublicIp;
        public readonly string HaSecurityGroupId;
        public readonly string HaSoftwareVersion;
        public readonly string HaSubnet;
        public readonly string HaZone;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ImageVersion;
        public readonly string IncludedAdvertisedSpokeRoutes;
        public readonly bool InsaneMode;
        public readonly string InsaneModeAz;
        public readonly string LearnedCidrsApprovalMode;
        public readonly string LocalAsNumber;
        public readonly ImmutableArray<string> MonitorExcludeLists;
        public readonly string OobAvailabilityZone;
        public readonly string OobManagementSubnet;
        public readonly ImmutableArray<string> PrependAsPaths;
        public readonly string PrivateIp;
        public readonly string PublicIp;
        public readonly string SecurityGroupId;
        public readonly bool SingleAzHa;
        public readonly bool SingleIpSnat;
        public readonly string SoftwareVersion;
        public readonly ImmutableArray<string> SpokeBgpManualAdvertiseCidrs;
        public readonly string SpotPrice;
        public readonly string Subnet;
        public readonly ImmutableArray<string> TagLists;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string TransitGw;
        public readonly int TunnelDetectionTime;
        public readonly string VpcId;
        public readonly string VpcReg;
        public readonly string Zone;

        [OutputConstructor]
        private GetAviatrixSpokeGatewayResult(
            string accountName,

            bool allocateNewEip,

            ImmutableArray<string> approvedLearnedCidrs,

            string availabilityDomain,

            string azureEipNameResourceGroup,

            bool bgpEcmp,

            int bgpHoldTime,

            int bgpPollingTime,

            string cloudInstanceId,

            int cloudType,

            string customizedSpokeVpcRoutes,

            bool disableRoutePropagation,

            string eip,

            bool enableActiveStandby,

            bool enableActiveStandbyPreemptive,

            bool enableAutoAdvertiseS2cCidrs,

            bool enableBgp,

            bool enableEncryptVolume,

            bool enableJumboFrame,

            bool enableLearnedCidrsApproval,

            bool enableMonitorGatewaySubnets,

            bool enablePrivateOob,

            bool enablePrivateVpcDefaultRoute,

            bool enableSkipPublicRouteTableUpdate,

            bool enableSpotInstance,

            bool enableVpcDnsServer,

            string faultDomain,

            string filteredSpokeVpcRoutes,

            string gwName,

            string gwSize,

            string haAvailabilityDomain,

            string haAzureEipNameResourceGroup,

            string haCloudInstanceId,

            string haEip,

            string haFaultDomain,

            string haGwName,

            string haGwSize,

            string haImageVersion,

            string haInsaneModeAz,

            string haOobAvailabilityZone,

            string haOobManagementSubnet,

            string haPrivateIp,

            string haPublicIp,

            string haSecurityGroupId,

            string haSoftwareVersion,

            string haSubnet,

            string haZone,

            string id,

            string imageVersion,

            string includedAdvertisedSpokeRoutes,

            bool insaneMode,

            string insaneModeAz,

            string learnedCidrsApprovalMode,

            string localAsNumber,

            ImmutableArray<string> monitorExcludeLists,

            string oobAvailabilityZone,

            string oobManagementSubnet,

            ImmutableArray<string> prependAsPaths,

            string privateIp,

            string publicIp,

            string securityGroupId,

            bool singleAzHa,

            bool singleIpSnat,

            string softwareVersion,

            ImmutableArray<string> spokeBgpManualAdvertiseCidrs,

            string spotPrice,

            string subnet,

            ImmutableArray<string> tagLists,

            ImmutableDictionary<string, string> tags,

            string transitGw,

            int tunnelDetectionTime,

            string vpcId,

            string vpcReg,

            string zone)
        {
            AccountName = accountName;
            AllocateNewEip = allocateNewEip;
            ApprovedLearnedCidrs = approvedLearnedCidrs;
            AvailabilityDomain = availabilityDomain;
            AzureEipNameResourceGroup = azureEipNameResourceGroup;
            BgpEcmp = bgpEcmp;
            BgpHoldTime = bgpHoldTime;
            BgpPollingTime = bgpPollingTime;
            CloudInstanceId = cloudInstanceId;
            CloudType = cloudType;
            CustomizedSpokeVpcRoutes = customizedSpokeVpcRoutes;
            DisableRoutePropagation = disableRoutePropagation;
            Eip = eip;
            EnableActiveStandby = enableActiveStandby;
            EnableActiveStandbyPreemptive = enableActiveStandbyPreemptive;
            EnableAutoAdvertiseS2cCidrs = enableAutoAdvertiseS2cCidrs;
            EnableBgp = enableBgp;
            EnableEncryptVolume = enableEncryptVolume;
            EnableJumboFrame = enableJumboFrame;
            EnableLearnedCidrsApproval = enableLearnedCidrsApproval;
            EnableMonitorGatewaySubnets = enableMonitorGatewaySubnets;
            EnablePrivateOob = enablePrivateOob;
            EnablePrivateVpcDefaultRoute = enablePrivateVpcDefaultRoute;
            EnableSkipPublicRouteTableUpdate = enableSkipPublicRouteTableUpdate;
            EnableSpotInstance = enableSpotInstance;
            EnableVpcDnsServer = enableVpcDnsServer;
            FaultDomain = faultDomain;
            FilteredSpokeVpcRoutes = filteredSpokeVpcRoutes;
            GwName = gwName;
            GwSize = gwSize;
            HaAvailabilityDomain = haAvailabilityDomain;
            HaAzureEipNameResourceGroup = haAzureEipNameResourceGroup;
            HaCloudInstanceId = haCloudInstanceId;
            HaEip = haEip;
            HaFaultDomain = haFaultDomain;
            HaGwName = haGwName;
            HaGwSize = haGwSize;
            HaImageVersion = haImageVersion;
            HaInsaneModeAz = haInsaneModeAz;
            HaOobAvailabilityZone = haOobAvailabilityZone;
            HaOobManagementSubnet = haOobManagementSubnet;
            HaPrivateIp = haPrivateIp;
            HaPublicIp = haPublicIp;
            HaSecurityGroupId = haSecurityGroupId;
            HaSoftwareVersion = haSoftwareVersion;
            HaSubnet = haSubnet;
            HaZone = haZone;
            Id = id;
            ImageVersion = imageVersion;
            IncludedAdvertisedSpokeRoutes = includedAdvertisedSpokeRoutes;
            InsaneMode = insaneMode;
            InsaneModeAz = insaneModeAz;
            LearnedCidrsApprovalMode = learnedCidrsApprovalMode;
            LocalAsNumber = localAsNumber;
            MonitorExcludeLists = monitorExcludeLists;
            OobAvailabilityZone = oobAvailabilityZone;
            OobManagementSubnet = oobManagementSubnet;
            PrependAsPaths = prependAsPaths;
            PrivateIp = privateIp;
            PublicIp = publicIp;
            SecurityGroupId = securityGroupId;
            SingleAzHa = singleAzHa;
            SingleIpSnat = singleIpSnat;
            SoftwareVersion = softwareVersion;
            SpokeBgpManualAdvertiseCidrs = spokeBgpManualAdvertiseCidrs;
            SpotPrice = spotPrice;
            Subnet = subnet;
            TagLists = tagLists;
            Tags = tags;
            TransitGw = transitGw;
            TunnelDetectionTime = tunnelDetectionTime;
            VpcId = vpcId;
            VpcReg = vpcReg;
            Zone = zone;
        }
    }
}
