// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **aviatrix_vpn_profile** resource allows the creation and management of Aviatrix VPN user profiles.
//
// > **NOTE:** As of R2.15, management of user/profile attachment can be set using `manageUserAttachment`. This argument must be set to *true* in either **aviatrix_vpn_user** or **aviatrix_vpn_profile**. If attachment is managed in the **aviatrix_vpn_profile** (set to *true*), it must be set to *false* in the **aviatrix_vpn_user** resource and vice versa.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/astipkovits/pulumi-aviatrix/sdk/go/aviatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aviatrix.NewAviatrixVpnProfile(ctx, "testVpnProfile", &aviatrix.AviatrixVpnProfileArgs{
//				BaseRule: pulumi.String("allow_all"),
//				Policies: AviatrixVpnProfilePolicyArray{
//					&AviatrixVpnProfilePolicyArgs{
//						Action: pulumi.String("deny"),
//						Port:   pulumi.String("443"),
//						Proto:  pulumi.String("tcp"),
//						Target: pulumi.String("10.0.0.0/32"),
//					},
//					&AviatrixVpnProfilePolicyArgs{
//						Action: pulumi.String("deny"),
//						Port:   pulumi.String("443"),
//						Proto:  pulumi.String("tcp"),
//						Target: pulumi.String("10.0.0.1/32"),
//					},
//				},
//				Users: pulumi.StringArray{
//					pulumi.String("user1"),
//					pulumi.String("user2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// **vpn_profile** can be imported using the VPN profile's `name`, e.g.
//
// ```sh
//
//	$ pulumi import aviatrix:index/aviatrixVpnProfile:AviatrixVpnProfile test name
//
// ```
type AviatrixVpnProfile struct {
	pulumi.CustomResourceState

	// Base policy rule of the profile to be added. Enter "allowAll" or "denyAll", based on whether you want a whitelist or blacklist.
	BaseRule pulumi.StringPtrOutput `pulumi:"baseRule"`
	// This parameter is a switch used to determine whether or not to manage VPN user attachments to the VPN profile using this resource. If this is set to false, attachment must be managed using the **aviatrix_vpn_user** resource. Valid values: true, false. Default value: true.
	ManageUserAttachment pulumi.BoolPtrOutput `pulumi:"manageUserAttachment"`
	// Enter any name for the VPN profile.
	Name pulumi.StringOutput `pulumi:"name"`
	// New security policy for the profile. Each policy has the following attributes:
	Policies AviatrixVpnProfilePolicyArrayOutput `pulumi:"policies"`
	// List of VPN users to attach to this profile. This should be set to null if `manageUserAttachment` is set to false.
	Users pulumi.StringArrayOutput `pulumi:"users"`
}

// NewAviatrixVpnProfile registers a new resource with the given unique name, arguments, and options.
func NewAviatrixVpnProfile(ctx *pulumi.Context,
	name string, args *AviatrixVpnProfileArgs, opts ...pulumi.ResourceOption) (*AviatrixVpnProfile, error) {
	if args == nil {
		args = &AviatrixVpnProfileArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource AviatrixVpnProfile
	err := ctx.RegisterResource("aviatrix:index/aviatrixVpnProfile:AviatrixVpnProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAviatrixVpnProfile gets an existing AviatrixVpnProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAviatrixVpnProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AviatrixVpnProfileState, opts ...pulumi.ResourceOption) (*AviatrixVpnProfile, error) {
	var resource AviatrixVpnProfile
	err := ctx.ReadResource("aviatrix:index/aviatrixVpnProfile:AviatrixVpnProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AviatrixVpnProfile resources.
type aviatrixVpnProfileState struct {
	// Base policy rule of the profile to be added. Enter "allowAll" or "denyAll", based on whether you want a whitelist or blacklist.
	BaseRule *string `pulumi:"baseRule"`
	// This parameter is a switch used to determine whether or not to manage VPN user attachments to the VPN profile using this resource. If this is set to false, attachment must be managed using the **aviatrix_vpn_user** resource. Valid values: true, false. Default value: true.
	ManageUserAttachment *bool `pulumi:"manageUserAttachment"`
	// Enter any name for the VPN profile.
	Name *string `pulumi:"name"`
	// New security policy for the profile. Each policy has the following attributes:
	Policies []AviatrixVpnProfilePolicy `pulumi:"policies"`
	// List of VPN users to attach to this profile. This should be set to null if `manageUserAttachment` is set to false.
	Users []string `pulumi:"users"`
}

type AviatrixVpnProfileState struct {
	// Base policy rule of the profile to be added. Enter "allowAll" or "denyAll", based on whether you want a whitelist or blacklist.
	BaseRule pulumi.StringPtrInput
	// This parameter is a switch used to determine whether or not to manage VPN user attachments to the VPN profile using this resource. If this is set to false, attachment must be managed using the **aviatrix_vpn_user** resource. Valid values: true, false. Default value: true.
	ManageUserAttachment pulumi.BoolPtrInput
	// Enter any name for the VPN profile.
	Name pulumi.StringPtrInput
	// New security policy for the profile. Each policy has the following attributes:
	Policies AviatrixVpnProfilePolicyArrayInput
	// List of VPN users to attach to this profile. This should be set to null if `manageUserAttachment` is set to false.
	Users pulumi.StringArrayInput
}

func (AviatrixVpnProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixVpnProfileState)(nil)).Elem()
}

type aviatrixVpnProfileArgs struct {
	// Base policy rule of the profile to be added. Enter "allowAll" or "denyAll", based on whether you want a whitelist or blacklist.
	BaseRule *string `pulumi:"baseRule"`
	// This parameter is a switch used to determine whether or not to manage VPN user attachments to the VPN profile using this resource. If this is set to false, attachment must be managed using the **aviatrix_vpn_user** resource. Valid values: true, false. Default value: true.
	ManageUserAttachment *bool `pulumi:"manageUserAttachment"`
	// Enter any name for the VPN profile.
	Name *string `pulumi:"name"`
	// New security policy for the profile. Each policy has the following attributes:
	Policies []AviatrixVpnProfilePolicy `pulumi:"policies"`
	// List of VPN users to attach to this profile. This should be set to null if `manageUserAttachment` is set to false.
	Users []string `pulumi:"users"`
}

// The set of arguments for constructing a AviatrixVpnProfile resource.
type AviatrixVpnProfileArgs struct {
	// Base policy rule of the profile to be added. Enter "allowAll" or "denyAll", based on whether you want a whitelist or blacklist.
	BaseRule pulumi.StringPtrInput
	// This parameter is a switch used to determine whether or not to manage VPN user attachments to the VPN profile using this resource. If this is set to false, attachment must be managed using the **aviatrix_vpn_user** resource. Valid values: true, false. Default value: true.
	ManageUserAttachment pulumi.BoolPtrInput
	// Enter any name for the VPN profile.
	Name pulumi.StringPtrInput
	// New security policy for the profile. Each policy has the following attributes:
	Policies AviatrixVpnProfilePolicyArrayInput
	// List of VPN users to attach to this profile. This should be set to null if `manageUserAttachment` is set to false.
	Users pulumi.StringArrayInput
}

func (AviatrixVpnProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aviatrixVpnProfileArgs)(nil)).Elem()
}

type AviatrixVpnProfileInput interface {
	pulumi.Input

	ToAviatrixVpnProfileOutput() AviatrixVpnProfileOutput
	ToAviatrixVpnProfileOutputWithContext(ctx context.Context) AviatrixVpnProfileOutput
}

func (*AviatrixVpnProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixVpnProfile)(nil)).Elem()
}

func (i *AviatrixVpnProfile) ToAviatrixVpnProfileOutput() AviatrixVpnProfileOutput {
	return i.ToAviatrixVpnProfileOutputWithContext(context.Background())
}

func (i *AviatrixVpnProfile) ToAviatrixVpnProfileOutputWithContext(ctx context.Context) AviatrixVpnProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixVpnProfileOutput)
}

// AviatrixVpnProfileArrayInput is an input type that accepts AviatrixVpnProfileArray and AviatrixVpnProfileArrayOutput values.
// You can construct a concrete instance of `AviatrixVpnProfileArrayInput` via:
//
//	AviatrixVpnProfileArray{ AviatrixVpnProfileArgs{...} }
type AviatrixVpnProfileArrayInput interface {
	pulumi.Input

	ToAviatrixVpnProfileArrayOutput() AviatrixVpnProfileArrayOutput
	ToAviatrixVpnProfileArrayOutputWithContext(context.Context) AviatrixVpnProfileArrayOutput
}

type AviatrixVpnProfileArray []AviatrixVpnProfileInput

func (AviatrixVpnProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixVpnProfile)(nil)).Elem()
}

func (i AviatrixVpnProfileArray) ToAviatrixVpnProfileArrayOutput() AviatrixVpnProfileArrayOutput {
	return i.ToAviatrixVpnProfileArrayOutputWithContext(context.Background())
}

func (i AviatrixVpnProfileArray) ToAviatrixVpnProfileArrayOutputWithContext(ctx context.Context) AviatrixVpnProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixVpnProfileArrayOutput)
}

// AviatrixVpnProfileMapInput is an input type that accepts AviatrixVpnProfileMap and AviatrixVpnProfileMapOutput values.
// You can construct a concrete instance of `AviatrixVpnProfileMapInput` via:
//
//	AviatrixVpnProfileMap{ "key": AviatrixVpnProfileArgs{...} }
type AviatrixVpnProfileMapInput interface {
	pulumi.Input

	ToAviatrixVpnProfileMapOutput() AviatrixVpnProfileMapOutput
	ToAviatrixVpnProfileMapOutputWithContext(context.Context) AviatrixVpnProfileMapOutput
}

type AviatrixVpnProfileMap map[string]AviatrixVpnProfileInput

func (AviatrixVpnProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixVpnProfile)(nil)).Elem()
}

func (i AviatrixVpnProfileMap) ToAviatrixVpnProfileMapOutput() AviatrixVpnProfileMapOutput {
	return i.ToAviatrixVpnProfileMapOutputWithContext(context.Background())
}

func (i AviatrixVpnProfileMap) ToAviatrixVpnProfileMapOutputWithContext(ctx context.Context) AviatrixVpnProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AviatrixVpnProfileMapOutput)
}

type AviatrixVpnProfileOutput struct{ *pulumi.OutputState }

func (AviatrixVpnProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AviatrixVpnProfile)(nil)).Elem()
}

func (o AviatrixVpnProfileOutput) ToAviatrixVpnProfileOutput() AviatrixVpnProfileOutput {
	return o
}

func (o AviatrixVpnProfileOutput) ToAviatrixVpnProfileOutputWithContext(ctx context.Context) AviatrixVpnProfileOutput {
	return o
}

// Base policy rule of the profile to be added. Enter "allowAll" or "denyAll", based on whether you want a whitelist or blacklist.
func (o AviatrixVpnProfileOutput) BaseRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AviatrixVpnProfile) pulumi.StringPtrOutput { return v.BaseRule }).(pulumi.StringPtrOutput)
}

// This parameter is a switch used to determine whether or not to manage VPN user attachments to the VPN profile using this resource. If this is set to false, attachment must be managed using the **aviatrix_vpn_user** resource. Valid values: true, false. Default value: true.
func (o AviatrixVpnProfileOutput) ManageUserAttachment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AviatrixVpnProfile) pulumi.BoolPtrOutput { return v.ManageUserAttachment }).(pulumi.BoolPtrOutput)
}

// Enter any name for the VPN profile.
func (o AviatrixVpnProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AviatrixVpnProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// New security policy for the profile. Each policy has the following attributes:
func (o AviatrixVpnProfileOutput) Policies() AviatrixVpnProfilePolicyArrayOutput {
	return o.ApplyT(func(v *AviatrixVpnProfile) AviatrixVpnProfilePolicyArrayOutput { return v.Policies }).(AviatrixVpnProfilePolicyArrayOutput)
}

// List of VPN users to attach to this profile. This should be set to null if `manageUserAttachment` is set to false.
func (o AviatrixVpnProfileOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AviatrixVpnProfile) pulumi.StringArrayOutput { return v.Users }).(pulumi.StringArrayOutput)
}

type AviatrixVpnProfileArrayOutput struct{ *pulumi.OutputState }

func (AviatrixVpnProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AviatrixVpnProfile)(nil)).Elem()
}

func (o AviatrixVpnProfileArrayOutput) ToAviatrixVpnProfileArrayOutput() AviatrixVpnProfileArrayOutput {
	return o
}

func (o AviatrixVpnProfileArrayOutput) ToAviatrixVpnProfileArrayOutputWithContext(ctx context.Context) AviatrixVpnProfileArrayOutput {
	return o
}

func (o AviatrixVpnProfileArrayOutput) Index(i pulumi.IntInput) AviatrixVpnProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AviatrixVpnProfile {
		return vs[0].([]*AviatrixVpnProfile)[vs[1].(int)]
	}).(AviatrixVpnProfileOutput)
}

type AviatrixVpnProfileMapOutput struct{ *pulumi.OutputState }

func (AviatrixVpnProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AviatrixVpnProfile)(nil)).Elem()
}

func (o AviatrixVpnProfileMapOutput) ToAviatrixVpnProfileMapOutput() AviatrixVpnProfileMapOutput {
	return o
}

func (o AviatrixVpnProfileMapOutput) ToAviatrixVpnProfileMapOutputWithContext(ctx context.Context) AviatrixVpnProfileMapOutput {
	return o
}

func (o AviatrixVpnProfileMapOutput) MapIndex(k pulumi.StringInput) AviatrixVpnProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AviatrixVpnProfile {
		return vs[0].(map[string]*AviatrixVpnProfile)[vs[1].(string)]
	}).(AviatrixVpnProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixVpnProfileInput)(nil)).Elem(), &AviatrixVpnProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixVpnProfileArrayInput)(nil)).Elem(), AviatrixVpnProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AviatrixVpnProfileMapInput)(nil)).Elem(), AviatrixVpnProfileMap{})
	pulumi.RegisterOutputType(AviatrixVpnProfileOutput{})
	pulumi.RegisterOutputType(AviatrixVpnProfileArrayOutput{})
	pulumi.RegisterOutputType(AviatrixVpnProfileMapOutput{})
}
