# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'AviatrixAppDomainSelector',
    'AviatrixAppDomainSelectorMatchExpression',
    'AviatrixAwsTgwSecurityDomain',
    'AviatrixAwsTgwSecurityDomainAttachedVpc',
    'AviatrixAwsTgwVpnConnVpnTunnelData',
    'AviatrixVpcPrivateSubnet',
    'AviatrixVpcPublicSubnet',
    'AviatrixVpcSubnet',
]

@pulumi.output_type
class AviatrixAppDomainSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixAppDomainSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixAppDomainSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixAppDomainSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.AviatrixAppDomainSelectorMatchExpression']):
        pulumi.set(__self__, "match_expressions", match_expressions)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.AviatrixAppDomainSelectorMatchExpression']:
        return pulumi.get(self, "match_expressions")


@pulumi.output_type
class AviatrixAppDomainSelectorMatchExpression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "accountName":
            suggest = "account_name"
        elif key == "resId":
            suggest = "res_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixAppDomainSelectorMatchExpression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixAppDomainSelectorMatchExpression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixAppDomainSelectorMatchExpression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 account_name: Optional[str] = None,
                 cidr: Optional[str] = None,
                 region: Optional[str] = None,
                 res_id: Optional[str] = None,
                 tags: Optional[Mapping[str, str]] = None,
                 type: Optional[str] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if res_id is not None:
            pulumi.set(__self__, "res_id", res_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def cidr(self) -> Optional[str]:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resId")
    def res_id(self) -> Optional[str]:
        return pulumi.get(self, "res_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class AviatrixAwsTgwSecurityDomain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityDomainName":
            suggest = "security_domain_name"
        elif key == "attachedVpcs":
            suggest = "attached_vpcs"
        elif key == "aviatrixFirewall":
            suggest = "aviatrix_firewall"
        elif key == "connectedDomains":
            suggest = "connected_domains"
        elif key == "nativeEgress":
            suggest = "native_egress"
        elif key == "nativeFirewall":
            suggest = "native_firewall"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixAwsTgwSecurityDomain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixAwsTgwSecurityDomain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixAwsTgwSecurityDomain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_domain_name: str,
                 attached_vpcs: Optional[Sequence['outputs.AviatrixAwsTgwSecurityDomainAttachedVpc']] = None,
                 aviatrix_firewall: Optional[bool] = None,
                 connected_domains: Optional[Sequence[str]] = None,
                 native_egress: Optional[bool] = None,
                 native_firewall: Optional[bool] = None):
        pulumi.set(__self__, "security_domain_name", security_domain_name)
        if attached_vpcs is not None:
            pulumi.set(__self__, "attached_vpcs", attached_vpcs)
        if aviatrix_firewall is not None:
            pulumi.set(__self__, "aviatrix_firewall", aviatrix_firewall)
        if connected_domains is not None:
            pulumi.set(__self__, "connected_domains", connected_domains)
        if native_egress is not None:
            pulumi.set(__self__, "native_egress", native_egress)
        if native_firewall is not None:
            pulumi.set(__self__, "native_firewall", native_firewall)

    @property
    @pulumi.getter(name="securityDomainName")
    def security_domain_name(self) -> str:
        return pulumi.get(self, "security_domain_name")

    @property
    @pulumi.getter(name="attachedVpcs")
    def attached_vpcs(self) -> Optional[Sequence['outputs.AviatrixAwsTgwSecurityDomainAttachedVpc']]:
        return pulumi.get(self, "attached_vpcs")

    @property
    @pulumi.getter(name="aviatrixFirewall")
    def aviatrix_firewall(self) -> Optional[bool]:
        return pulumi.get(self, "aviatrix_firewall")

    @property
    @pulumi.getter(name="connectedDomains")
    def connected_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "connected_domains")

    @property
    @pulumi.getter(name="nativeEgress")
    def native_egress(self) -> Optional[bool]:
        return pulumi.get(self, "native_egress")

    @property
    @pulumi.getter(name="nativeFirewall")
    def native_firewall(self) -> Optional[bool]:
        return pulumi.get(self, "native_firewall")


@pulumi.output_type
class AviatrixAwsTgwSecurityDomainAttachedVpc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpcAccountName":
            suggest = "vpc_account_name"
        elif key == "vpcId":
            suggest = "vpc_id"
        elif key == "vpcRegion":
            suggest = "vpc_region"
        elif key == "customizedRouteAdvertisement":
            suggest = "customized_route_advertisement"
        elif key == "customizedRoutes":
            suggest = "customized_routes"
        elif key == "disableLocalRoutePropagation":
            suggest = "disable_local_route_propagation"
        elif key == "routeTables":
            suggest = "route_tables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixAwsTgwSecurityDomainAttachedVpc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixAwsTgwSecurityDomainAttachedVpc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixAwsTgwSecurityDomainAttachedVpc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vpc_account_name: str,
                 vpc_id: str,
                 vpc_region: str,
                 customized_route_advertisement: Optional[str] = None,
                 customized_routes: Optional[str] = None,
                 disable_local_route_propagation: Optional[bool] = None,
                 route_tables: Optional[str] = None,
                 subnets: Optional[str] = None):
        pulumi.set(__self__, "vpc_account_name", vpc_account_name)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vpc_region", vpc_region)
        if customized_route_advertisement is not None:
            pulumi.set(__self__, "customized_route_advertisement", customized_route_advertisement)
        if customized_routes is not None:
            pulumi.set(__self__, "customized_routes", customized_routes)
        if disable_local_route_propagation is not None:
            pulumi.set(__self__, "disable_local_route_propagation", disable_local_route_propagation)
        if route_tables is not None:
            pulumi.set(__self__, "route_tables", route_tables)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="vpcAccountName")
    def vpc_account_name(self) -> str:
        return pulumi.get(self, "vpc_account_name")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpcRegion")
    def vpc_region(self) -> str:
        return pulumi.get(self, "vpc_region")

    @property
    @pulumi.getter(name="customizedRouteAdvertisement")
    def customized_route_advertisement(self) -> Optional[str]:
        return pulumi.get(self, "customized_route_advertisement")

    @property
    @pulumi.getter(name="customizedRoutes")
    def customized_routes(self) -> Optional[str]:
        return pulumi.get(self, "customized_routes")

    @property
    @pulumi.getter(name="disableLocalRoutePropagation")
    def disable_local_route_propagation(self) -> Optional[bool]:
        return pulumi.get(self, "disable_local_route_propagation")

    @property
    @pulumi.getter(name="routeTables")
    def route_tables(self) -> Optional[str]:
        return pulumi.get(self, "route_tables")

    @property
    @pulumi.getter
    def subnets(self) -> Optional[str]:
        return pulumi.get(self, "subnets")


@pulumi.output_type
class AviatrixAwsTgwVpnConnVpnTunnelData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastStatusChangeTime":
            suggest = "last_status_change_time"
        elif key == "routeCount":
            suggest = "route_count"
        elif key == "statusMessage":
            suggest = "status_message"
        elif key == "tgwAsn":
            suggest = "tgw_asn"
        elif key == "tunnelName":
            suggest = "tunnel_name"
        elif key == "vpnInsideAddress":
            suggest = "vpn_inside_address"
        elif key == "vpnOutsideAddress":
            suggest = "vpn_outside_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixAwsTgwVpnConnVpnTunnelData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixAwsTgwVpnConnVpnTunnelData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixAwsTgwVpnConnVpnTunnelData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_status_change_time: Optional[str] = None,
                 route_count: Optional[int] = None,
                 status: Optional[str] = None,
                 status_message: Optional[str] = None,
                 tgw_asn: Optional[str] = None,
                 tunnel_name: Optional[str] = None,
                 vpn_inside_address: Optional[str] = None,
                 vpn_outside_address: Optional[str] = None):
        if last_status_change_time is not None:
            pulumi.set(__self__, "last_status_change_time", last_status_change_time)
        if route_count is not None:
            pulumi.set(__self__, "route_count", route_count)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_message is not None:
            pulumi.set(__self__, "status_message", status_message)
        if tgw_asn is not None:
            pulumi.set(__self__, "tgw_asn", tgw_asn)
        if tunnel_name is not None:
            pulumi.set(__self__, "tunnel_name", tunnel_name)
        if vpn_inside_address is not None:
            pulumi.set(__self__, "vpn_inside_address", vpn_inside_address)
        if vpn_outside_address is not None:
            pulumi.set(__self__, "vpn_outside_address", vpn_outside_address)

    @property
    @pulumi.getter(name="lastStatusChangeTime")
    def last_status_change_time(self) -> Optional[str]:
        return pulumi.get(self, "last_status_change_time")

    @property
    @pulumi.getter(name="routeCount")
    def route_count(self) -> Optional[int]:
        return pulumi.get(self, "route_count")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[str]:
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="tgwAsn")
    def tgw_asn(self) -> Optional[str]:
        return pulumi.get(self, "tgw_asn")

    @property
    @pulumi.getter(name="tunnelName")
    def tunnel_name(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_name")

    @property
    @pulumi.getter(name="vpnInsideAddress")
    def vpn_inside_address(self) -> Optional[str]:
        return pulumi.get(self, "vpn_inside_address")

    @property
    @pulumi.getter(name="vpnOutsideAddress")
    def vpn_outside_address(self) -> Optional[str]:
        return pulumi.get(self, "vpn_outside_address")


@pulumi.output_type
class AviatrixVpcPrivateSubnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixVpcPrivateSubnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixVpcPrivateSubnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixVpcPrivateSubnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr: Optional[str] = None,
                 name: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[str]:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class AviatrixVpcPublicSubnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixVpcPublicSubnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixVpcPublicSubnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixVpcPublicSubnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr: Optional[str] = None,
                 name: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[str]:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class AviatrixVpcSubnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixVpcSubnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixVpcSubnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixVpcSubnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr: Optional[str] = None,
                 name: Optional[str] = None,
                 region: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[str]:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


