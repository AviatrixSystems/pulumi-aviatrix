// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The **aviatrix_transit_firenet_policy** resource allows the creation and management of Aviatrix Transit FireNet policies that determine which resources should be inspected in the Transit FireNet solution.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aviatrix from "@pulumi/aviatrix";
 *
 * // Create an Aviatrix Transit FireNet Policy
 * const testTransitFirenetPolicy = new aviatrix.AviatrixTransitFirenetPolicy("test_transit_firenet_policy", {
 *     inspectedResourceName: "SPOKE:spokeGw1",
 *     transitFirenetGatewayName: "transitGw1",
 * });
 * ```
 *
 * ## Import
 *
 * **transit_firenet_policy** can be imported using the `transit_firenet_gateway_name` and `inspected_resource_name`, e.g.
 *
 * ```sh
 *  $ pulumi import aviatrix:index/aviatrixTransitFirenetPolicy:AviatrixTransitFirenetPolicy test transit_firenet_gateway_name~inspected_resource_name
 * ```
 */
export class AviatrixTransitFirenetPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AviatrixTransitFirenetPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AviatrixTransitFirenetPolicyState, opts?: pulumi.CustomResourceOptions): AviatrixTransitFirenetPolicy {
        return new AviatrixTransitFirenetPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/aviatrixTransitFirenetPolicy:AviatrixTransitFirenetPolicy';

    /**
     * Returns true if the given object is an instance of AviatrixTransitFirenetPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AviatrixTransitFirenetPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AviatrixTransitFirenetPolicy.__pulumiType;
    }

    /**
     * The name of the resource which will be inspected.
     */
    public readonly inspectedResourceName!: pulumi.Output<string>;
    /**
     * Name of the Transit FireNet-enabled transit gateway. Currently supports AWS and Azure.
     */
    public readonly transitFirenetGatewayName!: pulumi.Output<string>;

    /**
     * Create a AviatrixTransitFirenetPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AviatrixTransitFirenetPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AviatrixTransitFirenetPolicyArgs | AviatrixTransitFirenetPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AviatrixTransitFirenetPolicyState | undefined;
            resourceInputs["inspectedResourceName"] = state ? state.inspectedResourceName : undefined;
            resourceInputs["transitFirenetGatewayName"] = state ? state.transitFirenetGatewayName : undefined;
        } else {
            const args = argsOrState as AviatrixTransitFirenetPolicyArgs | undefined;
            if ((!args || args.inspectedResourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inspectedResourceName'");
            }
            if ((!args || args.transitFirenetGatewayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitFirenetGatewayName'");
            }
            resourceInputs["inspectedResourceName"] = args ? args.inspectedResourceName : undefined;
            resourceInputs["transitFirenetGatewayName"] = args ? args.transitFirenetGatewayName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AviatrixTransitFirenetPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AviatrixTransitFirenetPolicy resources.
 */
export interface AviatrixTransitFirenetPolicyState {
    /**
     * The name of the resource which will be inspected.
     */
    inspectedResourceName?: pulumi.Input<string>;
    /**
     * Name of the Transit FireNet-enabled transit gateway. Currently supports AWS and Azure.
     */
    transitFirenetGatewayName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AviatrixTransitFirenetPolicy resource.
 */
export interface AviatrixTransitFirenetPolicyArgs {
    /**
     * The name of the resource which will be inspected.
     */
    inspectedResourceName: pulumi.Input<string>;
    /**
     * Name of the Transit FireNet-enabled transit gateway. Currently supports AWS and Azure.
     */
    transitFirenetGatewayName: pulumi.Input<string>;
}
